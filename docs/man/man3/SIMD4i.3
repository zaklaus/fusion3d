.TH "SIMD4i" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SIMD4i \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <simdemulator\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSIMD4i\fP ()"
.br
.ti -1c
.RI "\fBSIMD4i\fP (\fBint32_t\fP *data)"
.br
.ti -1c
.RI "\fBSIMD4i\fP (\fBint32_t\fP a)"
.br
.ti -1c
.RI "\fBSIMD4i\fP (\fBint32_t\fP a, \fBint32_t\fP b, \fBint32_t\fP c, \fBint32_t\fP d)"
.br
.ti -1c
.RI "void \fBGet\fP (\fBint32_t\fP *result) const "
.br
.ti -1c
.RI "void \fBSet\fP (const \fBint32_t\fP *data)"
.br
.ti -1c
.RI "void \fBGetBytes\fP (\fBint8_t\fP *result) const "
.br
.ti -1c
.RI "void \fBSetBytes\fP (const \fBint8_t\fP *data)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBPick\fP (const \fBSIMD4i\fP &sourceIfTrue, const \fBSIMD4i\fP &sourceIfFalse)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBConditionalAdd\fP (const \fBSIMD4i\fP &num1, const \fBSIMD4i\fP &num2)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBShuffle\fP (\fBint8_t\fP shuffleByte)"
.br
.ti -1c
.RI "\fBint32_t\fP \fBHorizontalAdd\fP ()"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBMax\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBMin\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBAbs\fP ()"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBAndNot\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator+\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator\-\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator\-=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator*\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator*=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator<<\fP (\fBint32_t\fP amt) const "
.br
.ti -1c
.RI "void \fBoperator<<=\fP (\fBint32_t\fP amt)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator>>\fP (\fBint32_t\fP amt) const "
.br
.ti -1c
.RI "void \fBoperator>>=\fP (\fBint32_t\fP amt)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator&\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator&=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator&&\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator|\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator|=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator||\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator^\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator^=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator~\fP () const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator==\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator!=\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator>\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator<\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator>=\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator<=\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator!\fP () const "
.br
.ti -1c
.RI "\fBSIMD4i\fP ()"
.br
.ti -1c
.RI "\fBSIMD4i\fP (\fBint32_t\fP a)"
.br
.ti -1c
.RI "\fBSIMD4i\fP (\fBint32_t\fP a, \fBint32_t\fP b, \fBint32_t\fP c, \fBint32_t\fP d)"
.br
.ti -1c
.RI "\fBSIMD4i\fP (const __m128i &data)"
.br
.ti -1c
.RI "void \fBGet\fP (\fBint32_t\fP *result) const "
.br
.ti -1c
.RI "void \fBSet\fP (const \fBint32_t\fP *data)"
.br
.ti -1c
.RI "void \fBGetBytes\fP (\fBint8_t\fP *result) const "
.br
.ti -1c
.RI "void \fBSetBytes\fP (const \fBint8_t\fP *data)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBPick\fP (const \fBSIMD4i\fP &sourceIfTrue, const \fBSIMD4i\fP &sourceIfFalse)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBConditionalAdd\fP (const \fBSIMD4i\fP &num1, const \fBSIMD4i\fP &num2)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBShuffle\fP (\fBint8_t\fP shuffleByte)"
.br
.ti -1c
.RI "\fBint32_t\fP \fBHorizontalAdd\fP ()"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBMax\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBMin\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBAbs\fP ()"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBAndNot\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator+\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator+=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator\-\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator\-=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator*\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator*=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator<<\fP (\fBint32_t\fP amt) const "
.br
.ti -1c
.RI "void \fBoperator<<=\fP (\fBint32_t\fP amt)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator>>\fP (\fBint32_t\fP amt) const "
.br
.ti -1c
.RI "void \fBoperator>>=\fP (\fBint32_t\fP amt)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator&\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator&=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator&&\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator|\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator|=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator||\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator^\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "void \fBoperator^=\fP (const \fBSIMD4i\fP &other)"
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator~\fP () const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator==\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator!=\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator>\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator<\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator>=\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator<=\fP (const \fBSIMD4i\fP &other) const "
.br
.ti -1c
.RI "\fBSIMD4i\fP \fBoperator!\fP () const "
.br
.ti -1c
.RI "\fBoperator __m128i\fP () const "
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SIMD4i::SIMD4i ()\fC [inline]\fP"

.SS "SIMD4i::SIMD4i (\fBint32_t\fP * data)\fC [inline]\fP"

.SS "SIMD4i::SIMD4i (\fBint32_t\fP a)\fC [inline]\fP"

.SS "SIMD4i::SIMD4i (\fBint32_t\fP a, \fBint32_t\fP b, \fBint32_t\fP c, \fBint32_t\fP d)\fC [inline]\fP"

.SS "SIMD4i::SIMD4i ()\fC [inline]\fP"

.SS "SIMD4i::SIMD4i (\fBint32_t\fP a)\fC [inline]\fP"

.SS "SIMD4i::SIMD4i (\fBint32_t\fP a, \fBint32_t\fP b, \fBint32_t\fP c, \fBint32_t\fP d)\fC [inline]\fP"

.SS "SIMD4i::SIMD4i (const __m128i & data)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBSIMD4i\fP SIMD4i::Abs ()\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Abs ()\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::AndNot (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::AndNot (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::ConditionalAdd (const \fBSIMD4i\fP & num1, const \fBSIMD4i\fP & num2)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::ConditionalAdd (const \fBSIMD4i\fP & num1, const \fBSIMD4i\fP & num2)\fC [inline]\fP"

.SS "void SIMD4i::Get (\fBint32_t\fP * result) const\fC [inline]\fP"

.SS "void SIMD4i::Get (\fBint32_t\fP * result) const\fC [inline]\fP"

.SS "void SIMD4i::GetBytes (\fBint8_t\fP * result) const\fC [inline]\fP"

.SS "void SIMD4i::GetBytes (\fBint8_t\fP * result) const\fC [inline]\fP"

.SS "\fBint32_t\fP SIMD4i::HorizontalAdd ()\fC [inline]\fP"

.SS "\fBint32_t\fP SIMD4i::HorizontalAdd ()\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Max (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Max (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Min (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Min (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "SIMD4i::operator __m128i () const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator! () const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator! () const\fC [inline]\fP"

.SS "\fBSIMD4i\fP \fBSIMD4i::operator!\fP= (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP \fBSIMD4i::operator!\fP= (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator& (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator& (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator&& (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator&& (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "void SIMD4i::operator&= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "void SIMD4i::operator&= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator* (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator* (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "void SIMD4i::operator*= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "void SIMD4i::operator*= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator+ (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator+ (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "void SIMD4i::operator+= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "void SIMD4i::operator+= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator\- (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator\- (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "void SIMD4i::operator\-= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "void SIMD4i::operator\-= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator< (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator< (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator<< (\fBint32_t\fP amt) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator<< (\fBint32_t\fP amt) const\fC [inline]\fP"

.SS "void SIMD4i::operator<<= (\fBint32_t\fP amt)\fC [inline]\fP"

.SS "void SIMD4i::operator<<= (\fBint32_t\fP amt)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator<= (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator<= (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator== (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator== (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator> (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator> (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator>= (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator>= (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator>> (\fBint32_t\fP amt) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator>> (\fBint32_t\fP amt) const\fC [inline]\fP"

.SS "void SIMD4i::operator>>= (\fBint32_t\fP amt)\fC [inline]\fP"

.SS "void SIMD4i::operator>>= (\fBint32_t\fP amt)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator^ (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator^ (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "void SIMD4i::operator^= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "void SIMD4i::operator^= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator| (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator| (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "void SIMD4i::operator|= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "void SIMD4i::operator|= (const \fBSIMD4i\fP & other)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator|| (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator|| (const \fBSIMD4i\fP & other) const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator~ () const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::operator~ () const\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Pick (const \fBSIMD4i\fP & sourceIfTrue, const \fBSIMD4i\fP & sourceIfFalse)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Pick (const \fBSIMD4i\fP & sourceIfTrue, const \fBSIMD4i\fP & sourceIfFalse)\fC [inline]\fP"

.SS "void SIMD4i::Set (const \fBint32_t\fP * data)\fC [inline]\fP"

.SS "void SIMD4i::Set (const \fBint32_t\fP * data)\fC [inline]\fP"

.SS "void SIMD4i::SetBytes (const \fBint8_t\fP * data)\fC [inline]\fP"

.SS "void SIMD4i::SetBytes (const \fBint8_t\fP * data)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Shuffle (\fBint8_t\fP shuffleByte)\fC [inline]\fP"

.SS "\fBSIMD4i\fP SIMD4i::Shuffle (\fBint8_t\fP shuffleByte)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
