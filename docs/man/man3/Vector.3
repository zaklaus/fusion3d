.TH "Vector< T, D >" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vector< T, D > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <math3d\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVector\fP ()"
.br
.ti -1c
.RI "T \fBDot\fP (const \fBVector\fP< T, D > &r) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBMax\fP (const \fBVector\fP< T, D > &r) const "
.br
.ti -1c
.RI "T \fBMax\fP () const "
.br
.ti -1c
.RI "T \fBLengthSq\fP () const "
.br
.ti -1c
.RI "T \fBLength\fP () const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBNormalized\fP () const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBLerp\fP (const \fBVector\fP< T, D > &r, T lerpFactor) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBReflect\fP (const \fBVector\fP< T, D > &normal) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBoperator+\fP (const \fBVector\fP< T, D > &r) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBoperator\-\fP (const \fBVector\fP< T, D > &r) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBoperator*\fP (const T &r) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > \fBoperator/\fP (const T &r) const "
.br
.ti -1c
.RI "\fBVector\fP< T, D > & \fBoperator+=\fP (const \fBVector\fP< T, D > &r)"
.br
.ti -1c
.RI "\fBVector\fP< T, D > & \fBoperator\-=\fP (const \fBVector\fP< T, D > &r)"
.br
.ti -1c
.RI "\fBVector\fP< T, D > & \fBoperator*=\fP (const T &r)"
.br
.ti -1c
.RI "\fBVector\fP< T, D > & \fBoperator/=\fP (const T &r)"
.br
.ti -1c
.RI "T & \fBoperator[]\fP (unsigned int i)"
.br
.ti -1c
.RI "T \fBoperator[]\fP (unsigned int i) const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVector\fP< T, D > &r) const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBVector\fP< T, D > &r) const "
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T, unsigned int D> \fBVector\fP< T, D >::\fBVector\fP ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename T, unsigned int D> T \fBVector\fP< T, D >::Dot (const \fBVector\fP< T, D > & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> T \fBVector\fP< T, D >::Length () const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> T \fBVector\fP< T, D >::LengthSq () const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T,D> \fBVector\fP< T, D >::Lerp (const \fBVector\fP< T, D > & r, T lerpFactor) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T,D> \fBVector\fP< T, D >::Max (const \fBVector\fP< T, D > & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> T \fBVector\fP< T, D >::Max () const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T,D> \fBVector\fP< T, D >::Normalized () const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> bool \fBVector\fP< T, D >::operator!= (const \fBVector\fP< T, D > & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D> \fBVector\fP< T, D >::operator* (const T & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D>& \fBVector\fP< T, D >::operator*= (const T & r)\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D> \fBVector\fP< T, D >::operator+ (const \fBVector\fP< T, D > & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D>& \fBVector\fP< T, D >::operator+= (const \fBVector\fP< T, D > & r)\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D> \fBVector\fP< T, D >::operator\- (const \fBVector\fP< T, D > & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D>& \fBVector\fP< T, D >::operator\-= (const \fBVector\fP< T, D > & r)\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D> \fBVector\fP< T, D >::operator/ (const T & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T, D>& \fBVector\fP< T, D >::operator/= (const T & r)\fC [inline]\fP"

.SS "template<typename T, unsigned int D> bool \fBVector\fP< T, D >::operator== (const \fBVector\fP< T, D > & r) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> T& \fBVector\fP< T, D >::operator[] (unsigned int i)\fC [inline]\fP"

.SS "template<typename T, unsigned int D> T \fBVector\fP< T, D >::operator[] (unsigned int i) const\fC [inline]\fP"

.SS "template<typename T, unsigned int D> \fBVector\fP<T,D> \fBVector\fP< T, D >::Reflect (const \fBVector\fP< T, D > & normal) const\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
