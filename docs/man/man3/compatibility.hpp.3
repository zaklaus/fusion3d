.TH "F:/Fusion3D_work/src/staticLibs/glm/gtx/compatibility.hpp" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
F:/Fusion3D_work/src/staticLibs/glm/gtx/compatibility.hpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./glm\&.hpp'\fP
.br
\fC#include '\&.\&./gtc/quaternion\&.hpp'\fP
.br
\fC#include 'compatibility\&.inl'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBglm\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef bool \fBglm::bool1\fP"
.br
.RI "\fIboolean type with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec2< bool, highp > \fBglm::bool2\fP"
.br
.RI "\fIboolean type with 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec3< bool, highp > \fBglm::bool3\fP"
.br
.RI "\fIboolean type with 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec4< bool, highp > \fBglm::bool4\fP"
.br
.RI "\fIboolean type with 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef bool \fBglm::bool1x1\fP"
.br
.RI "\fIboolean matrix with 1 x 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x2< bool, highp > \fBglm::bool2x2\fP"
.br
.RI "\fIboolean matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x3< bool, highp > \fBglm::bool2x3\fP"
.br
.RI "\fIboolean matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x4< bool, highp > \fBglm::bool2x4\fP"
.br
.RI "\fIboolean matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x2< bool, highp > \fBglm::bool3x2\fP"
.br
.RI "\fIboolean matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x3< bool, highp > \fBglm::bool3x3\fP"
.br
.RI "\fIboolean matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x4< bool, highp > \fBglm::bool3x4\fP"
.br
.RI "\fIboolean matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x2< bool, highp > \fBglm::bool4x2\fP"
.br
.RI "\fIboolean matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x3< bool, highp > \fBglm::bool4x3\fP"
.br
.RI "\fIboolean matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x4< bool, highp > \fBglm::bool4x4\fP"
.br
.RI "\fIboolean matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef int \fBglm::int1\fP"
.br
.RI "\fIinteger vector with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec2< int, highp > \fBglm::int2\fP"
.br
.RI "\fIinteger vector with 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec3< int, highp > \fBglm::int3\fP"
.br
.RI "\fIinteger vector with 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec4< int, highp > \fBglm::int4\fP"
.br
.RI "\fIinteger vector with 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef int \fBglm::int1x1\fP"
.br
.RI "\fIinteger matrix with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x2< int, highp > \fBglm::int2x2\fP"
.br
.RI "\fIinteger matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x3< int, highp > \fBglm::int2x3\fP"
.br
.RI "\fIinteger matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x4< int, highp > \fBglm::int2x4\fP"
.br
.RI "\fIinteger matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x2< int, highp > \fBglm::int3x2\fP"
.br
.RI "\fIinteger matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x3< int, highp > \fBglm::int3x3\fP"
.br
.RI "\fIinteger matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x4< int, highp > \fBglm::int3x4\fP"
.br
.RI "\fIinteger matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x2< int, highp > \fBglm::int4x2\fP"
.br
.RI "\fIinteger matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x3< int, highp > \fBglm::int4x3\fP"
.br
.RI "\fIinteger matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x4< int, highp > \fBglm::int4x4\fP"
.br
.RI "\fIinteger matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef float \fBglm::float1\fP"
.br
.RI "\fIsingle-precision floating-point vector with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec2< float, highp > \fBglm::float2\fP"
.br
.RI "\fIsingle-precision floating-point vector with 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec3< float, highp > \fBglm::float3\fP"
.br
.RI "\fIsingle-precision floating-point vector with 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec4< float, highp > \fBglm::float4\fP"
.br
.RI "\fIsingle-precision floating-point vector with 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef float \fBglm::float1x1\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x2< float, highp > \fBglm::float2x2\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x3< float, highp > \fBglm::float2x3\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x4< float, highp > \fBglm::float2x4\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x2< float, highp > \fBglm::float3x2\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x3< float, highp > \fBglm::float3x3\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x4< float, highp > \fBglm::float3x4\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x2< float, highp > \fBglm::float4x2\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x3< float, highp > \fBglm::float4x3\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x4< float, highp > \fBglm::float4x4\fP"
.br
.RI "\fIsingle-precision floating-point matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef double \fBglm::double1\fP"
.br
.RI "\fIdouble-precision floating-point vector with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec2< double, highp > \fBglm::double2\fP"
.br
.RI "\fIdouble-precision floating-point vector with 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec3< double, highp > \fBglm::double3\fP"
.br
.RI "\fIdouble-precision floating-point vector with 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tvec4< double, highp > \fBglm::double4\fP"
.br
.RI "\fIdouble-precision floating-point vector with 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef double \fBglm::double1x1\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 1 component\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x2< double, highp > \fBglm::double2x2\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 2 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x3< double, highp > \fBglm::double2x3\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 2 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat2x4< double, highp > \fBglm::double2x4\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 2 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x2< double, highp > \fBglm::double3x2\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 3 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x3< double, highp > \fBglm::double3x3\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 3 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat3x4< double, highp > \fBglm::double3x4\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 3 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x2< double, highp > \fBglm::double4x2\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 4 x 2 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x3< double, highp > \fBglm::double4x3\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 4 x 3 components\&. (From GLM_GTX_compatibility extension) \fP"
.ti -1c
.RI "typedef tmat4x4< double, highp > \fBglm::double4x4\fP"
.br
.RI "\fIdouble-precision floating-point matrix with 4 x 4 components\&. (From GLM_GTX_compatibility extension) \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T \fBglm::lerp\fP (T x, T y, T a)"
.br
.RI "\fIReturns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec2< T, P > \fBglm::lerp\fP (const tvec2< T, P > &x, const tvec2< T, P > &y, T a)"
.br
.RI "\fIReturns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec3< T, P > \fBglm::lerp\fP (const tvec3< T, P > &x, const tvec3< T, P > &y, T a)"
.br
.RI "\fIReturns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec4< T, P > \fBglm::lerp\fP (const tvec4< T, P > &x, const tvec4< T, P > &y, T a)"
.br
.RI "\fIReturns x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using the floating-point value a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec2< T, P > \fBglm::lerp\fP (const tvec2< T, P > &x, const tvec2< T, P > &y, const tvec2< T, P > &a)"
.br
.RI "\fIReturns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec3< T, P > \fBglm::lerp\fP (const tvec3< T, P > &x, const tvec3< T, P > &y, const tvec3< T, P > &a)"
.br
.RI "\fIReturns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec4< T, P > \fBglm::lerp\fP (const tvec4< T, P > &x, const tvec4< T, P > &y, const tvec4< T, P > &a)"
.br
.RI "\fIReturns the component-wise result of x * (1\&.0 - a) + y * a, i\&.e\&., the linear blend of x and y using vector a\&. The value for a is not restricted to the range [0, 1]\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER T \fBglm::saturate\fP (T x)"
.br
.RI "\fIReturns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec2< T, P > \fBglm::saturate\fP (const tvec2< T, P > &x)"
.br
.RI "\fIReturns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec3< T, P > \fBglm::saturate\fP (const tvec3< T, P > &x)"
.br
.RI "\fIReturns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec4< T, P > \fBglm::saturate\fP (const tvec4< T, P > &x)"
.br
.RI "\fIReturns clamp(x, 0, 1) for each component in x\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER T \fBglm::atan2\fP (T x, T y)"
.br
.RI "\fIArc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec2< T, P > \fBglm::atan2\fP (const tvec2< T, P > &x, const tvec2< T, P > &y)"
.br
.RI "\fIArc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec3< T, P > \fBglm::atan2\fP (const tvec3< T, P > &x, const tvec3< T, P > &y)"
.br
.RI "\fIArc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_QUALIFIER tvec4< T, P > \fBglm::atan2\fP (const tvec4< T, P > &x, const tvec4< T, P > &y)"
.br
.RI "\fIArc tangent\&. Returns an angle whose tangent is y/x\&. The signs of x and y are used to determine what quadrant the angle is in\&. The range of values returned by this function is [-PI, PI]\&. Results are undefined if x and y are both 0\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBglm::isfinite\fP (genType const &x)"
.br
.RI "\fITest whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec1< bool, P > \fBglm::isfinite\fP (const tvec1< T, P > &x)"
.br
.RI "\fITest whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec2< bool, P > \fBglm::isfinite\fP (const tvec2< T, P > &x)"
.br
.RI "\fITest whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec3< bool, P > \fBglm::isfinite\fP (const tvec3< T, P > &x)"
.br
.RI "\fITest whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) \fP"
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec4< bool, P > \fBglm::isfinite\fP (const tvec4< T, P > &x)"
.br
.RI "\fITest whether or not a scalar or each vector component is a finite value\&. (From GLM_GTX_compatibility) \fP"
.in -1c
.SH "Detailed Description"
.PP 
OpenGL Mathematics (glm\&.g-truc\&.net)
.PP
Copyright (c) 2005 - 2015 G-Truc Creation (www\&.g-truc\&.net) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\&.
.PP
Restrictions: By making use of the Software for military purposes, you choose to make a Bunny unhappy\&.
.PP
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\&. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\&.
.PP
\fBGLM_GTX_compatibility\fP
.PP
\fBDate:\fP
.RS 4
2007-01-24 / 2011-06-07 
.RE
.PP
\fBAuthor:\fP
.RS 4
Christophe Riccio
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM Core\fP (dependence) 
.PP
gtc_half_float (dependence) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
