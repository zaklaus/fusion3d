.TH "gtx_dual_quaternion" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_dual_quaternion \- GLM_GTX_dual_quaternion
.PP
Defines a templated dual-quaternion type and several dual-quaternion operations\&.  

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBglm::tdualquat< T, P >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef tdualquat< float, lowp > \fBglm::lowp_dualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, mediump > \fBglm::mediump_dualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, highp > \fBglm::highp_dualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, lowp > \fBglm::lowp_fdualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, mediump > \fBglm::mediump_fdualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< float, highp > \fBglm::highp_fdualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< double, lowp > \fBglm::lowp_ddualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< double, mediump > \fBglm::mediump_ddualquat\fP"
.br
.ti -1c
.RI "typedef tdualquat< double, highp > \fBglm::highp_ddualquat\fP"
.br
.ti -1c
.RI "typedef highp_fdualquat \fBglm::dualquat\fP"
.br
.ti -1c
.RI "typedef highp_fdualquat \fBglm::fdualquat\fP"
.br
.ti -1c
.RI "typedef highp_ddualquat \fBglm::ddualquat\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::operator+\fP (tdualquat< T, P > const &q, tdualquat< T, P > const &p)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::operator*\fP (tdualquat< T, P > const &q, tdualquat< T, P > const &p)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::operator*\fP (tdualquat< T, P > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::operator*\fP (T const &s, tdualquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::operator/\fP (tdualquat< T, P > const &q, T const &s)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::normalize\fP (tdualquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::lerp\fP (tdualquat< T, P > const &x, tdualquat< T, P > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::inverse\fP (tdualquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tmat2x4< T, P > \fBglm::mat2x4_cast\fP (tdualquat< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tmat3x4< T, P > \fBglm::mat3x4_cast\fP (tdualquat< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::dualquat_cast\fP (tmat2x4< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tdualquat< T, P > \fBglm::dualquat_cast\fP (tmat3x4< T, P > const &x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines a templated dual-quaternion type and several dual-quaternion operations\&. 

<\fBglm/gtx/dual_quaternion\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef highp_ddualquat \fBglm::ddualquat\fP"
Dual-quaternion of default double-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef highp_fdualquat \fBglm::dualquat\fP"
Dual-quaternion of floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef highp_fdualquat \fBglm::fdualquat\fP"
Dual-quaternion of single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<double, highp> \fBglm::highp_ddualquat\fP"
Dual-quaternion of high double-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<float, highp> \fBglm::highp_dualquat\fP"
Dual-quaternion of high single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<float, highp> \fBglm::highp_fdualquat\fP"
Dual-quaternion of high single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<double, lowp> \fBglm::lowp_ddualquat\fP"
Dual-quaternion of low double-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<float, lowp> \fBglm::lowp_dualquat\fP"
Dual-quaternion of low single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<float, lowp> \fBglm::lowp_fdualquat\fP"
Dual-quaternion of low single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<double, mediump> \fBglm::mediump_ddualquat\fP"
Dual-quaternion of medium double-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<float, mediump> \fBglm::mediump_dualquat\fP"
Dual-quaternion of medium single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "typedef tdualquat<float, mediump> \fBglm::mediump_fdualquat\fP"
Dual-quaternion of medium single-precision floating-point numbers\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::dualquat_cast (tmat2x4< T, P > const & x)"
Converts a 2 * 4 matrix (matrix which holds real and dual parts) to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::dualquat_cast (tmat3x4< T, P > const & x)"
Converts a 3 * 4 matrix (augmented matrix rotation + translation) to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::inverse (\fBtdualquat\fP< T, P > const & q)"
Returns the q inverse\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::lerp (\fBtdualquat\fP< T, P > const & x, \fBtdualquat\fP< T, P > const & y, T const & a)"
Returns the linear interpolation of two dual quaternion\&.
.PP
\fBSee also:\fP
.RS 4
gtc_dual_quaternion 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tmat2x4<T, P> glm::mat2x4_cast (\fBtdualquat\fP< T, P > const & x)"
Converts a quaternion to a 2 * 4 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tmat3x4<T, P> glm::mat3x4_cast (\fBtdualquat\fP< T, P > const & x)"
Converts a quaternion to a 3 * 4 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::normalize (\fBtdualquat\fP< T, P > const & q)"
Returns the normalized quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_dual_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::operator* (\fBtdualquat\fP< T, P > const & q, \fBtdualquat\fP< T, P > const & p)"

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::operator* (\fBtdualquat\fP< T, P > const & q, T const & s)"

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::operator* (T const & s, \fBtdualquat\fP< T, P > const & q)"

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::operator+ (\fBtdualquat\fP< T, P > const & q, \fBtdualquat\fP< T, P > const & p)"

.SS "template<typename T , precision P> GLM_FUNC_DECL tdualquat<T, P> glm::operator/ (\fBtdualquat\fP< T, P > const & q, T const & s)"

.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
