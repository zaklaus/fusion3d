.TH "gtx_euler_angles" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_euler_angles \- GLM_GTX_euler_angles
.PP
Build matrices from Euler angles\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleX\fP (T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleY\fP (T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleZ\fP (T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleXY\fP (T const &angleX, T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleYX\fP (T const &angleY, T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleXZ\fP (T const &angleX, T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleZX\fP (T const &angle, T const &angleX)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleYZ\fP (T const &angleY, T const &angleZ)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleZY\fP (T const &angleZ, T const &angleY)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleXYZ\fP (T const &t1, T const &t2, T const &t3)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::eulerAngleYXZ\fP (T const &yaw, T const &pitch, T const &roll)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat4x4< T, defaultp > \fBglm::yawPitchRoll\fP (T const &yaw, T const &pitch, T const &roll)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat2x2< T, defaultp > \fBglm::orientate2\fP (T const &angle)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL tmat3x3< T, defaultp > \fBglm::orientate3\fP (T const &angle)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tmat3x3< T, P > \fBglm::orientate3\fP (tvec3< T, P > const &angles)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tmat4x4< T, P > \fBglm::orientate4\fP (tvec3< T, P > const &angles)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL void \fBglm::extractEulerAngleXYZ\fP (tmat4x4< T, defaultp > &M, T &t1, T &t2, T &t3)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Build matrices from Euler angles\&. 

<\fBglm/gtx/euler_angles\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleX (T const & angleX)"
Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle X\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleXY (T const & angleX, T const & angleY)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleXYZ (T const & t1, T const & t2, T const & t3)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Y * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleXZ (T const & angleX, T const & angleZ)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (X * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleY (T const & angleY)"
Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Y\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleYX (T const & angleY, T const & angleX)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleYXZ (T const & yaw, T const & pitch, T const & roll)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleYZ (T const & angleY, T const & angleZ)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleZ (T const & angleZ)"
Creates a 3D 4 * 4 homogeneous rotation matrix from an euler angle Z\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleZX (T const & angle, T const & angleX)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * X)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::eulerAngleZY (T const & angleZ, T const & angleY)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Z * Y)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL void glm::extractEulerAngleXYZ (tmat4x4< T, defaultp > & M, T & t1, T & t2, T & t3)"
Extracts the (X * Y * Z) Euler angles from the rotation matrix M 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat2x2<T, defaultp> glm::orientate2 (T const & angle)"
Creates a 2D 2 * 2 rotation matrix from an euler angle\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat3x3<T, defaultp> glm::orientate3 (T const & angle)"
Creates a 2D 4 * 4 homogeneous rotation matrix from an euler angle\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tmat3x3<T, P> glm::orientate3 (tvec3< T, P > const & angles)"
Creates a 3D 3 * 3 rotation matrix from euler angles (Y * X * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tmat4x4<T, P> glm::orientate4 (tvec3< T, P > const & angles)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL tmat4x4<T, defaultp> glm::yawPitchRoll (T const & yaw, T const & pitch, T const & roll)"
Creates a 3D 4 * 4 homogeneous rotation matrix from euler angles (Y * X * Z)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_euler_angles\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
