.TH "gtx_quaternion" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_quaternion \- GLM_GTX_quaternion
.PP
Extented quaternion types and functions\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec3< T, P > \fBglm::cross\fP (tquat< T, P > const &q, tvec3< T, P > const &v)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec3< T, P > \fBglm::cross\fP (tvec3< T, P > const &v, tquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::squad\fP (tquat< T, P > const &q1, tquat< T, P > const &q2, tquat< T, P > const &s1, tquat< T, P > const &s2, T const &h)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::intermediate\fP (tquat< T, P > const &prev, tquat< T, P > const &curr, tquat< T, P > const &next)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::exp\fP (tquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::log\fP (tquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::pow\fP (tquat< T, P > const &x, T const &y)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec3< T, P > \fBglm::rotate\fP (tquat< T, P > const &q, tvec3< T, P > const &v)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tvec4< T, P > \fBglm::rotate\fP (tquat< T, P > const &q, tvec4< T, P > const &v)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL T \fBglm::extractRealComponent\fP (tquat< T, P > const &q)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tmat3x3< T, P > \fBglm::toMat3\fP (tquat< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tmat4x4< T, P > \fBglm::toMat4\fP (tquat< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::toQuat\fP (tmat3x3< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::toQuat\fP (tmat4x4< T, P > const &x)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::shortMix\fP (tquat< T, P > const &x, tquat< T, P > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::fastMix\fP (tquat< T, P > const &x, tquat< T, P > const &y, T const &a)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL tquat< T, P > \fBglm::rotation\fP (tvec3< T, P > const &orig, tvec3< T, P > const &dest)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL T \fBglm::length2\fP (tquat< T, P > const &q)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Extented quaternion types and functions\&. 

<\fBglm/gtx/quaternion\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename T , precision P> GLM_FUNC_DECL tvec3<T, P> glm::cross (\fBtquat\fP< T, P > const & q, tvec3< T, P > const & v)"
Compute a cross product between a quaternion and a vector\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tvec3<T, P> glm::cross (tvec3< T, P > const & v, \fBtquat\fP< T, P > const & q)"
Compute a cross product between a vector and a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::exp (\fBtquat\fP< T, P > const & q)"
Returns a exp of a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL T glm::extractRealComponent (\fBtquat\fP< T, P > const & q)"
Extract the real component of a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::fastMix (\fBtquat\fP< T, P > const & x, \fBtquat\fP< T, P > const & y, T const & a)"
\fBQuaternion\fP normalized linear interpolation\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::intermediate (\fBtquat\fP< T, P > const & prev, \fBtquat\fP< T, P > const & curr, \fBtquat\fP< T, P > const & next)"
Returns an intermediate control point for squad interpolation\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL T glm::length2 (\fBtquat\fP< T, P > const & q)"
Returns the squared length of x\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::log (\fBtquat\fP< T, P > const & q)"
Returns a log of a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::pow (\fBtquat\fP< T, P > const & x, T const & y)"
Returns x raised to the y power\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tvec3<T, P> glm::rotate (\fBtquat\fP< T, P > const & q, tvec3< T, P > const & v)"
Returns quarternion square root\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP Rotates a 3 components vector by a quaternion\&.
.PP
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tvec4<T, P> glm::rotate (\fBtquat\fP< T, P > const & q, tvec4< T, P > const & v)"
Rotates a 4 components vector by a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::rotation (tvec3< T, P > const & orig, tvec3< T, P > const & dest)"
Compute the rotation between two vectors\&. param orig vector, needs to be normalized param dest vector, needs to be normalized
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::shortMix (\fBtquat\fP< T, P > const & x, \fBtquat\fP< T, P > const & y, T const & a)"
\fBQuaternion\fP interpolation using the rotation short path\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::squad (\fBtquat\fP< T, P > const & q1, \fBtquat\fP< T, P > const & q2, \fBtquat\fP< T, P > const & s1, \fBtquat\fP< T, P > const & s2, T const & h)"
Compute a point on a path according squad equation\&. q1 and q2 are control points; s1 and s2 are intermediate control points\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tmat3x3<T, P> glm::toMat3 (\fBtquat\fP< T, P > const & x)"
Converts a quaternion to a 3 * 3 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tmat4x4<T, P> glm::toMat4 (\fBtquat\fP< T, P > const & x)"
Converts a quaternion to a 4 * 4 matrix\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::toQuat (tmat3x3< T, P > const & x)"
Converts a 3 * 3 matrix to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL tquat<T, P> glm::toQuat (tmat4x4< T, P > const & x)"
Converts a 4 * 4 matrix to a quaternion\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_quaternion\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
