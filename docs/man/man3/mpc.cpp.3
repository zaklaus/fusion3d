.TH "F:/Fusion3D_work/src/scripting/mpc.cpp" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
F:/Fusion3D_work/src/scripting/mpc.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'mpc\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBmpc_input_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_fail_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_lift_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_expect_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_anchor_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_single_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_range_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_satisfy_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_string_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_apply_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_apply_to_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_predict_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_not_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_repeat_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_or_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_pdata_and_t\fP"
.br
.ti -1c
.RI "union \fBmpc_pdata_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_parser_t\fP"
.br
.ti -1c
.RI "struct \fBmpc_stack_t\fP"
.br
.ti -1c
.RI "struct \fBmpca_grammar_st_t\fP"
.br
.ti -1c
.RI "struct \fBmpca_stmt_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMPC_CONTINUE\fP(st,  x)   mpc_stack_set_state(stk, st); mpc_stack_pushp(stk, x); continue"
.br
.ti -1c
.RI "#define \fBMPC_SUCCESS\fP(x)   mpc_stack_popp(stk, &p, &st); mpc_stack_pushr(stk, mpc_result_out(x), 1); continue"
.br
.ti -1c
.RI "#define \fBMPC_FAILURE\fP(x)   mpc_stack_popp(stk, &p, &st); mpc_stack_pushr(stk, mpc_result_err(x), 0); continue"
.br
.ti -1c
.RI "#define \fBMPC_PRIMITIVE\fP(x,  f)   if (f) { \fBMPC_SUCCESS\fP(x); } else { \fBMPC_FAILURE\fP(mpc_err_fail(i\->filename, i\->state, 'Incorrect \fBInput\fP')); }"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBMPC_INPUT_STRING\fP = 0, \fBMPC_INPUT_FILE\fP = 1, \fBMPC_INPUT_PIPE\fP = 2 }"
.br
.ti -1c
.RI "enum { \fBMPC_TYPE_UNDEFINED\fP = 0, \fBMPC_TYPE_PASS\fP = 1, \fBMPC_TYPE_FAIL\fP = 2, \fBMPC_TYPE_LIFT\fP = 3, \fBMPC_TYPE_LIFT_VAL\fP = 4, \fBMPC_TYPE_EXPECT\fP = 5, \fBMPC_TYPE_ANCHOR\fP = 6, \fBMPC_TYPE_STATE\fP = 7, \fBMPC_TYPE_ANY\fP = 8, \fBMPC_TYPE_SINGLE\fP = 9, \fBMPC_TYPE_ONEOF\fP = 10, \fBMPC_TYPE_NONEOF\fP = 11, \fBMPC_TYPE_RANGE\fP = 12, \fBMPC_TYPE_SATISFY\fP = 13, \fBMPC_TYPE_STRING\fP = 14, \fBMPC_TYPE_APPLY\fP = 15, \fBMPC_TYPE_APPLY_TO\fP = 16, \fBMPC_TYPE_PREDICT\fP = 17, \fBMPC_TYPE_NOT\fP = 18, \fBMPC_TYPE_MAYBE\fP = 19, \fBMPC_TYPE_MANY\fP = 20, \fBMPC_TYPE_MANY1\fP = 21, \fBMPC_TYPE_COUNT\fP = 22, \fBMPC_TYPE_OR\fP = 23, \fBMPC_TYPE_AND\fP = 24 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBmpc_err_delete\fP (\fBmpc_err_t\fP *x)"
.br
.ti -1c
.RI "void \fBmpc_err_print\fP (\fBmpc_err_t\fP *x)"
.br
.ti -1c
.RI "void \fBmpc_err_print_to\fP (\fBmpc_err_t\fP *x, FILE *f)"
.br
.ti -1c
.RI "void \fBmpc_err_string_cat\fP (char *buffer, int *pos, int *max, char const *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "char * \fBmpc_err_string\fP (\fBmpc_err_t\fP *x)"
.br
.ti -1c
.RI "int \fBmpc_parse_input\fP (\fBmpc_input_t\fP *i, \fBmpc_parser_t\fP *init, \fBmpc_result_t\fP *final)"
.br
.ti -1c
.RI "int \fBmpc_parse\fP (const char *filename, const char *string, \fBmpc_parser_t\fP *p, \fBmpc_result_t\fP *r)"
.br
.ti -1c
.RI "int \fBmpc_parse_file\fP (const char *filename, FILE *file, \fBmpc_parser_t\fP *p, \fBmpc_result_t\fP *r)"
.br
.ti -1c
.RI "int \fBmpc_parse_pipe\fP (const char *filename, FILE *pipe, \fBmpc_parser_t\fP *p, \fBmpc_result_t\fP *r)"
.br
.ti -1c
.RI "int \fBmpc_parse_contents\fP (const char *filename, \fBmpc_parser_t\fP *p, \fBmpc_result_t\fP *r)"
.br
.ti -1c
.RI "void \fBmpc_delete\fP (\fBmpc_parser_t\fP *p)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_new\fP (const char *name)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_undefine\fP (\fBmpc_parser_t\fP *p)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_define\fP (\fBmpc_parser_t\fP *p, \fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "void \fBmpc_cleanup\fP (int n,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_pass\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_fail\fP (const char *m)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_failf\fP (const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_lift_val\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_lift\fP (\fBmpc_ctor_t\fP lf)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_anchor\fP (int(*f)(char, char))"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_state\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_expect\fP (\fBmpc_parser_t\fP *a, const char *expected)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_expectf\fP (\fBmpc_parser_t\fP *a, const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_any\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_char\fP (char c)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_range\fP (char s, char \fBe\fP)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_oneof\fP (const char *s)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_noneof\fP (const char *s)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_satisfy\fP (int(*f)(char))"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_string\fP (const char *s)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_apply\fP (\fBmpc_parser_t\fP *a, \fBmpc_apply_t\fP f)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_apply_to\fP (\fBmpc_parser_t\fP *a, \fBmpc_apply_to_t\fP f, void *x)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_predictive\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_not_lift\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP da, \fBmpc_ctor_t\fP lf)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_not\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP da)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_maybe_lift\fP (\fBmpc_parser_t\fP *a, \fBmpc_ctor_t\fP lf)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_maybe\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_many\fP (\fBmpc_fold_t\fP f, \fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_many1\fP (\fBmpc_fold_t\fP f, \fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_count\fP (int n, \fBmpc_fold_t\fP f, \fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP da)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_or\fP (int n,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_and\fP (int n, \fBmpc_fold_t\fP f,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_soi\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_eoi\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_boundary\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_whitespace\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_whitespaces\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_blank\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_newline\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tab\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_escape\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_digit\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_hexdigit\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_octdigit\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_digits\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_hexdigits\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_octdigits\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_lower\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_upper\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_alpha\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_underscore\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_alphanum\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_int\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_hex\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_oct\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_number\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_real\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_float\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_char_lit\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_string_lit\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_regex_lit\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_ident\fP (void)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_startwith\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_endwith\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP da)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_whole\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP da)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_stripl\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_stripr\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_strip\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tok\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_sym\fP (const char *s)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_total\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP da)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_between\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad, const char *o, const char *c)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_parens\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_braces\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_brackets\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_squares\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tok_between\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad, const char *o, const char *c)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tok_parens\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tok_braces\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tok_brackets\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_tok_squares\fP (\fBmpc_parser_t\fP *a, \fBmpc_dtor_t\fP ad)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpc_re\fP (const char *re)"
.br
.ti -1c
.RI "void \fBmpcf_dtor_null\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_ctor_null\fP (void)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_ctor_str\fP (void)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_free\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_int\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_hex\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_oct\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_float\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_strtriml\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_strtrimr\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_strtrim\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_escape\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_unescape\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_escape_regex\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_unescape_regex\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_escape_string_raw\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_unescape_string_raw\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_escape_char_raw\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_unescape_char_raw\fP (\fBmpc_val_t\fP *x)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_null\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_fst\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_snd\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_trd\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_fst_free\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_snd_free\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_trd_free\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_strfold\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_maths\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "void \fBmpc_print\fP (\fBmpc_parser_t\fP *p)"
.br
.ti -1c
.RI "int \fBmpc_test_fail\fP (\fBmpc_parser_t\fP *p, const char *s, const void *d, int(*tester)(const void *, const void *), \fBmpc_dtor_t\fP destructor, void(*printer)(const void *))"
.br
.ti -1c
.RI "int \fBmpc_test_pass\fP (\fBmpc_parser_t\fP *p, const char *s, const void *d, int(*tester)(const void *, const void *), \fBmpc_dtor_t\fP destructor, void(*printer)(const void *))"
.br
.ti -1c
.RI "void \fBmpc_ast_delete\fP (\fBmpc_ast_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_new\fP (const char *tag, const char *contents)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_build\fP (int n, const char *tag,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_add_root\fP (\fBmpc_ast_t\fP *a)"
.br
.ti -1c
.RI "int \fBmpc_ast_eq\fP (\fBmpc_ast_t\fP *a, \fBmpc_ast_t\fP *b)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_add_child\fP (\fBmpc_ast_t\fP *r, \fBmpc_ast_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_add_tag\fP (\fBmpc_ast_t\fP *a, const char *t)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_tag\fP (\fBmpc_ast_t\fP *a, const char *t)"
.br
.ti -1c
.RI "\fBmpc_ast_t\fP * \fBmpc_ast_state\fP (\fBmpc_ast_t\fP *a, \fBmpc_state_t\fP s)"
.br
.ti -1c
.RI "void \fBmpc_ast_print\fP (\fBmpc_ast_t\fP *a)"
.br
.ti -1c
.RI "void \fBmpc_ast_print_to\fP (\fBmpc_ast_t\fP *a, FILE *fp)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_fold_ast\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_str_ast\fP (\fBmpc_val_t\fP *c)"
.br
.ti -1c
.RI "\fBmpc_val_t\fP * \fBmpcf_state_ast\fP (int n, \fBmpc_val_t\fP **xs)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_state\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_tag\fP (\fBmpc_parser_t\fP *a, const char *t)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_add_tag\fP (\fBmpc_parser_t\fP *a, const char *t)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_root\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_not\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_maybe\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_many\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_many1\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_count\fP (int n, \fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_or\fP (int n,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_and\fP (int n,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_total\fP (\fBmpc_parser_t\fP *a)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_grammar_st\fP (const char *grammar, \fBmpca_grammar_st_t\fP *st)"
.br
.ti -1c
.RI "\fBmpc_parser_t\fP * \fBmpca_grammar\fP (int flags, const char *grammar,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_err_t\fP * \fBmpca_lang_file\fP (int flags, FILE *f,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_err_t\fP * \fBmpca_lang_pipe\fP (int flags, FILE *p,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_err_t\fP * \fBmpca_lang\fP (int flags, const char *language,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBmpc_err_t\fP * \fBmpca_lang_contents\fP (int flags, const char *filename,\&.\&.\&.)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MPC_CONTINUE(st, x)   mpc_stack_set_state(stk, st); mpc_stack_pushp(stk, x); continue"

.SS "#define MPC_FAILURE(x)   mpc_stack_popp(stk, &p, &st); mpc_stack_pushr(stk, mpc_result_err(x), 0); continue"

.SS "#define MPC_PRIMITIVE(x, f)   if (f) { \fBMPC_SUCCESS\fP(x); } else { \fBMPC_FAILURE\fP(mpc_err_fail(i\->filename, i\->state, 'Incorrect \fBInput\fP')); }"

.SS "#define MPC_SUCCESS(x)   mpc_stack_popp(stk, &p, &st); mpc_stack_pushr(stk, mpc_result_out(x), 1); continue"

.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMPC_INPUT_STRING \fP\fP
.TP
\fB\fIMPC_INPUT_FILE \fP\fP
.TP
\fB\fIMPC_INPUT_PIPE \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMPC_TYPE_UNDEFINED \fP\fP
.TP
\fB\fIMPC_TYPE_PASS \fP\fP
.TP
\fB\fIMPC_TYPE_FAIL \fP\fP
.TP
\fB\fIMPC_TYPE_LIFT \fP\fP
.TP
\fB\fIMPC_TYPE_LIFT_VAL \fP\fP
.TP
\fB\fIMPC_TYPE_EXPECT \fP\fP
.TP
\fB\fIMPC_TYPE_ANCHOR \fP\fP
.TP
\fB\fIMPC_TYPE_STATE \fP\fP
.TP
\fB\fIMPC_TYPE_ANY \fP\fP
.TP
\fB\fIMPC_TYPE_SINGLE \fP\fP
.TP
\fB\fIMPC_TYPE_ONEOF \fP\fP
.TP
\fB\fIMPC_TYPE_NONEOF \fP\fP
.TP
\fB\fIMPC_TYPE_RANGE \fP\fP
.TP
\fB\fIMPC_TYPE_SATISFY \fP\fP
.TP
\fB\fIMPC_TYPE_STRING \fP\fP
.TP
\fB\fIMPC_TYPE_APPLY \fP\fP
.TP
\fB\fIMPC_TYPE_APPLY_TO \fP\fP
.TP
\fB\fIMPC_TYPE_PREDICT \fP\fP
.TP
\fB\fIMPC_TYPE_NOT \fP\fP
.TP
\fB\fIMPC_TYPE_MAYBE \fP\fP
.TP
\fB\fIMPC_TYPE_MANY \fP\fP
.TP
\fB\fIMPC_TYPE_MANY1 \fP\fP
.TP
\fB\fIMPC_TYPE_COUNT \fP\fP
.TP
\fB\fIMPC_TYPE_OR \fP\fP
.TP
\fB\fIMPC_TYPE_AND \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fBmpc_parser_t\fP* mpc_alpha (void)"

.SS "\fBmpc_parser_t\fP* mpc_alphanum (void)"

.SS "\fBmpc_parser_t\fP* mpc_anchor (int(*)(char, char) f)"

.SS "\fBmpc_parser_t\fP* mpc_and (int n, \fBmpc_fold_t\fP f,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpc_any (void)"

.SS "\fBmpc_parser_t\fP* mpc_apply (\fBmpc_parser_t\fP * a, \fBmpc_apply_t\fP f)"

.SS "\fBmpc_parser_t\fP* mpc_apply_to (\fBmpc_parser_t\fP * a, \fBmpc_apply_to_t\fP f, void * x)"

.SS "\fBmpc_ast_t\fP* mpc_ast_add_child (\fBmpc_ast_t\fP * r, \fBmpc_ast_t\fP * a)"

.SS "\fBmpc_ast_t\fP* mpc_ast_add_root (\fBmpc_ast_t\fP * a)"

.SS "\fBmpc_ast_t\fP* mpc_ast_add_tag (\fBmpc_ast_t\fP * a, const char * t)"

.SS "\fBmpc_ast_t\fP* mpc_ast_build (int n, const char * tag,  \&.\&.\&.)"

.SS "void mpc_ast_delete (\fBmpc_ast_t\fP * a)"

.SS "int mpc_ast_eq (\fBmpc_ast_t\fP * a, \fBmpc_ast_t\fP * b)"

.SS "\fBmpc_ast_t\fP* mpc_ast_new (const char * tag, const char * contents)"

.SS "void mpc_ast_print (\fBmpc_ast_t\fP * a)"

.SS "void mpc_ast_print_to (\fBmpc_ast_t\fP * a, FILE * fp)"

.SS "\fBmpc_ast_t\fP* mpc_ast_state (\fBmpc_ast_t\fP * a, \fBmpc_state_t\fP s)"

.SS "\fBmpc_ast_t\fP* mpc_ast_tag (\fBmpc_ast_t\fP * a, const char * t)"

.SS "\fBmpc_parser_t\fP* mpc_between (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad, const char * o, const char * c)"

.SS "\fBmpc_parser_t\fP* mpc_blank (void)"

.SS "\fBmpc_parser_t\fP* mpc_boundary (void)"

.SS "\fBmpc_parser_t\fP* mpc_braces (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_brackets (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_char (char c)"

.SS "\fBmpc_parser_t\fP* mpc_char_lit (void)"

.SS "void mpc_cleanup (int n,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpc_count (int n, \fBmpc_fold_t\fP f, \fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP da)"

.SS "\fBmpc_parser_t\fP* mpc_define (\fBmpc_parser_t\fP * p, \fBmpc_parser_t\fP * a)"

.SS "void mpc_delete (\fBmpc_parser_t\fP * p)"

.SS "\fBmpc_parser_t\fP* mpc_digit (void)"

.SS "\fBmpc_parser_t\fP* mpc_digits (void)"

.SS "\fBmpc_parser_t\fP* mpc_endwith (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP da)"

.SS "\fBmpc_parser_t\fP* mpc_eoi (void)"

.SS "void mpc_err_delete (\fBmpc_err_t\fP * x)"

.SS "void mpc_err_print (\fBmpc_err_t\fP * x)"

.SS "void mpc_err_print_to (\fBmpc_err_t\fP * x, FILE * f)"

.SS "char* mpc_err_string (\fBmpc_err_t\fP * x)"

.SS "void mpc_err_string_cat (char * buffer, int * pos, int * max, char const * fmt,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpc_escape (void)"

.SS "\fBmpc_parser_t\fP* mpc_expect (\fBmpc_parser_t\fP * a, const char * expected)"

.SS "\fBmpc_parser_t\fP* mpc_expectf (\fBmpc_parser_t\fP * a, const char * fmt,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpc_fail (const char * m)"

.SS "\fBmpc_parser_t\fP* mpc_failf (const char * fmt,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpc_float (void)"

.SS "\fBmpc_parser_t\fP* mpc_hex (void)"

.SS "\fBmpc_parser_t\fP* mpc_hexdigit (void)"

.SS "\fBmpc_parser_t\fP* mpc_hexdigits (void)"

.SS "\fBmpc_parser_t\fP* mpc_ident (void)"

.SS "\fBmpc_parser_t\fP* mpc_int (void)"

.SS "\fBmpc_parser_t\fP* mpc_lift (\fBmpc_ctor_t\fP lf)"

.SS "\fBmpc_parser_t\fP* mpc_lift_val (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_parser_t\fP* mpc_lower (void)"

.SS "\fBmpc_parser_t\fP* mpc_many (\fBmpc_fold_t\fP f, \fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_many1 (\fBmpc_fold_t\fP f, \fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_maybe (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_maybe_lift (\fBmpc_parser_t\fP * a, \fBmpc_ctor_t\fP lf)"

.SS "\fBmpc_parser_t\fP* mpc_new (const char * name)"

.SS "\fBmpc_parser_t\fP* mpc_newline (void)"

.SS "\fBmpc_parser_t\fP* mpc_noneof (const char * s)"

.SS "\fBmpc_parser_t\fP* mpc_not (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP da)"

.SS "\fBmpc_parser_t\fP* mpc_not_lift (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP da, \fBmpc_ctor_t\fP lf)"

.SS "\fBmpc_parser_t\fP* mpc_number (void)"

.SS "\fBmpc_parser_t\fP* mpc_oct (void)"

.SS "\fBmpc_parser_t\fP* mpc_octdigit (void)"

.SS "\fBmpc_parser_t\fP* mpc_octdigits (void)"

.SS "\fBmpc_parser_t\fP* mpc_oneof (const char * s)"

.SS "\fBmpc_parser_t\fP* mpc_or (int n,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpc_parens (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "int mpc_parse (const char * filename, const char * string, \fBmpc_parser_t\fP * p, \fBmpc_result_t\fP * r)"

.SS "int mpc_parse_contents (const char * filename, \fBmpc_parser_t\fP * p, \fBmpc_result_t\fP * r)"

.SS "int mpc_parse_file (const char * filename, FILE * file, \fBmpc_parser_t\fP * p, \fBmpc_result_t\fP * r)"

.SS "int mpc_parse_input (\fBmpc_input_t\fP * i, \fBmpc_parser_t\fP * init, \fBmpc_result_t\fP * final)"

.SS "int mpc_parse_pipe (const char * filename, FILE * pipe, \fBmpc_parser_t\fP * p, \fBmpc_result_t\fP * r)"

.SS "\fBmpc_parser_t\fP* mpc_pass (void)"

.SS "\fBmpc_parser_t\fP* mpc_predictive (\fBmpc_parser_t\fP * a)"

.SS "void mpc_print (\fBmpc_parser_t\fP * p)"

.SS "\fBmpc_parser_t\fP* mpc_range (char s, char e)"

.SS "\fBmpc_parser_t\fP* mpc_re (const char * re)"

.SS "\fBmpc_parser_t\fP* mpc_real (void)"

.SS "\fBmpc_parser_t\fP* mpc_regex_lit (void)"

.SS "\fBmpc_parser_t\fP* mpc_satisfy (int(*)(char) f)"

.SS "\fBmpc_parser_t\fP* mpc_soi (void)"

.SS "\fBmpc_parser_t\fP* mpc_squares (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_startwith (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_state (void)"

.SS "\fBmpc_parser_t\fP* mpc_string (const char * s)"

.SS "\fBmpc_parser_t\fP* mpc_string_lit (void)"

.SS "\fBmpc_parser_t\fP* mpc_strip (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_stripl (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_stripr (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_sym (const char * s)"

.SS "\fBmpc_parser_t\fP* mpc_tab (void)"

.SS "int mpc_test_fail (\fBmpc_parser_t\fP * p, const char * s, const void * d, int(*)(const void *, const void *) tester, \fBmpc_dtor_t\fP destructor, void(*)(const void *) printer)"

.SS "int mpc_test_pass (\fBmpc_parser_t\fP * p, const char * s, const void * d, int(*)(const void *, const void *) tester, \fBmpc_dtor_t\fP destructor, void(*)(const void *) printer)"

.SS "\fBmpc_parser_t\fP* mpc_tok (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpc_tok_between (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad, const char * o, const char * c)"

.SS "\fBmpc_parser_t\fP* mpc_tok_braces (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_tok_brackets (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_tok_parens (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_tok_squares (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP ad)"

.SS "\fBmpc_parser_t\fP* mpc_total (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP da)"

.SS "\fBmpc_parser_t\fP* mpc_undefine (\fBmpc_parser_t\fP * p)"

.SS "\fBmpc_parser_t\fP* mpc_underscore (void)"

.SS "\fBmpc_parser_t\fP* mpc_upper (void)"

.SS "\fBmpc_parser_t\fP* mpc_whitespace (void)"

.SS "\fBmpc_parser_t\fP* mpc_whitespaces (void)"

.SS "\fBmpc_parser_t\fP* mpc_whole (\fBmpc_parser_t\fP * a, \fBmpc_dtor_t\fP da)"

.SS "\fBmpc_parser_t\fP* mpca_add_tag (\fBmpc_parser_t\fP * a, const char * t)"

.SS "\fBmpc_parser_t\fP* mpca_and (int n,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpca_count (int n, \fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_grammar (int flags, const char * grammar,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpca_grammar_st (const char * grammar, \fBmpca_grammar_st_t\fP * st)"

.SS "\fBmpc_err_t\fP* mpca_lang (int flags, const char * language,  \&.\&.\&.)"

.SS "\fBmpc_err_t\fP* mpca_lang_contents (int flags, const char * filename,  \&.\&.\&.)"

.SS "\fBmpc_err_t\fP* mpca_lang_file (int flags, FILE * f,  \&.\&.\&.)"

.SS "\fBmpc_err_t\fP* mpca_lang_pipe (int flags, FILE * p,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpca_many (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_many1 (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_maybe (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_not (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_or (int n,  \&.\&.\&.)"

.SS "\fBmpc_parser_t\fP* mpca_root (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_state (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_parser_t\fP* mpca_tag (\fBmpc_parser_t\fP * a, const char * t)"

.SS "\fBmpc_parser_t\fP* mpca_total (\fBmpc_parser_t\fP * a)"

.SS "\fBmpc_val_t\fP* mpcf_ctor_null (void)"

.SS "\fBmpc_val_t\fP* mpcf_ctor_str (void)"

.SS "void mpcf_dtor_null (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_escape (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_escape_char_raw (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_escape_regex (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_escape_string_raw (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_float (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_fold_ast (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_free (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_fst (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_fst_free (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_hex (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_int (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_maths (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_null (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_oct (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_snd (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_snd_free (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_state_ast (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_str_ast (\fBmpc_val_t\fP * c)"

.SS "\fBmpc_val_t\fP* mpcf_strfold (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_strtrim (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_strtriml (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_strtrimr (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_trd (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_trd_free (int n, \fBmpc_val_t\fP ** xs)"

.SS "\fBmpc_val_t\fP* mpcf_unescape (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_unescape_char_raw (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_unescape_regex (\fBmpc_val_t\fP * x)"

.SS "\fBmpc_val_t\fP* mpcf_unescape_string_raw (\fBmpc_val_t\fP * x)"

.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
