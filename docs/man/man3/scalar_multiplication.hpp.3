.TH "F:/Fusion3D_work/src/staticLibs/glm/gtx/scalar_multiplication.hpp" 3 "Tue Nov 24 2015" "Version 0.0.0.1" "Fusion3D" \" -*- nroff -*-
.ad l
.nh
.SH NAME
F:/Fusion3D_work/src/staticLibs/glm/gtx/scalar_multiplication.hpp \- Enables scalar multiplication for all types\&.  

.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./detail/setup\&.hpp'\fP
.br
\fC#include '\&.\&./vec2\&.hpp'\fP
.br
\fC#include '\&.\&./vec3\&.hpp'\fP
.br
\fC#include '\&.\&./vec4\&.hpp'\fP
.br
\fC#include '\&.\&./mat2x2\&.hpp'\fP
.br
\fC#include <type_traits>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBglm\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGLM_IMPLEMENT_SCAL_MULT\fP(Vec)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename T , typename Vec > using \fBglm::return_type_scalar_multiplication\fP = typename std::enable_if< !std::is_same< T, float >::value &&std::is_arithmetic< T >::value, Vec >::type"
.br
.in -1c
.SH "Detailed Description"
.PP 
Enables scalar multiplication for all types\&. 

OpenGL Mathematics (glm\&.g-truc\&.net)
.PP
Copyright (c) 2005 - 2015 G-Truc Creation (www\&.g-truc\&.net) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\&.
.PP
Restrictions: By making use of the Software for military purposes, you choose to make a Bunny unhappy\&.
.PP
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\&. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\&.
.PP
\fBGTX Extensions (Experimental)\fP
.PP
\fBDate:\fP
.RS 4
2014-09-22 / 2014-09-22 
.RE
.PP
\fBAuthor:\fP
.RS 4
Joshua Moerman
.RE
.PP
Since GLSL is very strict about types, the following (often used) combinations do not work: double * vec4 int * vec4 vec4 / int So we'll fix that! Of course 'float * vec4' should remain the same (hence the enable_if magic) 
.SH "Macro Definition Documentation"
.PP 
.SS "#define GLM_IMPLEMENT_SCAL_MULT(Vec)"
\fBValue:\fP
.PP
.nf
template <typename T> \
    return_type_scalar_multiplication<T, Vec> \
    operator*(T const & s, Vec rh){ \
        return rh *= static_cast<float>(s); \
    } \
     \
    template <typename T> \
    return_type_scalar_multiplication<T, Vec> \
    operator*(Vec lh, T const & s){ \
        return lh *= static_cast<float>(s); \
    } \
     \
    template <typename T> \
    return_type_scalar_multiplication<T, Vec> \
    operator/(Vec lh, T const & s){ \
        return lh *= 1\&.0f / s; \
    }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Fusion3D from the source code\&.
