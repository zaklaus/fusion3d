; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\rendering\camera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
	ORG $+3
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294853822 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294853823 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294853820 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
$SG4294853821 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294853818 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
$SG4294853819 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
PUBLIC	?Conjugate@Quaternion@@QBE?AV1@XZ		; Quaternion::Conjugate
PUBLIC	?GetViewProjection@Camera@@QBE?AV?$Matrix4@M@@XZ ; Camera::GetViewProjection
PUBLIC	?SetParent@CameraComponent@@UAEXPAVEntity@@@Z	; CameraComponent::SetParent
PUBLIC	?AddToEngine@CameraComponent@@UAEXPAVCoreEngine@@@Z ; CameraComponent::AddToEngine
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\camera.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_engine$ = 8						; size = 4
?AddToEngine@CameraComponent@@UAEXPAVCoreEngine@@@Z PROC ; CameraComponent::AddToEngine
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	//TODO: This is probably not the correct solution in the case of multiple cameras,
; 39   : 	//and should be investigated in the future.
; 40   : 	engine->GetRenderingEngine()->SetMainCamera(m_camera);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 08	 add	 eax, 8
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _engine$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetRenderingEngine@CoreEngine@@QAEPAVRenderingEngine@@XZ ; CoreEngine::GetRenderingEngine
  0001d	8b c8		 mov	 ecx, eax
  0001f	e8 00 00 00 00	 call	 ?SetMainCamera@RenderingEngine@@QAEXABVCamera@@@Z ; RenderingEngine::SetMainCamera

; 41   : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?AddToEngine@CameraComponent@@UAEXPAVCoreEngine@@@Z ENDP ; CameraComponent::AddToEngine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\camera.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parent$ = 8						; size = 4
?SetParent@CameraComponent@@UAEXPAVEntity@@@Z PROC	; CameraComponent::SetParent
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 	EntityComponent::SetParent(parent);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _parent$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?SetParent@EntityComponent@@UAEXPAVEntity@@@Z ; EntityComponent::SetParent

; 46   : 	
; 47   : 	//The camera's transform is initialized here because this is the first point where
; 48   : 	//there is a parent object with a transform.
; 49   : 	m_camera.SetTransform(GetTransform());

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 08	 add	 ecx, 8
  00029	e8 00 00 00 00	 call	 ?SetTransform@Camera@@QAEXPAVTransform@@@Z ; Camera::SetTransform

; 50   : }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?SetParent@CameraComponent@@UAEXPAVEntity@@@Z ENDP	; CameraComponent::SetParent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\camera.cpp
_TEXT	SEGMENT
$T1 = -400						; size = 64
$T2 = -336						; size = 64
$T3 = -272						; size = 64
$T4 = -208						; size = 12
$T5 = -196						; size = 12
_cameraTranslation$ = -180				; size = 64
$T6 = -112						; size = 16
$T7 = -96						; size = 16
_cameraRotation$ = -76					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetViewProjection@Camera@@QBE?AV?$Matrix4@M@@XZ PROC	; Camera::GetViewProjection
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 70 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-400]
  00011	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	//This comes from the conjugate rotation because the world should appear to rotate
; 25   : 	//opposite to the camera's rotation.
; 26   : 	Matrix4f cameraRotation = GetTransform().GetTransformedRot().Conjugate().ToRotationMatrix();

  0002b	8d 45 b4	 lea	 eax, DWORD PTR _cameraRotation$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 90	 lea	 ecx, DWORD PTR $T6[ebp]
  00032	51		 push	 ecx
  00033	8d 55 a0	 lea	 edx, DWORD PTR $T7[ebp]
  00036	52		 push	 edx
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QBEABVTransform@@XZ ; Camera::GetTransform
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?GetTransformedRot@Transform@@QBE?AVQuaternion@@XZ ; Transform::GetTransformedRot
  00046	8b c8		 mov	 ecx, eax
  00048	e8 00 00 00 00	 call	 ?Conjugate@Quaternion@@QBE?AV1@XZ ; Quaternion::Conjugate
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?ToRotationMatrix@Quaternion@@QBE?AV?$Matrix4@M@@XZ ; Quaternion::ToRotationMatrix

; 27   : 	Matrix4f cameraTranslation;

  00054	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _cameraTranslation$[ebp]
  0005a	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>

; 28   : 	
; 29   : 	//Similarly, the translation is inverted because the world appears to move opposite
; 30   : 	//to the camera's movement.
; 31   : 	cameraTranslation.InitTranslation(GetTransform().GetTransformedPos() * -1);

  0005f	51		 push	 ecx
  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00073	50		 push	 eax
  00074	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0007a	51		 push	 ecx
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QBEABVTransform@@XZ ; Camera::GetTransform
  00083	8b c8		 mov	 ecx, eax
  00085	e8 00 00 00 00	 call	 ?GetTransformedPos@Transform@@QBE?AVVector3f@@XZ ; Transform::GetTransformedPos
  0008a	8b c8		 mov	 ecx, eax
  0008c	e8 00 00 00 00	 call	 ??DVector3f@@QBE?AV0@M@Z ; Vector3f::operator*
  00091	50		 push	 eax
  00092	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00098	52		 push	 edx
  00099	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _cameraTranslation$[ebp]
  0009f	e8 00 00 00 00	 call	 ?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitTranslation

; 32   : 	
; 33   : 	return m_projection * cameraRotation * cameraTranslation;

  000a4	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _cameraTranslation$[ebp]
  000aa	50		 push	 eax
  000ab	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000b1	51		 push	 ecx
  000b2	8d 55 b4	 lea	 edx, DWORD PTR _cameraRotation$[ebp]
  000b5	52		 push	 edx
  000b6	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  000c5	8b c8		 mov	 ecx, eax
  000c7	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  000cc	50		 push	 eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d0	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  000d5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 34   : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@GetViewPro
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	81 c4 90 01 00
	00		 add	 esp, 400		; 00000190H
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 04 00	 ret	 4
  00107	90		 npad	 1
$LN6@GetViewPro:
  00108	02 00 00 00	 DD	 2
  0010c	00 00 00 00	 DD	 $LN5@GetViewPro
$LN5@GetViewPro:
  00110	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00114	40 00 00 00	 DD	 64			; 00000040H
  00118	00 00 00 00	 DD	 $LN3@GetViewPro
  0011c	4c ff ff ff	 DD	 -180			; ffffff4cH
  00120	40 00 00 00	 DD	 64			; 00000040H
  00124	00 00 00 00	 DD	 $LN4@GetViewPro
$LN4@GetViewPro:
  00128	63		 DB	 99			; 00000063H
  00129	61		 DB	 97			; 00000061H
  0012a	6d		 DB	 109			; 0000006dH
  0012b	65		 DB	 101			; 00000065H
  0012c	72		 DB	 114			; 00000072H
  0012d	61		 DB	 97			; 00000061H
  0012e	54		 DB	 84			; 00000054H
  0012f	72		 DB	 114			; 00000072H
  00130	61		 DB	 97			; 00000061H
  00131	6e		 DB	 110			; 0000006eH
  00132	73		 DB	 115			; 00000073H
  00133	6c		 DB	 108			; 0000006cH
  00134	61		 DB	 97			; 00000061H
  00135	74		 DB	 116			; 00000074H
  00136	69		 DB	 105			; 00000069H
  00137	6f		 DB	 111			; 0000006fH
  00138	6e		 DB	 110			; 0000006eH
  00139	00		 DB	 0
$LN3@GetViewPro:
  0013a	63		 DB	 99			; 00000063H
  0013b	61		 DB	 97			; 00000061H
  0013c	6d		 DB	 109			; 0000006dH
  0013d	65		 DB	 101			; 00000065H
  0013e	72		 DB	 114			; 00000072H
  0013f	61		 DB	 97			; 00000061H
  00140	52		 DB	 82			; 00000052H
  00141	6f		 DB	 111			; 0000006fH
  00142	74		 DB	 116			; 00000074H
  00143	61		 DB	 97			; 00000061H
  00144	74		 DB	 116			; 00000074H
  00145	69		 DB	 105			; 00000069H
  00146	6f		 DB	 111			; 0000006fH
  00147	6e		 DB	 110			; 0000006eH
  00148	00		 DB	 0
?GetViewProjection@Camera@@QBE?AV?$Matrix4@M@@XZ ENDP	; Camera::GetViewProjection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?Conjugate@Quaternion@@QBE?AV1@XZ
_TEXT	SEGMENT
tv143 = -16						; size = 4
tv139 = -12						; size = 4
tv135 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Conjugate@Quaternion@@QBE?AV1@XZ PROC			; Quaternion::Conjugate, COMDAT
; _this$ = ecx

; 1007 : 	inline Quaternion Conjugate() const { return Quaternion(-GetX(), -GetY(), -GetZ(), GetW()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00022	51		 push	 ecx
  00023	d9 1c 24	 fstp	 DWORD PTR [esp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0002e	d9 5d f8	 fstp	 DWORD PTR tv135[ebp]
  00031	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv135[ebp]
  00036	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0003d	51		 push	 ecx
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  0004b	d9 5d f4	 fstp	 DWORD PTR tv139[ebp]
  0004e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv139[ebp]
  00053	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0005a	51		 push	 ecx
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00068	d9 5d f0	 fstp	 DWORD PTR tv143[ebp]
  0006b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv143[ebp]
  00070	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00077	51		 push	 ecx
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00080	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@MMMM@Z ; Quaternion::Quaternion
  00085	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?Conjugate@Quaternion@@QBE?AV1@XZ ENDP			; Quaternion::Conjugate
_TEXT	ENDS
END
