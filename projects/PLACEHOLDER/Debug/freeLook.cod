; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\components\freelook.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+2
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
$SG4294826641 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294826640 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294826643 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294826642 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294826639 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294826638 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
PUBLIC	??0?$Vector2@M@@QAE@ABV?$Vector@M$01@@@Z	; Vector2<float>::Vector2<float>
PUBLIC	??G?$Vector@M$01@@QBE?AV0@ABV0@@Z		; Vector<float,2>::operator-
PUBLIC	?ProcessInput@FreeLook@@UAEXABVInput@@M@Z	; FreeLook::ProcessInput
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\components\freelook.cpp
_TEXT	SEGMENT
tv232 = -92						; size = 4
tv218 = -88						; size = 4
tv93 = -84						; size = 4
tv211 = -80						; size = 4
tv88 = -76						; size = 4
tv204 = -72						; size = 4
$T1 = -68						; size = 12
$T2 = -56						; size = 12
_rotX$3 = -42						; size = 1
_rotY$4 = -41						; size = 1
$T5 = -40						; size = 8
$T6 = -32						; size = 8
_deltaPos$7 = -20					; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 4
_delta$ = 12						; size = 4
?ProcessInput@FreeLook@@UAEXABVInput@@M@Z PROC		; FreeLook::ProcessInput
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 	if(m_mouseLocked)

  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0002c	85 c9		 test	 ecx, ecx
  0002e	0f 84 94 01 00
	00		 je	 $LN5@ProcessInp

; 23   : 	{
; 24   : 		Vector2f deltaPos = input.GetMousePosition() - m_windowCenter;

  00034	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00037	83 c2 10	 add	 edx, 16			; 00000010H
  0003a	52		 push	 edx
  0003b	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  0003e	50		 push	 eax
  0003f	8d 4d e0	 lea	 ecx, DWORD PTR $T6[ebp]
  00042	51		 push	 ecx
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  00046	e8 00 00 00 00	 call	 ?GetMousePosition@Input@@QBE?AV?$Vector2@M@@XZ ; Input::GetMousePosition
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ??G?$Vector@M$01@@QBE?AV0@ABV0@@Z ; Vector<float,2>::operator-
  00052	50		 push	 eax
  00053	8d 4d ec	 lea	 ecx, DWORD PTR _deltaPos$7[ebp]
  00056	e8 00 00 00 00	 call	 ??0?$Vector2@M@@QAE@ABV?$Vector@M$01@@@Z ; Vector2<float>::Vector2<float>

; 25   : 		
; 26   : 		bool rotY = deltaPos.GetX() != 0;

  0005b	8d 4d ec	 lea	 ecx, DWORD PTR _deltaPos$7[ebp]
  0005e	e8 00 00 00 00	 call	 ?GetX@?$Vector2@M@@QBEMXZ ; Vector2<float>::GetX
  00063	d9 5d b8	 fstp	 DWORD PTR tv204[ebp]
  00066	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv204[ebp]
  0006b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00072	9f		 lahf
  00073	f6 c4 44	 test	 ah, 68			; 00000044H
  00076	7b 09		 jnp	 SHORT $LN8@ProcessInp
  00078	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  0007f	eb 07		 jmp	 SHORT $LN9@ProcessInp
$LN8@ProcessInp:
  00081	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN9@ProcessInp:
  00088	8a 55 b4	 mov	 dl, BYTE PTR tv88[ebp]
  0008b	88 55 d7	 mov	 BYTE PTR _rotY$4[ebp], dl

; 27   : 		bool rotX = deltaPos.GetY() != 0;

  0008e	8d 4d ec	 lea	 ecx, DWORD PTR _deltaPos$7[ebp]
  00091	e8 00 00 00 00	 call	 ?GetY@?$Vector2@M@@QBEMXZ ; Vector2<float>::GetY
  00096	d9 5d b0	 fstp	 DWORD PTR tv211[ebp]
  00099	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR tv211[ebp]
  0009e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000a5	9f		 lahf
  000a6	f6 c4 44	 test	 ah, 68			; 00000044H
  000a9	7b 09		 jnp	 SHORT $LN10@ProcessInp
  000ab	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv93[ebp], 1
  000b2	eb 07		 jmp	 SHORT $LN11@ProcessInp
$LN10@ProcessInp:
  000b4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN11@ProcessInp:
  000bb	8a 45 ac	 mov	 al, BYTE PTR tv93[ebp]
  000be	88 45 d6	 mov	 BYTE PTR _rotX$3[ebp], al

; 28   : 			
; 29   : 		if(rotY)

  000c1	0f b6 4d d7	 movzx	 ecx, BYTE PTR _rotY$4[ebp]
  000c5	85 c9		 test	 ecx, ecx
  000c7	74 78		 je	 SHORT $LN3@ProcessInp

; 30   : 		{
; 31   : 			GetTransform()->Rotate(Vector3f(0,1,0), ToRadians(deltaPos.GetX() * m_sensitivity));

  000c9	8d 4d ec	 lea	 ecx, DWORD PTR _deltaPos$7[ebp]
  000cc	e8 00 00 00 00	 call	 ?GetX@?$Vector2@M@@QBEMXZ ; Vector2<float>::GetX
  000d1	d9 5d a8	 fstp	 DWORD PTR tv218[ebp]
  000d4	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv218[ebp]
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  000e1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000e5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  000ed	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4066800000000000
  000f5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f9	51		 push	 ecx
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	51		 push	 ecx
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0012c	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00131	50		 push	 eax
  00132	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  0013a	8b c8		 mov	 ecx, eax
  0013c	e8 00 00 00 00	 call	 ?Rotate@Transform@@QAEXABVVector3f@@M@Z ; Transform::Rotate
$LN3@ProcessInp:

; 32   : 		}
; 33   : 		if(rotX)

  00141	0f b6 45 d6	 movzx	 eax, BYTE PTR _rotX$3[ebp]
  00145	85 c0		 test	 eax, eax
  00147	74 60		 je	 SHORT $LN4@ProcessInp

; 34   : 		{
; 35   : 			GetTransform()->Rotate(GetTransform()->GetRot()->GetRight(), ToRadians(deltaPos.GetY() * m_sensitivity));

  00149	8d 4d ec	 lea	 ecx, DWORD PTR _deltaPos$7[ebp]
  0014c	e8 00 00 00 00	 call	 ?GetY@?$Vector2@M@@QBEMXZ ; Vector2<float>::GetY
  00151	d9 5d a4	 fstp	 DWORD PTR tv232[ebp]
  00154	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv232[ebp]
  00159	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00161	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00165	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  0016d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4066800000000000
  00175	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00179	51		 push	 ecx
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	8d 55 bc	 lea	 edx, DWORD PTR $T1[ebp]
  00182	52		 push	 edx
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  0018b	8b c8		 mov	 ecx, eax
  0018d	e8 00 00 00 00	 call	 ?GetRot@Transform@@QAEPAVQuaternion@@XZ ; Transform::GetRot
  00192	8b c8		 mov	 ecx, eax
  00194	e8 00 00 00 00	 call	 ?GetRight@Quaternion@@QBE?AVVector3f@@XZ ; Quaternion::GetRight
  00199	50		 push	 eax
  0019a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  001a2	8b c8		 mov	 ecx, eax
  001a4	e8 00 00 00 00	 call	 ?Rotate@Transform@@QAEXABVVector3f@@M@Z ; Transform::Rotate
$LN4@ProcessInp:

; 36   : 		}
; 37   : 			
; 38   : 		if(rotY || rotX)

  001a9	0f b6 45 d7	 movzx	 eax, BYTE PTR _rotY$4[ebp]
  001ad	85 c0		 test	 eax, eax
  001af	75 08		 jne	 SHORT $LN6@ProcessInp
  001b1	0f b6 4d d6	 movzx	 ecx, BYTE PTR _rotX$3[ebp]
  001b5	85 c9		 test	 ecx, ecx
  001b7	74 0f		 je	 SHORT $LN5@ProcessInp
$LN6@ProcessInp:

; 39   : 		{
; 40   : 			input.SetMousePosition(m_windowCenter);

  001b9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001bc	83 c2 10	 add	 edx, 16			; 00000010H
  001bf	52		 push	 edx
  001c0	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  001c3	e8 00 00 00 00	 call	 ?SetMousePosition@Input@@QBEXABV?$Vector2@M@@@Z ; Input::SetMousePosition
$LN5@ProcessInp:

; 41   : 		}
; 42   : 	}
; 43   : }

  001c8	52		 push	 edx
  001c9	8b cd		 mov	 ecx, ebp
  001cb	50		 push	 eax
  001cc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@ProcessInp
  001d2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d7	58		 pop	 eax
  001d8	5a		 pop	 edx
  001d9	5f		 pop	 edi
  001da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001dd	33 cd		 xor	 ecx, ebp
  001df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e4	83 c4 5c	 add	 esp, 92			; 0000005cH
  001e7	3b ec		 cmp	 ebp, esp
  001e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ee	8b e5		 mov	 esp, ebp
  001f0	5d		 pop	 ebp
  001f1	c2 08 00	 ret	 8
$LN14@ProcessInp:
  001f4	01 00 00 00	 DD	 1
  001f8	00 00 00 00	 DD	 $LN13@ProcessInp
$LN13@ProcessInp:
  001fc	ec ff ff ff	 DD	 -20			; ffffffecH
  00200	08 00 00 00	 DD	 8
  00204	00 00 00 00	 DD	 $LN12@ProcessInp
$LN12@ProcessInp:
  00208	64		 DB	 100			; 00000064H
  00209	65		 DB	 101			; 00000065H
  0020a	6c		 DB	 108			; 0000006cH
  0020b	74		 DB	 116			; 00000074H
  0020c	61		 DB	 97			; 00000061H
  0020d	50		 DB	 80			; 00000050H
  0020e	6f		 DB	 111			; 0000006fH
  0020f	73		 DB	 115			; 00000073H
  00210	00		 DB	 0
?ProcessInput@FreeLook@@UAEXABVInput@@M@Z ENDP		; FreeLook::ProcessInput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??G?$Vector@M$01@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
tv95 = -36						; size = 4
tv82 = -32						; size = 4
_i$1 = -28						; size = 4
_result$ = -20						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
??G?$Vector@M$01@@QBE?AV0@ABV0@@Z PROC			; Vector<float,2>::operator-, COMDAT
; _this$ = ecx

; 107  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 		Vector<T, D> result;

  00033	8d 4d ec	 lea	 ecx, DWORD PTR _result$[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$Vector@M$01@@QAE@XZ ; Vector<float,2>::Vector<float,2>

; 109  : 		for(unsigned int i = 0; i < D; i++)

  0003b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00042	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00044	8b 45 e4	 mov	 eax, DWORD PTR _i$1[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 e4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@operator:
  0004d	83 7d e4 02	 cmp	 DWORD PTR _i$1[ebp], 2
  00051	73 3b		 jae	 SHORT $LN3@operator

; 110  : 			result[i] = values[i] - r[i];

  00053	8b 4d e4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00056	51		 push	 ecx
  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0005a	e8 00 00 00 00	 call	 ??A?$Vector@M$01@@QBEMI@Z ; Vector<float,2>::operator[]
  0005f	d9 5d e0	 fstp	 DWORD PTR tv82[ebp]
  00062	8b 55 e4	 mov	 edx, DWORD PTR _i$1[ebp]
  00065	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00068	f3 0f 10 04 90	 movss	 xmm0, DWORD PTR [eax+edx*4]
  0006d	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR tv82[ebp]
  00072	8b 4d e4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00075	51		 push	 ecx
  00076	8d 4d ec	 lea	 ecx, DWORD PTR _result$[ebp]
  00079	f3 0f 11 45 dc	 movss	 DWORD PTR tv95[ebp], xmm0
  0007e	e8 00 00 00 00	 call	 ??A?$Vector@M$01@@QAEAAMI@Z ; Vector<float,2>::operator[]
  00083	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv95[ebp]
  00088	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0008c	eb b6		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 111  : 		
; 112  : 		return result;

  0008e	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00091	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00094	89 02		 mov	 DWORD PTR [edx], eax
  00096	8b 4d f0	 mov	 ecx, DWORD PTR _result$[ebp+4]
  00099	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0009c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 113  : 	}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@operator
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	33 cd		 xor	 ecx, ebp
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	83 c4 24	 add	 esp, 36			; 00000024H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
  000ca	66 90		 npad	 2
$LN8@operator:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN7@operator
$LN7@operator:
  000d4	ec ff ff ff	 DD	 -20			; ffffffecH
  000d8	08 00 00 00	 DD	 8
  000dc	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  000e0	72		 DB	 114			; 00000072H
  000e1	65		 DB	 101			; 00000065H
  000e2	73		 DB	 115			; 00000073H
  000e3	75		 DB	 117			; 00000075H
  000e4	6c		 DB	 108			; 0000006cH
  000e5	74		 DB	 116			; 00000074H
  000e6	00		 DB	 0
??G?$Vector@M$01@@QBE?AV0@ABV0@@Z ENDP			; Vector<float,2>::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??0?$Vector2@M@@QAE@ABV?$Vector@M$01@@@Z
_TEXT	SEGMENT
tv131 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
??0?$Vector2@M@@QAE@ABV?$Vector@M$01@@@Z PROC		; Vector2<float>::Vector2<float>, COMDAT
; _this$ = ecx

; 188  : 	Vector2(const Vector<T, 2>& r)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  : 	{

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??0?$Vector@M$01@@QAE@XZ ; Vector<float,2>::Vector<float,2>

; 190  : 		(*this)[0] = r[0];

  00026	6a 00		 push	 0
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0002b	e8 00 00 00 00	 call	 ??A?$Vector@M$01@@QBEMI@Z ; Vector<float,2>::operator[]
  00030	6a 00		 push	 0
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	d9 5d f8	 fstp	 DWORD PTR tv129[ebp]
  00038	e8 00 00 00 00	 call	 ??A?$Vector@M$01@@QAEAAMI@Z ; Vector<float,2>::operator[]
  0003d	d9 45 f8	 fld	 DWORD PTR tv129[ebp]
  00040	d9 18		 fstp	 DWORD PTR [eax]

; 191  : 		(*this)[1] = r[1];

  00042	6a 01		 push	 1
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00047	e8 00 00 00 00	 call	 ??A?$Vector@M$01@@QBEMI@Z ; Vector<float,2>::operator[]
  0004c	6a 01		 push	 1
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	d9 5d f4	 fstp	 DWORD PTR tv131[ebp]
  00054	e8 00 00 00 00	 call	 ??A?$Vector@M$01@@QAEAAMI@Z ; Vector<float,2>::operator[]
  00059	d9 45 f4	 fld	 DWORD PTR tv131[ebp]
  0005c	d9 18		 fstp	 DWORD PTR [eax]

; 192  : 	}

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
??0?$Vector2@M@@QAE@ABV?$Vector@M$01@@@Z ENDP		; Vector2<float>::Vector2<float>
_TEXT	ENDS
END
