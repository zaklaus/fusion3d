; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\components\freemove.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+3
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
	ORG $+1
$SG4294859630 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294859628 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294859629 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294859626 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294859627 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294859625 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
PUBLIC	?Move@FreeMove@@AAEXABVVector3f@@M@Z		; FreeMove::Move
PUBLIC	?GetLeft@Quaternion@@QBE?AVVector3f@@XZ		; Quaternion::GetLeft
PUBLIC	?GetRight@Quaternion@@QBE?AVVector3f@@XZ	; Quaternion::GetRight
PUBLIC	?GetBack@Quaternion@@QBE?AVVector3f@@XZ		; Quaternion::GetBack
PUBLIC	?ProcessInput@FreeMove@@UAEXABVInput@@M@Z	; FreeMove::ProcessInput
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\components\freemove.cpp
_TEXT	SEGMENT
$T1 = -60						; size = 12
$T2 = -48						; size = 12
$T3 = -36						; size = 12
$T4 = -24						; size = 12
_movAmt$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 4
_delta$ = 12						; size = 4
?ProcessInput@FreeMove@@UAEXABVInput@@M@Z PROC		; FreeMove::ProcessInput
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	float movAmt = m_speed * delta;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0002d	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _delta$[ebp]
  00032	f3 0f 11 45 f4	 movss	 DWORD PTR _movAmt$[ebp], xmm0

; 22   : 
; 23   : 	if(input.GetKey(m_forwardKey))

  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0003d	52		 push	 edx
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  00041	e8 00 00 00 00	 call	 ?GetKey@Input@@QBE_NH@Z	; Input::GetKey
  00046	0f b6 c0	 movzx	 eax, al
  00049	85 c0		 test	 eax, eax
  0004b	74 2e		 je	 SHORT $LN2@ProcessInp

; 24   : 		Move(GetTransform()->GetRot()->GetForward(), movAmt);

  0004d	51		 push	 ecx
  0004e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _movAmt$[ebp]
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  0005b	51		 push	 ecx
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ?GetRot@Transform@@QAEPAVQuaternion@@XZ ; Transform::GetRot
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 ?GetForward@Quaternion@@QBE?AVVector3f@@XZ ; Quaternion::GetForward
  00072	50		 push	 eax
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?Move@FreeMove@@AAEXABVVector3f@@M@Z ; FreeMove::Move
$LN2@ProcessInp:

; 25   : 	if(input.GetKey(m_backKey))

  0007b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  00085	e8 00 00 00 00	 call	 ?GetKey@Input@@QBE_NH@Z	; Input::GetKey
  0008a	0f b6 c8	 movzx	 ecx, al
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 2e		 je	 SHORT $LN3@ProcessInp

; 26   : 		Move(GetTransform()->GetRot()->GetBack(), movAmt);

  00091	51		 push	 ecx
  00092	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _movAmt$[ebp]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	8d 55 dc	 lea	 edx, DWORD PTR $T3[ebp]
  0009f	52		 push	 edx
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  000a8	8b c8		 mov	 ecx, eax
  000aa	e8 00 00 00 00	 call	 ?GetRot@Transform@@QAEPAVQuaternion@@XZ ; Transform::GetRot
  000af	8b c8		 mov	 ecx, eax
  000b1	e8 00 00 00 00	 call	 ?GetBack@Quaternion@@QBE?AVVector3f@@XZ ; Quaternion::GetBack
  000b6	50		 push	 eax
  000b7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?Move@FreeMove@@AAEXABVVector3f@@M@Z ; FreeMove::Move
$LN3@ProcessInp:

; 27   : 	if(input.GetKey(m_leftKey))

  000bf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c5	51		 push	 ecx
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  000c9	e8 00 00 00 00	 call	 ?GetKey@Input@@QBE_NH@Z	; Input::GetKey
  000ce	0f b6 d0	 movzx	 edx, al
  000d1	85 d2		 test	 edx, edx
  000d3	74 2e		 je	 SHORT $LN4@ProcessInp

; 28   : 		Move(GetTransform()->GetRot()->GetLeft(), movAmt);

  000d5	51		 push	 ecx
  000d6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _movAmt$[ebp]
  000db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e0	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  000ec	8b c8		 mov	 ecx, eax
  000ee	e8 00 00 00 00	 call	 ?GetRot@Transform@@QAEPAVQuaternion@@XZ ; Transform::GetRot
  000f3	8b c8		 mov	 ecx, eax
  000f5	e8 00 00 00 00	 call	 ?GetLeft@Quaternion@@QBE?AVVector3f@@XZ ; Quaternion::GetLeft
  000fa	50		 push	 eax
  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	e8 00 00 00 00	 call	 ?Move@FreeMove@@AAEXABVVector3f@@M@Z ; FreeMove::Move
$LN4@ProcessInp:

; 29   : 	if(input.GetKey(m_rightKey))

  00103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00109	52		 push	 edx
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  0010d	e8 00 00 00 00	 call	 ?GetKey@Input@@QBE_NH@Z	; Input::GetKey
  00112	0f b6 c0	 movzx	 eax, al
  00115	85 c0		 test	 eax, eax
  00117	74 2e		 je	 SHORT $LN5@ProcessInp

; 30   : 		Move(GetTransform()->GetRot()->GetRight(), movAmt);

  00119	51		 push	 ecx
  0011a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _movAmt$[ebp]
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	8d 4d c4	 lea	 ecx, DWORD PTR $T1[ebp]
  00127	51		 push	 ecx
  00128	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  00130	8b c8		 mov	 ecx, eax
  00132	e8 00 00 00 00	 call	 ?GetRot@Transform@@QAEPAVQuaternion@@XZ ; Transform::GetRot
  00137	8b c8		 mov	 ecx, eax
  00139	e8 00 00 00 00	 call	 ?GetRight@Quaternion@@QBE?AVVector3f@@XZ ; Quaternion::GetRight
  0013e	50		 push	 eax
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	e8 00 00 00 00	 call	 ?Move@FreeMove@@AAEXABVVector3f@@M@Z ; FreeMove::Move
$LN5@ProcessInp:

; 31   : }

  00147	5f		 pop	 edi
  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	33 cd		 xor	 ecx, ebp
  0014d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00152	83 c4 3c	 add	 esp, 60			; 0000003cH
  00155	3b ec		 cmp	 ebp, esp
  00157	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 08 00	 ret	 8
?ProcessInput@FreeMove@@UAEXABVInput@@M@Z ENDP		; FreeMove::ProcessInput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?GetBack@Quaternion@@QBE?AVVector3f@@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetBack@Quaternion@@QBE?AVVector3f@@XZ PROC		; Quaternion::GetBack, COMDAT
; _this$ = ecx

; 983  : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00024	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 984  : 		return Vector3f(0,0,-1).Rotate(*this); 

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	51		 push	 ecx
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	51		 push	 ecx
  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00061	8b c8		 mov	 ecx, eax
  00063	e8 00 00 00 00	 call	 ?Rotate@Vector3f@@QBE?AV1@ABVQuaternion@@@Z ; Vector3f::Rotate
  00068	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 985  : 	}

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?GetBack@Quaternion@@QBE?AVVector3f@@XZ ENDP		; Quaternion::GetBack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?GetRight@Quaternion@@QBE?AVVector3f@@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRight@Quaternion@@QBE?AVVector3f@@XZ PROC		; Quaternion::GetRight, COMDAT
; _this$ = ecx

; 998  : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00024	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 999  : 		return Vector3f(1,0,0).Rotate(*this); 

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	51		 push	 ecx
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	51		 push	 ecx
  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00061	8b c8		 mov	 ecx, eax
  00063	e8 00 00 00 00	 call	 ?Rotate@Vector3f@@QBE?AV1@ABVQuaternion@@@Z ; Vector3f::Rotate
  00068	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1000 : 	}

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?GetRight@Quaternion@@QBE?AVVector3f@@XZ ENDP		; Quaternion::GetRight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?GetLeft@Quaternion@@QBE?AVVector3f@@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetLeft@Quaternion@@QBE?AVVector3f@@XZ PROC		; Quaternion::GetLeft, COMDAT
; _this$ = ecx

; 1003 : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00024	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1004 : 		return Vector3f(-1,0,0).Rotate(*this);  

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	51		 push	 ecx
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	51		 push	 ecx
  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00061	8b c8		 mov	 ecx, eax
  00063	e8 00 00 00 00	 call	 ?Rotate@Vector3f@@QBE?AV1@ABVQuaternion@@@Z ; Vector3f::Rotate
  00068	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1005 : 	}

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?GetLeft@Quaternion@@QBE?AVVector3f@@XZ ENDP		; Quaternion::GetLeft
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\components\freemove.cpp
_TEXT	SEGMENT
$T1 = -32						; size = 12
$T2 = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_direction$ = 8						; size = 4
_amt$ = 12						; size = 4
?Move@FreeMove@@AAEXABVVector3f@@M@Z PROC		; FreeMove::Move
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	GetTransform()->SetPos(*GetTransform()->GetPos() + (direction * amt));

  00030	51		 push	 ecx
  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _amt$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _direction$[ebp]
  00042	e8 00 00 00 00	 call	 ??DVector3f@@QBE?AV0@M@Z ; Vector3f::operator*
  00047	50		 push	 eax
  00048	8d 4d e0	 lea	 ecx, DWORD PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ?GetPos@Transform@@QAEPAVVector3f@@XZ ; Transform::GetPos
  0005b	8b c8		 mov	 ecx, eax
  0005d	e8 00 00 00 00	 call	 ??HVector3f@@QBE?AV0@ABV0@@Z ; Vector3f::operator+
  00062	50		 push	 eax
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?GetTransform@EntityComponent@@QAEPAVTransform@@XZ ; EntityComponent::GetTransform
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 ?SetPos@Transform@@QAEXABVVector3f@@@Z ; Transform::SetPos

; 36   : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	83 c4 20	 add	 esp, 32			; 00000020H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?Move@FreeMove@@AAEXABVVector3f@@M@Z ENDP		; FreeMove::Move
_TEXT	ENDS
END
