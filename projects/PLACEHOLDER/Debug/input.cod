; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\core\input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__SDL_WarpMouseInWindow:PROC
EXTRN	__imp__SDL_ShowCursor:PROC
	ORG $+3
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
$SG4294878088 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294878089 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294878086 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294878087 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294878084 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
$SG4294878085 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
PUBLIC	?SetMousePosition@Input@@QBEXABV?$Vector2@M@@@Z	; Input::SetMousePosition
PUBLIC	?GetCursor@Input@@QBE_NXZ			; Input::GetCursor
PUBLIC	?SetCursor@Input@@QBEX_N@Z			; Input::SetCursor
PUBLIC	??0Input@@QAE@PAVWindow@@@Z			; Input::Input
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_window$ = 8						; size = 4
??0Input@@QAE@PAVWindow@@@Z PROC			; Input::Input
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	m_mouseX(0),

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 80 00 09 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+2304], 0

; 26   : 	m_mouseY(0),

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	c7 81 04 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2308], 0

; 28   : 	m_window(window)

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 45 08	 mov	 eax, DWORD PTR _window$[ebp]
  0002f	89 82 08 09 00
	00		 mov	 DWORD PTR [edx+2312], eax

; 27   : 	m_lastKey(-1),

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 81 0c 09 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+2316], -1

; 30   : 	memset(m_inputs, 0, NUM_KEYS * sizeof(bool));

  00042	8b f4		 mov	 esi, esp
  00044	68 00 02 00 00	 push	 512			; 00000200H
  00049	6a 00		 push	 0
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 	memset(m_downKeys, 0, NUM_KEYS * sizeof(bool));

  0005f	8b f4		 mov	 esi, esp
  00061	68 00 02 00 00	 push	 512			; 00000200H
  00066	6a 00		 push	 0
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	05 00 02 00 00	 add	 eax, 512		; 00000200H
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 	memset(m_upKeys, 0, NUM_KEYS * sizeof(bool));

  00081	8b f4		 mov	 esi, esp
  00083	68 00 02 00 00	 push	 512			; 00000200H
  00088	6a 00		 push	 0
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00093	51		 push	 ecx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 33   : 	
; 34   : 	memset(m_mouseInput, 0, NUM_MOUSEBUTTONS * sizeof(bool));

  000a4	8b f4		 mov	 esi, esp
  000a6	68 00 01 00 00	 push	 256			; 00000100H
  000ab	6a 00		 push	 0
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b0	81 c2 00 06 00
	00		 add	 edx, 1536		; 00000600H
  000b6	52		 push	 edx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	3b f4		 cmp	 esi, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 	memset(m_downMouse, 0, NUM_MOUSEBUTTONS * sizeof(bool));

  000c7	8b f4		 mov	 esi, esp
  000c9	68 00 01 00 00	 push	 256			; 00000100H
  000ce	6a 00		 push	 0
  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	05 00 07 00 00	 add	 eax, 1792		; 00000700H
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e2	3b f4		 cmp	 esi, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 36   : 	memset(m_upMouse, 0, NUM_MOUSEBUTTONS * sizeof(bool));

  000e9	8b f4		 mov	 esi, esp
  000eb	68 00 01 00 00	 push	 256			; 00000100H
  000f0	6a 00		 push	 0
  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	81 c1 00 08 00
	00		 add	 ecx, 2048		; 00000800H
  000fb	51		 push	 ecx
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : }

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	5e		 pop	 esi
  00110	83 c4 04	 add	 esp, 4
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
??0Input@@QAE@PAVWindow@@@Z ENDP			; Input::Input
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visible$ = 8						; size = 1
?SetCursor@Input@@QBEX_N@Z PROC				; Input::SetCursor
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	if(visible)

  0000f	0f b6 45 08	 movzx	 eax, BYTE PTR _visible$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	74 16		 je	 SHORT $LN2@SetCursor

; 42   : 		SDL_ShowCursor(1);

  00017	8b f4		 mov	 esi, esp
  00019	6a 01		 push	 1
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_ShowCursor
  00021	83 c4 04	 add	 esp, 4
  00024	3b f4		 cmp	 esi, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 43   : 	else

  0002b	eb 14		 jmp	 SHORT $LN1@SetCursor
$LN2@SetCursor:

; 44   : 		SDL_ShowCursor(0);

  0002d	8b f4		 mov	 esi, esp
  0002f	6a 00		 push	 0
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_ShowCursor
  00037	83 c4 04	 add	 esp, 4
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@SetCursor:

; 45   : }

  00041	5e		 pop	 esi
  00042	83 c4 04	 add	 esp, 4
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?SetCursor@Input@@QBEX_N@Z ENDP				; Input::SetCursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.cpp
_TEXT	SEGMENT
tv67 = -5						; size = 1
_this$ = -4						; size = 4
?GetCursor@Input@@QBE_NXZ PROC				; Input::GetCursor
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	return SDL_ShowCursor(SDL_QUERY);

  00018	8b f4		 mov	 esi, esp
  0001a	6a ff		 push	 -1
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_ShowCursor
  00022	83 c4 04	 add	 esp, 4
  00025	3b f4		 cmp	 esi, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	85 c0		 test	 eax, eax
  0002e	74 06		 je	 SHORT $LN3@GetCursor
  00030	c6 45 fb 01	 mov	 BYTE PTR tv67[ebp], 1
  00034	eb 04		 jmp	 SHORT $LN4@GetCursor
$LN3@GetCursor:
  00036	c6 45 fb 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@GetCursor:
  0003a	8a 45 fb	 mov	 al, BYTE PTR tv67[ebp]

; 50   : }

  0003d	5e		 pop	 esi
  0003e	83 c4 08	 add	 esp, 8
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?GetCursor@Input@@QBE_NXZ ENDP				; Input::GetCursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?SetMousePosition@Input@@QBEXABV?$Vector2@M@@@Z PROC	; Input::SetMousePosition
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	SDL_WarpMouseInWindow(m_window->GetSDLWindow(), (int)pos.GetX(), (int)pos.GetY());

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  00012	e8 00 00 00 00	 call	 ?GetY@?$Vector2@M@@QBEMXZ ; Vector2<float>::GetY
  00017	e8 00 00 00 00	 call	 __ftol2_sse
  0001c	8b f4		 mov	 esi, esp
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  00022	e8 00 00 00 00	 call	 ?GetX@?$Vector2@M@@QBEMXZ ; Vector2<float>::GetX
  00027	e8 00 00 00 00	 call	 __ftol2_sse
  0002c	50		 push	 eax
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 88 08 09 00
	00		 mov	 ecx, DWORD PTR [eax+2312]
  00036	e8 00 00 00 00	 call	 ?GetSDLWindow@Window@@QAEPAUSDL_Window@@XZ ; Window::GetSDLWindow
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_WarpMouseInWindow
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 55   : //	SDLSetMousePosition((int)pos.GetX(), (int)pos.GetY());
; 56   : }

  0004c	5e		 pop	 esi
  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?SetMousePosition@Input@@QBEXABV?$Vector2@M@@@Z ENDP	; Input::SetMousePosition
_TEXT	ENDS
END
