; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CK@OGBHDMKG@?5is?5not?5supported?5by?5the?5renderi@ ; `string'
PUBLIC	??_C@_1KK@EAEHFHOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAB?$AAa?$AAs?$AAe?$AAL?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl@ ; `string'
PUBLIC	??_C@_1BMA@MMALOBMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1BMC@NEDCJCDP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_R4RenderingEngine@@6B@			; RenderingEngine::`RTTI Complete Object Locator'
PUBLIC	??_R4GLDebugDrawer@@6B@				; GLDebugDrawer::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@GLDebugDrawer@@8			; GLDebugDrawer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@RenderingEngine@@8		; RenderingEngine::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3RenderingEngine@@8				; RenderingEngine::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7GLDebugDrawer@@6B@				; GLDebugDrawer::`vftable'
PUBLIC	??_R2GLDebugDrawer@@8				; GLDebugDrawer::`RTTI Base Class Array'
PUBLIC	??_R3MappedValues@@8				; MappedValues::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3btIDebugDraw@@8				; btIDebugDraw::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RenderingEngine@@8				; RenderingEngine::`RTTI Base Class Array'
PUBLIC	?rmask@@3IA					; rmask
PUBLIC	??_7btIDebugDraw@@6B@				; btIDebugDraw::`vftable'
PUBLIC	?amask@@3IA					; amask
PUBLIC	??_R1A@?0A@EA@MappedValues@@8			; MappedValues::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7RenderingEngine@@6B@			; RenderingEngine::`vftable'
PUBLIC	??_R0?AVRenderingEngine@@@8			; RenderingEngine `RTTI Type Descriptor'
PUBLIC	??_R0?AVbtIDebugDraw@@@8			; btIDebugDraw `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@btIDebugDraw@@8			; btIDebugDraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@MappedValues@@8			; MappedValues::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?bmask@@3IA					; bmask
PUBLIC	??_R0?AVMappedValues@@@8			; MappedValues `RTTI Type Descriptor'
PUBLIC	??_R4btIDebugDraw@@6B@				; btIDebugDraw::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGLDebugDrawer@@@8			; GLDebugDrawer `RTTI Type Descriptor'
PUBLIC	??_R2MappedValues@@8				; MappedValues::`RTTI Base Class Array'
PUBLIC	?gmask@@3IA					; gmask
PUBLIC	??_R2btIDebugDraw@@8				; btIDebugDraw::`RTTI Base Class Array'
PUBLIC	??_R3GLDebugDrawer@@8				; GLDebugDrawer::`RTTI Class Hierarchy Descriptor'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	__imp__glDepthFunc@4:PROC
EXTRN	__imp__glDisable@4:PROC
EXTRN	__imp__SDL_FillRect:PROC
EXTRN	__imp__glColor4f@16:PROC
EXTRN	__imp__SDL_CreateRenderer:PROC
EXTRN	__imp__SDL_CreateRGBSurface:PROC
EXTRN	__imp____glewDisableVertexAttribArray:DWORD
EXTRN	__imp__glDrawArrays@12:PROC
EXTRN	__imp__glClearColor@16:PROC
EXTRN	__imp__glBlendFunc@8:PROC
EXTRN	__imp__fabs:PROC
EXTRN	__imp__glFrontFace@4:PROC
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__imp__glDepthMask@4:PROC
EXTRN	__imp__glCullFace@4:PROC
EXTRN	__imp__glEnable@4:PROC
EXTRN	__imp__cos:PROC
EXTRN	__imp__glClear@4:PROC
EXTRN	__imp__sin:PROC
?rmask@@3IA DD	01H DUP (?)				; rmask
?amask@@3IA DD	01H DUP (?)				; amask
?bmask@@3IA DD	01H DUP (?)				; bmask
?gmask@@3IA DD	01H DUP (?)				; gmask
_BSS	ENDS
;	COMDAT ??_R3GLDebugDrawer@@8
rdata$r	SEGMENT
??_R3GLDebugDrawer@@8 DD 00H				; GLDebugDrawer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2GLDebugDrawer@@8
rdata$r	ENDS
;	COMDAT ??_R2btIDebugDraw@@8
rdata$r	SEGMENT
??_R2btIDebugDraw@@8 DD FLAT:??_R1A@?0A@EA@btIDebugDraw@@8 ; btIDebugDraw::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2MappedValues@@8
rdata$r	SEGMENT
??_R2MappedValues@@8 DD FLAT:??_R1A@?0A@EA@MappedValues@@8 ; MappedValues::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AVGLDebugDrawer@@@8
data$r	SEGMENT
??_R0?AVGLDebugDrawer@@@8 DD FLAT:??_7type_info@@6B@	; GLDebugDrawer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGLDebugDrawer@@', 00H
data$r	ENDS
;	COMDAT ??_R4btIDebugDraw@@6B@
rdata$r	SEGMENT
??_R4btIDebugDraw@@6B@ DD 00H				; btIDebugDraw::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbtIDebugDraw@@@8
	DD	FLAT:??_R3btIDebugDraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMappedValues@@@8
data$r	SEGMENT
??_R0?AVMappedValues@@@8 DD FLAT:??_7type_info@@6B@	; MappedValues `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMappedValues@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@MappedValues@@8
rdata$r	SEGMENT
??_R17?0A@EA@MappedValues@@8 DD FLAT:??_R0?AVMappedValues@@@8 ; MappedValues::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MappedValues@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@btIDebugDraw@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@btIDebugDraw@@8 DD FLAT:??_R0?AVbtIDebugDraw@@@8 ; btIDebugDraw::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3btIDebugDraw@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbtIDebugDraw@@@8
data$r	SEGMENT
??_R0?AVbtIDebugDraw@@@8 DD FLAT:??_7type_info@@6B@	; btIDebugDraw `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbtIDebugDraw@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVRenderingEngine@@@8
data$r	SEGMENT
??_R0?AVRenderingEngine@@@8 DD FLAT:??_7type_info@@6B@	; RenderingEngine `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRenderingEngine@@', 00H
data$r	ENDS
;	COMDAT ??_7RenderingEngine@@6B@
CONST	SEGMENT
??_7RenderingEngine@@6B@ DD FLAT:??_R4RenderingEngine@@6B@ ; RenderingEngine::`vftable'
	DD	FLAT:??_ERenderingEngine@@UAEPAXI@Z
	DD	FLAT:?Render@RenderingEngine@@UAEXABVEntity@@@Z
	DD	FLAT:?UpdateUniformStruct@RenderingEngine@@UBEXABVTransform@@ABVMaterial@@ABVShader@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@MappedValues@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MappedValues@@8 DD FLAT:??_R0?AVMappedValues@@@8 ; MappedValues::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MappedValues@@8
rdata$r	ENDS
;	COMDAT ??_7btIDebugDraw@@6B@
CONST	SEGMENT
??_7btIDebugDraw@@6B@ DD FLAT:??_R4btIDebugDraw@@6B@	; btIDebugDraw::`vftable'
	DD	FLAT:??_EbtIDebugDraw@@UAEPAXI@Z
	DD	FLAT:?getDefaultColors@btIDebugDraw@@UBE?AUDefaultColors@1@XZ
	DD	FLAT:?setDefaultColors@btIDebugDraw@@UAEXABUDefaultColors@1@@Z
	DD	FLAT:?drawLine@btIDebugDraw@@UAEXABVbtVector3@@000@Z
	DD	FLAT:__purecall
	DD	FLAT:?drawSphere@btIDebugDraw@@UAEXABVbtVector3@@M0@Z
	DD	FLAT:?drawSphere@btIDebugDraw@@UAEXMABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000M@Z
	DD	FLAT:?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000000M@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?drawAabb@btIDebugDraw@@UAEXABVbtVector3@@00@Z
	DD	FLAT:?drawTransform@btIDebugDraw@@UAEXABVbtTransform@@M@Z
	DD	FLAT:?drawArc@btIDebugDraw@@UAEXABVbtVector3@@00MMMM0_NM@Z
	DD	FLAT:?drawSpherePatch@btIDebugDraw@@UAEXABVbtVector3@@00MMMMM0M_N@Z
	DD	FLAT:?drawBox@btIDebugDraw@@UAEXABVbtVector3@@0ABVbtTransform@@0@Z
	DD	FLAT:?drawBox@btIDebugDraw@@UAEXABVbtVector3@@00@Z
	DD	FLAT:?drawCapsule@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawCylinder@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawCone@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawPlane@btIDebugDraw@@UAEXABVbtVector3@@MABVbtTransform@@0@Z
	DD	FLAT:?flushLines@btIDebugDraw@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R2RenderingEngine@@8
rdata$r	SEGMENT
??_R2RenderingEngine@@8 DD FLAT:??_R1A@?0A@EA@RenderingEngine@@8 ; RenderingEngine::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@MappedValues@@8
rdata$r	ENDS
;	COMDAT ??_R3btIDebugDraw@@8
rdata$r	SEGMENT
??_R3btIDebugDraw@@8 DD 00H				; btIDebugDraw::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2btIDebugDraw@@8
rdata$r	ENDS
;	COMDAT ??_R3MappedValues@@8
rdata$r	SEGMENT
??_R3MappedValues@@8 DD 00H				; MappedValues::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MappedValues@@8
rdata$r	ENDS
;	COMDAT ??_R2GLDebugDrawer@@8
rdata$r	SEGMENT
??_R2GLDebugDrawer@@8 DD FLAT:??_R1A@?0A@EA@GLDebugDrawer@@8 ; GLDebugDrawer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@btIDebugDraw@@8
rdata$r	ENDS
;	COMDAT ??_7GLDebugDrawer@@6B@
CONST	SEGMENT
??_7GLDebugDrawer@@6B@ DD FLAT:??_R4GLDebugDrawer@@6B@	; GLDebugDrawer::`vftable'
	DD	FLAT:??_EGLDebugDrawer@@UAEPAXI@Z
	DD	FLAT:?getDefaultColors@btIDebugDraw@@UBE?AUDefaultColors@1@XZ
	DD	FLAT:?setDefaultColors@btIDebugDraw@@UAEXABUDefaultColors@1@@Z
	DD	FLAT:?drawLine@btIDebugDraw@@UAEXABVbtVector3@@000@Z
	DD	FLAT:?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z
	DD	FLAT:?drawSphere@btIDebugDraw@@UAEXABVbtVector3@@M0@Z
	DD	FLAT:?drawSphere@btIDebugDraw@@UAEXMABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000M@Z
	DD	FLAT:?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000000M@Z
	DD	FLAT:?drawContactPoint@GLDebugDrawer@@UAEXABVbtVector3@@0MH0@Z
	DD	FLAT:?reportErrorWarning@GLDebugDrawer@@UAEXPBD@Z
	DD	FLAT:?draw3dText@GLDebugDrawer@@UAEXABVbtVector3@@PBD@Z
	DD	FLAT:?setDebugMode@GLDebugDrawer@@UAEXH@Z
	DD	FLAT:?getDebugMode@GLDebugDrawer@@UBEHXZ
	DD	FLAT:?drawAabb@btIDebugDraw@@UAEXABVbtVector3@@00@Z
	DD	FLAT:?drawTransform@btIDebugDraw@@UAEXABVbtTransform@@M@Z
	DD	FLAT:?drawArc@btIDebugDraw@@UAEXABVbtVector3@@00MMMM0_NM@Z
	DD	FLAT:?drawSpherePatch@btIDebugDraw@@UAEXABVbtVector3@@00MMMMM0M_N@Z
	DD	FLAT:?drawBox@btIDebugDraw@@UAEXABVbtVector3@@0ABVbtTransform@@0@Z
	DD	FLAT:?drawBox@btIDebugDraw@@UAEXABVbtVector3@@00@Z
	DD	FLAT:?drawCapsule@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawCylinder@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawCone@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
	DD	FLAT:?drawPlane@btIDebugDraw@@UAEXABVbtVector3@@MABVbtTransform@@0@Z
	DD	FLAT:?flushLines@btIDebugDraw@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R3RenderingEngine@@8
rdata$r	SEGMENT
??_R3RenderingEngine@@8 DD 00H				; RenderingEngine::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RenderingEngine@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RenderingEngine@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RenderingEngine@@8 DD FLAT:??_R0?AVRenderingEngine@@@8 ; RenderingEngine::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RenderingEngine@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GLDebugDrawer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GLDebugDrawer@@8 DD FLAT:??_R0?AVGLDebugDrawer@@@8 ; GLDebugDrawer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GLDebugDrawer@@8
rdata$r	ENDS
;	COMDAT ??_R4GLDebugDrawer@@6B@
rdata$r	SEGMENT
??_R4GLDebugDrawer@@6B@ DD 00H				; GLDebugDrawer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGLDebugDrawer@@@8
	DD	FLAT:??_R3GLDebugDrawer@@8
rdata$r	ENDS
;	COMDAT ??_R4RenderingEngine@@6B@
rdata$r	SEGMENT
??_R4RenderingEngine@@6B@ DD 00H			; RenderingEngine::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRenderingEngine@@@8
	DD	FLAT:??_R3RenderingEngine@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BMC@NEDCJCDP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1BMC@NEDCJCDP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'3', 00H, 'f', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '-', 00H, '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BMA@MMALOBMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1BMA@MMALOBMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'3', 00H, 'f', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@EAEHFHOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAB?$AAa?$AAs?$AAe?$AAL?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl@
CONST	SEGMENT
??_C@_1KK@EAEHFHOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAB?$AAa?$AAs?$AAe?$AAL?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'B', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, 'L', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'B', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, 'L', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OGBHDMKG@?5is?5not?5supported?5by?5the?5renderi@
CONST	SEGMENT
??_C@_0CK@OGBHDMKG@?5is?5not?5supported?5by?5the?5renderi@ DB ' is not su'
	DB	'pported by the rendering engine', 00H	; `string'
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
	ORG $+2
$SG4294895282 DB 'plane.obj', 00H
	ORG $+3
$SG4294895280 DB 'default_normal.jpg', 00H
	ORG $+3
$SG4294895281 DB 'default_disp.png', 00H
	ORG $+3
$SG4294895278 DB 'forward-null', 00H
	ORG $+3
$SG4294895279 DB 'renderingEngine_filterPlane', 00H
$SG4294895276 DB 'filter-null', 00H
$SG4294895277 DB 'shadowMapGenerator', 00H
	ORG $+1
$SG4294895274 DB 'filter-fxaa', 00H
$SG4294895275 DB 'filter-gausBlur7x1', 00H
	ORG $+1
$SG4294895272 DB 'diffuse', 00H
$SG4294895273 DB 'forward-ambient', 00H
$SG4294895270 DB 'dispMap', 00H
$SG4294895271 DB 'normalMap', 00H
	ORG $+2
$SG4294895268 DB 'filterTexture', 00H
	ORG $+2
$SG4294895269 DB 'shadowMap', 00H
	ORG $+2
$SG4294895266 DB 'fxaaSpanMax', 00H
$SG4294895267 DB 'ambient', 00H
$SG4294895264 DB 'fxaaReduceMul', 00H
	ORG $+2
$SG4294895265 DB 'fxaaReduceMin', 00H
	ORG $+2
$SG4294895262 DB 'displayTexture', 00H
	ORG $+1
$SG4294895263 DB 'fxaaAspectDistortion', 00H
	ORG $+3
$SG4294895260 DB 'blurScale', 00H
	ORG $+2
$SG4294895261 DB 'blurScale', 00H
	ORG $+2
$SG4294895258 DB 'filterTexture', 00H
	ORG $+2
$SG4294895259 DB 'tempTarget', 00H
	ORG $+1
$SG4294895256 DB 'filterTexture', 00H
	ORG $+2
$SG4294895257 DB 'filterTexture', 00H
	ORG $+2
$SG4294895255 DB 'displayTexture', 00H
	ORG $+1
$SG4294895252 DB 'shadowMap', 00H
	ORG $+2
$SG4294895254 DB 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '\', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'E', 00H, 'n', 00H, 'g'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H
$SG4294895251 DB 'shadowVarianceMin', 00H
	ORG $+2
$SG4294895253 DB 's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'M', 00H, 'a', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'M', 00H, 'a', 00H, 'p', 00H
	DB	'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'M', 00H, '_', 00H, 'S', 00H
	DB	'H', 00H, 'A', 00H, 'D', 00H, 'O', 00H, 'W', 00H, '_', 00H, 'M'
	DB	00H, 'A', 00H, 'P', 00H, 'S', 00H, 00H, 00H
$SG4294895250 DB 'shadowLightBleedingReduction', 00H
	ORG $+3
$SG4294895248 DB 'shadowLightBleedingReduction', 00H
	ORG $+3
$SG4294895249 DB 'shadowVarianceMin', 00H
	ORG $+2
$SG4294895246 DB 'displayTexture', 00H
	ORG $+1
$SG4294895247 DB 'displayTexture', 00H
	ORG $+1
$SG4294895244 DB 'fxaaAspectDistortion', 00H
	ORG $+3
$SG4294895245 DB 'displayTexture', 00H
	ORG $+1
$SG4294895242 DB 'displayTexture', 00H
	ORG $+1
$SG4294895243 DB 'displayTexture', 00H
	ORG $+1
$SG4294895240 DB 'displayTexture', 00H
	ORG $+1
$SG4294895241 DB 'inverseFilterTextureSize', 00H
	ORG $+3
$SG4294895238 DB 'null', 00H
	ORG $+3
$SG4294895239 DB 'displayTexture', 00H
	ORG $+1
$SG4294895198 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294895199 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294895194 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
$SG4294895195 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294895192 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294895193 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
PUBLIC	??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
PUBLIC	??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > >
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &,bool,void>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool,void>
PUBLIC	??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode_if_nil<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>::_Get_first
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::max_size
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
PUBLIC	??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Mysize
PUBLIC	?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEABIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Mysize
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator--
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::size
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Freenode0
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::size
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >
PUBLIC	??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const &,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::operator=
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
PUBLIC	??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>
PUBLIC	??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=
PUBLIC	??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >
PUBLIC	??$_Ptr_cat@PAVBaseLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVBaseLight@@0@Z ; std::_Ptr_cat<BaseLight *,BaseLight *>
PUBLIC	??$forward@ABV?$allocator@PAVBaseLight@@@std@@@std@@YAABV?$allocator@PAVBaseLight@@@0@ABV10@@Z ; std::forward<std::allocator<BaseLight *> const &>
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$?0PAVBaseLight@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><BaseLight *>
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
PUBLIC	??0?$allocator@PAVBaseLight@@@std@@QAE@ABV01@@Z	; std::allocator<BaseLight *>::allocator<BaseLight *>
PUBLIC	?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Compare
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::_Wrap_alloc<std::allocator<BaseLight *> >::_Wrap_alloc<std::allocator<BaseLight *> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<BaseLight *> >::_Vector_val<std::_Simple_types<BaseLight *> >
PUBLIC	??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<BaseLight *> > >
PUBLIC	??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0ABV?$allocator@PAVBaseLight@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1><std::allocator<BaseLight *> const &>
PUBLIC	??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$btPlaneSpace1@VbtVector3@@@@YAXABVbtVector3@@AAV0@1@Z ; btPlaneSpace1<btVector3>
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*
PUBLIC	?deallocate@?$allocator@PAVBaseLight@@@std@@QAEXPAPAVBaseLight@@I@Z ; std::allocator<BaseLight *>::deallocate
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second
PUBLIC	?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator*
PUBLIC	?_Destroy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXPAPAVBaseLight@@0@Z ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Destroy
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Free_proxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Orphan_all
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAEXPAPAVBaseLight@@I@Z ; std::_Wrap_alloc<std::allocator<BaseLight *> >::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_first
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@AAU32@@Z ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> *>::pointer_to
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@AAU32@@Z ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> *>::pointer_to
PUBLIC	??1?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<BaseLight *> >::~_Vector_val<std::_Simple_types<BaseLight *> >
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::lower_bound
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator->
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::lower_bound
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator->
PUBLIC	??0?$allocator@PAVBaseLight@@@std@@QAE@XZ	; std::allocator<BaseLight *>::allocator<BaseLight *>
PUBLIC	?_Tidy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXXZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Tidy
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::~_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myend
PUBLIC	??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const &,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::operator=
PUBLIC	??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=
PUBLIC	??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=
PUBLIC	??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=
PUBLIC	??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=
PUBLIC	?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitScale
PUBLIC	?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitTranslation
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::operator[]
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >::operator[]
PUBLIC	??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::vector<BaseLight *,std::allocator<BaseLight *> >
PUBLIC	??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::~vector<BaseLight *,std::allocator<BaseLight *> >
PUBLIC	?size@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QBEIXZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::size
PUBLIC	??A?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAEAAPAVBaseLight@@I@Z ; std::vector<BaseLight *,std::allocator<BaseLight *> >::operator[]
PUBLIC	?drawContactPoint@GLDebugDrawer@@UAEXABVbtVector3@@0MH0@Z ; GLDebugDrawer::drawContactPoint
PUBLIC	?reportErrorWarning@GLDebugDrawer@@UAEXPBD@Z	; GLDebugDrawer::reportErrorWarning
PUBLIC	?draw3dText@GLDebugDrawer@@UAEXABVbtVector3@@PBD@Z ; GLDebugDrawer::draw3dText
PUBLIC	?setDebugMode@GLDebugDrawer@@UAEXH@Z		; GLDebugDrawer::setDebugMode
PUBLIC	?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z	; GLDebugDrawer::drawLine
PUBLIC	??0btIDebugDraw@@QAE@XZ				; btIDebugDraw::btIDebugDraw
PUBLIC	??1GLDebugDrawer@@UAE@XZ			; GLDebugDrawer::~GLDebugDrawer
PUBLIC	??_GGLDebugDrawer@@UAEPAXI@Z			; GLDebugDrawer::`scalar deleting destructor'
PUBLIC	?Render@RenderingEngine@@UAEXABVEntity@@@Z	; RenderingEngine::Render
PUBLIC	?drawrect@RenderingEngine@@AAEXHHHHH@Z		; RenderingEngine::drawrect
PUBLIC	?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z ; RenderingEngine::ApplyFilter
PUBLIC	?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z ; RenderingEngine::ApplyFilterInternal
PUBLIC	?BlurShadowMap@RenderingEngine@@AAEXHM@Z	; RenderingEngine::BlurShadowMap
PUBLIC	??0RenderingEngine@@QAE@PAVWindow@@@Z		; RenderingEngine::RenderingEngine
PUBLIC	?getDebugMode@GLDebugDrawer@@UBEHXZ		; GLDebugDrawer::getDebugMode
PUBLIC	??_FTexture@@QAEXXZ				; Texture::`default constructor closure'
PUBLIC	??_GRenderingEngine@@UAEPAXI@Z			; RenderingEngine::`scalar deleting destructor'
PUBLIC	?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; RenderingEngine::SetSamplerSlot
PUBLIC	?GetNullShader@RenderingEngine@@QAEPAVShader@@XZ ; RenderingEngine::GetNullShader
PUBLIC	?UpdateUniformStruct@RenderingEngine@@UBEXABVTransform@@ABVMaterial@@ABVShader@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z ; RenderingEngine::UpdateUniformStruct
PUBLIC	??1RenderingEngine@@UAE@XZ			; RenderingEngine::~RenderingEngine
PUBLIC	?GetSDLWindow@Window@@QAEPAUSDL_Window@@XZ	; Window::GetSDLWindow
PUBLIC	?GetShadowInfo@BaseLight@@QBEABVShadowInfo@@XZ	; BaseLight::GetShadowInfo
PUBLIC	?GetShader@BaseLight@@QBEABVShader@@XZ		; BaseLight::GetShader
PUBLIC	?GetLightBleedReductionAmount@ShadowInfo@@QBEMXZ ; ShadowInfo::GetLightBleedReductionAmount
PUBLIC	?GetMinVariance@ShadowInfo@@QBEMXZ		; ShadowInfo::GetMinVariance
PUBLIC	?GetShadowSoftness@ShadowInfo@@QBEMXZ		; ShadowInfo::GetShadowSoftness
PUBLIC	?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ	; ShadowInfo::GetShadowMapSizeAsPowerOf2
PUBLIC	?GetFlipFaces@ShadowInfo@@QBE_NXZ		; ShadowInfo::GetFlipFaces
PUBLIC	?GetProjection@ShadowInfo@@QBEABV?$Matrix4@M@@XZ ; ShadowInfo::GetProjection
PUBLIC	?GetRot@ShadowCameraTransform@@QBEABVQuaternion@@XZ ; ShadowCameraTransform::GetRot
PUBLIC	?GetPos@ShadowCameraTransform@@QBEABVVector3f@@XZ ; ShadowCameraTransform::GetPos
PUBLIC	?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z ; MappedValues::SetVector3f
PUBLIC	?GetHeight@Texture@@QBEHXZ			; Texture::GetHeight
PUBLIC	?GetWidth@Texture@@QBEHXZ			; Texture::GetWidth
PUBLIC	?GetHeight@TextureData@@QBEHXZ			; TextureData::GetHeight
PUBLIC	?GetWidth@TextureData@@QBEHXZ			; TextureData::GetWidth
PUBLIC	?SetProjection@Camera@@QAEXABV?$Matrix4@M@@@Z	; Camera::SetProjection
PUBLIC	?GetTransform@Camera@@QAEPAVTransform@@XZ	; Camera::GetTransform
PUBLIC	??0Camera@@QAE@ABV?$Matrix4@M@@PAVTransform@@@Z	; Camera::Camera
PUBLIC	?SetScale@Transform@@QAEXM@Z			; Transform::SetScale
PUBLIC	??0Quaternion@@QAE@ABVVector3f@@M@Z		; Quaternion::Quaternion
PUBLIC	??_GbtIDebugDraw@@UAEPAXI@Z			; btIDebugDraw::`scalar deleting destructor'
PUBLIC	?flushLines@btIDebugDraw@@UAEXXZ		; btIDebugDraw::flushLines
PUBLIC	?drawPlane@btIDebugDraw@@UAEXABVbtVector3@@MABVbtTransform@@0@Z ; btIDebugDraw::drawPlane
PUBLIC	?drawCone@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z ; btIDebugDraw::drawCone
PUBLIC	?drawCylinder@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z ; btIDebugDraw::drawCylinder
PUBLIC	?drawCapsule@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z ; btIDebugDraw::drawCapsule
PUBLIC	?drawBox@btIDebugDraw@@UAEXABVbtVector3@@0ABVbtTransform@@0@Z ; btIDebugDraw::drawBox
PUBLIC	?drawBox@btIDebugDraw@@UAEXABVbtVector3@@00@Z	; btIDebugDraw::drawBox
PUBLIC	?drawSpherePatch@btIDebugDraw@@UAEXABVbtVector3@@00MMMMM0M_N@Z ; btIDebugDraw::drawSpherePatch
PUBLIC	?drawArc@btIDebugDraw@@UAEXABVbtVector3@@00MMMM0_NM@Z ; btIDebugDraw::drawArc
PUBLIC	?drawTransform@btIDebugDraw@@UAEXABVbtTransform@@M@Z ; btIDebugDraw::drawTransform
PUBLIC	?drawAabb@btIDebugDraw@@UAEXABVbtVector3@@00@Z	; btIDebugDraw::drawAabb
PUBLIC	?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000M@Z ; btIDebugDraw::drawTriangle
PUBLIC	?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000000M@Z ; btIDebugDraw::drawTriangle
PUBLIC	?drawSphere@btIDebugDraw@@UAEXABVbtVector3@@M0@Z ; btIDebugDraw::drawSphere
PUBLIC	?drawSphere@btIDebugDraw@@UAEXMABVbtTransform@@ABVbtVector3@@@Z ; btIDebugDraw::drawSphere
PUBLIC	?drawLine@btIDebugDraw@@UAEXABVbtVector3@@000@Z	; btIDebugDraw::drawLine
PUBLIC	?setDefaultColors@btIDebugDraw@@UAEXABUDefaultColors@1@@Z ; btIDebugDraw::setDefaultColors
PUBLIC	?getDefaultColors@btIDebugDraw@@UBE?AUDefaultColors@1@XZ ; btIDebugDraw::getDefaultColors
PUBLIC	??1btIDebugDraw@@UAE@XZ				; btIDebugDraw::~btIDebugDraw
PUBLIC	??0DefaultColors@btIDebugDraw@@QAE@XZ		; btIDebugDraw::DefaultColors::DefaultColors
PUBLIC	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z	; btTransform::setOrigin
PUBLIC	?getOrigin@btTransform@@QBEABVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ	; btTransform::getBasis
PUBLIC	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z	; btTransform::operator*
PUBLIC	?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z	; btMatrix3x3::getColumn
PUBLIC	??D@YA?AVbtVector3@@ABMABV0@@Z			; operator*
PUBLIC	??D@YA?AVbtVector3@@ABV0@ABM@Z			; operator*
PUBLIC	??G@YA?AVbtVector3@@ABV0@0@Z			; operator-
PUBLIC	??BbtVector3@@QAEPAMXZ				; btVector3::operator float *
PUBLIC	?cross@btVector3@@QBE?AV1@ABV1@@Z		; btVector3::cross
PUBLIC	??YbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator+=
PUBLIC	?btSin@@YAMM@Z					; btSin
PUBLIC	?btCos@@YAMM@Z					; btCos
PUBLIC	?btFabs@@YAMM@Z					; btFabs
PUBLIC	_sinf
PUBLIC	_fabsf
PUBLIC	_cosf
PUBLIC	??0GLDebugDrawer@@QAE@PAVRenderingEngine@@@Z	; GLDebugDrawer::GLDebugDrawer
PUBLIC	?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B	; RenderingEngine::BIAS_MATRIX
EXTRN	??_EGLDebugDrawer@@UAEPAXI@Z:PROC		; GLDebugDrawer::`vector deleting destructor'
EXTRN	??_EbtIDebugDraw@@UAEPAXI@Z:PROC		; btIDebugDraw::`vector deleting destructor'
EXTRN	??_ERenderingEngine@@UAEPAXI@Z:PROC		; RenderingEngine::`vector deleting destructor'
?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B DB 040H DUP (?) ; RenderingEngine::BIAS_MATRIX
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1RenderingEngine@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$2
__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z DD 02H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$12
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$3
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$10
	DD	01H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$11
__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$2
__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z DD 02H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$12
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$3
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$10
	DD	01H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$11
__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ$2
__catchsym$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$7
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z DD 00H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$8
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z$0
__ehfuncinfo$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z$1
__ehfuncinfo$?Render@RenderingEngine@@UAEXABVEntity@@@Z DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$?Render@RenderingEngine@@UAEXABVEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Render@RenderingEngine@@UAEXABVEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$14
__unwindtable$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$4
__ehfuncinfo$?BlurShadowMap@RenderingEngine@@AAEXHM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BlurShadowMap@RenderingEngine@@AAEXHM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?BlurShadowMap@RenderingEngine@@AAEXHM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BlurShadowMap@RenderingEngine@@AAEXHM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BlurShadowMap@RenderingEngine@@AAEXHM@Z$1
__ehfuncinfo$??0RenderingEngine@@QAE@PAVWindow@@@Z DD 019930522H
	DD	032H
	DD	FLAT:__unwindtable$??0RenderingEngine@@QAE@PAVWindow@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0RenderingEngine@@QAE@PAVWindow@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$6
	DD	07H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$7
	DD	08H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$8
	DD	09H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9
	DD	05H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9
	DD	04H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9
	DD	0fH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$10
	DD	010H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$11
	DD	011H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$12
	DD	012H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$13
	DD	011H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$13
	DD	014H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$14
	DD	015H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$15
	DD	014H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$15
	DD	017H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$16
	DD	018H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$17
	DD	017H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$17
	DD	01aH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$18
	DD	01bH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$19
	DD	01aH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$19
	DD	01dH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$20
	DD	01eH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$21
	DD	01dH
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$21
	DD	020H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$22
	DD	021H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$23
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$24
	DD	023H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$25
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$25
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$26
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$27
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$28
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$29
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$30
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$31
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$32
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$33
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$34
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$35
	DD	022H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$36
	DD	030H
	DD	FLAT:__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$37
??BIAS_MATRIX$initializer$@RenderingEngine@@0P6AXXZA@@3P6AXXZA DD FLAT:??__E?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B@@YAXXZ ; private: static void (__cdecl* RenderingEngine::IAS_MATRIX$initializer$::operator)(void)
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_renderer$ = 8						; size = 4
??0GLDebugDrawer@@QAE@PAVRenderingEngine@@@Z PROC	; GLDebugDrawer::GLDebugDrawer
; _this$ = ecx

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0btIDebugDraw@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7GLDebugDrawer@@6B@

; 296  : 	:m_debugMode (btIDebugDraw::DBG_DrawWireframe),

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 297  : 	m_renderer (renderer)

  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 45 08	 mov	 eax, DWORD PTR _renderer$[ebp]
  0002f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 299  : 
; 300  : }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??0GLDebugDrawer@@QAE@PAVRenderingEngine@@@Z ENDP	; GLDebugDrawer::GLDebugDrawer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 634  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 635  :         return (float)cos(_X);

  0000c	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00011	8b f4		 mov	 esi, esp
  00013	83 ec 08	 sub	 esp, 8
  00016	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__cos
  00021	83 c4 08	 add	 esp, 8
  00024	3b f4		 cmp	 esi, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0002e	d9 45 fc	 fld	 DWORD PTR tv73[ebp]

; 636  :     }

  00031	5e		 pop	 esi
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 657  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 658  :         return (float)fabs(_X);

  0000c	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00011	8b f4		 mov	 esi, esp
  00013	83 ec 08	 sub	 esp, 8
  00016	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fabs
  00021	83 c4 08	 add	 esp, 8
  00024	3b f4		 cmp	 esi, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0002e	d9 45 fc	 fld	 DWORD PTR tv73[ebp]

; 659  :     }

  00031	5e		 pop	 esi
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 735  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 736  :         return (float)sin(_X);

  0000c	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00011	8b f4		 mov	 esi, esp
  00013	83 ec 08	 sub	 esp, 8
  00016	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sin
  00021	83 c4 08	 add	 esp, 8
  00024	3b f4		 cmp	 esi, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0002e	d9 45 fc	 fld	 DWORD PTR tv73[ebp]

; 737  :     }

  00031	5e		 pop	 esi
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btscalar.h
;	COMDAT ?btFabs@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btFabs@@YAMM@Z PROC					; btFabs, COMDAT

; 449  : SIMD_FORCE_INLINE btScalar btFabs(btScalar x) { return fabsf(x); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _fabsf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?btFabs@@YAMM@Z ENDP					; btFabs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btscalar.h
;	COMDAT ?btCos@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btCos@@YAMM@Z PROC					; btCos, COMDAT

; 450  : SIMD_FORCE_INLINE btScalar btCos(btScalar x) { return cosf(x); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _cosf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?btCos@@YAMM@Z ENDP					; btCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btscalar.h
;	COMDAT ?btSin@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btSin@@YAMM@Z PROC					; btSin, COMDAT

; 451  : SIMD_FORCE_INLINE btScalar btSin(btScalar x) { return sinf(x); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _sinf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?btSin@@YAMM@Z ENDP					; btSin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ??YbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator+=, COMDAT
; _this$ = ecx

; 165  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : #if defined(BT_USE_SSE_IN_API) && defined (BT_USE_SSE)
; 167  : 		mVec128 = _mm_add_ps(mVec128, v.mVec128);
; 168  : #elif defined(BT_USE_NEON)
; 169  : 		mVec128 = vaddq_f32(mVec128, v.mVec128);
; 170  : #else
; 171  : 		m_floats[0] += v.m_floats[0]; 

  0000f	b8 04 00 00 00	 mov	 eax, 4
  00014	6b c8 00	 imul	 ecx, eax, 0
  00017	ba 04 00 00 00	 mov	 edx, 4
  0001c	6b c2 00	 imul	 eax, edx, 0
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00025	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0002a	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  0002f	b8 04 00 00 00	 mov	 eax, 4
  00034	6b c8 00	 imul	 ecx, eax, 0
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 172  : 		m_floats[1] += v.m_floats[1];

  0003f	b8 04 00 00 00	 mov	 eax, 4
  00044	c1 e0 00	 shl	 eax, 0
  00047	b9 04 00 00 00	 mov	 ecx, 4
  0004c	c1 e1 00	 shl	 ecx, 0
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00055	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0005a	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	c1 e0 00	 shl	 eax, 0
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 173  : 		m_floats[2] += v.m_floats[2];

  0006f	ba 04 00 00 00	 mov	 edx, 4
  00074	d1 e2		 shl	 edx, 1
  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	d1 e0		 shl	 eax, 1
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00083	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00088	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  0008d	ba 04 00 00 00	 mov	 edx, 4
  00092	d1 e2		 shl	 edx, 1
  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 174  : #endif
; 175  : 		return *this;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 176  : 	}

  0009f	5e		 pop	 esi
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
??YbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ?cross@btVector3@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?cross@btVector3@@QBE?AV1@ABV1@@Z PROC			; btVector3::cross, COMDAT
; _this$ = ecx

; 378  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  : #if defined(BT_USE_SSE_IN_API) && defined (BT_USE_SSE)
; 380  : 		__m128	T, V;
; 381  : 		
; 382  : 		T = bt_pshufd_ps(mVec128, BT_SHUFFLE(1, 2, 0, 3));	//	(Y Z X 0)
; 383  : 		V = bt_pshufd_ps(v.mVec128, BT_SHUFFLE(1, 2, 0, 3));	//	(Y Z X 0)
; 384  : 		
; 385  : 		V = _mm_mul_ps(V, mVec128);
; 386  : 		T = _mm_mul_ps(T, v.mVec128);
; 387  : 		V = _mm_sub_ps(V, T);
; 388  : 		
; 389  : 		V = bt_pshufd_ps(V, BT_SHUFFLE(1, 2, 0, 3));
; 390  : 		return btVector3(V);
; 391  : #elif defined(BT_USE_NEON)
; 392  : 		float32x4_t T, V;
; 393  : 		// form (Y, Z, X, _) of mVec128 and v.mVec128
; 394  : 		float32x2_t Tlow = vget_low_f32(mVec128);
; 395  : 		float32x2_t Vlow = vget_low_f32(v.mVec128);
; 396  : 		T = vcombine_f32(vext_f32(Tlow, vget_high_f32(mVec128), 1), Tlow);
; 397  : 		V = vcombine_f32(vext_f32(Vlow, vget_high_f32(v.mVec128), 1), Vlow);
; 398  : 		
; 399  : 		V = vmulq_f32(V, mVec128);
; 400  : 		T = vmulq_f32(T, v.mVec128);
; 401  : 		V = vsubq_f32(V, T);
; 402  : 		Vlow = vget_low_f32(V);
; 403  : 		// form (Y, Z, X, _);
; 404  : 		V = vcombine_f32(vext_f32(Vlow, vget_high_f32(V), 1), Vlow);
; 405  : 		V = (float32x4_t)vandq_s32((int32x4_t)V, btvFFF0Mask);
; 406  : 		
; 407  : 		return btVector3(V);
; 408  : #else
; 409  : 		return btVector3(

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	6b c8 00	 imul	 ecx, eax, 0
  00023	ba 04 00 00 00	 mov	 edx, 4
  00028	c1 e2 00	 shl	 edx, 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00031	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00036	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0003b	b9 04 00 00 00	 mov	 ecx, 4
  00040	c1 e1 00	 shl	 ecx, 0
  00043	ba 04 00 00 00	 mov	 edx, 4
  00048	6b c2 00	 imul	 eax, edx, 0
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00051	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00056	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  0005b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0005f	f3 0f 11 45 f8	 movss	 DWORD PTR $T3[ebp], xmm0
  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	d1 e0		 shl	 eax, 1
  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 00	 imul	 edx, ecx, 0
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00079	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007e	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00083	ba 04 00 00 00	 mov	 edx, 4
  00088	6b c2 00	 imul	 eax, edx, 0
  0008b	b9 04 00 00 00	 mov	 ecx, 4
  00090	d1 e1		 shl	 ecx, 1
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00098	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0009d	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000a2	f3 0f 5c c1	 subss	 xmm0, xmm1
  000a6	f3 0f 11 45 f4	 movss	 DWORD PTR $T2[ebp], xmm0
  000ab	b8 04 00 00 00	 mov	 eax, 4
  000b0	c1 e0 00	 shl	 eax, 0
  000b3	b9 04 00 00 00	 mov	 ecx, 4
  000b8	d1 e1		 shl	 ecx, 1
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000c0	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000c5	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  000ca	b8 04 00 00 00	 mov	 eax, 4
  000cf	d1 e0		 shl	 eax, 1
  000d1	b9 04 00 00 00	 mov	 ecx, 4
  000d6	c1 e1 00	 shl	 ecx, 0
  000d9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000df	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000e4	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000e9	f3 0f 5c c1	 subss	 xmm0, xmm1
  000ed	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0
  000f2	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
  000f5	50		 push	 eax
  000f6	8d 4d f4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f9	51		 push	 ecx
  000fa	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  000fd	52		 push	 edx
  000fe	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00101	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00106	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 410  : 			m_floats[1] * v.m_floats[2] - m_floats[2] * v.m_floats[1],
; 411  : 			m_floats[2] * v.m_floats[0] - m_floats[0] * v.m_floats[2],
; 412  : 			m_floats[0] * v.m_floats[1] - m_floats[1] * v.m_floats[0]);
; 413  : #endif
; 414  : 	}

  00109	5e		 pop	 esi
  0010a	83 c4 10	 add	 esp, 16			; 00000010H
  0010d	3b ec		 cmp	 ebp, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
?cross@btVector3@@QBE?AV1@ABV1@@Z ENDP			; btVector3::cross
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ??BbtVector3@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BbtVector3@@QAEPAMXZ PROC				; btVector3::operator float *, COMDAT
; _this$ = ecx

; 586  : 	SIMD_FORCE_INLINE	operator       btScalar *()       { return &m_floats[0]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b8 04 00 00 00	 mov	 eax, 4
  00013	6b c0 00	 imul	 eax, eax, 0
  00016	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??BbtVector3@@QAEPAMXZ ENDP				; btVector3::operator float *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ??G@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AVbtVector3@@ABV0@0@Z PROC			; operator-, COMDAT

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 787  : #if defined BT_USE_SIMD_VECTOR3 && (defined(BT_USE_SSE_IN_API)  && defined(BT_USE_SSE))
; 788  : 
; 789  : 	//	without _mm_and_ps this code causes slowdown in Concave moving
; 790  : 	__m128 r = _mm_sub_ps(v1.mVec128, v2.mVec128);
; 791  : 	return btVector3(_mm_and_ps(r, btvFFF0fMask));
; 792  : #elif defined(BT_USE_NEON)
; 793  : 	float32x4_t r = vsubq_f32(v1.mVec128, v2.mVec128);
; 794  : 	return btVector3((float32x4_t)vandq_s32((int32x4_t)r, btvFFF0Mask));
; 795  : #else
; 796  : 	return btVector3(

  0001c	b8 04 00 00 00	 mov	 eax, 4
  00021	d1 e0		 shl	 eax, 1
  00023	b9 04 00 00 00	 mov	 ecx, 4
  00028	d1 e1		 shl	 ecx, 1
  0002a	8b 55 0c	 mov	 edx, DWORD PTR _v1$[ebp]
  0002d	8b 75 10	 mov	 esi, DWORD PTR _v2$[ebp]
  00030	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00035	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  0003a	f3 0f 11 45 fc	 movss	 DWORD PTR $T3[ebp], xmm0
  0003f	b8 04 00 00 00	 mov	 eax, 4
  00044	c1 e0 00	 shl	 eax, 0
  00047	b9 04 00 00 00	 mov	 ecx, 4
  0004c	c1 e1 00	 shl	 ecx, 0
  0004f	8b 55 0c	 mov	 edx, DWORD PTR _v1$[ebp]
  00052	8b 75 10	 mov	 esi, DWORD PTR _v2$[ebp]
  00055	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0005a	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  0005f	f3 0f 11 45 f8	 movss	 DWORD PTR $T2[ebp], xmm0
  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	6b c8 00	 imul	 ecx, eax, 0
  0006c	ba 04 00 00 00	 mov	 edx, 4
  00071	6b c2 00	 imul	 eax, edx, 0
  00074	8b 55 0c	 mov	 edx, DWORD PTR _v1$[ebp]
  00077	8b 75 10	 mov	 esi, DWORD PTR _v2$[ebp]
  0007a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0007f	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00084	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp], xmm0
  00089	8d 45 fc	 lea	 eax, DWORD PTR $T3[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d f8	 lea	 ecx, DWORD PTR $T2[ebp]
  00090	51		 push	 ecx
  00091	8d 55 f4	 lea	 edx, DWORD PTR $T1[ebp]
  00094	52		 push	 edx
  00095	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00098	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0009d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 797  : 			v1.m_floats[0] - v2.m_floats[0], 
; 798  : 			v1.m_floats[1] - v2.m_floats[1], 
; 799  : 			v1.m_floats[2] - v2.m_floats[2]);
; 800  : #endif
; 801  : }

  000a0	5e		 pop	 esi
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
??G@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ??D@YA?AVbtVector3@@ABV0@ABM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@ABM@Z PROC			; operator*, COMDAT

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 821  : #if defined(BT_USE_SSE_IN_API) && defined (BT_USE_SSE)
; 822  : 	__m128	vs = _mm_load_ss(&s);	//	(S 0 0 0)
; 823  : 	vs = bt_pshufd_ps(vs, 0x80);	//	(S S S 0.0)
; 824  : 	return btVector3(_mm_mul_ps(v.mVec128, vs));
; 825  : #elif defined(BT_USE_NEON)
; 826  : 	float32x4_t r = vmulq_n_f32(v.mVec128, s);
; 827  : 	return btVector3((float32x4_t)vandq_s32((int32x4_t)r, btvFFF0Mask));
; 828  : #else
; 829  : 	return btVector3(v.m_floats[0] * s, v.m_floats[1] * s, v.m_floats[2] * s);

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	d1 e0		 shl	 eax, 1
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00025	8b 55 10	 mov	 edx, DWORD PTR _s$[ebp]
  00028	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0002d	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  00031	f3 0f 11 45 fc	 movss	 DWORD PTR $T3[ebp], xmm0
  00036	b8 04 00 00 00	 mov	 eax, 4
  0003b	c1 e0 00	 shl	 eax, 0
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00041	8b 55 10	 mov	 edx, DWORD PTR _s$[ebp]
  00044	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00049	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  0004d	f3 0f 11 45 f8	 movss	 DWORD PTR $T2[ebp], xmm0
  00052	b8 04 00 00 00	 mov	 eax, 4
  00057	6b c8 00	 imul	 ecx, eax, 0
  0005a	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0005d	8b 45 10	 mov	 eax, DWORD PTR _s$[ebp]
  00060	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00065	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00069	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp], xmm0
  0006e	8d 4d fc	 lea	 ecx, DWORD PTR $T3[ebp]
  00071	51		 push	 ecx
  00072	8d 55 f8	 lea	 edx, DWORD PTR $T2[ebp]
  00075	52		 push	 edx
  00076	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00079	50		 push	 eax
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0007d	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00082	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 830  : #endif
; 831  : }

  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
??D@YA?AVbtVector3@@ABV0@ABM@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ??D@YA?AVbtVector3@@ABMABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVbtVector3@@ABMABV0@@Z PROC			; operator*, COMDAT

; 836  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 837  : 	return v * s; 

  00003	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 838  : }

  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??D@YA?AVbtVector3@@ABMABV0@@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btmatrix3x3.h
;	COMDAT ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_i$ = 12						; size = 4
?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z PROC	; btMatrix3x3::getColumn, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 		return btVector3(m_el[0][i],m_el[1][i],m_el[2][i]);

  0000e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00013	d1 e1		 shl	 ecx, 1
  00015	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]
  00020	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00023	52		 push	 edx
  00024	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00029	c1 e1 00	 shl	 ecx, 0
  0002c	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]
  00037	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0003a	52		 push	 edx
  0003b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00040	6b c8 00	 imul	 ecx, eax, 0
  00043	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _i$[ebp]
  0004e	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00051	52		 push	 edx
  00052	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00055	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0005a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 137  : 	}

  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ENDP	; btMatrix3x3::getColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\bttransform.h
;	COMDAT ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z PROC		; btTransform::operator*, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 		return (*this)(x);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 103  : 	}

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ENDP		; btTransform::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\bttransform.h
;	COMDAT ?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ PROC	; btTransform::getBasis, COMDAT
; _this$ = ecx

; 112  : 	SIMD_FORCE_INLINE btMatrix3x3&       getBasis()          { return m_basis; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ENDP	; btTransform::getBasis
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\bttransform.h
;	COMDAT ?getOrigin@btTransform@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QBEABVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx

; 119  : 	SIMD_FORCE_INLINE const btVector3&   getOrigin()   const { return m_origin; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 30	 add	 eax, 48			; 00000030H
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?getOrigin@btTransform@@QBEABVbtVector3@@XZ ENDP	; btTransform::getOrigin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\bttransform.h
;	COMDAT ?setOrigin@btTransform@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z PROC	; btTransform::setOrigin, COMDAT
; _this$ = ecx

; 151  : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  : 		m_origin = origin;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 30	 add	 eax, 48			; 00000030H
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _origin$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	89 10		 mov	 DWORD PTR [eax], edx
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00024	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00027	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0002a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 153  : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ENDP	; btTransform::setOrigin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ??0DefaultColors@btIDebugDraw@@QAE@XZ
_TEXT	SEGMENT
$T1 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
$T5 = -72						; size = 4
$T6 = -68						; size = 4
$T7 = -64						; size = 4
$T8 = -60						; size = 4
$T9 = -56						; size = 4
$T10 = -52						; size = 4
$T11 = -48						; size = 4
$T12 = -44						; size = 4
$T13 = -40						; size = 4
$T14 = -36						; size = 4
$T15 = -32						; size = 4
$T16 = -28						; size = 4
$T17 = -24						; size = 4
$T18 = -20						; size = 4
$T19 = -16						; size = 4
$T20 = -12						; size = 4
$T21 = -8						; size = 4
_this$ = -4						; size = 4
??0DefaultColors@btIDebugDraw@@QAE@XZ PROC		; btIDebugDraw::DefaultColors::DefaultColors, COMDAT
; _this$ = ecx

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0000b	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 		:	m_activeObject(1,1,1),

  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00023	f3 0f 11 45 f8	 movss	 DWORD PTR $T21[ebp], xmm0
  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00030	f3 0f 11 45 f4	 movss	 DWORD PTR $T20[ebp], xmm0
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0003d	f3 0f 11 45 f0	 movss	 DWORD PTR $T19[ebp], xmm0
  00042	8d 45 f8	 lea	 eax, DWORD PTR $T21[ebp]
  00045	50		 push	 eax
  00046	8d 4d f4	 lea	 ecx, DWORD PTR $T20[ebp]
  00049	51		 push	 ecx
  0004a	8d 55 f0	 lea	 edx, DWORD PTR $T19[ebp]
  0004d	52		 push	 edx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 45   : 			m_deactivatedObject(0,1,0),

  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0005e	f3 0f 11 45 ec	 movss	 DWORD PTR $T18[ebp], xmm0
  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006b	f3 0f 11 45 e8	 movss	 DWORD PTR $T17[ebp], xmm0
  00070	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00078	f3 0f 11 45 e4	 movss	 DWORD PTR $T16[ebp], xmm0
  0007d	8d 45 ec	 lea	 eax, DWORD PTR $T18[ebp]
  00080	50		 push	 eax
  00081	8d 4d e8	 lea	 ecx, DWORD PTR $T17[ebp]
  00084	51		 push	 ecx
  00085	8d 55 e4	 lea	 edx, DWORD PTR $T16[ebp]
  00088	52		 push	 edx
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 10	 add	 ecx, 16			; 00000010H
  0008f	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 46   : 			m_wantsDeactivationObject(0,1,1),

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009c	f3 0f 11 45 e0	 movss	 DWORD PTR $T15[ebp], xmm0
  000a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a9	f3 0f 11 45 dc	 movss	 DWORD PTR $T14[ebp], xmm0
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000b6	f3 0f 11 45 d8	 movss	 DWORD PTR $T13[ebp], xmm0
  000bb	8d 45 e0	 lea	 eax, DWORD PTR $T15[ebp]
  000be	50		 push	 eax
  000bf	8d 4d dc	 lea	 ecx, DWORD PTR $T14[ebp]
  000c2	51		 push	 ecx
  000c3	8d 55 d8	 lea	 edx, DWORD PTR $T13[ebp]
  000c6	52		 push	 edx
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	83 c1 20	 add	 ecx, 32			; 00000020H
  000cd	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 47   : 			m_disabledDeactivationObject(1,0,0),

  000d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000da	f3 0f 11 45 d4	 movss	 DWORD PTR $T12[ebp], xmm0
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000e7	f3 0f 11 45 d0	 movss	 DWORD PTR $T11[ebp], xmm0
  000ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f4	f3 0f 11 45 cc	 movss	 DWORD PTR $T10[ebp], xmm0
  000f9	8d 45 d4	 lea	 eax, DWORD PTR $T12[ebp]
  000fc	50		 push	 eax
  000fd	8d 4d d0	 lea	 ecx, DWORD PTR $T11[ebp]
  00100	51		 push	 ecx
  00101	8d 55 cc	 lea	 edx, DWORD PTR $T10[ebp]
  00104	52		 push	 edx
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	83 c1 30	 add	 ecx, 48			; 00000030H
  0010b	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 48   : 			m_disabledSimulationObject(1,1,0),

  00110	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00118	f3 0f 11 45 c8	 movss	 DWORD PTR $T9[ebp], xmm0
  0011d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00125	f3 0f 11 45 c4	 movss	 DWORD PTR $T8[ebp], xmm0
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00132	f3 0f 11 45 c0	 movss	 DWORD PTR $T7[ebp], xmm0
  00137	8d 45 c8	 lea	 eax, DWORD PTR $T9[ebp]
  0013a	50		 push	 eax
  0013b	8d 4d c4	 lea	 ecx, DWORD PTR $T8[ebp]
  0013e	51		 push	 ecx
  0013f	8d 55 c0	 lea	 edx, DWORD PTR $T7[ebp]
  00142	52		 push	 edx
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	83 c1 40	 add	 ecx, 64			; 00000040H
  00149	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 49   : 			m_aabb(1,0,0),

  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00156	f3 0f 11 45 bc	 movss	 DWORD PTR $T6[ebp], xmm0
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00163	f3 0f 11 45 b8	 movss	 DWORD PTR $T5[ebp], xmm0
  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00170	f3 0f 11 45 b4	 movss	 DWORD PTR $T4[ebp], xmm0
  00175	8d 45 bc	 lea	 eax, DWORD PTR $T6[ebp]
  00178	50		 push	 eax
  00179	8d 4d b8	 lea	 ecx, DWORD PTR $T5[ebp]
  0017c	51		 push	 ecx
  0017d	8d 55 b4	 lea	 edx, DWORD PTR $T4[ebp]
  00180	52		 push	 edx
  00181	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	83 c1 50	 add	 ecx, 80			; 00000050H
  00187	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 50   : 			m_contactPoint(1,1,0)

  0018c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00194	f3 0f 11 45 b0	 movss	 DWORD PTR $T3[ebp], xmm0
  00199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001a1	f3 0f 11 45 ac	 movss	 DWORD PTR $T2[ebp], xmm0
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ae	f3 0f 11 45 a8	 movss	 DWORD PTR $T1[ebp], xmm0
  001b3	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  001b6	50		 push	 eax
  001b7	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  001ba	51		 push	 ecx
  001bb	8d 55 a8	 lea	 edx, DWORD PTR $T1[ebp]
  001be	52		 push	 edx
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	83 c1 60	 add	 ecx, 96			; 00000060H
  001c5	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 52   : 		}

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	5f		 pop	 edi
  001ce	83 c4 58	 add	 esp, 88			; 00000058H
  001d1	3b ec		 cmp	 ebp, esp
  001d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
??0DefaultColors@btIDebugDraw@@QAE@XZ ENDP		; btIDebugDraw::DefaultColors::DefaultColors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ??1btIDebugDraw@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btIDebugDraw@@UAE@XZ PROC				; btIDebugDraw::~btIDebugDraw, COMDAT
; _this$ = ecx

; 78   : 	virtual ~btIDebugDraw() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7btIDebugDraw@@6B@
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1btIDebugDraw@@UAE@XZ ENDP				; btIDebugDraw::~btIDebugDraw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?getDefaultColors@btIDebugDraw@@UBE?AUDefaultColors@1@XZ
_TEXT	SEGMENT
_colors$ = -128						; size = 112
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getDefaultColors@btIDebugDraw@@UBE?AUDefaultColors@1@XZ PROC ; btIDebugDraw::getDefaultColors, COMDAT
; _this$ = ecx

; 81   : 	virtual DefaultColors	getDefaultColors() const	{	DefaultColors colors;	return colors;	}

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-136]
  00025	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00035	8d 4d 80	 lea	 ecx, DWORD PTR _colors$[ebp]
  00038	e8 00 00 00 00	 call	 ??0DefaultColors@btIDebugDraw@@QAE@XZ ; btIDebugDraw::DefaultColors::DefaultColors
  0003d	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00042	8d 75 80	 lea	 esi, DWORD PTR _colors$[ebp]
  00045	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00048	f3 a5		 rep movsd
  0004a	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
  0004d	52		 push	 edx
  0004e	8b cd		 mov	 ecx, ebp
  00050	50		 push	 eax
  00051	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@getDefault
  00057	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005c	58		 pop	 eax
  0005d	5a		 pop	 edx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c2 04 00	 ret	 4
  00069	0f 1f 00	 npad	 3
$LN5@getDefault:
  0006c	01 00 00 00	 DD	 1
  00070	00 00 00 00	 DD	 $LN4@getDefault
$LN4@getDefault:
  00074	80 ff ff ff	 DD	 -128			; ffffff80H
  00078	70 00 00 00	 DD	 112			; 00000070H
  0007c	00 00 00 00	 DD	 $LN3@getDefault
$LN3@getDefault:
  00080	63		 DB	 99			; 00000063H
  00081	6f		 DB	 111			; 0000006fH
  00082	6c		 DB	 108			; 0000006cH
  00083	6f		 DB	 111			; 0000006fH
  00084	72		 DB	 114			; 00000072H
  00085	73		 DB	 115			; 00000073H
  00086	00		 DB	 0
?getDefaultColors@btIDebugDraw@@UBE?AUDefaultColors@1@XZ ENDP ; btIDebugDraw::getDefaultColors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?setDefaultColors@btIDebugDraw@@UAEXABUDefaultColors@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?setDefaultColors@btIDebugDraw@@UAEXABUDefaultColors@1@@Z PROC ; btIDebugDraw::setDefaultColors, COMDAT
; _this$ = ecx

; 83   : 	virtual void setDefaultColors(const DefaultColors& /*colors*/) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?setDefaultColors@btIDebugDraw@@UAEXABUDefaultColors@1@@Z ENDP ; btIDebugDraw::setDefaultColors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawLine@btIDebugDraw@@UAEXABVbtVector3@@000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_fromColor$ = 16					; size = 4
_toColor$ = 20						; size = 4
?drawLine@btIDebugDraw@@UAEXABVbtVector3@@000@Z PROC	; btIDebugDraw::drawLine, COMDAT
; _this$ = ecx

; 88   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :         (void) toColor;
; 90   : 		drawLine (from, to, fromColor);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 10	 mov	 eax, DWORD PTR _fromColor$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00028	ff d0		 call	 eax
  0002a	3b f4		 cmp	 esi, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 91   : 	}

  00031	5e		 pop	 esi
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?drawLine@btIDebugDraw@@UAEXABVbtVector3@@000@Z ENDP	; btIDebugDraw::drawLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawSphere@btIDebugDraw@@UAEXMABVbtTransform@@ABVbtVector3@@@Z
_TEXT	SEGMENT
$T1 = -144						; size = 16
_stepDegrees$ = -120					; size = 4
_maxPs$ = -116						; size = 4
_minPs$ = -112						; size = 4
_maxTh$ = -108						; size = 4
_minTh$ = -104						; size = 4
_axis$ = -96						; size = 16
_up$ = -64						; size = 16
_center$ = -32						; size = 16
_this$ = -4						; size = 4
_radius$ = 8						; size = 4
_transform$ = 12					; size = 4
_color$ = 16						; size = 4
?drawSphere@btIDebugDraw@@UAEXMABVbtTransform@@ABVbtVector3@@@Z PROC ; btIDebugDraw::drawSphere, COMDAT
; _this$ = ecx

; 94   : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-156]
  00025	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 		
; 96   : 		btVector3 center = transform.getOrigin();

  00035	8b 4b 0c	 mov	 ecx, DWORD PTR _transform$[ebx]
  00038	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 4d e0	 mov	 DWORD PTR _center$[ebp], ecx
  00042	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00045	89 55 e4	 mov	 DWORD PTR _center$[ebp+4], edx
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	89 4d e8	 mov	 DWORD PTR _center$[ebp+8], ecx
  0004e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00051	89 55 ec	 mov	 DWORD PTR _center$[ebp+12], edx

; 97   : 		btVector3 up = transform.getBasis().getColumn(1);

  00054	6a 01		 push	 1
  00056	8d 45 c0	 lea	 eax, DWORD PTR _up$[ebp]
  00059	50		 push	 eax
  0005a	8b 4b 0c	 mov	 ecx, DWORD PTR _transform$[ebx]
  0005d	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00062	8b c8		 mov	 ecx, eax
  00064	e8 00 00 00 00	 call	 ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ; btMatrix3x3::getColumn

; 98   : 		btVector3 axis = transform.getBasis().getColumn(0);

  00069	6a 00		 push	 0
  0006b	8d 4d a0	 lea	 ecx, DWORD PTR _axis$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 4b 0c	 mov	 ecx, DWORD PTR _transform$[ebx]
  00072	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00077	8b c8		 mov	 ecx, eax
  00079	e8 00 00 00 00	 call	 ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ; btMatrix3x3::getColumn

; 99   : 		btScalar minTh = -SIMD_HALF_PI;

  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00086	f3 0f 11 45 98	 movss	 DWORD PTR _minTh$[ebp], xmm0

; 100  : 		btScalar maxTh = SIMD_HALF_PI;

  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00093	f3 0f 11 45 94	 movss	 DWORD PTR _maxTh$[ebp], xmm0

; 101  : 		btScalar minPs = -SIMD_HALF_PI;

  00098	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  000a0	f3 0f 11 45 90	 movss	 DWORD PTR _minPs$[ebp], xmm0

; 102  : 		btScalar maxPs = SIMD_HALF_PI;

  000a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  000ad	f3 0f 11 45 8c	 movss	 DWORD PTR _maxPs$[ebp], xmm0

; 103  : 		btScalar stepDegrees = 30.f;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  000ba	f3 0f 11 45 88	 movss	 DWORD PTR _stepDegrees$[ebp], xmm0

; 104  : 		drawSpherePatch(center, up, axis, radius,minTh, maxTh, minPs, maxPs, color, stepDegrees ,false);

  000bf	8b f4		 mov	 esi, esp
  000c1	6a 00		 push	 0
  000c3	51		 push	 ecx
  000c4	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _stepDegrees$[ebp]
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	8b 53 10	 mov	 edx, DWORD PTR _color$[ebx]
  000d1	52		 push	 edx
  000d2	51		 push	 ecx
  000d3	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _maxPs$[ebp]
  000d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dd	51		 push	 ecx
  000de	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _minPs$[ebp]
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	51		 push	 ecx
  000e9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _maxTh$[ebp]
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _minTh$[ebp]
  000f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fe	51		 push	 ecx
  000ff	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	8d 45 a0	 lea	 eax, DWORD PTR _axis$[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d c0	 lea	 ecx, DWORD PTR _up$[ebp]
  00110	51		 push	 ecx
  00111	8d 55 e0	 lea	 edx, DWORD PTR _center$[ebp]
  00114	52		 push	 edx
  00115	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00118	8b 10		 mov	 edx, DWORD PTR [eax]
  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00120	ff d0		 call	 eax
  00122	3b f4		 cmp	 esi, esp
  00124	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  : 		drawSpherePatch(center, up, -axis, radius,minTh, maxTh, minPs, maxPs, color, stepDegrees,false );

  00129	8b f4		 mov	 esi, esp
  0012b	6a 00		 push	 0
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _stepDegrees$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  0013b	51		 push	 ecx
  0013c	51		 push	 ecx
  0013d	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _maxPs$[ebp]
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	51		 push	 ecx
  00148	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _minPs$[ebp]
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	51		 push	 ecx
  00153	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _maxTh$[ebp]
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _minTh$[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  0016e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00173	8d 55 a0	 lea	 edx, DWORD PTR _axis$[ebp]
  00176	52		 push	 edx
  00177	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@@Z ; operator-
  00183	83 c4 08	 add	 esp, 8
  00186	50		 push	 eax
  00187	8d 4d c0	 lea	 ecx, DWORD PTR _up$[ebp]
  0018a	51		 push	 ecx
  0018b	8d 55 e0	 lea	 edx, DWORD PTR _center$[ebp]
  0018e	52		 push	 edx
  0018f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00192	8b 10		 mov	 edx, DWORD PTR [eax]
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0019a	ff d0		 call	 eax
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : 	}

  001a3	52		 push	 edx
  001a4	8b cd		 mov	 ecx, ebp
  001a6	50		 push	 eax
  001a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@drawSphere
  001ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b2	58		 pop	 eax
  001b3	5a		 pop	 edx
  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	8b e3		 mov	 esp, ebx
  001bb	5b		 pop	 ebx
  001bc	c2 0c 00	 ret	 12			; 0000000cH
  001bf	90		 npad	 1
$LN7@drawSphere:
  001c0	03 00 00 00	 DD	 3
  001c4	00 00 00 00	 DD	 $LN6@drawSphere
$LN6@drawSphere:
  001c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001cc	10 00 00 00	 DD	 16			; 00000010H
  001d0	00 00 00 00	 DD	 $LN3@drawSphere
  001d4	c0 ff ff ff	 DD	 -64			; ffffffc0H
  001d8	10 00 00 00	 DD	 16			; 00000010H
  001dc	00 00 00 00	 DD	 $LN4@drawSphere
  001e0	a0 ff ff ff	 DD	 -96			; ffffffa0H
  001e4	10 00 00 00	 DD	 16			; 00000010H
  001e8	00 00 00 00	 DD	 $LN5@drawSphere
$LN5@drawSphere:
  001ec	61		 DB	 97			; 00000061H
  001ed	78		 DB	 120			; 00000078H
  001ee	69		 DB	 105			; 00000069H
  001ef	73		 DB	 115			; 00000073H
  001f0	00		 DB	 0
$LN4@drawSphere:
  001f1	75		 DB	 117			; 00000075H
  001f2	70		 DB	 112			; 00000070H
  001f3	00		 DB	 0
$LN3@drawSphere:
  001f4	63		 DB	 99			; 00000063H
  001f5	65		 DB	 101			; 00000065H
  001f6	6e		 DB	 110			; 0000006eH
  001f7	74		 DB	 116			; 00000074H
  001f8	65		 DB	 101			; 00000065H
  001f9	72		 DB	 114			; 00000072H
  001fa	00		 DB	 0
?drawSphere@btIDebugDraw@@UAEXMABVbtTransform@@ABVbtVector3@@@Z ENDP ; btIDebugDraw::drawSphere
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawSphere@btIDebugDraw@@UAEXABVbtVector3@@M0@Z
_TEXT	SEGMENT
_tr$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_radius$ = 12						; size = 4
_color$ = 16						; size = 4
?drawSphere@btIDebugDraw@@UAEXABVbtVector3@@M0@Z PROC	; btIDebugDraw::drawSphere, COMDAT
; _this$ = ecx

; 109  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0001f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 110  : 		btTransform tr;

  00039	8d 4d b0	 lea	 ecx, DWORD PTR _tr$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0btTransform@@QAE@XZ	; btTransform::btTransform

; 111  : 		tr.setIdentity();

  00041	8d 4d b0	 lea	 ecx, DWORD PTR _tr$[ebp]
  00044	e8 00 00 00 00	 call	 ?setIdentity@btTransform@@QAEXXZ ; btTransform::setIdentity

; 112  : 		tr.setOrigin(p);

  00049	8b 43 08	 mov	 eax, DWORD PTR _p$[ebx]
  0004c	50		 push	 eax
  0004d	8d 4d b0	 lea	 ecx, DWORD PTR _tr$[ebp]
  00050	e8 00 00 00 00	 call	 ?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin

; 113  : 		drawSphere(radius,tr,color);

  00055	8b f4		 mov	 esi, esp
  00057	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  0005a	51		 push	 ecx
  0005b	8d 55 b0	 lea	 edx, DWORD PTR _tr$[ebp]
  0005e	52		 push	 edx
  0005f	51		 push	 ecx
  00060	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 10		 mov	 edx, DWORD PTR [eax]
  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00075	ff d0		 call	 eax
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  : 	}

  0007e	52		 push	 edx
  0007f	8b cd		 mov	 ecx, ebp
  00081	50		 push	 eax
  00082	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@drawSphere
  00088	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008d	58		 pop	 eax
  0008e	5a		 pop	 edx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	8b e3		 mov	 esp, ebx
  000a0	5b		 pop	 ebx
  000a1	c2 0c 00	 ret	 12			; 0000000cH
$LN5@drawSphere:
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN4@drawSphere
$LN4@drawSphere:
  000ac	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000b0	40 00 00 00	 DD	 64			; 00000040H
  000b4	00 00 00 00	 DD	 $LN3@drawSphere
$LN3@drawSphere:
  000b8	74		 DB	 116			; 00000074H
  000b9	72		 DB	 114			; 00000072H
  000ba	00		 DB	 0
?drawSphere@btIDebugDraw@@UAEXABVbtVector3@@M0@Z ENDP	; btIDebugDraw::drawSphere
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000000M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
_color$ = 32						; size = 4
_alpha$ = 36						; size = 4
?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000000M@Z PROC ; btIDebugDraw::drawTriangle, COMDAT
; _this$ = ecx

; 117  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 		drawTriangle(v0,v1,v2,color,alpha);

  0000f	8b f4		 mov	 esi, esp
  00011	51		 push	 ecx
  00012	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _alpha$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	8b 45 20	 mov	 eax, DWORD PTR _color$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _v2$[ebp]
  00023	51		 push	 ecx
  00024	8b 55 0c	 mov	 edx, DWORD PTR _v1$[ebp]
  00027	52		 push	 edx
  00028	8b 45 08	 mov	 eax, DWORD PTR _v0$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00037	ff d0		 call	 eax
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 119  : 	}

  00040	5e		 pop	 esi
  00041	83 c4 04	 add	 esp, 4
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 20 00	 ret	 32			; 00000020H
?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000000M@Z ENDP ; btIDebugDraw::drawTriangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_color$ = 20						; size = 4
___formal$ = 24						; size = 4
?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000M@Z PROC ; btIDebugDraw::drawTriangle, COMDAT
; _this$ = ecx

; 121  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 		drawLine(v0,v1,color);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 14	 mov	 eax, DWORD PTR _color$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _v1$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR _v0$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00028	ff d0		 call	 eax
  0002a	3b f4		 cmp	 esi, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 		drawLine(v1,v2,color);

  00031	8b f4		 mov	 esi, esp
  00033	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 10	 mov	 edx, DWORD PTR _v2$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004a	ff d0		 call	 eax
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 124  : 		drawLine(v2,v0,color);

  00053	8b f4		 mov	 esi, esp
  00055	8b 4d 14	 mov	 ecx, DWORD PTR _color$[ebp]
  00058	51		 push	 ecx
  00059	8b 55 08	 mov	 edx, DWORD PTR _v0$[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 10	 mov	 eax, DWORD PTR _v2$[ebp]
  00060	50		 push	 eax
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0006c	ff d0		 call	 eax
  0006e	3b f4		 cmp	 esi, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 	}

  00075	5e		 pop	 esi
  00076	83 c4 04	 add	 esp, 4
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 14 00	 ret	 20			; 00000014H
?drawTriangle@btIDebugDraw@@UAEXABVbtVector3@@000M@Z ENDP ; btIDebugDraw::drawTriangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawAabb@btIDebugDraw@@UAEXABVbtVector3@@00@Z
_TEXT	SEGMENT
tv214 = -368						; size = 4
tv160 = -364						; size = 4
$T1 = -360						; size = 4
$T2 = -356						; size = 4
$T3 = -352						; size = 4
$T4 = -348						; size = 4
$T5 = -344						; size = 4
$T6 = -340						; size = 4
$T7 = -336						; size = 4
$T8 = -332						; size = 4
$T9 = -328						; size = 4
$T10 = -324						; size = 4
$T11 = -320						; size = 4
$T12 = -316						; size = 4
$T13 = -312						; size = 4
$T14 = -308						; size = 4
$T15 = -304						; size = 16
$T16 = -288						; size = 16
_othercoord$17 = -260					; size = 4
$T18 = -256						; size = 16
_pb$ = -224						; size = 16
_pa$ = -192						; size = 16
_edgecoord$ = -160					; size = 16
_j$ = -136						; size = 4
_i$ = -132						; size = 4
$T19 = -128						; size = 16
_center$ = -96						; size = 16
$T20 = -64						; size = 16
_halfExtents$ = -32					; size = 16
_this$ = -4						; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_color$ = 16						; size = 4
?drawAabb@btIDebugDraw@@UAEXABVbtVector3@@00@Z PROC	; btIDebugDraw::drawAabb, COMDAT
; _this$ = ecx

; 138  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 88 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-376]
  00025	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 
; 140  : 		btVector3 halfExtents = (to-from)* 0.5f;

  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0003d	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR $T14[ebp], xmm0
  00045	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0004b	50		 push	 eax
  0004c	8b 4b 08	 mov	 ecx, DWORD PTR _from$[ebx]
  0004f	51		 push	 ecx
  00050	8b 53 0c	 mov	 edx, DWORD PTR _to$[ebx]
  00053	52		 push	 edx
  00054	8d 45 c0	 lea	 eax, DWORD PTR $T20[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	50		 push	 eax
  00061	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : 		btVector3 center = (to+from) *0.5f;

  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00075	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR $T13[ebp], xmm0
  0007d	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  00083	52		 push	 edx
  00084	8b 43 08	 mov	 eax, DWORD PTR _from$[ebx]
  00087	50		 push	 eax
  00088	8b 4b 0c	 mov	 ecx, DWORD PTR _to$[ebx]
  0008b	51		 push	 ecx
  0008c	8d 55 80	 lea	 edx, DWORD PTR $T19[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	50		 push	 eax
  00099	8d 45 a0	 lea	 eax, DWORD PTR _center$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 142  : 		int i,j;
; 143  : 
; 144  : 		btVector3 edgecoord(1.f,1.f,1.f),pa,pb;

  000a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ad	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR $T12[ebp], xmm0
  000b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bd	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR $T11[ebp], xmm0
  000c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000cd	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR $T10[ebp], xmm0
  000d5	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  000db	51		 push	 ecx
  000dc	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR $T11[ebp]
  000e2	52		 push	 edx
  000e3	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  000e9	50		 push	 eax
  000ea	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  000f0	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  000f5	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _pa$[ebp]
  000fb	e8 00 00 00 00	 call	 ??0btVector3@@QAE@XZ	; btVector3::btVector3
  00100	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _pb$[ebp]
  00106	e8 00 00 00 00	 call	 ??0btVector3@@QAE@XZ	; btVector3::btVector3

; 145  : 		for (i=0;i<4;i++)

  0010b	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00115	eb 0f		 jmp	 SHORT $LN4@drawAabb
$LN2@drawAabb:
  00117	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0011d	83 c1 01	 add	 ecx, 1
  00120	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx
$LN4@drawAabb:
  00126	83 bd 7c ff ff
	ff 04		 cmp	 DWORD PTR _i$[ebp], 4
  0012d	0f 8d 40 03 00
	00		 jge	 $LN3@drawAabb

; 146  : 		{
; 147  : 			for (j=0;j<3;j++)

  00133	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  0013d	eb 0f		 jmp	 SHORT $LN7@drawAabb
$LN5@drawAabb:
  0013f	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00145	83 c2 01	 add	 edx, 1
  00148	89 95 78 ff ff
	ff		 mov	 DWORD PTR _j$[ebp], edx
$LN7@drawAabb:
  0014e	83 bd 78 ff ff
	ff 03		 cmp	 DWORD PTR _j$[ebp], 3
  00155	0f 8d 61 02 00
	00		 jge	 $LN6@drawAabb

; 148  : 			{
; 149  : 				pa = btVector3(edgecoord[0]*halfExtents[0], edgecoord[1]*halfExtents[1],		

  0015b	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  00161	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00166	8b f0		 mov	 esi, eax
  00168	bf 04 00 00 00	 mov	 edi, 4
  0016d	d1 e7		 shl	 edi, 1
  0016f	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  00172	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00177	b9 04 00 00 00	 mov	 ecx, 4
  0017c	d1 e1		 shl	 ecx, 1
  0017e	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  00183	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00188	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR $T9[ebp], xmm0
  00190	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  00196	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0019b	8b f0		 mov	 esi, eax
  0019d	bf 04 00 00 00	 mov	 edi, 4
  001a2	c1 e7 00	 shl	 edi, 0
  001a5	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  001a8	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  001ad	ba 04 00 00 00	 mov	 edx, 4
  001b2	c1 e2 00	 shl	 edx, 0
  001b5	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  001ba	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  001bf	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  001c7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  001cd	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  001d2	8b f0		 mov	 esi, eax
  001d4	b8 04 00 00 00	 mov	 eax, 4
  001d9	6b f8 00	 imul	 edi, eax, 0
  001dc	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  001df	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  001e4	b9 04 00 00 00	 mov	 ecx, 4
  001e9	6b d1 00	 imul	 edx, ecx, 0
  001ec	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  001f1	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  001f6	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR $T7[ebp], xmm0
  001fe	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00204	50		 push	 eax
  00205	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0020b	51		 push	 ecx
  0020c	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  00212	52		 push	 edx
  00213	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  00219	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0021e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00220	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _pa$[ebp], ecx
  00226	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00229	89 95 44 ff ff
	ff		 mov	 DWORD PTR _pa$[ebp+4], edx
  0022f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00232	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _pa$[ebp+8], ecx
  00238	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0023b	89 95 4c ff ff
	ff		 mov	 DWORD PTR _pa$[ebp+12], edx

; 150  : 					edgecoord[2]*halfExtents[2]);
; 151  : 				pa+=center;

  00241	8d 45 a0	 lea	 eax, DWORD PTR _center$[ebp]
  00244	50		 push	 eax
  00245	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _pa$[ebp]
  0024b	e8 00 00 00 00	 call	 ??YbtVector3@@QAEAAV0@ABV0@@Z ; btVector3::operator+=

; 152  : 
; 153  : 				int othercoord = j%3;

  00250	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00256	99		 cdq
  00257	b9 03 00 00 00	 mov	 ecx, 3
  0025c	f7 f9		 idiv	 ecx
  0025e	89 95 fc fe ff
	ff		 mov	 DWORD PTR _othercoord$17[ebp], edx

; 154  : 				edgecoord[othercoord]*=-1.f;

  00264	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  0026a	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0026f	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _othercoord$17[ebp]
  00275	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00278	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv160[ebp], eax
  0027e	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR tv160[ebp]
  00284	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00288	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  00290	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR tv160[ebp]
  00296	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 155  : 				pb = btVector3(edgecoord[0]*halfExtents[0], edgecoord[1]*halfExtents[1],	

  0029a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  002a0	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  002a5	8b f0		 mov	 esi, eax
  002a7	bf 04 00 00 00	 mov	 edi, 4
  002ac	d1 e7		 shl	 edi, 1
  002ae	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  002b1	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  002b6	b9 04 00 00 00	 mov	 ecx, 4
  002bb	d1 e1		 shl	 ecx, 1
  002bd	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  002c2	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  002c7	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  002cf	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  002d5	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  002da	8b f0		 mov	 esi, eax
  002dc	bf 04 00 00 00	 mov	 edi, 4
  002e1	c1 e7 00	 shl	 edi, 0
  002e4	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  002e7	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  002ec	ba 04 00 00 00	 mov	 edx, 4
  002f1	c1 e2 00	 shl	 edx, 0
  002f4	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  002f9	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  002fe	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  00306	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  0030c	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00311	8b f0		 mov	 esi, eax
  00313	b8 04 00 00 00	 mov	 eax, 4
  00318	6b f8 00	 imul	 edi, eax, 0
  0031b	8d 4d e0	 lea	 ecx, DWORD PTR _halfExtents$[ebp]
  0031e	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00323	b9 04 00 00 00	 mov	 ecx, 4
  00328	6b d1 00	 imul	 edx, ecx, 0
  0032b	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  00330	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00335	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  0033d	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00343	50		 push	 eax
  00344	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0034a	51		 push	 ecx
  0034b	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00351	52		 push	 edx
  00352	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00358	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0035d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035f	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _pb$[ebp], ecx
  00365	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00368	89 95 24 ff ff
	ff		 mov	 DWORD PTR _pb$[ebp+4], edx
  0036e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00371	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _pb$[ebp+8], ecx
  00377	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0037a	89 95 2c ff ff
	ff		 mov	 DWORD PTR _pb$[ebp+12], edx

; 156  : 					edgecoord[2]*halfExtents[2]);
; 157  : 				pb+=center;

  00380	8d 45 a0	 lea	 eax, DWORD PTR _center$[ebp]
  00383	50		 push	 eax
  00384	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _pb$[ebp]
  0038a	e8 00 00 00 00	 call	 ??YbtVector3@@QAEAAV0@ABV0@@Z ; btVector3::operator+=

; 158  : 
; 159  : 				drawLine(pa,pb,color);

  0038f	8b f4		 mov	 esi, esp
  00391	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  00394	51		 push	 ecx
  00395	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR _pb$[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _pa$[ebp]
  003a2	50		 push	 eax
  003a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  003a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ab	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003ae	ff d0		 call	 eax
  003b0	3b f4		 cmp	 esi, esp
  003b2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 160  : 			}

  003b7	e9 83 fd ff ff	 jmp	 $LN5@drawAabb
$LN6@drawAabb:

; 161  : 			edgecoord = btVector3(-1.f,-1.f,-1.f);

  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003c4	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  003cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003d4	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  003dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003e4	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  003ec	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  003f2	51		 push	 ecx
  003f3	8d 95 9c fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  003f9	52		 push	 edx
  003fa	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00400	50		 push	 eax
  00401	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00407	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0040c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0040e	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _edgecoord$[ebp], ecx
  00414	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00417	89 95 64 ff ff
	ff		 mov	 DWORD PTR _edgecoord$[ebp+4], edx
  0041d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00420	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _edgecoord$[ebp+8], ecx
  00426	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00429	89 95 6c ff ff
	ff		 mov	 DWORD PTR _edgecoord$[ebp+12], edx

; 162  : 			if (i<3)

  0042f	83 bd 7c ff ff
	ff 03		 cmp	 DWORD PTR _i$[ebp], 3
  00436	7d 36		 jge	 SHORT $LN8@drawAabb

; 163  : 				edgecoord[i]*=-1.f;

  00438	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _edgecoord$[ebp]
  0043e	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00443	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00449	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0044c	89 95 90 fe ff
	ff		 mov	 DWORD PTR tv214[ebp], edx
  00452	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR tv214[ebp]
  00458	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0045c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  00464	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  0046a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
$LN8@drawAabb:

; 164  : 		}

  0046e	e9 a4 fc ff ff	 jmp	 $LN2@drawAabb
$LN3@drawAabb:

; 165  : 	}

  00473	52		 push	 edx
  00474	8b cd		 mov	 ecx, ebp
  00476	50		 push	 eax
  00477	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@drawAabb
  0047d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00482	58		 pop	 eax
  00483	5a		 pop	 edx
  00484	5f		 pop	 edi
  00485	5e		 pop	 esi
  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	8b e3		 mov	 esp, ebx
  0048b	5b		 pop	 ebx
  0048c	c2 0c 00	 ret	 12			; 0000000cH
  0048f	90		 npad	 1
$LN16@drawAabb:
  00490	05 00 00 00	 DD	 5
  00494	00 00 00 00	 DD	 $LN15@drawAabb
$LN15@drawAabb:
  00498	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0049c	10 00 00 00	 DD	 16			; 00000010H
  004a0	00 00 00 00	 DD	 $LN10@drawAabb
  004a4	a0 ff ff ff	 DD	 -96			; ffffffa0H
  004a8	10 00 00 00	 DD	 16			; 00000010H
  004ac	00 00 00 00	 DD	 $LN11@drawAabb
  004b0	60 ff ff ff	 DD	 -160			; ffffff60H
  004b4	10 00 00 00	 DD	 16			; 00000010H
  004b8	00 00 00 00	 DD	 $LN12@drawAabb
  004bc	40 ff ff ff	 DD	 -192			; ffffff40H
  004c0	10 00 00 00	 DD	 16			; 00000010H
  004c4	00 00 00 00	 DD	 $LN13@drawAabb
  004c8	20 ff ff ff	 DD	 -224			; ffffff20H
  004cc	10 00 00 00	 DD	 16			; 00000010H
  004d0	00 00 00 00	 DD	 $LN14@drawAabb
$LN14@drawAabb:
  004d4	70		 DB	 112			; 00000070H
  004d5	62		 DB	 98			; 00000062H
  004d6	00		 DB	 0
$LN13@drawAabb:
  004d7	70		 DB	 112			; 00000070H
  004d8	61		 DB	 97			; 00000061H
  004d9	00		 DB	 0
$LN12@drawAabb:
  004da	65		 DB	 101			; 00000065H
  004db	64		 DB	 100			; 00000064H
  004dc	67		 DB	 103			; 00000067H
  004dd	65		 DB	 101			; 00000065H
  004de	63		 DB	 99			; 00000063H
  004df	6f		 DB	 111			; 0000006fH
  004e0	6f		 DB	 111			; 0000006fH
  004e1	72		 DB	 114			; 00000072H
  004e2	64		 DB	 100			; 00000064H
  004e3	00		 DB	 0
$LN11@drawAabb:
  004e4	63		 DB	 99			; 00000063H
  004e5	65		 DB	 101			; 00000065H
  004e6	6e		 DB	 110			; 0000006eH
  004e7	74		 DB	 116			; 00000074H
  004e8	65		 DB	 101			; 00000065H
  004e9	72		 DB	 114			; 00000072H
  004ea	00		 DB	 0
$LN10@drawAabb:
  004eb	68		 DB	 104			; 00000068H
  004ec	61		 DB	 97			; 00000061H
  004ed	6c		 DB	 108			; 0000006cH
  004ee	66		 DB	 102			; 00000066H
  004ef	45		 DB	 69			; 00000045H
  004f0	78		 DB	 120			; 00000078H
  004f1	74		 DB	 116			; 00000074H
  004f2	65		 DB	 101			; 00000065H
  004f3	6e		 DB	 110			; 0000006eH
  004f4	74		 DB	 116			; 00000074H
  004f5	73		 DB	 115			; 00000073H
  004f6	00		 DB	 0
?drawAabb@btIDebugDraw@@UAEXABVbtVector3@@00@Z ENDP	; btIDebugDraw::drawAabb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawTransform@btIDebugDraw@@UAEXABVbtTransform@@M@Z
_TEXT	SEGMENT
$T1 = -300						; size = 4
$T2 = -296						; size = 4
$T3 = -292						; size = 4
$T4 = -288						; size = 4
$T5 = -284						; size = 4
$T6 = -280						; size = 4
$T7 = -276						; size = 4
$T8 = -272						; size = 4
$T9 = -268						; size = 4
$T10 = -264						; size = 4
$T11 = -260						; size = 4
$T12 = -256						; size = 4
$T13 = -252						; size = 4
$T14 = -248						; size = 4
$T15 = -244						; size = 4
$T16 = -240						; size = 16
$T17 = -224						; size = 16
$T18 = -208						; size = 16
$T19 = -192						; size = 16
$T20 = -176						; size = 16
$T21 = -160						; size = 16
$T22 = -144						; size = 16
$T23 = -128						; size = 16
$T24 = -112						; size = 16
$T25 = -96						; size = 16
$T26 = -80						; size = 16
$T27 = -64						; size = 16
_start$ = -32						; size = 16
_this$ = -4						; size = 4
_transform$ = 8						; size = 4
_orthoLen$ = 12						; size = 4
?drawTransform@btIDebugDraw@@UAEXABVbtTransform@@M@Z PROC ; btIDebugDraw::drawTransform, COMDAT
; _this$ = ecx

; 167  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00025	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 168  : 		btVector3 start = transform.getOrigin();

  00035	8b 4b 08	 mov	 ecx, DWORD PTR _transform$[ebx]
  00038	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 4d e0	 mov	 DWORD PTR _start$[ebp], ecx
  00042	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00045	89 55 e4	 mov	 DWORD PTR _start$[ebp+4], edx
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	89 4d e8	 mov	 DWORD PTR _start$[ebp+8], ecx
  0004e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00051	89 55 ec	 mov	 DWORD PTR _start$[ebp+12], edx

; 169  : 		drawLine(start, start+transform.getBasis() * btVector3(orthoLen, 0, 0), btVector3(0.7f,0,0));

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0005c	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR $T15[ebp], xmm0
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0006c	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR $T14[ebp], xmm0
  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0007c	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR $T13[ebp], xmm0
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0008c	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR $T12[ebp], xmm0
  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0009c	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR $T11[ebp], xmm0
  000a4	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  000aa	50		 push	 eax
  000ab	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  000b1	51		 push	 ecx
  000b2	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  000b8	52		 push	 edx
  000b9	8d 4d 90	 lea	 ecx, DWORD PTR $T24[ebp]
  000bc	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  000c1	8b f4		 mov	 esi, esp
  000c3	50		 push	 eax
  000c4	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  000ca	50		 push	 eax
  000cb	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  000d1	51		 push	 ecx
  000d2	8d 53 0c	 lea	 edx, DWORD PTR _orthoLen$[ebx]
  000d5	52		 push	 edx
  000d6	8d 4d c0	 lea	 ecx, DWORD PTR $T27[ebp]
  000d9	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  000de	50		 push	 eax
  000df	8b 4b 08	 mov	 ecx, DWORD PTR _transform$[ebx]
  000e2	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  000e7	50		 push	 eax
  000e8	8d 45 b0	 lea	 eax, DWORD PTR $T26[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f4	50		 push	 eax
  000f5	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  000f8	51		 push	 ecx
  000f9	8d 55 a0	 lea	 edx, DWORD PTR $T25[ebp]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	50		 push	 eax
  00106	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00115	ff d0		 call	 eax
  00117	3b f4		 cmp	 esi, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  : 		drawLine(start, start+transform.getBasis() * btVector3(0, orthoLen, 0), btVector3(0,0.7f,0));

  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00126	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR $T10[ebp], xmm0
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00136	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR $T9[ebp], xmm0
  0013e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00146	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00156	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR $T7[ebp], xmm0
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00166	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  0016e	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00174	51		 push	 ecx
  00175	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  0017b	52		 push	 edx
  0017c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00182	50		 push	 eax
  00183	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00189	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0018e	8b f4		 mov	 esi, esp
  00190	50		 push	 eax
  00191	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00197	51		 push	 ecx
  00198	8d 53 0c	 lea	 edx, DWORD PTR _orthoLen$[ebx]
  0019b	52		 push	 edx
  0019c	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  001a2	50		 push	 eax
  001a3	8d 4d 80	 lea	 ecx, DWORD PTR $T23[ebp]
  001a6	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  001ab	50		 push	 eax
  001ac	8b 4b 08	 mov	 ecx, DWORD PTR _transform$[ebx]
  001af	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  001b4	50		 push	 eax
  001b5	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  001bb	51		 push	 ecx
  001bc	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  001c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c4	50		 push	 eax
  001c5	8d 55 e0	 lea	 edx, DWORD PTR _start$[ebp]
  001c8	52		 push	 edx
  001c9	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  001d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d8	50		 push	 eax
  001d9	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  001dc	51		 push	 ecx
  001dd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e0	8b 02		 mov	 eax, DWORD PTR [edx]
  001e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  001e8	ff d2		 call	 edx
  001ea	3b f4		 cmp	 esi, esp
  001ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  : 		drawLine(start, start+transform.getBasis() * btVector3(0, 0, orthoLen), btVector3(0,0,0.7f));

  001f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  001f9	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00209	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00219	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  00221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00229	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  00231	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00239	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00241	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00247	50		 push	 eax
  00248	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0024e	51		 push	 ecx
  0024f	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00255	52		 push	 edx
  00256	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  0025c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00261	8b f4		 mov	 esi, esp
  00263	50		 push	 eax
  00264	8d 43 0c	 lea	 eax, DWORD PTR _orthoLen$[ebx]
  00267	50		 push	 eax
  00268	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0026e	51		 push	 ecx
  0026f	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00275	52		 push	 edx
  00276	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  0027c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00281	50		 push	 eax
  00282	8b 4b 08	 mov	 ecx, DWORD PTR _transform$[ebx]
  00285	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  0028a	50		 push	 eax
  0028b	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	50		 push	 eax
  0029b	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  0029e	51		 push	 ecx
  0029f	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T17[ebp]
  002a5	52		 push	 edx
  002a6	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  002ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ae	50		 push	 eax
  002af	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  002b2	50		 push	 eax
  002b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002bb	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002be	ff d0		 call	 eax
  002c0	3b f4		 cmp	 esi, esp
  002c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 172  : 	}

  002c7	52		 push	 edx
  002c8	8b cd		 mov	 ecx, ebp
  002ca	50		 push	 eax
  002cb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@drawTransf
  002d1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002d6	58		 pop	 eax
  002d7	5a		 pop	 edx
  002d8	5f		 pop	 edi
  002d9	5e		 pop	 esi
  002da	8b e5		 mov	 esp, ebp
  002dc	5d		 pop	 ebp
  002dd	8b e3		 mov	 esp, ebx
  002df	5b		 pop	 ebx
  002e0	c2 08 00	 ret	 8
  002e3	90		 npad	 1
$LN5@drawTransf:
  002e4	01 00 00 00	 DD	 1
  002e8	00 00 00 00	 DD	 $LN4@drawTransf
$LN4@drawTransf:
  002ec	e0 ff ff ff	 DD	 -32			; ffffffe0H
  002f0	10 00 00 00	 DD	 16			; 00000010H
  002f4	00 00 00 00	 DD	 $LN3@drawTransf
$LN3@drawTransf:
  002f8	73		 DB	 115			; 00000073H
  002f9	74		 DB	 116			; 00000074H
  002fa	61		 DB	 97			; 00000061H
  002fb	72		 DB	 114			; 00000072H
  002fc	74		 DB	 116			; 00000074H
  002fd	00		 DB	 0
?drawTransform@btIDebugDraw@@UAEXABVbtTransform@@M@Z ENDP ; btIDebugDraw::drawTransform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawArc@btIDebugDraw@@UAEXABVbtVector3@@00MMMM0_NM@Z
_TEXT	SEGMENT
$T1 = -304						; size = 4
$T2 = -300						; size = 4
$T3 = -296						; size = 4
$T4 = -292						; size = 4
$T5 = -288						; size = 16
$T6 = -272						; size = 16
$T7 = -256						; size = 16
$T8 = -240						; size = 16
$T9 = -224						; size = 16
_next$10 = -192						; size = 16
_angle$11 = -168					; size = 4
_i$12 = -164						; size = 4
$T13 = -160						; size = 16
$T14 = -144						; size = 16
$T15 = -128						; size = 16
$T16 = -112						; size = 16
$T17 = -96						; size = 16
_prev$ = -64						; size = 16
_nSteps$ = -44						; size = 4
_step$ = -40						; size = 4
_vy$ = -32						; size = 16
_vx$ = -8						; size = 4
_this$ = -4						; size = 4
_center$ = 8						; size = 4
_normal$ = 12						; size = 4
_axis$ = 16						; size = 4
_radiusA$ = 20						; size = 4
_radiusB$ = 24						; size = 4
_minAngle$ = 28						; size = 4
_maxAngle$ = 32						; size = 4
_color$ = 36						; size = 4
_drawSect$ = 40						; size = 1
_stepDegrees$ = 44					; size = 4
?drawArc@btIDebugDraw@@UAEXABVbtVector3@@00MMMM0_NM@Z PROC ; btIDebugDraw::drawArc, COMDAT
; _this$ = ecx

; 176  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00025	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 		const btVector3& vx = axis;

  00035	8b 43 10	 mov	 eax, DWORD PTR _axis$[ebx]
  00038	89 45 f8	 mov	 DWORD PTR _vx$[ebp], eax

; 178  : 		btVector3 vy = normal.cross(axis);

  0003b	8b 4b 10	 mov	 ecx, DWORD PTR _axis$[ebx]
  0003e	51		 push	 ecx
  0003f	8d 55 e0	 lea	 edx, DWORD PTR _vy$[ebp]
  00042	52		 push	 edx
  00043	8b 4b 0c	 mov	 ecx, DWORD PTR _normal$[ebx]
  00046	e8 00 00 00 00	 call	 ?cross@btVector3@@QBE?AV1@ABV1@@Z ; btVector3::cross

; 179  : 		btScalar step = stepDegrees * SIMD_RADS_PER_DEG;

  0004b	f3 0f 10 43 2c	 movss	 xmm0, DWORD PTR _stepDegrees$[ebx]
  00050	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00058	f3 0f 11 45 d8	 movss	 DWORD PTR _step$[ebp], xmm0

; 180  : 		int nSteps = (int)btFabs((maxAngle - minAngle) / step);

  0005d	f3 0f 10 43 20	 movss	 xmm0, DWORD PTR _maxAngle$[ebx]
  00062	f3 0f 5c 43 1c	 subss	 xmm0, DWORD PTR _minAngle$[ebx]
  00067	f3 0f 5e 45 d8	 divss	 xmm0, DWORD PTR _step$[ebp]
  0006c	51		 push	 ecx
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	e8 00 00 00 00	 call	 ?btFabs@@YAMM@Z		; btFabs
  00077	83 c4 04	 add	 esp, 4
  0007a	e8 00 00 00 00	 call	 __ftol2_sse
  0007f	89 45 d4	 mov	 DWORD PTR _nSteps$[ebp], eax

; 181  : 		if(!nSteps) nSteps = 1;

  00082	83 7d d4 00	 cmp	 DWORD PTR _nSteps$[ebp], 0
  00086	75 07		 jne	 SHORT $LN5@drawArc
  00088	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _nSteps$[ebp], 1
$LN5@drawArc:

; 182  : 		btVector3 prev = center + radiusA * vx * btCos(minAngle) + radiusB * vy * btSin(minAngle);

  0008f	51		 push	 ecx
  00090	f3 0f 10 43 1c	 movss	 xmm0, DWORD PTR _minAngle$[ebx]
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  0009f	83 c4 04	 add	 esp, 4
  000a2	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  000a8	51		 push	 ecx
  000a9	f3 0f 10 43 1c	 movss	 xmm0, DWORD PTR _minAngle$[ebx]
  000ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b3	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  000b8	83 c4 04	 add	 esp, 4
  000bb	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  000c1	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  000c7	50		 push	 eax
  000c8	8d 4d e0	 lea	 ecx, DWORD PTR _vy$[ebp]
  000cb	51		 push	 ecx
  000cc	8d 53 18	 lea	 edx, DWORD PTR _radiusB$[ebx]
  000cf	52		 push	 edx
  000d0	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	50		 push	 eax
  000e0	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	50		 push	 eax
  000f0	8d 95 d8 fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  000f6	52		 push	 edx
  000f7	8b 45 f8	 mov	 eax, DWORD PTR _vx$[ebp]
  000fa	50		 push	 eax
  000fb	8d 4b 14	 lea	 ecx, DWORD PTR _radiusA$[ebx]
  000fe	51		 push	 ecx
  000ff	8d 55 a0	 lea	 edx, DWORD PTR $T17[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  00108	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010b	50		 push	 eax
  0010c	8d 45 90	 lea	 eax, DWORD PTR $T16[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	50		 push	 eax
  00119	8b 4b 08	 mov	 ecx, DWORD PTR _center$[ebx]
  0011c	51		 push	 ecx
  0011d	8d 55 80	 lea	 edx, DWORD PTR $T15[ebp]
  00120	52		 push	 edx
  00121	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH
  00129	50		 push	 eax
  0012a	8d 45 c0	 lea	 eax, DWORD PTR _prev$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  : 		if(drawSect)

  00136	0f b6 4b 28	 movzx	 ecx, BYTE PTR _drawSect$[ebx]
  0013a	85 c9		 test	 ecx, ecx
  0013c	74 22		 je	 SHORT $LN6@drawArc

; 184  : 		{
; 185  : 			drawLine(center, prev, color);

  0013e	8b f4		 mov	 esi, esp
  00140	8b 53 24	 mov	 edx, DWORD PTR _color$[ebx]
  00143	52		 push	 edx
  00144	8d 45 c0	 lea	 eax, DWORD PTR _prev$[ebp]
  00147	50		 push	 eax
  00148	8b 4b 08	 mov	 ecx, DWORD PTR _center$[ebx]
  0014b	51		 push	 ecx
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014f	8b 02		 mov	 eax, DWORD PTR [edx]
  00151	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00154	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00157	ff d2		 call	 edx
  00159	3b f4		 cmp	 esi, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@drawArc:

; 186  : 		}
; 187  : 		for(int i = 1; i <= nSteps; i++)

  00160	c7 85 5c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$12[ebp], 1
  0016a	eb 0f		 jmp	 SHORT $LN4@drawArc
$LN2@drawArc:
  0016c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _i$12[ebp]
  00172	83 c0 01	 add	 eax, 1
  00175	89 85 5c ff ff
	ff		 mov	 DWORD PTR _i$12[ebp], eax
$LN4@drawArc:
  0017b	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _i$12[ebp]
  00181	3b 4d d4	 cmp	 ecx, DWORD PTR _nSteps$[ebp]
  00184	0f 8f 33 01 00
	00		 jg	 $LN3@drawArc

; 188  : 		{
; 189  : 			btScalar angle = minAngle + (maxAngle - minAngle) * btScalar(i) / btScalar(nSteps);

  0018a	f3 0f 10 43 20	 movss	 xmm0, DWORD PTR _maxAngle$[ebx]
  0018f	f3 0f 5c 43 1c	 subss	 xmm0, DWORD PTR _minAngle$[ebx]
  00194	f3 0f 2a 8d 5c
	ff ff ff	 cvtsi2ss xmm1, DWORD PTR _i$12[ebp]
  0019c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001a0	f3 0f 2a 4d d4	 cvtsi2ss xmm1, DWORD PTR _nSteps$[ebp]
  001a5	f3 0f 5e c1	 divss	 xmm0, xmm1
  001a9	f3 0f 58 43 1c	 addss	 xmm0, DWORD PTR _minAngle$[ebx]
  001ae	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _angle$11[ebp], xmm0

; 190  : 			btVector3 next = center + radiusA * vx * btCos(angle) + radiusB * vy * btSin(angle);

  001b6	51		 push	 ecx
  001b7	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _angle$11[ebp]
  001bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c4	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  001c9	83 c4 04	 add	 esp, 4
  001cc	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  001d2	51		 push	 ecx
  001d3	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _angle$11[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  001e5	83 c4 04	 add	 esp, 4
  001e8	d9 9d d0 fe ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  001ee	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  001f4	52		 push	 edx
  001f5	8d 45 e0	 lea	 eax, DWORD PTR _vy$[ebp]
  001f8	50		 push	 eax
  001f9	8d 4b 18	 lea	 ecx, DWORD PTR _radiusB$[ebx]
  001fc	51		 push	 ecx
  001fd	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00203	52		 push	 edx
  00204	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  00209	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020c	50		 push	 eax
  0020d	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00219	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021c	50		 push	 eax
  0021d	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00223	51		 push	 ecx
  00224	8b 55 f8	 mov	 edx, DWORD PTR _vx$[ebp]
  00227	52		 push	 edx
  00228	8d 43 14	 lea	 eax, DWORD PTR _radiusA$[ebx]
  0022b	50		 push	 eax
  0022c	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00232	51		 push	 ecx
  00233	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  00238	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023b	50		 push	 eax
  0023c	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  00242	52		 push	 edx
  00243	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00248	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024b	50		 push	 eax
  0024c	8b 43 08	 mov	 eax, DWORD PTR _center$[ebx]
  0024f	50		 push	 eax
  00250	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00256	51		 push	 ecx
  00257	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  0025c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025f	50		 push	 eax
  00260	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _next$10[ebp]
  00266	52		 push	 edx
  00267	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  0026c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 191  : 			drawLine(prev, next, color);

  0026f	8b f4		 mov	 esi, esp
  00271	8b 43 24	 mov	 eax, DWORD PTR _color$[ebx]
  00274	50		 push	 eax
  00275	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _next$10[ebp]
  0027b	51		 push	 ecx
  0027c	8d 55 c0	 lea	 edx, DWORD PTR _prev$[ebp]
  0027f	52		 push	 edx
  00280	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00283	8b 10		 mov	 edx, DWORD PTR [eax]
  00285	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00288	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0028b	ff d0		 call	 eax
  0028d	3b f4		 cmp	 esi, esp
  0028f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 192  : 			prev = next;

  00294	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _next$10[ebp]
  0029a	89 4d c0	 mov	 DWORD PTR _prev$[ebp], ecx
  0029d	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _next$10[ebp+4]
  002a3	89 55 c4	 mov	 DWORD PTR _prev$[ebp+4], edx
  002a6	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _next$10[ebp+8]
  002ac	89 45 c8	 mov	 DWORD PTR _prev$[ebp+8], eax
  002af	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _next$10[ebp+12]
  002b5	89 4d cc	 mov	 DWORD PTR _prev$[ebp+12], ecx

; 193  : 		}

  002b8	e9 af fe ff ff	 jmp	 $LN2@drawArc
$LN3@drawArc:

; 194  : 		if(drawSect)

  002bd	0f b6 53 28	 movzx	 edx, BYTE PTR _drawSect$[ebx]
  002c1	85 d2		 test	 edx, edx
  002c3	74 22		 je	 SHORT $LN7@drawArc

; 195  : 		{
; 196  : 			drawLine(center, prev, color);

  002c5	8b f4		 mov	 esi, esp
  002c7	8b 43 24	 mov	 eax, DWORD PTR _color$[ebx]
  002ca	50		 push	 eax
  002cb	8d 4d c0	 lea	 ecx, DWORD PTR _prev$[ebp]
  002ce	51		 push	 ecx
  002cf	8b 53 08	 mov	 edx, DWORD PTR _center$[ebx]
  002d2	52		 push	 edx
  002d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d6	8b 10		 mov	 edx, DWORD PTR [eax]
  002d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002db	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002de	ff d0		 call	 eax
  002e0	3b f4		 cmp	 esi, esp
  002e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@drawArc:

; 197  : 		}
; 198  : 	}

  002e7	52		 push	 edx
  002e8	8b cd		 mov	 ecx, ebp
  002ea	50		 push	 eax
  002eb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@drawArc
  002f1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002f6	58		 pop	 eax
  002f7	5a		 pop	 edx
  002f8	5f		 pop	 edi
  002f9	5e		 pop	 esi
  002fa	8b e5		 mov	 esp, ebp
  002fc	5d		 pop	 ebp
  002fd	8b e3		 mov	 esp, ebx
  002ff	5b		 pop	 ebx
  00300	c2 28 00	 ret	 40			; 00000028H
  00303	90		 npad	 1
$LN13@drawArc:
  00304	03 00 00 00	 DD	 3
  00308	00 00 00 00	 DD	 $LN12@drawArc
$LN12@drawArc:
  0030c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00310	10 00 00 00	 DD	 16			; 00000010H
  00314	00 00 00 00	 DD	 $LN9@drawArc
  00318	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0031c	10 00 00 00	 DD	 16			; 00000010H
  00320	00 00 00 00	 DD	 $LN10@drawArc
  00324	40 ff ff ff	 DD	 -192			; ffffff40H
  00328	10 00 00 00	 DD	 16			; 00000010H
  0032c	00 00 00 00	 DD	 $LN11@drawArc
$LN11@drawArc:
  00330	6e		 DB	 110			; 0000006eH
  00331	65		 DB	 101			; 00000065H
  00332	78		 DB	 120			; 00000078H
  00333	74		 DB	 116			; 00000074H
  00334	00		 DB	 0
$LN10@drawArc:
  00335	70		 DB	 112			; 00000070H
  00336	72		 DB	 114			; 00000072H
  00337	65		 DB	 101			; 00000065H
  00338	76		 DB	 118			; 00000076H
  00339	00		 DB	 0
$LN9@drawArc:
  0033a	76		 DB	 118			; 00000076H
  0033b	79		 DB	 121			; 00000079H
  0033c	00		 DB	 0
?drawArc@btIDebugDraw@@UAEXABVbtVector3@@00MMMM0_NM@Z ENDP ; btIDebugDraw::drawArc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawSpherePatch@btIDebugDraw@@UAEXABVbtVector3@@00MMMMM0M_N@Z
_TEXT	SEGMENT
tv404 = -2816						; size = 4
tv397 = -2812						; size = 4
$T1 = -2808						; size = 4
$T2 = -2804						; size = 4
$T3 = -2800						; size = 16
$T4 = -2784						; size = 16
$T5 = -2768						; size = 16
$T6 = -2752						; size = 16
$T7 = -2736						; size = 16
$T8 = -2720						; size = 16
_cps$9 = -2692						; size = 4
_sps$10 = -2688						; size = 4
_psi$11 = -2684						; size = 4
_j$12 = -2680						; size = 4
_cth$13 = -2676						; size = 4
_sth$14 = -2668						; size = 4
_th$15 = -2660						; size = 4
_i$16 = -2656						; size = 4
_step_v$ = -2652					; size = 4
_n_vert$ = -2648					; size = 4
_isClosed$ = -2641					; size = 1
_step_h$ = -2640					; size = 4
_n_hor$ = -2636						; size = 4
_drawS$ = -2630						; size = 1
_drawN$ = -2629						; size = 1
_jv$ = -2624						; size = 16
_iv$ = -2592						; size = 4
_kv$ = -2588						; size = 4
_step$ = -2584						; size = 4
_arcStart$ = -2576					; size = 16
$T17 = -2544						; size = 16
_spole$ = -2512						; size = 16
$T18 = -2480						; size = 16
_npole$ = -2448						; size = 16
_pT$ = -2416						; size = 4
_pvB$ = -2412						; size = 4
_pvA$ = -2408						; size = 4
_vB$ = -2400						; size = 1184
_vA$ = -1200						; size = 1184
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_center$ = 8						; size = 4
_up$ = 12						; size = 4
_axis$ = 16						; size = 4
_radius$ = 20						; size = 4
_minTh$ = 24						; size = 4
_maxTh$ = 28						; size = 4
_minPs$ = 32						; size = 4
_maxPs$ = 36						; size = 4
_color$ = 40						; size = 4
_stepDegrees$ = 44					; size = 4
_drawCenter$ = 48					; size = 1
?drawSpherePatch@btIDebugDraw@@UAEXABVbtVector3@@00MMMMM0M_N@Z PROC ; btIDebugDraw::drawSpherePatch, COMDAT
; _this$ = ecx

; 201  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 0c 0b 00
	00		 sub	 esp, 2828		; 00000b0cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd f4 f4 ff
	ff		 lea	 edi, DWORD PTR [ebp-2828]
  00025	b9 c3 02 00 00	 mov	 ecx, 707		; 000002c3H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		btVector3 vA[74];

  0003f	68 00 00 00 00	 push	 OFFSET ??0btVector3@@QAE@XZ ; btVector3::btVector3
  00044	6a 4a		 push	 74			; 0000004aH
  00046	6a 10		 push	 16			; 00000010H
  00048	8d 85 50 fb ff
	ff		 lea	 eax, DWORD PTR _vA$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 203  : 		btVector3 vB[74];

  00054	68 00 00 00 00	 push	 OFFSET ??0btVector3@@QAE@XZ ; btVector3::btVector3
  00059	6a 4a		 push	 74			; 0000004aH
  0005b	6a 10		 push	 16			; 00000010H
  0005d	8d 8d a0 f6 ff
	ff		 lea	 ecx, DWORD PTR _vB$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 204  : 		btVector3 *pvA = vA, *pvB = vB, *pT;

  00069	8d 95 50 fb ff
	ff		 lea	 edx, DWORD PTR _vA$[ebp]
  0006f	89 95 98 f6 ff
	ff		 mov	 DWORD PTR _pvA$[ebp], edx
  00075	8d 85 a0 f6 ff
	ff		 lea	 eax, DWORD PTR _vB$[ebp]
  0007b	89 85 94 f6 ff
	ff		 mov	 DWORD PTR _pvB$[ebp], eax

; 205  : 		btVector3 npole = center + up * radius;

  00081	8d 4b 14	 lea	 ecx, DWORD PTR _radius$[ebx]
  00084	51		 push	 ecx
  00085	8b 53 0c	 mov	 edx, DWORD PTR _up$[ebx]
  00088	52		 push	 edx
  00089	8d 85 50 f6 ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	50		 push	 eax
  00099	8b 4b 08	 mov	 ecx, DWORD PTR _center$[ebx]
  0009c	51		 push	 ecx
  0009d	8d 95 70 f6 ff
	ff		 lea	 edx, DWORD PTR _npole$[ebp]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : 		btVector3 spole = center - up * radius;

  000ac	8d 43 14	 lea	 eax, DWORD PTR _radius$[ebx]
  000af	50		 push	 eax
  000b0	8b 4b 0c	 mov	 ecx, DWORD PTR _up$[ebx]
  000b3	51		 push	 ecx
  000b4	8d 95 10 f6 ff
	ff		 lea	 edx, DWORD PTR $T17[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c3	50		 push	 eax
  000c4	8b 43 08	 mov	 eax, DWORD PTR _center$[ebx]
  000c7	50		 push	 eax
  000c8	8d 8d 30 f6 ff
	ff		 lea	 ecx, DWORD PTR _spole$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : 		btVector3 arcStart;

  000d7	8d 8d f0 f5 ff
	ff		 lea	 ecx, DWORD PTR _arcStart$[ebp]
  000dd	e8 00 00 00 00	 call	 ??0btVector3@@QAE@XZ	; btVector3::btVector3

; 208  : 		btScalar step = stepDegrees * SIMD_RADS_PER_DEG;

  000e2	f3 0f 10 43 2c	 movss	 xmm0, DWORD PTR _stepDegrees$[ebx]
  000e7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000ef	f3 0f 11 85 e8
	f5 ff ff	 movss	 DWORD PTR _step$[ebp], xmm0

; 209  : 		const btVector3& kv = up;

  000f7	8b 53 0c	 mov	 edx, DWORD PTR _up$[ebx]
  000fa	89 95 e4 f5 ff
	ff		 mov	 DWORD PTR _kv$[ebp], edx

; 210  : 		const btVector3& iv = axis;

  00100	8b 43 10	 mov	 eax, DWORD PTR _axis$[ebx]
  00103	89 85 e0 f5 ff
	ff		 mov	 DWORD PTR _iv$[ebp], eax

; 211  : 		btVector3 jv = kv.cross(iv);

  00109	8b 8d e0 f5 ff
	ff		 mov	 ecx, DWORD PTR _iv$[ebp]
  0010f	51		 push	 ecx
  00110	8d 95 c0 f5 ff
	ff		 lea	 edx, DWORD PTR _jv$[ebp]
  00116	52		 push	 edx
  00117	8b 8d e4 f5 ff
	ff		 mov	 ecx, DWORD PTR _kv$[ebp]
  0011d	e8 00 00 00 00	 call	 ?cross@btVector3@@QBE?AV1@ABV1@@Z ; btVector3::cross

; 212  : 		bool drawN = false;

  00122	c6 85 bb f5 ff
	ff 00		 mov	 BYTE PTR _drawN$[ebp], 0

; 213  : 		bool drawS = false;

  00129	c6 85 ba f5 ff
	ff 00		 mov	 BYTE PTR _drawS$[ebp], 0

; 214  : 		if(minTh <= -SIMD_HALF_PI)

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00138	0f 2f 43 18	 comiss	 xmm0, DWORD PTR _minTh$[ebx]
  0013c	72 1c		 jb	 SHORT $LN8@drawSphere

; 215  : 		{
; 216  : 			minTh = -SIMD_HALF_PI + step;

  0013e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00146	f3 0f 58 85 e8
	f5 ff ff	 addss	 xmm0, DWORD PTR _step$[ebp]
  0014e	f3 0f 11 43 18	 movss	 DWORD PTR _minTh$[ebx], xmm0

; 217  : 			drawN = true;

  00153	c6 85 bb f5 ff
	ff 01		 mov	 BYTE PTR _drawN$[ebp], 1
$LN8@drawSphere:

; 218  : 		}
; 219  : 		if(maxTh >= SIMD_HALF_PI)

  0015a	f3 0f 10 43 1c	 movss	 xmm0, DWORD PTR _maxTh$[ebx]
  0015f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00166	72 1c		 jb	 SHORT $LN9@drawSphere

; 220  : 		{
; 221  : 			maxTh = SIMD_HALF_PI - step;

  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00170	f3 0f 5c 85 e8
	f5 ff ff	 subss	 xmm0, DWORD PTR _step$[ebp]
  00178	f3 0f 11 43 1c	 movss	 DWORD PTR _maxTh$[ebx], xmm0

; 222  : 			drawS = true;

  0017d	c6 85 ba f5 ff
	ff 01		 mov	 BYTE PTR _drawS$[ebp], 1
$LN9@drawSphere:

; 223  : 		}
; 224  : 		if(minTh > maxTh)

  00184	f3 0f 10 43 18	 movss	 xmm0, DWORD PTR _minTh$[ebx]
  00189	0f 2f 43 1c	 comiss	 xmm0, DWORD PTR _maxTh$[ebx]
  0018d	76 3d		 jbe	 SHORT $LN10@drawSphere

; 225  : 		{
; 226  : 			minTh = -SIMD_HALF_PI + step;

  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00197	f3 0f 58 85 e8
	f5 ff ff	 addss	 xmm0, DWORD PTR _step$[ebp]
  0019f	f3 0f 11 43 18	 movss	 DWORD PTR _minTh$[ebx], xmm0

; 227  : 			maxTh =  SIMD_HALF_PI - step;

  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  001ac	f3 0f 5c 85 e8
	f5 ff ff	 subss	 xmm0, DWORD PTR _step$[ebp]
  001b4	f3 0f 11 43 1c	 movss	 DWORD PTR _maxTh$[ebx], xmm0

; 228  : 			drawN = drawS = true;

  001b9	c6 85 ba f5 ff
	ff 01		 mov	 BYTE PTR _drawS$[ebp], 1
  001c0	8a 85 ba f5 ff
	ff		 mov	 al, BYTE PTR _drawS$[ebp]
  001c6	88 85 bb f5 ff
	ff		 mov	 BYTE PTR _drawN$[ebp], al
$LN10@drawSphere:

; 229  : 		}
; 230  : 		int n_hor = (int)((maxTh - minTh) / step) + 1;

  001cc	f3 0f 10 43 1c	 movss	 xmm0, DWORD PTR _maxTh$[ebx]
  001d1	f3 0f 5c 43 18	 subss	 xmm0, DWORD PTR _minTh$[ebx]
  001d6	f3 0f 5e 85 e8
	f5 ff ff	 divss	 xmm0, DWORD PTR _step$[ebp]
  001de	f3 0f 2c c8	 cvttss2si ecx, xmm0
  001e2	83 c1 01	 add	 ecx, 1
  001e5	89 8d b4 f5 ff
	ff		 mov	 DWORD PTR _n_hor$[ebp], ecx

; 231  : 		if(n_hor < 2) n_hor = 2;

  001eb	83 bd b4 f5 ff
	ff 02		 cmp	 DWORD PTR _n_hor$[ebp], 2
  001f2	7d 0a		 jge	 SHORT $LN11@drawSphere
  001f4	c7 85 b4 f5 ff
	ff 02 00 00 00	 mov	 DWORD PTR _n_hor$[ebp], 2
$LN11@drawSphere:

; 232  : 		btScalar step_h = (maxTh - minTh) / btScalar(n_hor - 1);

  001fe	f3 0f 10 43 1c	 movss	 xmm0, DWORD PTR _maxTh$[ebx]
  00203	f3 0f 5c 43 18	 subss	 xmm0, DWORD PTR _minTh$[ebx]
  00208	8b 95 b4 f5 ff
	ff		 mov	 edx, DWORD PTR _n_hor$[ebp]
  0020e	83 ea 01	 sub	 edx, 1
  00211	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  00215	f3 0f 5e c1	 divss	 xmm0, xmm1
  00219	f3 0f 11 85 b0
	f5 ff ff	 movss	 DWORD PTR _step_h$[ebp], xmm0

; 233  : 		bool isClosed = false;

  00221	c6 85 af f5 ff
	ff 00		 mov	 BYTE PTR _isClosed$[ebp], 0

; 234  : 		if(minPs > maxPs)

  00228	f3 0f 10 43 20	 movss	 xmm0, DWORD PTR _minPs$[ebx]
  0022d	0f 2f 43 24	 comiss	 xmm0, DWORD PTR _maxPs$[ebx]
  00231	76 2b		 jbe	 SHORT $LN12@drawSphere

; 235  : 		{
; 236  : 			minPs = -SIMD_PI + step;

  00233	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0490fdb
  0023b	f3 0f 58 85 e8
	f5 ff ff	 addss	 xmm0, DWORD PTR _step$[ebp]
  00243	f3 0f 11 43 20	 movss	 DWORD PTR _minPs$[ebx], xmm0

; 237  : 			maxPs =  SIMD_PI;

  00248	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00250	f3 0f 11 43 24	 movss	 DWORD PTR _maxPs$[ebx], xmm0

; 238  : 			isClosed = true;

  00255	c6 85 af f5 ff
	ff 01		 mov	 BYTE PTR _isClosed$[ebp], 1
  0025c	eb 23		 jmp	 SHORT $LN15@drawSphere
$LN12@drawSphere:

; 239  : 		}
; 240  : 		else if((maxPs - minPs) >= SIMD_PI * btScalar(2.f))

  0025e	f3 0f 10 43 24	 movss	 xmm0, DWORD PTR _maxPs$[ebx]
  00263	f3 0f 5c 43 20	 subss	 xmm0, DWORD PTR _minPs$[ebx]
  00268	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40c90fdb
  0026f	72 09		 jb	 SHORT $LN14@drawSphere

; 241  : 		{
; 242  : 			isClosed = true;

  00271	c6 85 af f5 ff
	ff 01		 mov	 BYTE PTR _isClosed$[ebp], 1

; 243  : 		}
; 244  : 		else

  00278	eb 07		 jmp	 SHORT $LN15@drawSphere
$LN14@drawSphere:

; 245  : 		{
; 246  : 			isClosed = false;

  0027a	c6 85 af f5 ff
	ff 00		 mov	 BYTE PTR _isClosed$[ebp], 0
$LN15@drawSphere:

; 247  : 		}
; 248  : 		int n_vert = (int)((maxPs - minPs) / step) + 1;

  00281	f3 0f 10 43 24	 movss	 xmm0, DWORD PTR _maxPs$[ebx]
  00286	f3 0f 5c 43 20	 subss	 xmm0, DWORD PTR _minPs$[ebx]
  0028b	f3 0f 5e 85 e8
	f5 ff ff	 divss	 xmm0, DWORD PTR _step$[ebp]
  00293	f3 0f 2c c0	 cvttss2si eax, xmm0
  00297	83 c0 01	 add	 eax, 1
  0029a	89 85 a8 f5 ff
	ff		 mov	 DWORD PTR _n_vert$[ebp], eax

; 249  : 		if(n_vert < 2) n_vert = 2;

  002a0	83 bd a8 f5 ff
	ff 02		 cmp	 DWORD PTR _n_vert$[ebp], 2
  002a7	7d 0a		 jge	 SHORT $LN16@drawSphere
  002a9	c7 85 a8 f5 ff
	ff 02 00 00 00	 mov	 DWORD PTR _n_vert$[ebp], 2
$LN16@drawSphere:

; 250  : 		btScalar step_v = (maxPs - minPs) / btScalar(n_vert - 1);

  002b3	f3 0f 10 43 24	 movss	 xmm0, DWORD PTR _maxPs$[ebx]
  002b8	f3 0f 5c 43 20	 subss	 xmm0, DWORD PTR _minPs$[ebx]
  002bd	8b 8d a8 f5 ff
	ff		 mov	 ecx, DWORD PTR _n_vert$[ebp]
  002c3	83 e9 01	 sub	 ecx, 1
  002c6	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  002ca	f3 0f 5e c1	 divss	 xmm0, xmm1
  002ce	f3 0f 11 85 a4
	f5 ff ff	 movss	 DWORD PTR _step_v$[ebp], xmm0

; 251  : 		for(int i = 0; i < n_hor; i++)

  002d6	c7 85 a0 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$16[ebp], 0
  002e0	eb 0f		 jmp	 SHORT $LN4@drawSphere
$LN2@drawSphere:
  002e2	8b 95 a0 f5 ff
	ff		 mov	 edx, DWORD PTR _i$16[ebp]
  002e8	83 c2 01	 add	 edx, 1
  002eb	89 95 a0 f5 ff
	ff		 mov	 DWORD PTR _i$16[ebp], edx
$LN4@drawSphere:
  002f1	8b 85 a0 f5 ff
	ff		 mov	 eax, DWORD PTR _i$16[ebp]
  002f7	3b 85 b4 f5 ff
	ff		 cmp	 eax, DWORD PTR _n_hor$[ebp]
  002fd	0f 8d 16 04 00
	00		 jge	 $LN3@drawSphere

; 252  : 		{
; 253  : 			btScalar th = minTh + btScalar(i) * step_h;

  00303	f3 0f 2a 85 a0
	f5 ff ff	 cvtsi2ss xmm0, DWORD PTR _i$16[ebp]
  0030b	f3 0f 59 85 b0
	f5 ff ff	 mulss	 xmm0, DWORD PTR _step_h$[ebp]
  00313	f3 0f 58 43 18	 addss	 xmm0, DWORD PTR _minTh$[ebx]
  00318	f3 0f 11 85 9c
	f5 ff ff	 movss	 DWORD PTR _th$15[ebp], xmm0

; 254  : 			btScalar sth = radius * btSin(th);

  00320	51		 push	 ecx
  00321	f3 0f 10 85 9c
	f5 ff ff	 movss	 xmm0, DWORD PTR _th$15[ebp]
  00329	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032e	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  00333	83 c4 04	 add	 esp, 4
  00336	d9 9d 04 f5 ff
	ff		 fstp	 DWORD PTR tv397[ebp]
  0033c	f3 0f 10 85 04
	f5 ff ff	 movss	 xmm0, DWORD PTR tv397[ebp]
  00344	f3 0f 59 43 14	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  00349	f3 0f 11 85 94
	f5 ff ff	 movss	 DWORD PTR _sth$14[ebp], xmm0

; 255  : 			btScalar cth = radius * btCos(th);

  00351	51		 push	 ecx
  00352	f3 0f 10 85 9c
	f5 ff ff	 movss	 xmm0, DWORD PTR _th$15[ebp]
  0035a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035f	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  00364	83 c4 04	 add	 esp, 4
  00367	d9 9d 00 f5 ff
	ff		 fstp	 DWORD PTR tv404[ebp]
  0036d	f3 0f 10 85 00
	f5 ff ff	 movss	 xmm0, DWORD PTR tv404[ebp]
  00375	f3 0f 59 43 14	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  0037a	f3 0f 11 85 8c
	f5 ff ff	 movss	 DWORD PTR _cth$13[ebp], xmm0

; 256  : 			for(int j = 0; j < n_vert; j++)

  00382	c7 85 88 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$12[ebp], 0
  0038c	eb 0f		 jmp	 SHORT $LN7@drawSphere
$LN5@drawSphere:
  0038e	8b 8d 88 f5 ff
	ff		 mov	 ecx, DWORD PTR _j$12[ebp]
  00394	83 c1 01	 add	 ecx, 1
  00397	89 8d 88 f5 ff
	ff		 mov	 DWORD PTR _j$12[ebp], ecx
$LN7@drawSphere:
  0039d	8b 95 88 f5 ff
	ff		 mov	 edx, DWORD PTR _j$12[ebp]
  003a3	3b 95 a8 f5 ff
	ff		 cmp	 edx, DWORD PTR _n_vert$[ebp]
  003a9	0f 8d 41 03 00
	00		 jge	 $LN6@drawSphere

; 257  : 			{
; 258  : 				btScalar psi = minPs + btScalar(j) * step_v;

  003af	f3 0f 2a 85 88
	f5 ff ff	 cvtsi2ss xmm0, DWORD PTR _j$12[ebp]
  003b7	f3 0f 59 85 a4
	f5 ff ff	 mulss	 xmm0, DWORD PTR _step_v$[ebp]
  003bf	f3 0f 58 43 20	 addss	 xmm0, DWORD PTR _minPs$[ebx]
  003c4	f3 0f 11 85 84
	f5 ff ff	 movss	 DWORD PTR _psi$11[ebp], xmm0

; 259  : 				btScalar sps = btSin(psi);

  003cc	51		 push	 ecx
  003cd	f3 0f 10 85 84
	f5 ff ff	 movss	 xmm0, DWORD PTR _psi$11[ebp]
  003d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003da	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  003df	83 c4 04	 add	 esp, 4
  003e2	d9 9d 80 f5 ff
	ff		 fstp	 DWORD PTR _sps$10[ebp]

; 260  : 				btScalar cps = btCos(psi);

  003e8	51		 push	 ecx
  003e9	f3 0f 10 85 84
	f5 ff ff	 movss	 xmm0, DWORD PTR _psi$11[ebp]
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  003fb	83 c4 04	 add	 esp, 4
  003fe	d9 9d 7c f5 ff
	ff		 fstp	 DWORD PTR _cps$9[ebp]

; 261  : 				pvB[j] = center + cth * cps * iv + cth * sps * jv + sth * kv;

  00404	f3 0f 10 85 8c
	f5 ff ff	 movss	 xmm0, DWORD PTR _cth$13[ebp]
  0040c	f3 0f 59 85 80
	f5 ff ff	 mulss	 xmm0, DWORD PTR _sps$10[ebp]
  00414	f3 0f 11 85 0c
	f5 ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  0041c	f3 0f 10 85 8c
	f5 ff ff	 movss	 xmm0, DWORD PTR _cth$13[ebp]
  00424	f3 0f 59 85 7c
	f5 ff ff	 mulss	 xmm0, DWORD PTR _cps$9[ebp]
  0042c	f3 0f 11 85 08
	f5 ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00434	8b 85 e4 f5 ff
	ff		 mov	 eax, DWORD PTR _kv$[ebp]
  0043a	50		 push	 eax
  0043b	8d 8d 94 f5 ff
	ff		 lea	 ecx, DWORD PTR _sth$14[ebp]
  00441	51		 push	 ecx
  00442	8d 95 20 f5 ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00448	52		 push	 edx
  00449	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  0044e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00451	50		 push	 eax
  00452	8d 85 c0 f5 ff
	ff		 lea	 eax, DWORD PTR _jv$[ebp]
  00458	50		 push	 eax
  00459	8d 8d 0c f5 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0045f	51		 push	 ecx
  00460	8d 95 40 f5 ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00466	52		 push	 edx
  00467	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  0046c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0046f	50		 push	 eax
  00470	8b 85 e0 f5 ff
	ff		 mov	 eax, DWORD PTR _iv$[ebp]
  00476	50		 push	 eax
  00477	8d 8d 08 f5 ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0047d	51		 push	 ecx
  0047e	8d 95 60 f5 ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  00484	52		 push	 edx
  00485	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABMABV0@@Z ; operator*
  0048a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048d	50		 push	 eax
  0048e	8b 43 08	 mov	 eax, DWORD PTR _center$[ebx]
  00491	50		 push	 eax
  00492	8d 8d 50 f5 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00498	51		 push	 ecx
  00499	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  0049e	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a1	50		 push	 eax
  004a2	8d 95 30 f5 ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  004a8	52		 push	 edx
  004a9	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  004ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b1	50		 push	 eax
  004b2	8d 85 10 f5 ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  004b8	50		 push	 eax
  004b9	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  004be	83 c4 0c	 add	 esp, 12			; 0000000cH
  004c1	8b 8d 88 f5 ff
	ff		 mov	 ecx, DWORD PTR _j$12[ebp]
  004c7	c1 e1 04	 shl	 ecx, 4
  004ca	03 8d 94 f6 ff
	ff		 add	 ecx, DWORD PTR _pvB$[ebp]
  004d0	8b 10		 mov	 edx, DWORD PTR [eax]
  004d2	89 11		 mov	 DWORD PTR [ecx], edx
  004d4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004d7	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  004da	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  004dd	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  004e0	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  004e3	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 262  : 				if(i)

  004e6	83 bd a0 f5 ff
	ff 00		 cmp	 DWORD PTR _i$16[ebp], 0
  004ed	74 3c		 je	 SHORT $LN17@drawSphere

; 263  : 				{
; 264  : 					drawLine(pvA[j], pvB[j], color);

  004ef	8b f4		 mov	 esi, esp
  004f1	8b 4b 28	 mov	 ecx, DWORD PTR _color$[ebx]
  004f4	51		 push	 ecx
  004f5	8b 95 88 f5 ff
	ff		 mov	 edx, DWORD PTR _j$12[ebp]
  004fb	c1 e2 04	 shl	 edx, 4
  004fe	03 95 94 f6 ff
	ff		 add	 edx, DWORD PTR _pvB$[ebp]
  00504	52		 push	 edx
  00505	8b 85 88 f5 ff
	ff		 mov	 eax, DWORD PTR _j$12[ebp]
  0050b	c1 e0 04	 shl	 eax, 4
  0050e	03 85 98 f6 ff
	ff		 add	 eax, DWORD PTR _pvA$[ebp]
  00514	50		 push	 eax
  00515	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00518	8b 11		 mov	 edx, DWORD PTR [ecx]
  0051a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0051d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00520	ff d0		 call	 eax
  00522	3b f4		 cmp	 esi, esp
  00524	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00529	eb 3c		 jmp	 SHORT $LN19@drawSphere
$LN17@drawSphere:

; 265  : 				}
; 266  : 				else if(drawS)

  0052b	0f b6 8d ba f5
	ff ff		 movzx	 ecx, BYTE PTR _drawS$[ebp]
  00532	85 c9		 test	 ecx, ecx
  00534	74 31		 je	 SHORT $LN19@drawSphere

; 267  : 				{
; 268  : 					drawLine(spole, pvB[j], color);

  00536	8b f4		 mov	 esi, esp
  00538	8b 53 28	 mov	 edx, DWORD PTR _color$[ebx]
  0053b	52		 push	 edx
  0053c	8b 85 88 f5 ff
	ff		 mov	 eax, DWORD PTR _j$12[ebp]
  00542	c1 e0 04	 shl	 eax, 4
  00545	03 85 94 f6 ff
	ff		 add	 eax, DWORD PTR _pvB$[ebp]
  0054b	50		 push	 eax
  0054c	8d 8d 30 f6 ff
	ff		 lea	 ecx, DWORD PTR _spole$[ebp]
  00552	51		 push	 ecx
  00553	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00556	8b 02		 mov	 eax, DWORD PTR [edx]
  00558	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0055b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0055e	ff d2		 call	 edx
  00560	3b f4		 cmp	 esi, esp
  00562	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN19@drawSphere:

; 269  : 				}
; 270  : 				if(j)

  00567	83 bd 88 f5 ff
	ff 00		 cmp	 DWORD PTR _j$12[ebp], 0
  0056e	74 3f		 je	 SHORT $LN20@drawSphere

; 271  : 				{
; 272  : 					drawLine(pvB[j-1], pvB[j], color);

  00570	8b f4		 mov	 esi, esp
  00572	8b 43 28	 mov	 eax, DWORD PTR _color$[ebx]
  00575	50		 push	 eax
  00576	8b 8d 88 f5 ff
	ff		 mov	 ecx, DWORD PTR _j$12[ebp]
  0057c	c1 e1 04	 shl	 ecx, 4
  0057f	03 8d 94 f6 ff
	ff		 add	 ecx, DWORD PTR _pvB$[ebp]
  00585	51		 push	 ecx
  00586	8b 95 88 f5 ff
	ff		 mov	 edx, DWORD PTR _j$12[ebp]
  0058c	83 ea 01	 sub	 edx, 1
  0058f	c1 e2 04	 shl	 edx, 4
  00592	03 95 94 f6 ff
	ff		 add	 edx, DWORD PTR _pvB$[ebp]
  00598	52		 push	 edx
  00599	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0059c	8b 10		 mov	 edx, DWORD PTR [eax]
  0059e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005a1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005a4	ff d0		 call	 eax
  005a6	3b f4		 cmp	 esi, esp
  005a8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 273  : 				}
; 274  : 				else

  005ad	eb 32		 jmp	 SHORT $LN21@drawSphere
$LN20@drawSphere:

; 275  : 				{
; 276  : 					arcStart = pvB[j];

  005af	8b 8d 88 f5 ff
	ff		 mov	 ecx, DWORD PTR _j$12[ebp]
  005b5	c1 e1 04	 shl	 ecx, 4
  005b8	03 8d 94 f6 ff
	ff		 add	 ecx, DWORD PTR _pvB$[ebp]
  005be	8b 11		 mov	 edx, DWORD PTR [ecx]
  005c0	89 95 f0 f5 ff
	ff		 mov	 DWORD PTR _arcStart$[ebp], edx
  005c6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  005c9	89 85 f4 f5 ff
	ff		 mov	 DWORD PTR _arcStart$[ebp+4], eax
  005cf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  005d2	89 95 f8 f5 ff
	ff		 mov	 DWORD PTR _arcStart$[ebp+8], edx
  005d8	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  005db	89 85 fc f5 ff
	ff		 mov	 DWORD PTR _arcStart$[ebp+12], eax
$LN21@drawSphere:

; 277  : 				}
; 278  : 				if((i == (n_hor - 1)) && drawN)

  005e1	8b 8d b4 f5 ff
	ff		 mov	 ecx, DWORD PTR _n_hor$[ebp]
  005e7	83 e9 01	 sub	 ecx, 1
  005ea	39 8d a0 f5 ff
	ff		 cmp	 DWORD PTR _i$16[ebp], ecx
  005f0	75 3c		 jne	 SHORT $LN22@drawSphere
  005f2	0f b6 95 bb f5
	ff ff		 movzx	 edx, BYTE PTR _drawN$[ebp]
  005f9	85 d2		 test	 edx, edx
  005fb	74 31		 je	 SHORT $LN22@drawSphere

; 279  : 				{
; 280  : 					drawLine(npole, pvB[j], color);

  005fd	8b f4		 mov	 esi, esp
  005ff	8b 43 28	 mov	 eax, DWORD PTR _color$[ebx]
  00602	50		 push	 eax
  00603	8b 8d 88 f5 ff
	ff		 mov	 ecx, DWORD PTR _j$12[ebp]
  00609	c1 e1 04	 shl	 ecx, 4
  0060c	03 8d 94 f6 ff
	ff		 add	 ecx, DWORD PTR _pvB$[ebp]
  00612	51		 push	 ecx
  00613	8d 95 70 f6 ff
	ff		 lea	 edx, DWORD PTR _npole$[ebp]
  00619	52		 push	 edx
  0061a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0061d	8b 10		 mov	 edx, DWORD PTR [eax]
  0061f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00622	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00625	ff d0		 call	 eax
  00627	3b f4		 cmp	 esi, esp
  00629	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@drawSphere:

; 281  : 				}
; 282  : 				
; 283  : 				if (drawCenter)

  0062e	0f b6 4b 30	 movzx	 ecx, BYTE PTR _drawCenter$[ebx]
  00632	85 c9		 test	 ecx, ecx
  00634	0f 84 b1 00 00
	00		 je	 $LN27@drawSphere

; 284  : 				{
; 285  : 					if(isClosed)

  0063a	0f b6 95 af f5
	ff ff		 movzx	 edx, BYTE PTR _isClosed$[ebp]
  00641	85 d2		 test	 edx, edx
  00643	74 44		 je	 SHORT $LN24@drawSphere

; 286  : 					{
; 287  : 						if(j == (n_vert-1))

  00645	8b 85 a8 f5 ff
	ff		 mov	 eax, DWORD PTR _n_vert$[ebp]
  0064b	83 e8 01	 sub	 eax, 1
  0064e	39 85 88 f5 ff
	ff		 cmp	 DWORD PTR _j$12[ebp], eax
  00654	75 31		 jne	 SHORT $LN26@drawSphere

; 288  : 						{
; 289  : 							drawLine(arcStart, pvB[j], color);

  00656	8b f4		 mov	 esi, esp
  00658	8b 4b 28	 mov	 ecx, DWORD PTR _color$[ebx]
  0065b	51		 push	 ecx
  0065c	8b 95 88 f5 ff
	ff		 mov	 edx, DWORD PTR _j$12[ebp]
  00662	c1 e2 04	 shl	 edx, 4
  00665	03 95 94 f6 ff
	ff		 add	 edx, DWORD PTR _pvB$[ebp]
  0066b	52		 push	 edx
  0066c	8d 85 f0 f5 ff
	ff		 lea	 eax, DWORD PTR _arcStart$[ebp]
  00672	50		 push	 eax
  00673	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00676	8b 11		 mov	 edx, DWORD PTR [ecx]
  00678	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0067b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0067e	ff d0		 call	 eax
  00680	3b f4		 cmp	 esi, esp
  00682	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN26@drawSphere:

; 290  : 						}
; 291  : 					}
; 292  : 					else

  00687	eb 62		 jmp	 SHORT $LN27@drawSphere
$LN24@drawSphere:

; 293  : 					{
; 294  : 						if(((!i) || (i == (n_hor-1))) && ((!j) || (j == (n_vert-1))))

  00689	83 bd a0 f5 ff
	ff 00		 cmp	 DWORD PTR _i$16[ebp], 0
  00690	74 11		 je	 SHORT $LN28@drawSphere
  00692	8b 8d b4 f5 ff
	ff		 mov	 ecx, DWORD PTR _n_hor$[ebp]
  00698	83 e9 01	 sub	 ecx, 1
  0069b	39 8d a0 f5 ff
	ff		 cmp	 DWORD PTR _i$16[ebp], ecx
  006a1	75 48		 jne	 SHORT $LN27@drawSphere
$LN28@drawSphere:
  006a3	83 bd 88 f5 ff
	ff 00		 cmp	 DWORD PTR _j$12[ebp], 0
  006aa	74 11		 je	 SHORT $LN29@drawSphere
  006ac	8b 95 a8 f5 ff
	ff		 mov	 edx, DWORD PTR _n_vert$[ebp]
  006b2	83 ea 01	 sub	 edx, 1
  006b5	39 95 88 f5 ff
	ff		 cmp	 DWORD PTR _j$12[ebp], edx
  006bb	75 2e		 jne	 SHORT $LN27@drawSphere
$LN29@drawSphere:

; 295  : 						{
; 296  : 							drawLine(center, pvB[j], color);

  006bd	8b f4		 mov	 esi, esp
  006bf	8b 43 28	 mov	 eax, DWORD PTR _color$[ebx]
  006c2	50		 push	 eax
  006c3	8b 8d 88 f5 ff
	ff		 mov	 ecx, DWORD PTR _j$12[ebp]
  006c9	c1 e1 04	 shl	 ecx, 4
  006cc	03 8d 94 f6 ff
	ff		 add	 ecx, DWORD PTR _pvB$[ebp]
  006d2	51		 push	 ecx
  006d3	8b 53 08	 mov	 edx, DWORD PTR _center$[ebx]
  006d6	52		 push	 edx
  006d7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  006da	8b 10		 mov	 edx, DWORD PTR [eax]
  006dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006df	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006e2	ff d0		 call	 eax
  006e4	3b f4		 cmp	 esi, esp
  006e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN27@drawSphere:

; 297  : 						}
; 298  : 					}
; 299  : 				}
; 300  : 			}

  006eb	e9 9e fc ff ff	 jmp	 $LN5@drawSphere
$LN6@drawSphere:

; 301  : 			pT = pvA; pvA = pvB; pvB = pT;

  006f0	8b 8d 98 f6 ff
	ff		 mov	 ecx, DWORD PTR _pvA$[ebp]
  006f6	89 8d 90 f6 ff
	ff		 mov	 DWORD PTR _pT$[ebp], ecx
  006fc	8b 95 94 f6 ff
	ff		 mov	 edx, DWORD PTR _pvB$[ebp]
  00702	89 95 98 f6 ff
	ff		 mov	 DWORD PTR _pvA$[ebp], edx
  00708	8b 85 90 f6 ff
	ff		 mov	 eax, DWORD PTR _pT$[ebp]
  0070e	89 85 94 f6 ff
	ff		 mov	 DWORD PTR _pvB$[ebp], eax

; 302  : 		}

  00714	e9 c9 fb ff ff	 jmp	 $LN2@drawSphere
$LN3@drawSphere:

; 303  : 	}

  00719	52		 push	 edx
  0071a	8b cd		 mov	 ecx, ebp
  0071c	50		 push	 eax
  0071d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN39@drawSphere
  00723	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00728	58		 pop	 eax
  00729	5a		 pop	 edx
  0072a	5f		 pop	 edi
  0072b	5e		 pop	 esi
  0072c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0072f	33 cd		 xor	 ecx, ebp
  00731	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00736	8b e5		 mov	 esp, ebp
  00738	5d		 pop	 ebp
  00739	8b e3		 mov	 esp, ebx
  0073b	5b		 pop	 ebx
  0073c	c2 2c 00	 ret	 44			; 0000002cH
  0073f	90		 npad	 1
$LN39@drawSphere:
  00740	07 00 00 00	 DD	 7
  00744	00 00 00 00	 DD	 $LN38@drawSphere
$LN38@drawSphere:
  00748	50 fb ff ff	 DD	 -1200			; fffffb50H
  0074c	a0 04 00 00	 DD	 1184			; 000004a0H
  00750	00 00 00 00	 DD	 $LN31@drawSphere
  00754	a0 f6 ff ff	 DD	 -2400			; fffff6a0H
  00758	a0 04 00 00	 DD	 1184			; 000004a0H
  0075c	00 00 00 00	 DD	 $LN32@drawSphere
  00760	70 f6 ff ff	 DD	 -2448			; fffff670H
  00764	10 00 00 00	 DD	 16			; 00000010H
  00768	00 00 00 00	 DD	 $LN33@drawSphere
  0076c	30 f6 ff ff	 DD	 -2512			; fffff630H
  00770	10 00 00 00	 DD	 16			; 00000010H
  00774	00 00 00 00	 DD	 $LN34@drawSphere
  00778	f0 f5 ff ff	 DD	 -2576			; fffff5f0H
  0077c	10 00 00 00	 DD	 16			; 00000010H
  00780	00 00 00 00	 DD	 $LN35@drawSphere
  00784	c0 f5 ff ff	 DD	 -2624			; fffff5c0H
  00788	10 00 00 00	 DD	 16			; 00000010H
  0078c	00 00 00 00	 DD	 $LN36@drawSphere
  00790	94 f5 ff ff	 DD	 -2668			; fffff594H
  00794	04 00 00 00	 DD	 4
  00798	00 00 00 00	 DD	 $LN37@drawSphere
$LN37@drawSphere:
  0079c	73		 DB	 115			; 00000073H
  0079d	74		 DB	 116			; 00000074H
  0079e	68		 DB	 104			; 00000068H
  0079f	00		 DB	 0
$LN36@drawSphere:
  007a0	6a		 DB	 106			; 0000006aH
  007a1	76		 DB	 118			; 00000076H
  007a2	00		 DB	 0
$LN35@drawSphere:
  007a3	61		 DB	 97			; 00000061H
  007a4	72		 DB	 114			; 00000072H
  007a5	63		 DB	 99			; 00000063H
  007a6	53		 DB	 83			; 00000053H
  007a7	74		 DB	 116			; 00000074H
  007a8	61		 DB	 97			; 00000061H
  007a9	72		 DB	 114			; 00000072H
  007aa	74		 DB	 116			; 00000074H
  007ab	00		 DB	 0
$LN34@drawSphere:
  007ac	73		 DB	 115			; 00000073H
  007ad	70		 DB	 112			; 00000070H
  007ae	6f		 DB	 111			; 0000006fH
  007af	6c		 DB	 108			; 0000006cH
  007b0	65		 DB	 101			; 00000065H
  007b1	00		 DB	 0
$LN33@drawSphere:
  007b2	6e		 DB	 110			; 0000006eH
  007b3	70		 DB	 112			; 00000070H
  007b4	6f		 DB	 111			; 0000006fH
  007b5	6c		 DB	 108			; 0000006cH
  007b6	65		 DB	 101			; 00000065H
  007b7	00		 DB	 0
$LN32@drawSphere:
  007b8	76		 DB	 118			; 00000076H
  007b9	42		 DB	 66			; 00000042H
  007ba	00		 DB	 0
$LN31@drawSphere:
  007bb	76		 DB	 118			; 00000076H
  007bc	41		 DB	 65			; 00000041H
  007bd	00		 DB	 0
?drawSpherePatch@btIDebugDraw@@UAEXABVbtVector3@@00MMMMM0M_N@Z ENDP ; btIDebugDraw::drawSpherePatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawBox@btIDebugDraw@@UAEXABVbtVector3@@00@Z
_TEXT	SEGMENT
$T1 = -400						; size = 16
$T2 = -384						; size = 16
$T3 = -368						; size = 16
$T4 = -352						; size = 16
$T5 = -336						; size = 16
$T6 = -320						; size = 16
$T7 = -304						; size = 16
$T8 = -288						; size = 16
$T9 = -272						; size = 16
$T10 = -256						; size = 16
$T11 = -240						; size = 16
$T12 = -224						; size = 16
$T13 = -208						; size = 16
$T14 = -192						; size = 16
$T15 = -176						; size = 16
$T16 = -160						; size = 16
$T17 = -144						; size = 16
$T18 = -128						; size = 16
$T19 = -112						; size = 16
$T20 = -96						; size = 16
$T21 = -80						; size = 16
$T22 = -64						; size = 16
$T23 = -48						; size = 16
$T24 = -32						; size = 16
_this$ = -4						; size = 4
_bbMin$ = 8						; size = 4
_bbMax$ = 12						; size = 4
_color$ = 16						; size = 4
?drawBox@btIDebugDraw@@UAEXABVbtVector3@@00@Z PROC	; btIDebugDraw::drawBox, COMDAT
; _this$ = ecx

; 307  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 64 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-412]
  00025	b9 67 00 00 00	 mov	 ecx, 103		; 00000067H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 308  : 		drawLine(btVector3(bbMin[0], bbMin[1], bbMin[2]), btVector3(bbMax[0], bbMin[1], bbMin[2]), color);

  00035	8b f4		 mov	 esi, esp
  00037	8b 43 10	 mov	 eax, DWORD PTR _color$[ebx]
  0003a	50		 push	 eax
  0003b	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0003e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00043	b9 04 00 00 00	 mov	 ecx, 4
  00048	d1 e1		 shl	 ecx, 1
  0004a	03 c1		 add	 eax, ecx
  0004c	50		 push	 eax
  0004d	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00050	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00055	ba 04 00 00 00	 mov	 edx, 4
  0005a	c1 e2 00	 shl	 edx, 0
  0005d	03 c2		 add	 eax, edx
  0005f	50		 push	 eax
  00060	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00063	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00068	b9 04 00 00 00	 mov	 ecx, 4
  0006d	6b d1 00	 imul	 edx, ecx, 0
  00070	03 c2		 add	 eax, edx
  00072	50		 push	 eax
  00073	8d 4d d0	 lea	 ecx, DWORD PTR $T23[ebp]
  00076	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0007b	50		 push	 eax
  0007c	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0007f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00084	b9 04 00 00 00	 mov	 ecx, 4
  00089	d1 e1		 shl	 ecx, 1
  0008b	03 c1		 add	 eax, ecx
  0008d	50		 push	 eax
  0008e	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00091	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	c1 e2 00	 shl	 edx, 0
  0009e	03 c2		 add	 eax, edx
  000a0	50		 push	 eax
  000a1	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  000a4	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  000a9	b9 04 00 00 00	 mov	 ecx, 4
  000ae	6b d1 00	 imul	 edx, ecx, 0
  000b1	03 c2		 add	 eax, edx
  000b3	50		 push	 eax
  000b4	8d 4d e0	 lea	 ecx, DWORD PTR $T24[ebp]
  000b7	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  000bc	50		 push	 eax
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	8b 10		 mov	 edx, DWORD PTR [eax]
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c8	ff d0		 call	 eax
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 309  : 		drawLine(btVector3(bbMax[0], bbMin[1], bbMin[2]), btVector3(bbMax[0], bbMax[1], bbMin[2]), color);

  000d1	8b f4		 mov	 esi, esp
  000d3	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  000d6	51		 push	 ecx
  000d7	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  000da	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  000df	ba 04 00 00 00	 mov	 edx, 4
  000e4	d1 e2		 shl	 edx, 1
  000e6	03 c2		 add	 eax, edx
  000e8	50		 push	 eax
  000e9	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  000ec	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  000f1	b9 04 00 00 00	 mov	 ecx, 4
  000f6	c1 e1 00	 shl	 ecx, 0
  000f9	03 c1		 add	 eax, ecx
  000fb	50		 push	 eax
  000fc	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  000ff	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00104	ba 04 00 00 00	 mov	 edx, 4
  00109	6b ca 00	 imul	 ecx, edx, 0
  0010c	03 c1		 add	 eax, ecx
  0010e	50		 push	 eax
  0010f	8d 4d b0	 lea	 ecx, DWORD PTR $T21[ebp]
  00112	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00117	50		 push	 eax
  00118	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0011b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00120	ba 04 00 00 00	 mov	 edx, 4
  00125	d1 e2		 shl	 edx, 1
  00127	03 c2		 add	 eax, edx
  00129	50		 push	 eax
  0012a	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0012d	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00132	b9 04 00 00 00	 mov	 ecx, 4
  00137	c1 e1 00	 shl	 ecx, 0
  0013a	03 c1		 add	 eax, ecx
  0013c	50		 push	 eax
  0013d	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00140	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00145	ba 04 00 00 00	 mov	 edx, 4
  0014a	6b ca 00	 imul	 ecx, edx, 0
  0014d	03 c1		 add	 eax, ecx
  0014f	50		 push	 eax
  00150	8d 4d c0	 lea	 ecx, DWORD PTR $T22[ebp]
  00153	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00158	50		 push	 eax
  00159	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015c	8b 02		 mov	 eax, DWORD PTR [edx]
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00164	ff d2		 call	 edx
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 310  : 		drawLine(btVector3(bbMax[0], bbMax[1], bbMin[2]), btVector3(bbMin[0], bbMax[1], bbMin[2]), color);

  0016d	8b f4		 mov	 esi, esp
  0016f	8b 43 10	 mov	 eax, DWORD PTR _color$[ebx]
  00172	50		 push	 eax
  00173	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00176	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0017b	b9 04 00 00 00	 mov	 ecx, 4
  00180	d1 e1		 shl	 ecx, 1
  00182	03 c1		 add	 eax, ecx
  00184	50		 push	 eax
  00185	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00188	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0018d	ba 04 00 00 00	 mov	 edx, 4
  00192	c1 e2 00	 shl	 edx, 0
  00195	03 c2		 add	 eax, edx
  00197	50		 push	 eax
  00198	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0019b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001a0	b9 04 00 00 00	 mov	 ecx, 4
  001a5	6b d1 00	 imul	 edx, ecx, 0
  001a8	03 c2		 add	 eax, edx
  001aa	50		 push	 eax
  001ab	8d 4d 90	 lea	 ecx, DWORD PTR $T19[ebp]
  001ae	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  001b3	50		 push	 eax
  001b4	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  001b7	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001bc	b9 04 00 00 00	 mov	 ecx, 4
  001c1	d1 e1		 shl	 ecx, 1
  001c3	03 c1		 add	 eax, ecx
  001c5	50		 push	 eax
  001c6	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  001c9	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001ce	ba 04 00 00 00	 mov	 edx, 4
  001d3	c1 e2 00	 shl	 edx, 0
  001d6	03 c2		 add	 eax, edx
  001d8	50		 push	 eax
  001d9	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  001dc	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001e1	b9 04 00 00 00	 mov	 ecx, 4
  001e6	6b d1 00	 imul	 edx, ecx, 0
  001e9	03 c2		 add	 eax, edx
  001eb	50		 push	 eax
  001ec	8d 4d a0	 lea	 ecx, DWORD PTR $T20[ebp]
  001ef	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  001f4	50		 push	 eax
  001f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	8b 10		 mov	 edx, DWORD PTR [eax]
  001fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00200	ff d0		 call	 eax
  00202	3b f4		 cmp	 esi, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 311  : 		drawLine(btVector3(bbMin[0], bbMax[1], bbMin[2]), btVector3(bbMin[0], bbMin[1], bbMin[2]), color);

  00209	8b f4		 mov	 esi, esp
  0020b	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  0020e	51		 push	 ecx
  0020f	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00212	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00217	ba 04 00 00 00	 mov	 edx, 4
  0021c	d1 e2		 shl	 edx, 1
  0021e	03 c2		 add	 eax, edx
  00220	50		 push	 eax
  00221	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00224	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00229	b9 04 00 00 00	 mov	 ecx, 4
  0022e	c1 e1 00	 shl	 ecx, 0
  00231	03 c1		 add	 eax, ecx
  00233	50		 push	 eax
  00234	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00237	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0023c	ba 04 00 00 00	 mov	 edx, 4
  00241	6b ca 00	 imul	 ecx, edx, 0
  00244	03 c1		 add	 eax, ecx
  00246	50		 push	 eax
  00247	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  0024d	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00252	50		 push	 eax
  00253	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00256	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0025b	ba 04 00 00 00	 mov	 edx, 4
  00260	d1 e2		 shl	 edx, 1
  00262	03 c2		 add	 eax, edx
  00264	50		 push	 eax
  00265	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00268	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0026d	b9 04 00 00 00	 mov	 ecx, 4
  00272	c1 e1 00	 shl	 ecx, 0
  00275	03 c1		 add	 eax, ecx
  00277	50		 push	 eax
  00278	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0027b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00280	ba 04 00 00 00	 mov	 edx, 4
  00285	6b ca 00	 imul	 ecx, edx, 0
  00288	03 c1		 add	 eax, ecx
  0028a	50		 push	 eax
  0028b	8d 4d 80	 lea	 ecx, DWORD PTR $T18[ebp]
  0028e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00293	50		 push	 eax
  00294	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00297	8b 02		 mov	 eax, DWORD PTR [edx]
  00299	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0029f	ff d2		 call	 edx
  002a1	3b f4		 cmp	 esi, esp
  002a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 312  : 		drawLine(btVector3(bbMin[0], bbMin[1], bbMin[2]), btVector3(bbMin[0], bbMin[1], bbMax[2]), color);

  002a8	8b f4		 mov	 esi, esp
  002aa	8b 43 10	 mov	 eax, DWORD PTR _color$[ebx]
  002ad	50		 push	 eax
  002ae	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  002b1	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002b6	b9 04 00 00 00	 mov	 ecx, 4
  002bb	d1 e1		 shl	 ecx, 1
  002bd	03 c1		 add	 eax, ecx
  002bf	50		 push	 eax
  002c0	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  002c3	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002c8	ba 04 00 00 00	 mov	 edx, 4
  002cd	c1 e2 00	 shl	 edx, 0
  002d0	03 c2		 add	 eax, edx
  002d2	50		 push	 eax
  002d3	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  002d6	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002db	b9 04 00 00 00	 mov	 ecx, 4
  002e0	6b d1 00	 imul	 edx, ecx, 0
  002e3	03 c2		 add	 eax, edx
  002e5	50		 push	 eax
  002e6	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  002ec	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  002f1	50		 push	 eax
  002f2	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  002f5	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002fa	b9 04 00 00 00	 mov	 ecx, 4
  002ff	d1 e1		 shl	 ecx, 1
  00301	03 c1		 add	 eax, ecx
  00303	50		 push	 eax
  00304	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00307	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0030c	ba 04 00 00 00	 mov	 edx, 4
  00311	c1 e2 00	 shl	 edx, 0
  00314	03 c2		 add	 eax, edx
  00316	50		 push	 eax
  00317	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0031a	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0031f	b9 04 00 00 00	 mov	 ecx, 4
  00324	6b d1 00	 imul	 edx, ecx, 0
  00327	03 c2		 add	 eax, edx
  00329	50		 push	 eax
  0032a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00330	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00335	50		 push	 eax
  00336	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00339	8b 10		 mov	 edx, DWORD PTR [eax]
  0033b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00341	ff d0		 call	 eax
  00343	3b f4		 cmp	 esi, esp
  00345	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 313  : 		drawLine(btVector3(bbMax[0], bbMin[1], bbMin[2]), btVector3(bbMax[0], bbMin[1], bbMax[2]), color);

  0034a	8b f4		 mov	 esi, esp
  0034c	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  0034f	51		 push	 ecx
  00350	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00353	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00358	ba 04 00 00 00	 mov	 edx, 4
  0035d	d1 e2		 shl	 edx, 1
  0035f	03 c2		 add	 eax, edx
  00361	50		 push	 eax
  00362	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00365	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0036a	b9 04 00 00 00	 mov	 ecx, 4
  0036f	c1 e1 00	 shl	 ecx, 0
  00372	03 c1		 add	 eax, ecx
  00374	50		 push	 eax
  00375	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00378	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0037d	ba 04 00 00 00	 mov	 edx, 4
  00382	6b ca 00	 imul	 ecx, edx, 0
  00385	03 c1		 add	 eax, ecx
  00387	50		 push	 eax
  00388	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0038e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00393	50		 push	 eax
  00394	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00397	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0039c	ba 04 00 00 00	 mov	 edx, 4
  003a1	d1 e2		 shl	 edx, 1
  003a3	03 c2		 add	 eax, edx
  003a5	50		 push	 eax
  003a6	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  003a9	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  003ae	b9 04 00 00 00	 mov	 ecx, 4
  003b3	c1 e1 00	 shl	 ecx, 0
  003b6	03 c1		 add	 eax, ecx
  003b8	50		 push	 eax
  003b9	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  003bc	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  003c1	ba 04 00 00 00	 mov	 edx, 4
  003c6	6b ca 00	 imul	 ecx, edx, 0
  003c9	03 c1		 add	 eax, ecx
  003cb	50		 push	 eax
  003cc	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  003d2	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  003d7	50		 push	 eax
  003d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003db	8b 02		 mov	 eax, DWORD PTR [edx]
  003dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e0	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  003e3	ff d2		 call	 edx
  003e5	3b f4		 cmp	 esi, esp
  003e7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 314  : 		drawLine(btVector3(bbMax[0], bbMax[1], bbMin[2]), btVector3(bbMax[0], bbMax[1], bbMax[2]), color);

  003ec	8b f4		 mov	 esi, esp
  003ee	8b 43 10	 mov	 eax, DWORD PTR _color$[ebx]
  003f1	50		 push	 eax
  003f2	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  003f5	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  003fa	b9 04 00 00 00	 mov	 ecx, 4
  003ff	d1 e1		 shl	 ecx, 1
  00401	03 c1		 add	 eax, ecx
  00403	50		 push	 eax
  00404	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00407	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0040c	ba 04 00 00 00	 mov	 edx, 4
  00411	c1 e2 00	 shl	 edx, 0
  00414	03 c2		 add	 eax, edx
  00416	50		 push	 eax
  00417	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0041a	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0041f	b9 04 00 00 00	 mov	 ecx, 4
  00424	6b d1 00	 imul	 edx, ecx, 0
  00427	03 c2		 add	 eax, edx
  00429	50		 push	 eax
  0042a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00430	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00435	50		 push	 eax
  00436	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00439	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0043e	b9 04 00 00 00	 mov	 ecx, 4
  00443	d1 e1		 shl	 ecx, 1
  00445	03 c1		 add	 eax, ecx
  00447	50		 push	 eax
  00448	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0044b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00450	ba 04 00 00 00	 mov	 edx, 4
  00455	c1 e2 00	 shl	 edx, 0
  00458	03 c2		 add	 eax, edx
  0045a	50		 push	 eax
  0045b	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0045e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00463	b9 04 00 00 00	 mov	 ecx, 4
  00468	6b d1 00	 imul	 edx, ecx, 0
  0046b	03 c2		 add	 eax, edx
  0046d	50		 push	 eax
  0046e	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00474	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00479	50		 push	 eax
  0047a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0047d	8b 10		 mov	 edx, DWORD PTR [eax]
  0047f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00482	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00485	ff d0		 call	 eax
  00487	3b f4		 cmp	 esi, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 315  : 		drawLine(btVector3(bbMin[0], bbMax[1], bbMin[2]), btVector3(bbMin[0], bbMax[1], bbMax[2]), color);

  0048e	8b f4		 mov	 esi, esp
  00490	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  00493	51		 push	 ecx
  00494	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00497	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0049c	ba 04 00 00 00	 mov	 edx, 4
  004a1	d1 e2		 shl	 edx, 1
  004a3	03 c2		 add	 eax, edx
  004a5	50		 push	 eax
  004a6	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  004a9	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004ae	b9 04 00 00 00	 mov	 ecx, 4
  004b3	c1 e1 00	 shl	 ecx, 0
  004b6	03 c1		 add	 eax, ecx
  004b8	50		 push	 eax
  004b9	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  004bc	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004c1	ba 04 00 00 00	 mov	 edx, 4
  004c6	6b ca 00	 imul	 ecx, edx, 0
  004c9	03 c1		 add	 eax, ecx
  004cb	50		 push	 eax
  004cc	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  004d2	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  004d7	50		 push	 eax
  004d8	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  004db	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004e0	ba 04 00 00 00	 mov	 edx, 4
  004e5	d1 e2		 shl	 edx, 1
  004e7	03 c2		 add	 eax, edx
  004e9	50		 push	 eax
  004ea	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  004ed	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004f2	b9 04 00 00 00	 mov	 ecx, 4
  004f7	c1 e1 00	 shl	 ecx, 0
  004fa	03 c1		 add	 eax, ecx
  004fc	50		 push	 eax
  004fd	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00500	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00505	ba 04 00 00 00	 mov	 edx, 4
  0050a	6b ca 00	 imul	 ecx, edx, 0
  0050d	03 c1		 add	 eax, ecx
  0050f	50		 push	 eax
  00510	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00516	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0051b	50		 push	 eax
  0051c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0051f	8b 02		 mov	 eax, DWORD PTR [edx]
  00521	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00524	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00527	ff d2		 call	 edx
  00529	3b f4		 cmp	 esi, esp
  0052b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 316  : 		drawLine(btVector3(bbMin[0], bbMin[1], bbMax[2]), btVector3(bbMax[0], bbMin[1], bbMax[2]), color);

  00530	8b f4		 mov	 esi, esp
  00532	8b 43 10	 mov	 eax, DWORD PTR _color$[ebx]
  00535	50		 push	 eax
  00536	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00539	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0053e	b9 04 00 00 00	 mov	 ecx, 4
  00543	d1 e1		 shl	 ecx, 1
  00545	03 c1		 add	 eax, ecx
  00547	50		 push	 eax
  00548	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0054b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00550	ba 04 00 00 00	 mov	 edx, 4
  00555	c1 e2 00	 shl	 edx, 0
  00558	03 c2		 add	 eax, edx
  0055a	50		 push	 eax
  0055b	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0055e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00563	b9 04 00 00 00	 mov	 ecx, 4
  00568	6b d1 00	 imul	 edx, ecx, 0
  0056b	03 c2		 add	 eax, edx
  0056d	50		 push	 eax
  0056e	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00574	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00579	50		 push	 eax
  0057a	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0057d	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00582	b9 04 00 00 00	 mov	 ecx, 4
  00587	d1 e1		 shl	 ecx, 1
  00589	03 c1		 add	 eax, ecx
  0058b	50		 push	 eax
  0058c	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0058f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00594	ba 04 00 00 00	 mov	 edx, 4
  00599	c1 e2 00	 shl	 edx, 0
  0059c	03 c2		 add	 eax, edx
  0059e	50		 push	 eax
  0059f	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  005a2	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005a7	b9 04 00 00 00	 mov	 ecx, 4
  005ac	6b d1 00	 imul	 edx, ecx, 0
  005af	03 c2		 add	 eax, edx
  005b1	50		 push	 eax
  005b2	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  005b8	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  005bd	50		 push	 eax
  005be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005c1	8b 10		 mov	 edx, DWORD PTR [eax]
  005c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005c9	ff d0		 call	 eax
  005cb	3b f4		 cmp	 esi, esp
  005cd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 317  : 		drawLine(btVector3(bbMax[0], bbMin[1], bbMax[2]), btVector3(bbMax[0], bbMax[1], bbMax[2]), color);

  005d2	8b f4		 mov	 esi, esp
  005d4	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  005d7	51		 push	 ecx
  005d8	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  005db	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005e0	ba 04 00 00 00	 mov	 edx, 4
  005e5	d1 e2		 shl	 edx, 1
  005e7	03 c2		 add	 eax, edx
  005e9	50		 push	 eax
  005ea	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  005ed	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005f2	b9 04 00 00 00	 mov	 ecx, 4
  005f7	c1 e1 00	 shl	 ecx, 0
  005fa	03 c1		 add	 eax, ecx
  005fc	50		 push	 eax
  005fd	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00600	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00605	ba 04 00 00 00	 mov	 edx, 4
  0060a	6b ca 00	 imul	 ecx, edx, 0
  0060d	03 c1		 add	 eax, ecx
  0060f	50		 push	 eax
  00610	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00616	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0061b	50		 push	 eax
  0061c	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0061f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00624	ba 04 00 00 00	 mov	 edx, 4
  00629	d1 e2		 shl	 edx, 1
  0062b	03 c2		 add	 eax, edx
  0062d	50		 push	 eax
  0062e	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00631	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00636	b9 04 00 00 00	 mov	 ecx, 4
  0063b	c1 e1 00	 shl	 ecx, 0
  0063e	03 c1		 add	 eax, ecx
  00640	50		 push	 eax
  00641	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00644	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00649	ba 04 00 00 00	 mov	 edx, 4
  0064e	6b ca 00	 imul	 ecx, edx, 0
  00651	03 c1		 add	 eax, ecx
  00653	50		 push	 eax
  00654	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0065a	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0065f	50		 push	 eax
  00660	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00663	8b 02		 mov	 eax, DWORD PTR [edx]
  00665	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00668	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0066b	ff d2		 call	 edx
  0066d	3b f4		 cmp	 esi, esp
  0066f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 318  : 		drawLine(btVector3(bbMax[0], bbMax[1], bbMax[2]), btVector3(bbMin[0], bbMax[1], bbMax[2]), color);

  00674	8b f4		 mov	 esi, esp
  00676	8b 43 10	 mov	 eax, DWORD PTR _color$[ebx]
  00679	50		 push	 eax
  0067a	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0067d	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00682	b9 04 00 00 00	 mov	 ecx, 4
  00687	d1 e1		 shl	 ecx, 1
  00689	03 c1		 add	 eax, ecx
  0068b	50		 push	 eax
  0068c	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0068f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00694	ba 04 00 00 00	 mov	 edx, 4
  00699	c1 e2 00	 shl	 edx, 0
  0069c	03 c2		 add	 eax, edx
  0069e	50		 push	 eax
  0069f	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  006a2	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  006a7	b9 04 00 00 00	 mov	 ecx, 4
  006ac	6b d1 00	 imul	 edx, ecx, 0
  006af	03 c2		 add	 eax, edx
  006b1	50		 push	 eax
  006b2	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  006b8	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  006bd	50		 push	 eax
  006be	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  006c1	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  006c6	b9 04 00 00 00	 mov	 ecx, 4
  006cb	d1 e1		 shl	 ecx, 1
  006cd	03 c1		 add	 eax, ecx
  006cf	50		 push	 eax
  006d0	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  006d3	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  006d8	ba 04 00 00 00	 mov	 edx, 4
  006dd	c1 e2 00	 shl	 edx, 0
  006e0	03 c2		 add	 eax, edx
  006e2	50		 push	 eax
  006e3	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  006e6	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  006eb	b9 04 00 00 00	 mov	 ecx, 4
  006f0	6b d1 00	 imul	 edx, ecx, 0
  006f3	03 c2		 add	 eax, edx
  006f5	50		 push	 eax
  006f6	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  006fc	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00701	50		 push	 eax
  00702	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00705	8b 10		 mov	 edx, DWORD PTR [eax]
  00707	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0070a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0070d	ff d0		 call	 eax
  0070f	3b f4		 cmp	 esi, esp
  00711	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 319  : 		drawLine(btVector3(bbMin[0], bbMax[1], bbMax[2]), btVector3(bbMin[0], bbMin[1], bbMax[2]), color);

  00716	8b f4		 mov	 esi, esp
  00718	8b 4b 10	 mov	 ecx, DWORD PTR _color$[ebx]
  0071b	51		 push	 ecx
  0071c	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0071f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00724	ba 04 00 00 00	 mov	 edx, 4
  00729	d1 e2		 shl	 edx, 1
  0072b	03 c2		 add	 eax, edx
  0072d	50		 push	 eax
  0072e	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00731	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00736	b9 04 00 00 00	 mov	 ecx, 4
  0073b	c1 e1 00	 shl	 ecx, 0
  0073e	03 c1		 add	 eax, ecx
  00740	50		 push	 eax
  00741	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00744	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00749	ba 04 00 00 00	 mov	 edx, 4
  0074e	6b ca 00	 imul	 ecx, edx, 0
  00751	03 c1		 add	 eax, ecx
  00753	50		 push	 eax
  00754	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0075a	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0075f	50		 push	 eax
  00760	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00763	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00768	ba 04 00 00 00	 mov	 edx, 4
  0076d	d1 e2		 shl	 edx, 1
  0076f	03 c2		 add	 eax, edx
  00771	50		 push	 eax
  00772	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00775	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0077a	b9 04 00 00 00	 mov	 ecx, 4
  0077f	c1 e1 00	 shl	 ecx, 0
  00782	03 c1		 add	 eax, ecx
  00784	50		 push	 eax
  00785	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00788	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0078d	ba 04 00 00 00	 mov	 edx, 4
  00792	6b ca 00	 imul	 ecx, edx, 0
  00795	03 c1		 add	 eax, ecx
  00797	50		 push	 eax
  00798	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0079e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  007a3	50		 push	 eax
  007a4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007a7	8b 02		 mov	 eax, DWORD PTR [edx]
  007a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ac	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  007af	ff d2		 call	 edx
  007b1	3b f4		 cmp	 esi, esp
  007b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 320  : 	}

  007b8	5f		 pop	 edi
  007b9	5e		 pop	 esi
  007ba	8b e5		 mov	 esp, ebp
  007bc	5d		 pop	 ebp
  007bd	8b e3		 mov	 esp, ebx
  007bf	5b		 pop	 ebx
  007c0	c2 0c 00	 ret	 12			; 0000000cH
?drawBox@btIDebugDraw@@UAEXABVbtVector3@@00@Z ENDP	; btIDebugDraw::drawBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawBox@btIDebugDraw@@UAEXABVbtVector3@@0ABVbtTransform@@0@Z
_TEXT	SEGMENT
$T1 = -784						; size = 16
$T2 = -768						; size = 16
$T3 = -752						; size = 16
$T4 = -736						; size = 16
$T5 = -720						; size = 16
$T6 = -704						; size = 16
$T7 = -688						; size = 16
$T8 = -672						; size = 16
$T9 = -656						; size = 16
$T10 = -640						; size = 16
$T11 = -624						; size = 16
$T12 = -608						; size = 16
$T13 = -592						; size = 16
$T14 = -576						; size = 16
$T15 = -560						; size = 16
$T16 = -544						; size = 16
$T17 = -528						; size = 16
$T18 = -512						; size = 16
$T19 = -496						; size = 16
$T20 = -480						; size = 16
$T21 = -464						; size = 16
$T22 = -448						; size = 16
$T23 = -432						; size = 16
$T24 = -416						; size = 16
$T25 = -400						; size = 16
$T26 = -384						; size = 16
$T27 = -368						; size = 16
$T28 = -352						; size = 16
$T29 = -336						; size = 16
$T30 = -320						; size = 16
$T31 = -304						; size = 16
$T32 = -288						; size = 16
$T33 = -272						; size = 16
$T34 = -256						; size = 16
$T35 = -240						; size = 16
$T36 = -224						; size = 16
$T37 = -208						; size = 16
$T38 = -192						; size = 16
$T39 = -176						; size = 16
$T40 = -160						; size = 16
$T41 = -144						; size = 16
$T42 = -128						; size = 16
$T43 = -112						; size = 16
$T44 = -96						; size = 16
$T45 = -80						; size = 16
$T46 = -64						; size = 16
$T47 = -48						; size = 16
$T48 = -32						; size = 16
_this$ = -4						; size = 4
_bbMin$ = 8						; size = 4
_bbMax$ = 12						; size = 4
_trans$ = 16						; size = 4
_color$ = 20						; size = 4
?drawBox@btIDebugDraw@@UAEXABVbtVector3@@0ABVbtTransform@@0@Z PROC ; btIDebugDraw::drawBox, COMDAT
; _this$ = ecx

; 322  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 1c 03 00
	00		 sub	 esp, 796		; 0000031cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd e4 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-796]
  00025	b9 c7 00 00 00	 mov	 ecx, 199		; 000000c7H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 323  : 		drawLine(trans * btVector3(bbMin[0], bbMin[1], bbMin[2]), trans * btVector3(bbMax[0], bbMin[1], bbMin[2]), color);

  00035	8b f4		 mov	 esi, esp
  00037	8b 43 14	 mov	 eax, DWORD PTR _color$[ebx]
  0003a	50		 push	 eax
  0003b	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0003e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00043	b9 04 00 00 00	 mov	 ecx, 4
  00048	d1 e1		 shl	 ecx, 1
  0004a	03 c1		 add	 eax, ecx
  0004c	50		 push	 eax
  0004d	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00050	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00055	ba 04 00 00 00	 mov	 edx, 4
  0005a	c1 e2 00	 shl	 edx, 0
  0005d	03 c2		 add	 eax, edx
  0005f	50		 push	 eax
  00060	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00063	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00068	b9 04 00 00 00	 mov	 ecx, 4
  0006d	6b d1 00	 imul	 edx, ecx, 0
  00070	03 c2		 add	 eax, edx
  00072	50		 push	 eax
  00073	8d 4d c0	 lea	 ecx, DWORD PTR $T46[ebp]
  00076	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0007b	50		 push	 eax
  0007c	8d 45 b0	 lea	 eax, DWORD PTR $T45[ebp]
  0007f	50		 push	 eax
  00080	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00083	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00088	50		 push	 eax
  00089	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0008c	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00091	b9 04 00 00 00	 mov	 ecx, 4
  00096	d1 e1		 shl	 ecx, 1
  00098	03 c1		 add	 eax, ecx
  0009a	50		 push	 eax
  0009b	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0009e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  000a3	ba 04 00 00 00	 mov	 edx, 4
  000a8	c1 e2 00	 shl	 edx, 0
  000ab	03 c2		 add	 eax, edx
  000ad	50		 push	 eax
  000ae	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  000b1	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  000b6	b9 04 00 00 00	 mov	 ecx, 4
  000bb	6b d1 00	 imul	 edx, ecx, 0
  000be	03 c2		 add	 eax, edx
  000c0	50		 push	 eax
  000c1	8d 4d e0	 lea	 ecx, DWORD PTR $T48[ebp]
  000c4	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  000c9	50		 push	 eax
  000ca	8d 45 d0	 lea	 eax, DWORD PTR $T47[ebp]
  000cd	50		 push	 eax
  000ce	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  000d1	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  000d6	50		 push	 eax
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e2	ff d0		 call	 eax
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 324  : 		drawLine(trans * btVector3(bbMax[0], bbMin[1], bbMin[2]), trans * btVector3(bbMax[0], bbMax[1], bbMin[2]), color);

  000eb	8b f4		 mov	 esi, esp
  000ed	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  000f0	51		 push	 ecx
  000f1	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  000f4	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  000f9	ba 04 00 00 00	 mov	 edx, 4
  000fe	d1 e2		 shl	 edx, 1
  00100	03 c2		 add	 eax, edx
  00102	50		 push	 eax
  00103	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00106	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0010b	b9 04 00 00 00	 mov	 ecx, 4
  00110	c1 e1 00	 shl	 ecx, 0
  00113	03 c1		 add	 eax, ecx
  00115	50		 push	 eax
  00116	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00119	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0011e	ba 04 00 00 00	 mov	 edx, 4
  00123	6b ca 00	 imul	 ecx, edx, 0
  00126	03 c1		 add	 eax, ecx
  00128	50		 push	 eax
  00129	8d 4d 80	 lea	 ecx, DWORD PTR $T42[ebp]
  0012c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00131	50		 push	 eax
  00132	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T41[ebp]
  00138	52		 push	 edx
  00139	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0013c	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00141	50		 push	 eax
  00142	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00145	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0014a	b9 04 00 00 00	 mov	 ecx, 4
  0014f	d1 e1		 shl	 ecx, 1
  00151	03 c1		 add	 eax, ecx
  00153	50		 push	 eax
  00154	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00157	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0015c	ba 04 00 00 00	 mov	 edx, 4
  00161	c1 e2 00	 shl	 edx, 0
  00164	03 c2		 add	 eax, edx
  00166	50		 push	 eax
  00167	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0016a	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0016f	b9 04 00 00 00	 mov	 ecx, 4
  00174	6b d1 00	 imul	 edx, ecx, 0
  00177	03 c2		 add	 eax, edx
  00179	50		 push	 eax
  0017a	8d 4d a0	 lea	 ecx, DWORD PTR $T44[ebp]
  0017d	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00182	50		 push	 eax
  00183	8d 45 90	 lea	 eax, DWORD PTR $T43[ebp]
  00186	50		 push	 eax
  00187	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0018a	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  0018f	50		 push	 eax
  00190	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00193	8b 11		 mov	 edx, DWORD PTR [ecx]
  00195	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00198	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0019b	ff d0		 call	 eax
  0019d	3b f4		 cmp	 esi, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 325  : 		drawLine(trans * btVector3(bbMax[0], bbMax[1], bbMin[2]), trans * btVector3(bbMin[0], bbMax[1], bbMin[2]), color);

  001a4	8b f4		 mov	 esi, esp
  001a6	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  001a9	51		 push	 ecx
  001aa	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  001ad	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001b2	ba 04 00 00 00	 mov	 edx, 4
  001b7	d1 e2		 shl	 edx, 1
  001b9	03 c2		 add	 eax, edx
  001bb	50		 push	 eax
  001bc	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  001bf	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001c4	b9 04 00 00 00	 mov	 ecx, 4
  001c9	c1 e1 00	 shl	 ecx, 0
  001cc	03 c1		 add	 eax, ecx
  001ce	50		 push	 eax
  001cf	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  001d2	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001d7	ba 04 00 00 00	 mov	 edx, 4
  001dc	6b ca 00	 imul	 ecx, edx, 0
  001df	03 c1		 add	 eax, ecx
  001e1	50		 push	 eax
  001e2	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  001e8	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  001ed	50		 push	 eax
  001ee	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR $T37[ebp]
  001f4	52		 push	 edx
  001f5	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  001f8	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  001fd	50		 push	 eax
  001fe	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00201	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00206	b9 04 00 00 00	 mov	 ecx, 4
  0020b	d1 e1		 shl	 ecx, 1
  0020d	03 c1		 add	 eax, ecx
  0020f	50		 push	 eax
  00210	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00213	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00218	ba 04 00 00 00	 mov	 edx, 4
  0021d	c1 e2 00	 shl	 edx, 0
  00220	03 c2		 add	 eax, edx
  00222	50		 push	 eax
  00223	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00226	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0022b	b9 04 00 00 00	 mov	 ecx, 4
  00230	6b d1 00	 imul	 edx, ecx, 0
  00233	03 c2		 add	 eax, edx
  00235	50		 push	 eax
  00236	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  0023c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00241	50		 push	 eax
  00242	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  00248	50		 push	 eax
  00249	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0024c	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00251	50		 push	 eax
  00252	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00255	8b 11		 mov	 edx, DWORD PTR [ecx]
  00257	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0025d	ff d0		 call	 eax
  0025f	3b f4		 cmp	 esi, esp
  00261	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 326  : 		drawLine(trans * btVector3(bbMin[0], bbMax[1], bbMin[2]), trans * btVector3(bbMin[0], bbMin[1], bbMin[2]), color);

  00266	8b f4		 mov	 esi, esp
  00268	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  0026b	51		 push	 ecx
  0026c	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0026f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00274	ba 04 00 00 00	 mov	 edx, 4
  00279	d1 e2		 shl	 edx, 1
  0027b	03 c2		 add	 eax, edx
  0027d	50		 push	 eax
  0027e	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00281	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00286	b9 04 00 00 00	 mov	 ecx, 4
  0028b	c1 e1 00	 shl	 ecx, 0
  0028e	03 c1		 add	 eax, ecx
  00290	50		 push	 eax
  00291	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00294	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00299	ba 04 00 00 00	 mov	 edx, 4
  0029e	6b ca 00	 imul	 ecx, edx, 0
  002a1	03 c1		 add	 eax, ecx
  002a3	50		 push	 eax
  002a4	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  002aa	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  002af	50		 push	 eax
  002b0	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T33[ebp]
  002b6	52		 push	 edx
  002b7	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  002ba	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  002bf	50		 push	 eax
  002c0	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  002c3	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002c8	b9 04 00 00 00	 mov	 ecx, 4
  002cd	d1 e1		 shl	 ecx, 1
  002cf	03 c1		 add	 eax, ecx
  002d1	50		 push	 eax
  002d2	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  002d5	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002da	ba 04 00 00 00	 mov	 edx, 4
  002df	c1 e2 00	 shl	 edx, 0
  002e2	03 c2		 add	 eax, edx
  002e4	50		 push	 eax
  002e5	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  002e8	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002ed	b9 04 00 00 00	 mov	 ecx, 4
  002f2	6b d1 00	 imul	 edx, ecx, 0
  002f5	03 c2		 add	 eax, edx
  002f7	50		 push	 eax
  002f8	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  002fe	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00303	50		 push	 eax
  00304	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T35[ebp]
  0030a	50		 push	 eax
  0030b	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0030e	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00313	50		 push	 eax
  00314	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00317	8b 11		 mov	 edx, DWORD PTR [ecx]
  00319	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0031f	ff d0		 call	 eax
  00321	3b f4		 cmp	 esi, esp
  00323	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 327  : 		drawLine(trans * btVector3(bbMin[0], bbMin[1], bbMin[2]), trans * btVector3(bbMin[0], bbMin[1], bbMax[2]), color);

  00328	8b f4		 mov	 esi, esp
  0032a	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  0032d	51		 push	 ecx
  0032e	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00331	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00336	ba 04 00 00 00	 mov	 edx, 4
  0033b	d1 e2		 shl	 edx, 1
  0033d	03 c2		 add	 eax, edx
  0033f	50		 push	 eax
  00340	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00343	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00348	b9 04 00 00 00	 mov	 ecx, 4
  0034d	c1 e1 00	 shl	 ecx, 0
  00350	03 c1		 add	 eax, ecx
  00352	50		 push	 eax
  00353	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00356	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0035b	ba 04 00 00 00	 mov	 edx, 4
  00360	6b ca 00	 imul	 ecx, edx, 0
  00363	03 c1		 add	 eax, ecx
  00365	50		 push	 eax
  00366	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  0036c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00371	50		 push	 eax
  00372	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR $T29[ebp]
  00378	52		 push	 edx
  00379	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0037c	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00381	50		 push	 eax
  00382	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00385	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0038a	b9 04 00 00 00	 mov	 ecx, 4
  0038f	d1 e1		 shl	 ecx, 1
  00391	03 c1		 add	 eax, ecx
  00393	50		 push	 eax
  00394	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00397	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0039c	ba 04 00 00 00	 mov	 edx, 4
  003a1	c1 e2 00	 shl	 edx, 0
  003a4	03 c2		 add	 eax, edx
  003a6	50		 push	 eax
  003a7	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  003aa	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  003af	b9 04 00 00 00	 mov	 ecx, 4
  003b4	6b d1 00	 imul	 edx, ecx, 0
  003b7	03 c2		 add	 eax, edx
  003b9	50		 push	 eax
  003ba	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  003c0	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  003c5	50		 push	 eax
  003c6	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T31[ebp]
  003cc	50		 push	 eax
  003cd	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  003d0	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  003d5	50		 push	 eax
  003d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d9	8b 11		 mov	 edx, DWORD PTR [ecx]
  003db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003de	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003e1	ff d0		 call	 eax
  003e3	3b f4		 cmp	 esi, esp
  003e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 328  : 		drawLine(trans * btVector3(bbMax[0], bbMin[1], bbMin[2]), trans * btVector3(bbMax[0], bbMin[1], bbMax[2]), color);

  003ea	8b f4		 mov	 esi, esp
  003ec	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  003ef	51		 push	 ecx
  003f0	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  003f3	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  003f8	ba 04 00 00 00	 mov	 edx, 4
  003fd	d1 e2		 shl	 edx, 1
  003ff	03 c2		 add	 eax, edx
  00401	50		 push	 eax
  00402	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00405	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0040a	b9 04 00 00 00	 mov	 ecx, 4
  0040f	c1 e1 00	 shl	 ecx, 0
  00412	03 c1		 add	 eax, ecx
  00414	50		 push	 eax
  00415	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00418	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0041d	ba 04 00 00 00	 mov	 edx, 4
  00422	6b ca 00	 imul	 ecx, edx, 0
  00425	03 c1		 add	 eax, ecx
  00427	50		 push	 eax
  00428	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  0042e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00433	50		 push	 eax
  00434	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR $T25[ebp]
  0043a	52		 push	 edx
  0043b	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0043e	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00443	50		 push	 eax
  00444	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00447	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0044c	b9 04 00 00 00	 mov	 ecx, 4
  00451	d1 e1		 shl	 ecx, 1
  00453	03 c1		 add	 eax, ecx
  00455	50		 push	 eax
  00456	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00459	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0045e	ba 04 00 00 00	 mov	 edx, 4
  00463	c1 e2 00	 shl	 edx, 0
  00466	03 c2		 add	 eax, edx
  00468	50		 push	 eax
  00469	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0046c	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00471	b9 04 00 00 00	 mov	 ecx, 4
  00476	6b d1 00	 imul	 edx, ecx, 0
  00479	03 c2		 add	 eax, edx
  0047b	50		 push	 eax
  0047c	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00482	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00487	50		 push	 eax
  00488	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  0048e	50		 push	 eax
  0048f	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00492	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00497	50		 push	 eax
  00498	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0049d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004a3	ff d0		 call	 eax
  004a5	3b f4		 cmp	 esi, esp
  004a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 329  : 		drawLine(trans * btVector3(bbMax[0], bbMax[1], bbMin[2]), trans * btVector3(bbMax[0], bbMax[1], bbMax[2]), color);

  004ac	8b f4		 mov	 esi, esp
  004ae	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  004b1	51		 push	 ecx
  004b2	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  004b5	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004ba	ba 04 00 00 00	 mov	 edx, 4
  004bf	d1 e2		 shl	 edx, 1
  004c1	03 c2		 add	 eax, edx
  004c3	50		 push	 eax
  004c4	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  004c7	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004cc	b9 04 00 00 00	 mov	 ecx, 4
  004d1	c1 e1 00	 shl	 ecx, 0
  004d4	03 c1		 add	 eax, ecx
  004d6	50		 push	 eax
  004d7	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  004da	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  004df	ba 04 00 00 00	 mov	 edx, 4
  004e4	6b ca 00	 imul	 ecx, edx, 0
  004e7	03 c1		 add	 eax, ecx
  004e9	50		 push	 eax
  004ea	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  004f0	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  004f5	50		 push	 eax
  004f6	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR $T21[ebp]
  004fc	52		 push	 edx
  004fd	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00500	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00505	50		 push	 eax
  00506	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00509	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0050e	b9 04 00 00 00	 mov	 ecx, 4
  00513	d1 e1		 shl	 ecx, 1
  00515	03 c1		 add	 eax, ecx
  00517	50		 push	 eax
  00518	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0051b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00520	ba 04 00 00 00	 mov	 edx, 4
  00525	c1 e2 00	 shl	 edx, 0
  00528	03 c2		 add	 eax, edx
  0052a	50		 push	 eax
  0052b	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0052e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00533	b9 04 00 00 00	 mov	 ecx, 4
  00538	6b d1 00	 imul	 edx, ecx, 0
  0053b	03 c2		 add	 eax, edx
  0053d	50		 push	 eax
  0053e	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  00544	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00549	50		 push	 eax
  0054a	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T23[ebp]
  00550	50		 push	 eax
  00551	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00554	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00559	50		 push	 eax
  0055a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0055f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00562	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00565	ff d0		 call	 eax
  00567	3b f4		 cmp	 esi, esp
  00569	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 330  : 		drawLine(trans * btVector3(bbMin[0], bbMax[1], bbMin[2]), trans * btVector3(bbMin[0], bbMax[1], bbMax[2]), color);

  0056e	8b f4		 mov	 esi, esp
  00570	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  00573	51		 push	 ecx
  00574	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00577	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0057c	ba 04 00 00 00	 mov	 edx, 4
  00581	d1 e2		 shl	 edx, 1
  00583	03 c2		 add	 eax, edx
  00585	50		 push	 eax
  00586	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00589	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0058e	b9 04 00 00 00	 mov	 ecx, 4
  00593	c1 e1 00	 shl	 ecx, 0
  00596	03 c1		 add	 eax, ecx
  00598	50		 push	 eax
  00599	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0059c	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005a1	ba 04 00 00 00	 mov	 edx, 4
  005a6	6b ca 00	 imul	 ecx, edx, 0
  005a9	03 c1		 add	 eax, ecx
  005ab	50		 push	 eax
  005ac	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  005b2	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  005b7	50		 push	 eax
  005b8	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR $T17[ebp]
  005be	52		 push	 edx
  005bf	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  005c2	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  005c7	50		 push	 eax
  005c8	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  005cb	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005d0	b9 04 00 00 00	 mov	 ecx, 4
  005d5	d1 e1		 shl	 ecx, 1
  005d7	03 c1		 add	 eax, ecx
  005d9	50		 push	 eax
  005da	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  005dd	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005e2	ba 04 00 00 00	 mov	 edx, 4
  005e7	c1 e2 00	 shl	 edx, 0
  005ea	03 c2		 add	 eax, edx
  005ec	50		 push	 eax
  005ed	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  005f0	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  005f5	b9 04 00 00 00	 mov	 ecx, 4
  005fa	6b d1 00	 imul	 edx, ecx, 0
  005fd	03 c2		 add	 eax, edx
  005ff	50		 push	 eax
  00600	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00606	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0060b	50		 push	 eax
  0060c	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  00612	50		 push	 eax
  00613	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00616	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  0061b	50		 push	 eax
  0061c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0061f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00621	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00624	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00627	ff d0		 call	 eax
  00629	3b f4		 cmp	 esi, esp
  0062b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 331  : 		drawLine(trans * btVector3(bbMin[0], bbMin[1], bbMax[2]), trans * btVector3(bbMax[0], bbMin[1], bbMax[2]), color);

  00630	8b f4		 mov	 esi, esp
  00632	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  00635	51		 push	 ecx
  00636	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00639	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0063e	ba 04 00 00 00	 mov	 edx, 4
  00643	d1 e2		 shl	 edx, 1
  00645	03 c2		 add	 eax, edx
  00647	50		 push	 eax
  00648	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0064b	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00650	b9 04 00 00 00	 mov	 ecx, 4
  00655	c1 e1 00	 shl	 ecx, 0
  00658	03 c1		 add	 eax, ecx
  0065a	50		 push	 eax
  0065b	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0065e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00663	ba 04 00 00 00	 mov	 edx, 4
  00668	6b ca 00	 imul	 ecx, edx, 0
  0066b	03 c1		 add	 eax, ecx
  0066d	50		 push	 eax
  0066e	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00674	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00679	50		 push	 eax
  0067a	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  00680	52		 push	 edx
  00681	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00684	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00689	50		 push	 eax
  0068a	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0068d	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00692	b9 04 00 00 00	 mov	 ecx, 4
  00697	d1 e1		 shl	 ecx, 1
  00699	03 c1		 add	 eax, ecx
  0069b	50		 push	 eax
  0069c	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  0069f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  006a4	ba 04 00 00 00	 mov	 edx, 4
  006a9	c1 e2 00	 shl	 edx, 0
  006ac	03 c2		 add	 eax, edx
  006ae	50		 push	 eax
  006af	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  006b2	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  006b7	b9 04 00 00 00	 mov	 ecx, 4
  006bc	6b d1 00	 imul	 edx, ecx, 0
  006bf	03 c2		 add	 eax, edx
  006c1	50		 push	 eax
  006c2	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  006c8	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  006cd	50		 push	 eax
  006ce	8d 85 d0 fd ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  006d4	50		 push	 eax
  006d5	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  006d8	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  006dd	50		 push	 eax
  006de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  006e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006e9	ff d0		 call	 eax
  006eb	3b f4		 cmp	 esi, esp
  006ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 332  : 		drawLine(trans * btVector3(bbMax[0], bbMin[1], bbMax[2]), trans * btVector3(bbMax[0], bbMax[1], bbMax[2]), color);

  006f2	8b f4		 mov	 esi, esp
  006f4	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  006f7	51		 push	 ecx
  006f8	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  006fb	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00700	ba 04 00 00 00	 mov	 edx, 4
  00705	d1 e2		 shl	 edx, 1
  00707	03 c2		 add	 eax, edx
  00709	50		 push	 eax
  0070a	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0070d	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00712	b9 04 00 00 00	 mov	 ecx, 4
  00717	c1 e1 00	 shl	 ecx, 0
  0071a	03 c1		 add	 eax, ecx
  0071c	50		 push	 eax
  0071d	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00720	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00725	ba 04 00 00 00	 mov	 edx, 4
  0072a	6b ca 00	 imul	 ecx, edx, 0
  0072d	03 c1		 add	 eax, ecx
  0072f	50		 push	 eax
  00730	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00736	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0073b	50		 push	 eax
  0073c	8d 95 70 fd ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  00742	52		 push	 edx
  00743	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00746	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  0074b	50		 push	 eax
  0074c	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0074f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00754	b9 04 00 00 00	 mov	 ecx, 4
  00759	d1 e1		 shl	 ecx, 1
  0075b	03 c1		 add	 eax, ecx
  0075d	50		 push	 eax
  0075e	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00761	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00766	ba 04 00 00 00	 mov	 edx, 4
  0076b	c1 e2 00	 shl	 edx, 0
  0076e	03 c2		 add	 eax, edx
  00770	50		 push	 eax
  00771	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00774	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00779	b9 04 00 00 00	 mov	 ecx, 4
  0077e	6b d1 00	 imul	 edx, ecx, 0
  00781	03 c2		 add	 eax, edx
  00783	50		 push	 eax
  00784	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0078a	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  0078f	50		 push	 eax
  00790	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00796	50		 push	 eax
  00797	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0079a	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  0079f	50		 push	 eax
  007a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  007a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  007ab	ff d0		 call	 eax
  007ad	3b f4		 cmp	 esi, esp
  007af	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 333  : 		drawLine(trans * btVector3(bbMax[0], bbMax[1], bbMax[2]), trans * btVector3(bbMin[0], bbMax[1], bbMax[2]), color);

  007b4	8b f4		 mov	 esi, esp
  007b6	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  007b9	51		 push	 ecx
  007ba	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  007bd	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  007c2	ba 04 00 00 00	 mov	 edx, 4
  007c7	d1 e2		 shl	 edx, 1
  007c9	03 c2		 add	 eax, edx
  007cb	50		 push	 eax
  007cc	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  007cf	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  007d4	b9 04 00 00 00	 mov	 ecx, 4
  007d9	c1 e1 00	 shl	 ecx, 0
  007dc	03 c1		 add	 eax, ecx
  007de	50		 push	 eax
  007df	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  007e2	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  007e7	ba 04 00 00 00	 mov	 edx, 4
  007ec	6b ca 00	 imul	 ecx, edx, 0
  007ef	03 c1		 add	 eax, ecx
  007f1	50		 push	 eax
  007f2	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  007f8	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  007fd	50		 push	 eax
  007fe	8d 95 30 fd ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00804	52		 push	 edx
  00805	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  00808	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  0080d	50		 push	 eax
  0080e	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00811	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00816	b9 04 00 00 00	 mov	 ecx, 4
  0081b	d1 e1		 shl	 ecx, 1
  0081d	03 c1		 add	 eax, ecx
  0081f	50		 push	 eax
  00820	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00823	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00828	ba 04 00 00 00	 mov	 edx, 4
  0082d	c1 e2 00	 shl	 edx, 0
  00830	03 c2		 add	 eax, edx
  00832	50		 push	 eax
  00833	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  00836	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0083b	b9 04 00 00 00	 mov	 ecx, 4
  00840	6b d1 00	 imul	 edx, ecx, 0
  00843	03 c2		 add	 eax, edx
  00845	50		 push	 eax
  00846	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0084c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00851	50		 push	 eax
  00852	8d 85 50 fd ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00858	50		 push	 eax
  00859	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0085c	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00861	50		 push	 eax
  00862	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00865	8b 11		 mov	 edx, DWORD PTR [ecx]
  00867	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0086a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0086d	ff d0		 call	 eax
  0086f	3b f4		 cmp	 esi, esp
  00871	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 334  : 		drawLine(trans * btVector3(bbMin[0], bbMax[1], bbMax[2]), trans * btVector3(bbMin[0], bbMin[1], bbMax[2]), color);

  00876	8b f4		 mov	 esi, esp
  00878	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  0087b	51		 push	 ecx
  0087c	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  0087f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00884	ba 04 00 00 00	 mov	 edx, 4
  00889	d1 e2		 shl	 edx, 1
  0088b	03 c2		 add	 eax, edx
  0088d	50		 push	 eax
  0088e	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  00891	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00896	b9 04 00 00 00	 mov	 ecx, 4
  0089b	c1 e1 00	 shl	 ecx, 0
  0089e	03 c1		 add	 eax, ecx
  008a0	50		 push	 eax
  008a1	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  008a4	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  008a9	ba 04 00 00 00	 mov	 edx, 4
  008ae	6b ca 00	 imul	 ecx, edx, 0
  008b1	03 c1		 add	 eax, ecx
  008b3	50		 push	 eax
  008b4	8d 8d 00 fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  008ba	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  008bf	50		 push	 eax
  008c0	8d 95 f0 fc ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  008c6	52		 push	 edx
  008c7	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  008ca	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  008cf	50		 push	 eax
  008d0	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  008d3	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  008d8	b9 04 00 00 00	 mov	 ecx, 4
  008dd	d1 e1		 shl	 ecx, 1
  008df	03 c1		 add	 eax, ecx
  008e1	50		 push	 eax
  008e2	8b 4b 0c	 mov	 ecx, DWORD PTR _bbMax$[ebx]
  008e5	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  008ea	ba 04 00 00 00	 mov	 edx, 4
  008ef	c1 e2 00	 shl	 edx, 0
  008f2	03 c2		 add	 eax, edx
  008f4	50		 push	 eax
  008f5	8b 4b 08	 mov	 ecx, DWORD PTR _bbMin$[ebx]
  008f8	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  008fd	b9 04 00 00 00	 mov	 ecx, 4
  00902	6b d1 00	 imul	 edx, ecx, 0
  00905	03 c2		 add	 eax, edx
  00907	50		 push	 eax
  00908	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0090e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3
  00913	50		 push	 eax
  00914	8d 85 10 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0091a	50		 push	 eax
  0091b	8b 4b 10	 mov	 ecx, DWORD PTR _trans$[ebx]
  0091e	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00923	50		 push	 eax
  00924	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00927	8b 11		 mov	 edx, DWORD PTR [ecx]
  00929	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0092c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0092f	ff d0		 call	 eax
  00931	3b f4		 cmp	 esi, esp
  00933	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 335  : 	}

  00938	5f		 pop	 edi
  00939	5e		 pop	 esi
  0093a	8b e5		 mov	 esp, ebp
  0093c	5d		 pop	 ebp
  0093d	8b e3		 mov	 esp, ebx
  0093f	5b		 pop	 ebx
  00940	c2 10 00	 ret	 16			; 00000010H
?drawBox@btIDebugDraw@@UAEXABVbtVector3@@0ABVbtTransform@@0@Z ENDP ; btIDebugDraw::drawBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawCapsule@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
_TEXT	SEGMENT
tv264 = -700						; size = 4
tv515 = -696						; size = 4
tv247 = -692						; size = 4
tv491 = -688						; size = 4
tv556 = -684						; size = 4
$T1 = -680						; size = 4
$T2 = -676						; size = 4
$T3 = -672						; size = 4
$T4 = -668						; size = 4
$T5 = -664						; size = 4
$T6 = -660						; size = 4
$T7 = -656						; size = 16
$T8 = -640						; size = 16
$T9 = -624						; size = 16
$T10 = -608						; size = 16
_i$11 = -584						; size = 4
_start$ = -576						; size = 16
_maxPs$12 = -548					; size = 4
_minPs$13 = -544					; size = 4
_maxTh$14 = -540					; size = 4
_minTh$15 = -536					; size = 4
_axis$16 = -528						; size = 16
_up$17 = -496						; size = 16
_center$18 = -464					; size = 16
$T19 = -432						; size = 16
_childTransform$20 = -400				; size = 64
_maxPs$21 = -320					; size = 4
_minPs$22 = -316					; size = 4
_maxTh$23 = -312					; size = 4
_minTh$24 = -308					; size = 4
$T25 = -304						; size = 16
_axis$26 = -272						; size = 16
_up$27 = -240						; size = 16
_center$28 = -208					; size = 16
$T29 = -176						; size = 16
_childTransform$30 = -144				; size = 64
_capEnd$ = -64						; size = 16
_capStart$ = -32					; size = 16
_stepDegrees$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_radius$ = 8						; size = 4
_halfHeight$ = 12					; size = 4
_upAxis$ = 16						; size = 4
_transform$ = 20					; size = 4
_color$ = 24						; size = 4
?drawCapsule@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z PROC ; btIDebugDraw::drawCapsule, COMDAT
; _this$ = ecx

; 338  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec bc 02 00
	00		 sub	 esp, 700		; 000002bcH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 44 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-700]
  00025	b9 af 00 00 00	 mov	 ecx, 175		; 000000afH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 339  : 		int stepDegrees = 30;

  0003f	c7 45 f4 1e 00
	00 00		 mov	 DWORD PTR _stepDegrees$[ebp], 30 ; 0000001eH

; 340  : 
; 341  : 		btVector3 capStart(0.f,0.f,0.f);

  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0004e	f3 0f 11 85 6c
	fd ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0005e	f3 0f 11 85 68
	fd ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  00066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0006e	f3 0f 11 85 64
	fd ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  00076	8d 85 6c fd ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0007c	50		 push	 eax
  0007d	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00083	51		 push	 ecx
  00084	8d 95 64 fd ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0008a	52		 push	 edx
  0008b	8d 4d e0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  0008e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 342  : 		capStart[upAxis] = -halfHeight;

  00093	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _halfHeight$[ebx]
  00098	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0009f	8d 4d e0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  000a2	f3 0f 11 85 54
	fd ff ff	 movss	 DWORD PTR tv556[ebp], xmm0
  000aa	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  000af	8b 4b 10	 mov	 ecx, DWORD PTR _upAxis$[ebx]
  000b2	f3 0f 10 85 54
	fd ff ff	 movss	 xmm0, DWORD PTR tv556[ebp]
  000ba	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 343  : 
; 344  : 		btVector3 capEnd(0.f,0.f,0.f);

  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000c7	f3 0f 11 85 60
	fd ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000d7	f3 0f 11 85 5c
	fd ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000e7	f3 0f 11 85 58
	fd ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  000ef	8d 95 60 fd ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  000f5	52		 push	 edx
  000f6	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000fc	50		 push	 eax
  000fd	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00103	51		 push	 ecx
  00104	8d 4d c0	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  00107	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 345  : 		capEnd[upAxis] = halfHeight;

  0010c	8d 4d c0	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  0010f	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00114	8b 53 10	 mov	 edx, DWORD PTR _upAxis$[ebx]
  00117	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _halfHeight$[ebx]
  0011c	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 346  : 
; 347  : 		// Draw the ends
; 348  : 		{
; 349  : 
; 350  : 			btTransform childTransform = transform;

  00121	8b 43 14	 mov	 eax, DWORD PTR _transform$[ebx]
  00124	50		 push	 eax
  00125	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _childTransform$30[ebp]
  0012b	e8 00 00 00 00	 call	 ??0btTransform@@QAE@ABV0@@Z ; btTransform::btTransform

; 351  : 			childTransform.getOrigin() = transform * capStart;

  00130	8d 4d e0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  00133	51		 push	 ecx
  00134	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR $T29[ebp]
  0013a	52		 push	 edx
  0013b	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0013e	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00143	8b f0		 mov	 esi, eax
  00145	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _childTransform$30[ebp]
  0014b	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
  00150	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00152	89 08		 mov	 DWORD PTR [eax], ecx
  00154	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00157	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0015a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0015d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00160	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00163	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 352  : 			{
; 353  : 				btVector3 center = childTransform.getOrigin();

  00166	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _childTransform$30[ebp]
  0016c	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
  00171	8b 08		 mov	 ecx, DWORD PTR [eax]
  00173	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _center$28[ebp], ecx
  00179	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0017c	89 95 34 ff ff
	ff		 mov	 DWORD PTR _center$28[ebp+4], edx
  00182	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00185	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _center$28[ebp+8], ecx
  0018b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0018e	89 95 3c ff ff
	ff		 mov	 DWORD PTR _center$28[ebp+12], edx

; 354  : 				btVector3 up = childTransform.getBasis().getColumn((upAxis+1)%3);

  00194	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00197	83 c0 01	 add	 eax, 1
  0019a	99		 cdq
  0019b	b9 03 00 00 00	 mov	 ecx, 3
  001a0	f7 f9		 idiv	 ecx
  001a2	52		 push	 edx
  001a3	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _up$27[ebp]
  001a9	52		 push	 edx
  001aa	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _childTransform$30[ebp]
  001b0	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
  001b5	8b c8		 mov	 ecx, eax
  001b7	e8 00 00 00 00	 call	 ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ; btMatrix3x3::getColumn

; 355  : 				btVector3 axis = -childTransform.getBasis().getColumn(upAxis);

  001bc	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  001bf	50		 push	 eax
  001c0	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  001c6	51		 push	 ecx
  001c7	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _childTransform$30[ebp]
  001cd	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
  001d2	8b c8		 mov	 ecx, eax
  001d4	e8 00 00 00 00	 call	 ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ; btMatrix3x3::getColumn
  001d9	50		 push	 eax
  001da	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _axis$26[ebp]
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@@Z ; operator-
  001e6	83 c4 08	 add	 esp, 8

; 356  : 				btScalar minTh = -SIMD_HALF_PI;

  001e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  001f1	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _minTh$24[ebp], xmm0

; 357  : 				btScalar maxTh = SIMD_HALF_PI;

  001f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00201	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _maxTh$23[ebp], xmm0

; 358  : 				btScalar minPs = -SIMD_HALF_PI;

  00209	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00211	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _minPs$22[ebp], xmm0

; 359  : 				btScalar maxPs = SIMD_HALF_PI;

  00219	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00221	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _maxPs$21[ebp], xmm0

; 360  : 				
; 361  : 				drawSpherePatch(center, up, axis, radius,minTh, maxTh, minPs, maxPs, color, btScalar(stepDegrees) ,false);

  00229	8b f4		 mov	 esi, esp
  0022b	6a 00		 push	 0
  0022d	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _stepDegrees$[ebp]
  00232	51		 push	 ecx
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	8b 43 18	 mov	 eax, DWORD PTR _color$[ebx]
  0023b	50		 push	 eax
  0023c	51		 push	 ecx
  0023d	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _maxPs$21[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _minPs$22[ebp]
  00253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00258	51		 push	 ecx
  00259	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _maxTh$23[ebp]
  00261	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00266	51		 push	 ecx
  00267	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _minTh$24[ebp]
  0026f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00274	51		 push	 ecx
  00275	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _axis$26[ebp]
  00285	51		 push	 ecx
  00286	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _up$27[ebp]
  0028c	52		 push	 edx
  0028d	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _center$28[ebp]
  00293	50		 push	 eax
  00294	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	8b 11		 mov	 edx, DWORD PTR [ecx]
  00299	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0029c	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0029f	ff d0		 call	 eax
  002a1	3b f4		 cmp	 esi, esp
  002a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 362  : 			}
; 363  : 
; 364  : 
; 365  : 
; 366  : 		}
; 367  : 
; 368  : 		{
; 369  : 			btTransform childTransform = transform;

  002a8	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  002ab	51		 push	 ecx
  002ac	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _childTransform$20[ebp]
  002b2	e8 00 00 00 00	 call	 ??0btTransform@@QAE@ABV0@@Z ; btTransform::btTransform

; 370  : 			childTransform.getOrigin() = transform * capEnd;

  002b7	8d 55 c0	 lea	 edx, DWORD PTR _capEnd$[ebp]
  002ba	52		 push	 edx
  002bb	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  002c1	50		 push	 eax
  002c2	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  002c5	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  002ca	8b f0		 mov	 esi, eax
  002cc	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _childTransform$20[ebp]
  002d2	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
  002d7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002d9	89 08		 mov	 DWORD PTR [eax], ecx
  002db	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  002de	89 50 04	 mov	 DWORD PTR [eax+4], edx
  002e1	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002e4	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  002e7	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  002ea	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 371  : 			{
; 372  : 				btVector3 center = childTransform.getOrigin();

  002ed	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _childTransform$20[ebp]
  002f3	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
  002f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fa	89 8d 30 fe ff
	ff		 mov	 DWORD PTR _center$18[ebp], ecx
  00300	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00303	89 95 34 fe ff
	ff		 mov	 DWORD PTR _center$18[ebp+4], edx
  00309	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0030c	89 8d 38 fe ff
	ff		 mov	 DWORD PTR _center$18[ebp+8], ecx
  00312	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00315	89 95 3c fe ff
	ff		 mov	 DWORD PTR _center$18[ebp+12], edx

; 373  : 				btVector3 up = childTransform.getBasis().getColumn((upAxis+1)%3);

  0031b	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  0031e	83 c0 01	 add	 eax, 1
  00321	99		 cdq
  00322	b9 03 00 00 00	 mov	 ecx, 3
  00327	f7 f9		 idiv	 ecx
  00329	52		 push	 edx
  0032a	8d 95 10 fe ff
	ff		 lea	 edx, DWORD PTR _up$17[ebp]
  00330	52		 push	 edx
  00331	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _childTransform$20[ebp]
  00337	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
  0033c	8b c8		 mov	 ecx, eax
  0033e	e8 00 00 00 00	 call	 ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ; btMatrix3x3::getColumn

; 374  : 				btVector3 axis = childTransform.getBasis().getColumn(upAxis);

  00343	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00346	50		 push	 eax
  00347	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _axis$16[ebp]
  0034d	51		 push	 ecx
  0034e	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _childTransform$20[ebp]
  00354	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
  00359	8b c8		 mov	 ecx, eax
  0035b	e8 00 00 00 00	 call	 ?getColumn@btMatrix3x3@@QBE?AVbtVector3@@H@Z ; btMatrix3x3::getColumn

; 375  : 				btScalar minTh = -SIMD_HALF_PI;

  00360	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00368	f3 0f 11 85 e8
	fd ff ff	 movss	 DWORD PTR _minTh$15[ebp], xmm0

; 376  : 				btScalar maxTh = SIMD_HALF_PI;

  00370	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00378	f3 0f 11 85 e4
	fd ff ff	 movss	 DWORD PTR _maxTh$14[ebp], xmm0

; 377  : 				btScalar minPs = -SIMD_HALF_PI;

  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00388	f3 0f 11 85 e0
	fd ff ff	 movss	 DWORD PTR _minPs$13[ebp], xmm0

; 378  : 				btScalar maxPs = SIMD_HALF_PI;

  00390	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00398	f3 0f 11 85 dc
	fd ff ff	 movss	 DWORD PTR _maxPs$12[ebp], xmm0

; 379  : 				drawSpherePatch(center, up, axis, radius,minTh, maxTh, minPs, maxPs, color, btScalar(stepDegrees) ,false);

  003a0	8b f4		 mov	 esi, esp
  003a2	6a 00		 push	 0
  003a4	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _stepDegrees$[ebp]
  003a9	51		 push	 ecx
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	8b 53 18	 mov	 edx, DWORD PTR _color$[ebx]
  003b2	52		 push	 edx
  003b3	51		 push	 ecx
  003b4	f3 0f 10 85 dc
	fd ff ff	 movss	 xmm0, DWORD PTR _maxPs$12[ebp]
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	51		 push	 ecx
  003c2	f3 0f 10 85 e0
	fd ff ff	 movss	 xmm0, DWORD PTR _minPs$13[ebp]
  003ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cf	51		 push	 ecx
  003d0	f3 0f 10 85 e4
	fd ff ff	 movss	 xmm0, DWORD PTR _maxTh$14[ebp]
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	51		 push	 ecx
  003de	f3 0f 10 85 e8
	fd ff ff	 movss	 xmm0, DWORD PTR _minTh$15[ebp]
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	51		 push	 ecx
  003ec	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _axis$16[ebp]
  003fc	50		 push	 eax
  003fd	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR _up$17[ebp]
  00403	51		 push	 ecx
  00404	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR _center$18[ebp]
  0040a	52		 push	 edx
  0040b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0040e	8b 10		 mov	 edx, DWORD PTR [eax]
  00410	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00413	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00416	ff d0		 call	 eax
  00418	3b f4		 cmp	 esi, esp
  0041a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 380  : 			}
; 381  : 		}
; 382  : 
; 383  : 		// Draw some additional lines
; 384  : 		btVector3 start = transform.getOrigin();

  0041f	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00422	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
  00427	8b 08		 mov	 ecx, DWORD PTR [eax]
  00429	89 8d c0 fd ff
	ff		 mov	 DWORD PTR _start$[ebp], ecx
  0042f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00432	89 95 c4 fd ff
	ff		 mov	 DWORD PTR _start$[ebp+4], edx
  00438	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0043b	89 8d c8 fd ff
	ff		 mov	 DWORD PTR _start$[ebp+8], ecx
  00441	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00444	89 95 cc fd ff
	ff		 mov	 DWORD PTR _start$[ebp+12], edx

; 385  : 
; 386  : 		for (int i=0;i<360;i+=stepDegrees)

  0044a	c7 85 b8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$11[ebp], 0
  00454	eb 0f		 jmp	 SHORT $LN4@drawCapsul
$LN2@drawCapsul:
  00456	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _i$11[ebp]
  0045c	03 45 f4	 add	 eax, DWORD PTR _stepDegrees$[ebp]
  0045f	89 85 b8 fd ff
	ff		 mov	 DWORD PTR _i$11[ebp], eax
$LN4@drawCapsul:
  00465	81 bd b8 fd ff
	ff 68 01 00 00	 cmp	 DWORD PTR _i$11[ebp], 360 ; 00000168H
  0046f	0f 8d 8d 01 00
	00		 jge	 $LN3@drawCapsul

; 387  : 		{
; 388  : 			capEnd[(upAxis+1)%3] = capStart[(upAxis+1)%3] = btSin(btScalar(i)*SIMD_RADS_PER_DEG)*radius;

  00475	f3 0f 2a 85 b8
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _i$11[ebp]
  0047d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00485	51		 push	 ecx
  00486	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048b	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  00490	83 c4 04	 add	 esp, 4
  00493	d9 9d 50 fd ff
	ff		 fstp	 DWORD PTR tv491[ebp]
  00499	f3 0f 10 85 50
	fd ff ff	 movss	 xmm0, DWORD PTR tv491[ebp]
  004a1	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  004a6	f3 0f 11 85 4c
	fd ff ff	 movss	 DWORD PTR tv247[ebp], xmm0
  004ae	8d 4d e0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  004b1	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  004b6	8b c8		 mov	 ecx, eax
  004b8	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  004bb	83 c0 01	 add	 eax, 1
  004be	99		 cdq
  004bf	be 03 00 00 00	 mov	 esi, 3
  004c4	f7 fe		 idiv	 esi
  004c6	f3 0f 10 85 4c
	fd ff ff	 movss	 xmm0, DWORD PTR tv247[ebp]
  004ce	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0
  004d3	8d 4d c0	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  004d6	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  004db	8b c8		 mov	 ecx, eax
  004dd	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  004e0	83 c0 01	 add	 eax, 1
  004e3	99		 cdq
  004e4	be 03 00 00 00	 mov	 esi, 3
  004e9	f7 fe		 idiv	 esi
  004eb	f3 0f 10 85 4c
	fd ff ff	 movss	 xmm0, DWORD PTR tv247[ebp]
  004f3	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 389  : 			capEnd[(upAxis+2)%3] = capStart[(upAxis+2)%3]  = btCos(btScalar(i)*SIMD_RADS_PER_DEG)*radius;

  004f8	f3 0f 2a 85 b8
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _i$11[ebp]
  00500	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00508	51		 push	 ecx
  00509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050e	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  00513	83 c4 04	 add	 esp, 4
  00516	d9 9d 48 fd ff
	ff		 fstp	 DWORD PTR tv515[ebp]
  0051c	f3 0f 10 85 48
	fd ff ff	 movss	 xmm0, DWORD PTR tv515[ebp]
  00524	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  00529	f3 0f 11 85 44
	fd ff ff	 movss	 DWORD PTR tv264[ebp], xmm0
  00531	8d 4d e0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  00534	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00539	8b c8		 mov	 ecx, eax
  0053b	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  0053e	83 c0 02	 add	 eax, 2
  00541	99		 cdq
  00542	be 03 00 00 00	 mov	 esi, 3
  00547	f7 fe		 idiv	 esi
  00549	f3 0f 10 85 44
	fd ff ff	 movss	 xmm0, DWORD PTR tv264[ebp]
  00551	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0
  00556	8d 4d c0	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  00559	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0055e	8b c8		 mov	 ecx, eax
  00560	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00563	83 c0 02	 add	 eax, 2
  00566	99		 cdq
  00567	be 03 00 00 00	 mov	 esi, 3
  0056c	f7 fe		 idiv	 esi
  0056e	f3 0f 10 85 44
	fd ff ff	 movss	 xmm0, DWORD PTR tv264[ebp]
  00576	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 390  : 			drawLine(start+transform.getBasis() * capStart,start+transform.getBasis() * capEnd, color);

  0057b	8b f4		 mov	 esi, esp
  0057d	8b 53 18	 mov	 edx, DWORD PTR _color$[ebx]
  00580	52		 push	 edx
  00581	8d 45 c0	 lea	 eax, DWORD PTR _capEnd$[ebp]
  00584	50		 push	 eax
  00585	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00588	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  0058d	50		 push	 eax
  0058e	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00594	51		 push	 ecx
  00595	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  0059a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0059d	50		 push	 eax
  0059e	8d 95 c0 fd ff
	ff		 lea	 edx, DWORD PTR _start$[ebp]
  005a4	52		 push	 edx
  005a5	8d 85 70 fd ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  005ab	50		 push	 eax
  005ac	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  005b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  005b4	50		 push	 eax
  005b5	8d 4d e0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  005b8	51		 push	 ecx
  005b9	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  005bc	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  005c1	50		 push	 eax
  005c2	8d 95 a0 fd ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  005c8	52		 push	 edx
  005c9	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  005ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d1	50		 push	 eax
  005d2	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _start$[ebp]
  005d8	50		 push	 eax
  005d9	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  005df	51		 push	 ecx
  005e0	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  005e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  005e8	50		 push	 eax
  005e9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005ec	8b 02		 mov	 eax, DWORD PTR [edx]
  005ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005f1	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  005f4	ff d2		 call	 edx
  005f6	3b f4		 cmp	 esi, esp
  005f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 391  : 		}

  005fd	e9 54 fe ff ff	 jmp	 $LN2@drawCapsul
$LN3@drawCapsul:

; 392  : 		
; 393  : 	}

  00602	52		 push	 edx
  00603	8b cd		 mov	 ecx, ebp
  00605	50		 push	 eax
  00606	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@drawCapsul
  0060c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00611	58		 pop	 eax
  00612	5a		 pop	 edx
  00613	5f		 pop	 edi
  00614	5e		 pop	 esi
  00615	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00618	33 cd		 xor	 ecx, ebp
  0061a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0061f	8b e5		 mov	 esp, ebp
  00621	5d		 pop	 ebp
  00622	8b e3		 mov	 esp, ebx
  00624	5b		 pop	 ebx
  00625	c2 14 00	 ret	 20			; 00000014H
$LN18@drawCapsul:
  00628	0b 00 00 00	 DD	 11			; 0000000bH
  0062c	00 00 00 00	 DD	 $LN17@drawCapsul
$LN17@drawCapsul:
  00630	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00634	10 00 00 00	 DD	 16			; 00000010H
  00638	00 00 00 00	 DD	 $LN6@drawCapsul
  0063c	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00640	10 00 00 00	 DD	 16			; 00000010H
  00644	00 00 00 00	 DD	 $LN7@drawCapsul
  00648	70 ff ff ff	 DD	 -144			; ffffff70H
  0064c	40 00 00 00	 DD	 64			; 00000040H
  00650	00 00 00 00	 DD	 $LN8@drawCapsul
  00654	30 ff ff ff	 DD	 -208			; ffffff30H
  00658	10 00 00 00	 DD	 16			; 00000010H
  0065c	00 00 00 00	 DD	 $LN9@drawCapsul
  00660	10 ff ff ff	 DD	 -240			; ffffff10H
  00664	10 00 00 00	 DD	 16			; 00000010H
  00668	00 00 00 00	 DD	 $LN10@drawCapsul
  0066c	f0 fe ff ff	 DD	 -272			; fffffef0H
  00670	10 00 00 00	 DD	 16			; 00000010H
  00674	00 00 00 00	 DD	 $LN11@drawCapsul
  00678	70 fe ff ff	 DD	 -400			; fffffe70H
  0067c	40 00 00 00	 DD	 64			; 00000040H
  00680	00 00 00 00	 DD	 $LN12@drawCapsul
  00684	30 fe ff ff	 DD	 -464			; fffffe30H
  00688	10 00 00 00	 DD	 16			; 00000010H
  0068c	00 00 00 00	 DD	 $LN13@drawCapsul
  00690	10 fe ff ff	 DD	 -496			; fffffe10H
  00694	10 00 00 00	 DD	 16			; 00000010H
  00698	00 00 00 00	 DD	 $LN14@drawCapsul
  0069c	f0 fd ff ff	 DD	 -528			; fffffdf0H
  006a0	10 00 00 00	 DD	 16			; 00000010H
  006a4	00 00 00 00	 DD	 $LN15@drawCapsul
  006a8	c0 fd ff ff	 DD	 -576			; fffffdc0H
  006ac	10 00 00 00	 DD	 16			; 00000010H
  006b0	00 00 00 00	 DD	 $LN16@drawCapsul
$LN16@drawCapsul:
  006b4	73		 DB	 115			; 00000073H
  006b5	74		 DB	 116			; 00000074H
  006b6	61		 DB	 97			; 00000061H
  006b7	72		 DB	 114			; 00000072H
  006b8	74		 DB	 116			; 00000074H
  006b9	00		 DB	 0
$LN15@drawCapsul:
  006ba	61		 DB	 97			; 00000061H
  006bb	78		 DB	 120			; 00000078H
  006bc	69		 DB	 105			; 00000069H
  006bd	73		 DB	 115			; 00000073H
  006be	00		 DB	 0
$LN14@drawCapsul:
  006bf	75		 DB	 117			; 00000075H
  006c0	70		 DB	 112			; 00000070H
  006c1	00		 DB	 0
$LN13@drawCapsul:
  006c2	63		 DB	 99			; 00000063H
  006c3	65		 DB	 101			; 00000065H
  006c4	6e		 DB	 110			; 0000006eH
  006c5	74		 DB	 116			; 00000074H
  006c6	65		 DB	 101			; 00000065H
  006c7	72		 DB	 114			; 00000072H
  006c8	00		 DB	 0
$LN12@drawCapsul:
  006c9	63		 DB	 99			; 00000063H
  006ca	68		 DB	 104			; 00000068H
  006cb	69		 DB	 105			; 00000069H
  006cc	6c		 DB	 108			; 0000006cH
  006cd	64		 DB	 100			; 00000064H
  006ce	54		 DB	 84			; 00000054H
  006cf	72		 DB	 114			; 00000072H
  006d0	61		 DB	 97			; 00000061H
  006d1	6e		 DB	 110			; 0000006eH
  006d2	73		 DB	 115			; 00000073H
  006d3	66		 DB	 102			; 00000066H
  006d4	6f		 DB	 111			; 0000006fH
  006d5	72		 DB	 114			; 00000072H
  006d6	6d		 DB	 109			; 0000006dH
  006d7	00		 DB	 0
$LN11@drawCapsul:
  006d8	61		 DB	 97			; 00000061H
  006d9	78		 DB	 120			; 00000078H
  006da	69		 DB	 105			; 00000069H
  006db	73		 DB	 115			; 00000073H
  006dc	00		 DB	 0
$LN10@drawCapsul:
  006dd	75		 DB	 117			; 00000075H
  006de	70		 DB	 112			; 00000070H
  006df	00		 DB	 0
$LN9@drawCapsul:
  006e0	63		 DB	 99			; 00000063H
  006e1	65		 DB	 101			; 00000065H
  006e2	6e		 DB	 110			; 0000006eH
  006e3	74		 DB	 116			; 00000074H
  006e4	65		 DB	 101			; 00000065H
  006e5	72		 DB	 114			; 00000072H
  006e6	00		 DB	 0
$LN8@drawCapsul:
  006e7	63		 DB	 99			; 00000063H
  006e8	68		 DB	 104			; 00000068H
  006e9	69		 DB	 105			; 00000069H
  006ea	6c		 DB	 108			; 0000006cH
  006eb	64		 DB	 100			; 00000064H
  006ec	54		 DB	 84			; 00000054H
  006ed	72		 DB	 114			; 00000072H
  006ee	61		 DB	 97			; 00000061H
  006ef	6e		 DB	 110			; 0000006eH
  006f0	73		 DB	 115			; 00000073H
  006f1	66		 DB	 102			; 00000066H
  006f2	6f		 DB	 111			; 0000006fH
  006f3	72		 DB	 114			; 00000072H
  006f4	6d		 DB	 109			; 0000006dH
  006f5	00		 DB	 0
$LN7@drawCapsul:
  006f6	63		 DB	 99			; 00000063H
  006f7	61		 DB	 97			; 00000061H
  006f8	70		 DB	 112			; 00000070H
  006f9	45		 DB	 69			; 00000045H
  006fa	6e		 DB	 110			; 0000006eH
  006fb	64		 DB	 100			; 00000064H
  006fc	00		 DB	 0
$LN6@drawCapsul:
  006fd	63		 DB	 99			; 00000063H
  006fe	61		 DB	 97			; 00000061H
  006ff	70		 DB	 112			; 00000070H
  00700	53		 DB	 83			; 00000053H
  00701	74		 DB	 116			; 00000074H
  00702	61		 DB	 97			; 00000061H
  00703	72		 DB	 114			; 00000072H
  00704	74		 DB	 116			; 00000074H
  00705	00		 DB	 0
?drawCapsule@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z ENDP ; btIDebugDraw::drawCapsule
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawCylinder@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
_TEXT	SEGMENT
tv159 = -496						; size = 4
tv379 = -492						; size = 4
tv142 = -488						; size = 4
tv355 = -484						; size = 4
tv503 = -480						; size = 4
$T1 = -476						; size = 4
$T2 = -472						; size = 4
$T3 = -468						; size = 4
$T4 = -464						; size = 4
$T5 = -460						; size = 4
$T6 = -456						; size = 4
$T7 = -452						; size = 4
$T8 = -448						; size = 4
$T9 = -444						; size = 4
$T10 = -440						; size = 4
$T11 = -436						; size = 4
$T12 = -432						; size = 4
$T13 = -428						; size = 4
$T14 = -424						; size = 4
$T15 = -420						; size = 4
$T16 = -416						; size = 16
$T17 = -400						; size = 16
$T18 = -384						; size = 16
$T19 = -368						; size = 16
$T20 = -352						; size = 16
$T21 = -336						; size = 16
$T22 = -320						; size = 16
$T23 = -304						; size = 16
_xaxis$ = -272						; size = 16
_yaxis$ = -240						; size = 16
$T24 = -208						; size = 16
$T25 = -192						; size = 16
$T26 = -176						; size = 16
$T27 = -160						; size = 16
_i$28 = -136						; size = 4
_capEnd$ = -128						; size = 16
_capStart$ = -96					; size = 16
_stepDegrees$ = -72					; size = 4
_offsetHeight$ = -64					; size = 16
_start$ = -32						; size = 16
_this$ = -4						; size = 4
_radius$ = 8						; size = 4
_halfHeight$ = 12					; size = 4
_upAxis$ = 16						; size = 4
_transform$ = 20					; size = 4
_color$ = 24						; size = 4
?drawCylinder@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z PROC ; btIDebugDraw::drawCylinder, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec fc 01 00
	00		 sub	 esp, 508		; 000001fcH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 04 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-508]
  00025	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		btVector3 start = transform.getOrigin();

  00035	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00038	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 4d e0	 mov	 DWORD PTR _start$[ebp], ecx
  00042	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00045	89 55 e4	 mov	 DWORD PTR _start$[ebp+4], edx
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	89 4d e8	 mov	 DWORD PTR _start$[ebp+8], ecx
  0004e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00051	89 55 ec	 mov	 DWORD PTR _start$[ebp+12], edx

; 398  : 		btVector3	offsetHeight(0,0,0);

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0005c	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR $T15[ebp], xmm0
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0006c	f3 0f 11 85 58
	fe ff ff	 movss	 DWORD PTR $T14[ebp], xmm0
  00074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0007c	f3 0f 11 85 54
	fe ff ff	 movss	 DWORD PTR $T13[ebp], xmm0
  00084	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00091	51		 push	 ecx
  00092	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  00098	52		 push	 edx
  00099	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  0009c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 399  : 		offsetHeight[upAxis] = halfHeight;

  000a1	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  000a4	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  000a9	8b 4b 10	 mov	 ecx, DWORD PTR _upAxis$[ebx]
  000ac	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _halfHeight$[ebx]
  000b1	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 400  : 		int stepDegrees=30;

  000b6	c7 45 b8 1e 00
	00 00		 mov	 DWORD PTR _stepDegrees$[ebp], 30 ; 0000001eH

; 401  : 		btVector3 capStart(0.f,0.f,0.f);

  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000c5	f3 0f 11 85 50
	fe ff ff	 movss	 DWORD PTR $T12[ebp], xmm0
  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000d5	f3 0f 11 85 4c
	fe ff ff	 movss	 DWORD PTR $T11[ebp], xmm0
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000e5	f3 0f 11 85 48
	fe ff ff	 movss	 DWORD PTR $T10[ebp], xmm0
  000ed	8d 95 50 fe ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  000f3	52		 push	 edx
  000f4	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  000fa	50		 push	 eax
  000fb	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00101	51		 push	 ecx
  00102	8d 4d a0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  00105	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 402  : 		capStart[upAxis] = -halfHeight;

  0010a	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _halfHeight$[ebx]
  0010f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00116	8d 4d a0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  00119	f3 0f 11 85 20
	fe ff ff	 movss	 DWORD PTR tv503[ebp], xmm0
  00121	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00126	8b 53 10	 mov	 edx, DWORD PTR _upAxis$[ebx]
  00129	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR tv503[ebp]
  00131	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 403  : 		btVector3 capEnd(0.f,0.f,0.f);

  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0013e	f3 0f 11 85 44
	fe ff ff	 movss	 DWORD PTR $T9[ebp], xmm0
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0014e	f3 0f 11 85 40
	fe ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0015e	f3 0f 11 85 3c
	fe ff ff	 movss	 DWORD PTR $T7[ebp], xmm0
  00166	8d 85 44 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  0016c	50		 push	 eax
  0016d	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00173	51		 push	 ecx
  00174	8d 95 3c fe ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  0017a	52		 push	 edx
  0017b	8d 4d 80	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  0017e	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 404  : 		capEnd[upAxis] = halfHeight;

  00183	8d 4d 80	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  00186	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0018b	8b 4b 10	 mov	 ecx, DWORD PTR _upAxis$[ebx]
  0018e	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _halfHeight$[ebx]
  00193	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 405  : 
; 406  : 		for (int i=0;i<360;i+=stepDegrees)

  00198	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$28[ebp], 0
  001a2	eb 0f		 jmp	 SHORT $LN4@drawCylind
$LN2@drawCylind:
  001a4	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$28[ebp]
  001aa	03 55 b8	 add	 edx, DWORD PTR _stepDegrees$[ebp]
  001ad	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$28[ebp], edx
$LN4@drawCylind:
  001b3	81 bd 78 ff ff
	ff 68 01 00 00	 cmp	 DWORD PTR _i$28[ebp], 360 ; 00000168H
  001bd	0f 8d 87 01 00
	00		 jge	 $LN3@drawCylind

; 407  : 		{
; 408  : 			capEnd[(upAxis+1)%3] = capStart[(upAxis+1)%3] = btSin(btScalar(i)*SIMD_RADS_PER_DEG)*radius;

  001c3	f3 0f 2a 85 78
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$28[ebp]
  001cb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  001d3	51		 push	 ecx
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  001de	83 c4 04	 add	 esp, 4
  001e1	d9 9d 1c fe ff
	ff		 fstp	 DWORD PTR tv355[ebp]
  001e7	f3 0f 10 85 1c
	fe ff ff	 movss	 xmm0, DWORD PTR tv355[ebp]
  001ef	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  001f4	f3 0f 11 85 18
	fe ff ff	 movss	 DWORD PTR tv142[ebp], xmm0
  001fc	8d 4d a0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  001ff	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00204	8b c8		 mov	 ecx, eax
  00206	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00209	83 c0 01	 add	 eax, 1
  0020c	99		 cdq
  0020d	be 03 00 00 00	 mov	 esi, 3
  00212	f7 fe		 idiv	 esi
  00214	f3 0f 10 85 18
	fe ff ff	 movss	 xmm0, DWORD PTR tv142[ebp]
  0021c	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0
  00221	8d 4d 80	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  00224	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00229	8b c8		 mov	 ecx, eax
  0022b	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  0022e	83 c0 01	 add	 eax, 1
  00231	99		 cdq
  00232	be 03 00 00 00	 mov	 esi, 3
  00237	f7 fe		 idiv	 esi
  00239	f3 0f 10 85 18
	fe ff ff	 movss	 xmm0, DWORD PTR tv142[ebp]
  00241	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 409  : 			capEnd[(upAxis+2)%3] = capStart[(upAxis+2)%3]  = btCos(btScalar(i)*SIMD_RADS_PER_DEG)*radius;

  00246	f3 0f 2a 85 78
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$28[ebp]
  0024e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00256	51		 push	 ecx
  00257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025c	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  00261	83 c4 04	 add	 esp, 4
  00264	d9 9d 14 fe ff
	ff		 fstp	 DWORD PTR tv379[ebp]
  0026a	f3 0f 10 85 14
	fe ff ff	 movss	 xmm0, DWORD PTR tv379[ebp]
  00272	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  00277	f3 0f 11 85 10
	fe ff ff	 movss	 DWORD PTR tv159[ebp], xmm0
  0027f	8d 4d a0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  00282	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00287	8b c8		 mov	 ecx, eax
  00289	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  0028c	83 c0 02	 add	 eax, 2
  0028f	99		 cdq
  00290	be 03 00 00 00	 mov	 esi, 3
  00295	f7 fe		 idiv	 esi
  00297	f3 0f 10 85 10
	fe ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  0029f	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0
  002a4	8d 4d 80	 lea	 ecx, DWORD PTR _capEnd$[ebp]
  002a7	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  002ac	8b c8		 mov	 ecx, eax
  002ae	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  002b1	83 c0 02	 add	 eax, 2
  002b4	99		 cdq
  002b5	be 03 00 00 00	 mov	 esi, 3
  002ba	f7 fe		 idiv	 esi
  002bc	f3 0f 10 85 10
	fe ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  002c4	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 410  : 			drawLine(start+transform.getBasis() * capStart,start+transform.getBasis() * capEnd, color);

  002c9	8b f4		 mov	 esi, esp
  002cb	8b 53 18	 mov	 edx, DWORD PTR _color$[ebx]
  002ce	52		 push	 edx
  002cf	8d 45 80	 lea	 eax, DWORD PTR _capEnd$[ebp]
  002d2	50		 push	 eax
  002d3	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  002d6	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  002db	50		 push	 eax
  002dc	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  002e2	51		 push	 ecx
  002e3	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  002e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002eb	50		 push	 eax
  002ec	8d 55 e0	 lea	 edx, DWORD PTR _start$[ebp]
  002ef	52		 push	 edx
  002f0	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T24[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  002fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  002ff	50		 push	 eax
  00300	8d 4d a0	 lea	 ecx, DWORD PTR _capStart$[ebp]
  00303	51		 push	 ecx
  00304	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00307	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  0030c	50		 push	 eax
  0030d	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T27[ebp]
  00313	52		 push	 edx
  00314	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00319	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031c	50		 push	 eax
  0031d	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  00320	50		 push	 eax
  00321	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00327	51		 push	 ecx
  00328	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  0032d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00330	50		 push	 eax
  00331	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00334	8b 02		 mov	 eax, DWORD PTR [edx]
  00336	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00339	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0033c	ff d2		 call	 edx
  0033e	3b f4		 cmp	 esi, esp
  00340	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 411  : 		}

  00345	e9 5a fe ff ff	 jmp	 $LN2@drawCylind
$LN3@drawCylind:

; 412  : 		// Drawing top and bottom caps of the cylinder
; 413  : 		btVector3 yaxis(0,0,0);

  0034a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00352	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  0035a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00362	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  0036a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00372	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  0037a	8d 85 38 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00380	50		 push	 eax
  00381	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00387	51		 push	 ecx
  00388	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0038e	52		 push	 edx
  0038f	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _yaxis$[ebp]
  00395	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 414  : 		yaxis[upAxis] = btScalar(1.0);

  0039a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _yaxis$[ebp]
  003a0	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  003a5	8b 4b 10	 mov	 ecx, DWORD PTR _upAxis$[ebx]
  003a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003b0	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 415  : 		btVector3 xaxis(0,0,0);

  003b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  003bd	f3 0f 11 85 2c
	fe ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  003c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  003cd	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  003d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  003dd	f3 0f 11 85 24
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  003e5	8d 95 2c fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  003eb	52		 push	 edx
  003ec	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  003f2	50		 push	 eax
  003f3	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  003f9	51		 push	 ecx
  003fa	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _xaxis$[ebp]
  00400	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 416  : 		xaxis[(upAxis+1)%3] = btScalar(1.0);

  00405	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _xaxis$[ebp]
  0040b	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00410	8b c8		 mov	 ecx, eax
  00412	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00415	83 c0 01	 add	 eax, 1
  00418	99		 cdq
  00419	be 03 00 00 00	 mov	 esi, 3
  0041e	f7 fe		 idiv	 esi
  00420	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00428	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 417  : 		drawArc(start-transform.getBasis()*(offsetHeight),transform.getBasis()*yaxis,transform.getBasis()*xaxis,radius,radius,0,SIMD_2_PI,color,false,btScalar(10.0));

  0042d	8b f4		 mov	 esi, esp
  0042f	51		 push	 ecx
  00430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043d	6a 00		 push	 0
  0043f	8b 53 18	 mov	 edx, DWORD PTR _color$[ebx]
  00442	52		 push	 edx
  00443	51		 push	 ecx
  00444	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0044c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00451	51		 push	 ecx
  00452	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	51		 push	 ecx
  0046b	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00470	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00475	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _xaxis$[ebp]
  0047b	50		 push	 eax
  0047c	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0047f	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00484	50		 push	 eax
  00485	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  0048b	51		 push	 ecx
  0048c	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00491	83 c4 0c	 add	 esp, 12			; 0000000cH
  00494	50		 push	 eax
  00495	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _yaxis$[ebp]
  0049b	52		 push	 edx
  0049c	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0049f	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  004a4	50		 push	 eax
  004a5	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  004ab	50		 push	 eax
  004ac	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  004b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b4	50		 push	 eax
  004b5	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  004b8	51		 push	 ecx
  004b9	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  004bc	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  004c1	50		 push	 eax
  004c2	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T23[ebp]
  004c8	52		 push	 edx
  004c9	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  004ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  004d1	50		 push	 eax
  004d2	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  004d5	50		 push	 eax
  004d6	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  004dc	51		 push	 ecx
  004dd	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  004e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e5	50		 push	 eax
  004e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004e9	8b 02		 mov	 eax, DWORD PTR [edx]
  004eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ee	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  004f1	ff d2		 call	 edx
  004f3	3b f4		 cmp	 esi, esp
  004f5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 418  : 		drawArc(start+transform.getBasis()*(offsetHeight),transform.getBasis()*yaxis,transform.getBasis()*xaxis,radius,radius,0,SIMD_2_PI,color,false,btScalar(10.0));

  004fa	8b f4		 mov	 esi, esp
  004fc	51		 push	 ecx
  004fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050a	6a 00		 push	 0
  0050c	8b 43 18	 mov	 eax, DWORD PTR _color$[ebx]
  0050f	50		 push	 eax
  00510	51		 push	 ecx
  00511	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  00519	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051e	51		 push	 ecx
  0051f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052c	51		 push	 ecx
  0052d	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	51		 push	 ecx
  00538	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _xaxis$[ebp]
  00548	51		 push	 ecx
  00549	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0054c	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00551	50		 push	 eax
  00552	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T16[ebp]
  00558	52		 push	 edx
  00559	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  0055e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00561	50		 push	 eax
  00562	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _yaxis$[ebp]
  00568	50		 push	 eax
  00569	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0056c	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00571	50		 push	 eax
  00572	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00578	51		 push	 ecx
  00579	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  0057e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00581	50		 push	 eax
  00582	8d 55 c0	 lea	 edx, DWORD PTR _offsetHeight$[ebp]
  00585	52		 push	 edx
  00586	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00589	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  0058e	50		 push	 eax
  0058f	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  0059b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0059e	50		 push	 eax
  0059f	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  005a2	51		 push	 ecx
  005a3	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T18[ebp]
  005a9	52		 push	 edx
  005aa	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  005af	83 c4 0c	 add	 esp, 12			; 0000000cH
  005b2	50		 push	 eax
  005b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b6	8b 10		 mov	 edx, DWORD PTR [eax]
  005b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005bb	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  005be	ff d0		 call	 eax
  005c0	3b f4		 cmp	 esi, esp
  005c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 419  : 	}

  005c7	52		 push	 edx
  005c8	8b cd		 mov	 ecx, ebp
  005ca	50		 push	 eax
  005cb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@drawCylind
  005d1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005d6	58		 pop	 eax
  005d7	5a		 pop	 edx
  005d8	5f		 pop	 edi
  005d9	5e		 pop	 esi
  005da	8b e5		 mov	 esp, ebp
  005dc	5d		 pop	 ebp
  005dd	8b e3		 mov	 esp, ebx
  005df	5b		 pop	 ebx
  005e0	c2 14 00	 ret	 20			; 00000014H
  005e3	90		 npad	 1
$LN13@drawCylind:
  005e4	06 00 00 00	 DD	 6
  005e8	00 00 00 00	 DD	 $LN12@drawCylind
$LN12@drawCylind:
  005ec	e0 ff ff ff	 DD	 -32			; ffffffe0H
  005f0	10 00 00 00	 DD	 16			; 00000010H
  005f4	00 00 00 00	 DD	 $LN6@drawCylind
  005f8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  005fc	10 00 00 00	 DD	 16			; 00000010H
  00600	00 00 00 00	 DD	 $LN7@drawCylind
  00604	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00608	10 00 00 00	 DD	 16			; 00000010H
  0060c	00 00 00 00	 DD	 $LN8@drawCylind
  00610	80 ff ff ff	 DD	 -128			; ffffff80H
  00614	10 00 00 00	 DD	 16			; 00000010H
  00618	00 00 00 00	 DD	 $LN9@drawCylind
  0061c	10 ff ff ff	 DD	 -240			; ffffff10H
  00620	10 00 00 00	 DD	 16			; 00000010H
  00624	00 00 00 00	 DD	 $LN10@drawCylind
  00628	f0 fe ff ff	 DD	 -272			; fffffef0H
  0062c	10 00 00 00	 DD	 16			; 00000010H
  00630	00 00 00 00	 DD	 $LN11@drawCylind
$LN11@drawCylind:
  00634	78		 DB	 120			; 00000078H
  00635	61		 DB	 97			; 00000061H
  00636	78		 DB	 120			; 00000078H
  00637	69		 DB	 105			; 00000069H
  00638	73		 DB	 115			; 00000073H
  00639	00		 DB	 0
$LN10@drawCylind:
  0063a	79		 DB	 121			; 00000079H
  0063b	61		 DB	 97			; 00000061H
  0063c	78		 DB	 120			; 00000078H
  0063d	69		 DB	 105			; 00000069H
  0063e	73		 DB	 115			; 00000073H
  0063f	00		 DB	 0
$LN9@drawCylind:
  00640	63		 DB	 99			; 00000063H
  00641	61		 DB	 97			; 00000061H
  00642	70		 DB	 112			; 00000070H
  00643	45		 DB	 69			; 00000045H
  00644	6e		 DB	 110			; 0000006eH
  00645	64		 DB	 100			; 00000064H
  00646	00		 DB	 0
$LN8@drawCylind:
  00647	63		 DB	 99			; 00000063H
  00648	61		 DB	 97			; 00000061H
  00649	70		 DB	 112			; 00000070H
  0064a	53		 DB	 83			; 00000053H
  0064b	74		 DB	 116			; 00000074H
  0064c	61		 DB	 97			; 00000061H
  0064d	72		 DB	 114			; 00000072H
  0064e	74		 DB	 116			; 00000074H
  0064f	00		 DB	 0
$LN7@drawCylind:
  00650	6f		 DB	 111			; 0000006fH
  00651	66		 DB	 102			; 00000066H
  00652	66		 DB	 102			; 00000066H
  00653	73		 DB	 115			; 00000073H
  00654	65		 DB	 101			; 00000065H
  00655	74		 DB	 116			; 00000074H
  00656	48		 DB	 72			; 00000048H
  00657	65		 DB	 101			; 00000065H
  00658	69		 DB	 105			; 00000069H
  00659	67		 DB	 103			; 00000067H
  0065a	68		 DB	 104			; 00000068H
  0065b	74		 DB	 116			; 00000074H
  0065c	00		 DB	 0
$LN6@drawCylind:
  0065d	73		 DB	 115			; 00000073H
  0065e	74		 DB	 116			; 00000074H
  0065f	61		 DB	 97			; 00000061H
  00660	72		 DB	 114			; 00000072H
  00661	74		 DB	 116			; 00000074H
  00662	00		 DB	 0
?drawCylinder@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z ENDP ; btIDebugDraw::drawCylinder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawCone@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z
_TEXT	SEGMENT
tv700 = -860						; size = 4
tv518 = -856						; size = 4
tv698 = -852						; size = 4
tv506 = -848						; size = 4
tv696 = -844						; size = 4
$T1 = -840						; size = 4
$T2 = -836						; size = 4
$T3 = -832						; size = 4
$T4 = -828						; size = 4
$T5 = -824						; size = 4
$T6 = -820						; size = 4
$T7 = -816						; size = 4
$T8 = -812						; size = 4
$T9 = -808						; size = 4
$T10 = -804						; size = 4
$T11 = -800						; size = 4
$T12 = -796						; size = 4
$T13 = -792						; size = 4
$T14 = -788						; size = 4
$T15 = -784						; size = 4
$T16 = -780						; size = 4
$T17 = -776						; size = 4
$T18 = -772						; size = 4
$T19 = -768						; size = 16
$T20 = -752						; size = 16
$T21 = -736						; size = 16
$T22 = -720						; size = 16
_xaxis$ = -688						; size = 16
_yaxis$ = -656						; size = 16
$T23 = -624						; size = 16
$T24 = -608						; size = 16
$T25 = -592						; size = 16
$T26 = -576						; size = 16
$T27 = -560						; size = 16
$T28 = -544						; size = 16
$T29 = -528						; size = 16
$T30 = -512						; size = 16
$T31 = -496						; size = 16
$T32 = -480						; size = 16
$T33 = -464						; size = 16
$T34 = -448						; size = 16
$T35 = -432						; size = 16
$T36 = -416						; size = 16
$T37 = -400						; size = 16
$T38 = -384						; size = 16
$T39 = -368						; size = 16
$T40 = -352						; size = 16
$T41 = -336						; size = 16
$T42 = -320						; size = 16
$T43 = -304						; size = 16
$T44 = -288						; size = 16
$T45 = -272						; size = 16
$T46 = -256						; size = 16
$T47 = -240						; size = 16
$T48 = -224						; size = 16
$T49 = -208						; size = 16
$T50 = -192						; size = 16
_i$51 = -168						; size = 4
_capEnd$ = -160						; size = 16
_offset2Radius$ = -128					; size = 16
_offsetRadius$ = -96					; size = 16
_halfHeight$ = -72					; size = 4
_offsetHeight$ = -64					; size = 16
_start$ = -32						; size = 16
_stepDegrees$ = -8					; size = 4
_this$ = -4						; size = 4
_radius$ = 8						; size = 4
_height$ = 12						; size = 4
_upAxis$ = 16						; size = 4
_transform$ = 20					; size = 4
_color$ = 24						; size = 4
?drawCone@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z PROC ; btIDebugDraw::drawCone, COMDAT
; _this$ = ecx

; 422  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 5c 03 00
	00		 sub	 esp, 860		; 0000035cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd a4 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-860]
  00025	b9 d7 00 00 00	 mov	 ecx, 215		; 000000d7H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 		int stepDegrees = 30;

  00035	c7 45 f8 1e 00
	00 00		 mov	 DWORD PTR _stepDegrees$[ebp], 30 ; 0000001eH

; 424  : 		btVector3 start = transform.getOrigin();

  0003c	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0003f	e8 00 00 00 00	 call	 ?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 4d e0	 mov	 DWORD PTR _start$[ebp], ecx
  00049	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004c	89 55 e4	 mov	 DWORD PTR _start$[ebp+4], edx
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	89 4d e8	 mov	 DWORD PTR _start$[ebp+8], ecx
  00055	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00058	89 55 ec	 mov	 DWORD PTR _start$[ebp+12], edx

; 425  : 
; 426  : 		btVector3	offsetHeight(0,0,0);

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00063	f3 0f 11 85 fc
	fc ff ff	 movss	 DWORD PTR $T18[ebp], xmm0
  0006b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00073	f3 0f 11 85 f8
	fc ff ff	 movss	 DWORD PTR $T17[ebp], xmm0
  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00083	f3 0f 11 85 f4
	fc ff ff	 movss	 DWORD PTR $T16[ebp], xmm0
  0008b	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00098	51		 push	 ecx
  00099	8d 95 f4 fc ff
	ff		 lea	 edx, DWORD PTR $T16[ebp]
  0009f	52		 push	 edx
  000a0	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  000a3	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 427  : 		btScalar halfHeight = height * btScalar(0.5);

  000a8	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _height$[ebx]
  000ad	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000b5	f3 0f 11 45 b8	 movss	 DWORD PTR _halfHeight$[ebp], xmm0

; 428  : 		offsetHeight[upAxis] = halfHeight;

  000ba	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  000bd	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  000c2	8b 4b 10	 mov	 ecx, DWORD PTR _upAxis$[ebx]
  000c5	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _halfHeight$[ebp]
  000ca	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 429  : 		btVector3	offsetRadius(0,0,0);

  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000d7	f3 0f 11 85 f0
	fc ff ff	 movss	 DWORD PTR $T15[ebp], xmm0
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000e7	f3 0f 11 85 ec
	fc ff ff	 movss	 DWORD PTR $T14[ebp], xmm0
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000f7	f3 0f 11 85 e8
	fc ff ff	 movss	 DWORD PTR $T13[ebp], xmm0
  000ff	8d 95 f0 fc ff
	ff		 lea	 edx, DWORD PTR $T15[ebp]
  00105	52		 push	 edx
  00106	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0010c	50		 push	 eax
  0010d	8d 8d e8 fc ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00113	51		 push	 ecx
  00114	8d 4d a0	 lea	 ecx, DWORD PTR _offsetRadius$[ebp]
  00117	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 430  : 		offsetRadius[(upAxis+1)%3] = radius;

  0011c	8d 4d a0	 lea	 ecx, DWORD PTR _offsetRadius$[ebp]
  0011f	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00124	8b c8		 mov	 ecx, eax
  00126	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00129	83 c0 01	 add	 eax, 1
  0012c	99		 cdq
  0012d	be 03 00 00 00	 mov	 esi, 3
  00132	f7 fe		 idiv	 esi
  00134	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00139	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 431  : 		btVector3	offset2Radius(0,0,0);

  0013e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00146	f3 0f 11 85 e4
	fc ff ff	 movss	 DWORD PTR $T12[ebp], xmm0
  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00156	f3 0f 11 85 e0
	fc ff ff	 movss	 DWORD PTR $T11[ebp], xmm0
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00166	f3 0f 11 85 dc
	fc ff ff	 movss	 DWORD PTR $T10[ebp], xmm0
  0016e	8d 95 e4 fc ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  00174	52		 push	 edx
  00175	8d 85 e0 fc ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  0017b	50		 push	 eax
  0017c	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00182	51		 push	 ecx
  00183	8d 4d 80	 lea	 ecx, DWORD PTR _offset2Radius$[ebp]
  00186	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 432  : 		offset2Radius[(upAxis+2)%3] = radius;

  0018b	8d 4d 80	 lea	 ecx, DWORD PTR _offset2Radius$[ebp]
  0018e	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00193	8b c8		 mov	 ecx, eax
  00195	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00198	83 c0 02	 add	 eax, 2
  0019b	99		 cdq
  0019c	be 03 00 00 00	 mov	 esi, 3
  001a1	f7 fe		 idiv	 esi
  001a3	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  001a8	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 433  : 
; 434  : 
; 435  : 		btVector3 capEnd(0.f,0.f,0.f);

  001ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  001b5	f3 0f 11 85 d8
	fc ff ff	 movss	 DWORD PTR $T9[ebp], xmm0
  001bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  001c5	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  001cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  001d5	f3 0f 11 85 d0
	fc ff ff	 movss	 DWORD PTR $T7[ebp], xmm0
  001dd	8d 95 d8 fc ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  001e3	52		 push	 edx
  001e4	8d 85 d4 fc ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001ea	50		 push	 eax
  001eb	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001f1	51		 push	 ecx
  001f2	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _capEnd$[ebp]
  001f8	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 436  : 		capEnd[upAxis] = -halfHeight;

  001fd	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _halfHeight$[ebp]
  00202	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00209	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _capEnd$[ebp]
  0020f	f3 0f 11 85 b4
	fc ff ff	 movss	 DWORD PTR tv696[ebp], xmm0
  00217	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0021c	8b 53 10	 mov	 edx, DWORD PTR _upAxis$[ebx]
  0021f	f3 0f 10 85 b4
	fc ff ff	 movss	 xmm0, DWORD PTR tv696[ebp]
  00227	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 437  : 
; 438  : 		for (int i=0;i<360;i+=stepDegrees)

  0022c	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$51[ebp], 0
  00236	eb 0f		 jmp	 SHORT $LN4@drawCone
$LN2@drawCone:
  00238	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$51[ebp]
  0023e	03 45 f8	 add	 eax, DWORD PTR _stepDegrees$[ebp]
  00241	89 85 58 ff ff
	ff		 mov	 DWORD PTR _i$51[ebp], eax
$LN4@drawCone:
  00247	81 bd 58 ff ff
	ff 68 01 00 00	 cmp	 DWORD PTR _i$51[ebp], 360 ; 00000168H
  00251	0f 8d 46 01 00
	00		 jge	 $LN3@drawCone

; 439  : 		{
; 440  : 			capEnd[(upAxis+1)%3] = btSin(btScalar(i)*SIMD_RADS_PER_DEG)*radius;

  00257	f3 0f 2a 85 58
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$51[ebp]
  0025f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00267	51		 push	 ecx
  00268	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026d	e8 00 00 00 00	 call	 ?btSin@@YAMM@Z		; btSin
  00272	83 c4 04	 add	 esp, 4
  00275	d9 9d b0 fc ff
	ff		 fstp	 DWORD PTR tv506[ebp]
  0027b	f3 0f 10 85 b0
	fc ff ff	 movss	 xmm0, DWORD PTR tv506[ebp]
  00283	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  00288	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _capEnd$[ebp]
  0028e	f3 0f 11 85 ac
	fc ff ff	 movss	 DWORD PTR tv698[ebp], xmm0
  00296	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0029b	8b c8		 mov	 ecx, eax
  0029d	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  002a0	83 c0 01	 add	 eax, 1
  002a3	99		 cdq
  002a4	be 03 00 00 00	 mov	 esi, 3
  002a9	f7 fe		 idiv	 esi
  002ab	f3 0f 10 85 ac
	fc ff ff	 movss	 xmm0, DWORD PTR tv698[ebp]
  002b3	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 441  : 			capEnd[(upAxis+2)%3] = btCos(btScalar(i)*SIMD_RADS_PER_DEG)*radius;

  002b8	f3 0f 2a 85 58
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR _i$51[ebp]
  002c0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  002c8	51		 push	 ecx
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?btCos@@YAMM@Z		; btCos
  002d3	83 c4 04	 add	 esp, 4
  002d6	d9 9d a8 fc ff
	ff		 fstp	 DWORD PTR tv518[ebp]
  002dc	f3 0f 10 85 a8
	fc ff ff	 movss	 xmm0, DWORD PTR tv518[ebp]
  002e4	f3 0f 59 43 08	 mulss	 xmm0, DWORD PTR _radius$[ebx]
  002e9	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _capEnd$[ebp]
  002ef	f3 0f 11 85 a4
	fc ff ff	 movss	 DWORD PTR tv700[ebp], xmm0
  002f7	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  002fc	8b c8		 mov	 ecx, eax
  002fe	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  00301	83 c0 02	 add	 eax, 2
  00304	99		 cdq
  00305	be 03 00 00 00	 mov	 esi, 3
  0030a	f7 fe		 idiv	 esi
  0030c	f3 0f 10 85 a4
	fc ff ff	 movss	 xmm0, DWORD PTR tv700[ebp]
  00314	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 442  : 			drawLine(start+transform.getBasis() * (offsetHeight),start+transform.getBasis() * capEnd, color);

  00319	8b f4		 mov	 esi, esp
  0031b	8b 53 18	 mov	 edx, DWORD PTR _color$[ebx]
  0031e	52		 push	 edx
  0031f	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _capEnd$[ebp]
  00325	50		 push	 eax
  00326	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00329	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  0032e	50		 push	 eax
  0032f	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T48[ebp]
  00335	51		 push	 ecx
  00336	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  0033b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033e	50		 push	 eax
  0033f	8d 55 e0	 lea	 edx, DWORD PTR _start$[ebp]
  00342	52		 push	 edx
  00343	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T47[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  0034f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00352	50		 push	 eax
  00353	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  00356	51		 push	 ecx
  00357	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0035a	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  0035f	50		 push	 eax
  00360	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR $T50[ebp]
  00366	52		 push	 edx
  00367	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  0036c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036f	50		 push	 eax
  00370	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  00373	50		 push	 eax
  00374	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T49[ebp]
  0037a	51		 push	 ecx
  0037b	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00380	83 c4 0c	 add	 esp, 12			; 0000000cH
  00383	50		 push	 eax
  00384	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00387	8b 02		 mov	 eax, DWORD PTR [edx]
  00389	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0038f	ff d2		 call	 edx
  00391	3b f4		 cmp	 esi, esp
  00393	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 443  : 		}

  00398	e9 9b fe ff ff	 jmp	 $LN2@drawCone
$LN3@drawCone:

; 444  : 
; 445  : 		drawLine(start+transform.getBasis() * (offsetHeight),start+transform.getBasis() * (-offsetHeight+offsetRadius),color);

  0039d	8b f4		 mov	 esi, esp
  0039f	8b 43 18	 mov	 eax, DWORD PTR _color$[ebx]
  003a2	50		 push	 eax
  003a3	8d 4d a0	 lea	 ecx, DWORD PTR _offsetRadius$[ebp]
  003a6	51		 push	 ecx
  003a7	8d 55 c0	 lea	 edx, DWORD PTR _offsetHeight$[ebp]
  003aa	52		 push	 edx
  003ab	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T44[ebp]
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@@Z ; operator-
  003b7	83 c4 08	 add	 esp, 8
  003ba	50		 push	 eax
  003bb	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  003c1	51		 push	 ecx
  003c2	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  003c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ca	50		 push	 eax
  003cb	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  003ce	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  003d3	50		 push	 eax
  003d4	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR $T42[ebp]
  003da	52		 push	 edx
  003db	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  003e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e3	50		 push	 eax
  003e4	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  003e7	50		 push	 eax
  003e8	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  003ee	51		 push	 ecx
  003ef	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  003f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f7	50		 push	 eax
  003f8	8d 55 c0	 lea	 edx, DWORD PTR _offsetHeight$[ebp]
  003fb	52		 push	 edx
  003fc	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  003ff	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00404	50		 push	 eax
  00405	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T46[ebp]
  0040b	50		 push	 eax
  0040c	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00411	83 c4 0c	 add	 esp, 12			; 0000000cH
  00414	50		 push	 eax
  00415	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  00418	51		 push	 ecx
  00419	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T45[ebp]
  0041f	52		 push	 edx
  00420	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00425	83 c4 0c	 add	 esp, 12			; 0000000cH
  00428	50		 push	 eax
  00429	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0042c	8b 10		 mov	 edx, DWORD PTR [eax]
  0042e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00431	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00434	ff d0		 call	 eax
  00436	3b f4		 cmp	 esi, esp
  00438	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 446  : 		drawLine(start+transform.getBasis() * (offsetHeight),start+transform.getBasis() * (-offsetHeight-offsetRadius),color);

  0043d	8b f4		 mov	 esi, esp
  0043f	8b 4b 18	 mov	 ecx, DWORD PTR _color$[ebx]
  00442	51		 push	 ecx
  00443	8d 55 a0	 lea	 edx, DWORD PTR _offsetRadius$[ebp]
  00446	52		 push	 edx
  00447	8d 45 c0	 lea	 eax, DWORD PTR _offsetHeight$[ebp]
  0044a	50		 push	 eax
  0044b	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  00451	51		 push	 ecx
  00452	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@@Z ; operator-
  00457	83 c4 08	 add	 esp, 8
  0045a	50		 push	 eax
  0045b	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR $T37[ebp]
  00461	52		 push	 edx
  00462	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  00467	83 c4 0c	 add	 esp, 12			; 0000000cH
  0046a	50		 push	 eax
  0046b	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0046e	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00473	50		 push	 eax
  00474	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  0047a	50		 push	 eax
  0047b	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00480	83 c4 0c	 add	 esp, 12			; 0000000cH
  00483	50		 push	 eax
  00484	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  00487	51		 push	 ecx
  00488	8d 95 50 fe ff
	ff		 lea	 edx, DWORD PTR $T35[ebp]
  0048e	52		 push	 edx
  0048f	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00494	83 c4 0c	 add	 esp, 12			; 0000000cH
  00497	50		 push	 eax
  00498	8d 45 c0	 lea	 eax, DWORD PTR _offsetHeight$[ebp]
  0049b	50		 push	 eax
  0049c	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0049f	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  004a4	50		 push	 eax
  004a5	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  004ab	51		 push	 ecx
  004ac	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  004b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b4	50		 push	 eax
  004b5	8d 55 e0	 lea	 edx, DWORD PTR _start$[ebp]
  004b8	52		 push	 edx
  004b9	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  004c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  004c8	50		 push	 eax
  004c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  004ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004d4	ff d0		 call	 eax
  004d6	3b f4		 cmp	 esi, esp
  004d8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 447  : 		drawLine(start+transform.getBasis() * (offsetHeight),start+transform.getBasis() * (-offsetHeight+offset2Radius),color);

  004dd	8b f4		 mov	 esi, esp
  004df	8b 4b 18	 mov	 ecx, DWORD PTR _color$[ebx]
  004e2	51		 push	 ecx
  004e3	8d 55 80	 lea	 edx, DWORD PTR _offset2Radius$[ebp]
  004e6	52		 push	 edx
  004e7	8d 45 c0	 lea	 eax, DWORD PTR _offsetHeight$[ebp]
  004ea	50		 push	 eax
  004eb	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  004f1	51		 push	 ecx
  004f2	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@@Z ; operator-
  004f7	83 c4 08	 add	 esp, 8
  004fa	50		 push	 eax
  004fb	8d 95 10 fe ff
	ff		 lea	 edx, DWORD PTR $T31[ebp]
  00501	52		 push	 edx
  00502	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00507	83 c4 0c	 add	 esp, 12			; 0000000cH
  0050a	50		 push	 eax
  0050b	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0050e	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00513	50		 push	 eax
  00514	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  0051a	50		 push	 eax
  0051b	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00520	83 c4 0c	 add	 esp, 12			; 0000000cH
  00523	50		 push	 eax
  00524	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  00527	51		 push	 ecx
  00528	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR $T29[ebp]
  0052e	52		 push	 edx
  0052f	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00534	83 c4 0c	 add	 esp, 12			; 0000000cH
  00537	50		 push	 eax
  00538	8d 45 c0	 lea	 eax, DWORD PTR _offsetHeight$[ebp]
  0053b	50		 push	 eax
  0053c	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0053f	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00544	50		 push	 eax
  00545	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  0054b	51		 push	 ecx
  0054c	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00551	83 c4 0c	 add	 esp, 12			; 0000000cH
  00554	50		 push	 eax
  00555	8d 55 e0	 lea	 edx, DWORD PTR _start$[ebp]
  00558	52		 push	 edx
  00559	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR $T33[ebp]
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00565	83 c4 0c	 add	 esp, 12			; 0000000cH
  00568	50		 push	 eax
  00569	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0056c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0056e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00571	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00574	ff d0		 call	 eax
  00576	3b f4		 cmp	 esi, esp
  00578	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 448  : 		drawLine(start+transform.getBasis() * (offsetHeight),start+transform.getBasis() * (-offsetHeight-offset2Radius),color);

  0057d	8b f4		 mov	 esi, esp
  0057f	8b 4b 18	 mov	 ecx, DWORD PTR _color$[ebx]
  00582	51		 push	 ecx
  00583	8d 55 80	 lea	 edx, DWORD PTR _offset2Radius$[ebp]
  00586	52		 push	 edx
  00587	8d 45 c0	 lea	 eax, DWORD PTR _offsetHeight$[ebp]
  0058a	50		 push	 eax
  0058b	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00591	51		 push	 ecx
  00592	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@@Z ; operator-
  00597	83 c4 08	 add	 esp, 8
  0059a	50		 push	 eax
  0059b	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR $T25[ebp]
  005a1	52		 push	 edx
  005a2	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  005a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  005aa	50		 push	 eax
  005ab	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  005ae	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  005b3	50		 push	 eax
  005b4	8d 85 a0 fd ff
	ff		 lea	 eax, DWORD PTR $T24[ebp]
  005ba	50		 push	 eax
  005bb	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  005c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c3	50		 push	 eax
  005c4	8d 4d e0	 lea	 ecx, DWORD PTR _start$[ebp]
  005c7	51		 push	 ecx
  005c8	8d 95 90 fd ff
	ff		 lea	 edx, DWORD PTR $T23[ebp]
  005ce	52		 push	 edx
  005cf	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  005d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d7	50		 push	 eax
  005d8	8d 45 c0	 lea	 eax, DWORD PTR _offsetHeight$[ebp]
  005db	50		 push	 eax
  005dc	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  005df	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  005e4	50		 push	 eax
  005e5	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  005eb	51		 push	 ecx
  005ec	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  005f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  005f4	50		 push	 eax
  005f5	8d 55 e0	 lea	 edx, DWORD PTR _start$[ebp]
  005f8	52		 push	 edx
  005f9	8d 85 d0 fd ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  005ff	50		 push	 eax
  00600	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00605	83 c4 0c	 add	 esp, 12			; 0000000cH
  00608	50		 push	 eax
  00609	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0060c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0060e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00611	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00614	ff d0		 call	 eax
  00616	3b f4		 cmp	 esi, esp
  00618	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 449  : 
; 450  : 		// Drawing the base of the cone
; 451  : 		btVector3 yaxis(0,0,0);

  0061d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00625	f3 0f 11 85 cc
	fc ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  0062d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00635	f3 0f 11 85 c8
	fc ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  0063d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00645	f3 0f 11 85 c4
	fc ff ff	 movss	 DWORD PTR $T4[ebp], xmm0
  0064d	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00653	51		 push	 ecx
  00654	8d 95 c8 fc ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  0065a	52		 push	 edx
  0065b	8d 85 c4 fc ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00661	50		 push	 eax
  00662	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _yaxis$[ebp]
  00668	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 452  : 		yaxis[upAxis] = btScalar(1.0);

  0066d	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _yaxis$[ebp]
  00673	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00678	8b 4b 10	 mov	 ecx, DWORD PTR _upAxis$[ebx]
  0067b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00683	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 453  : 		btVector3 xaxis(0,0,0);

  00688	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00690	f3 0f 11 85 c0
	fc ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  00698	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  006a0	f3 0f 11 85 bc
	fc ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  006a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  006b0	f3 0f 11 85 b8
	fc ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  006b8	8d 95 c0 fc ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  006be	52		 push	 edx
  006bf	8d 85 bc fc ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  006c5	50		 push	 eax
  006c6	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  006cc	51		 push	 ecx
  006cd	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR _xaxis$[ebp]
  006d3	e8 00 00 00 00	 call	 ??0btVector3@@QAE@ABM00@Z ; btVector3::btVector3

; 454  : 		xaxis[(upAxis+1)%3] = btScalar(1.0);

  006d8	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR _xaxis$[ebp]
  006de	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  006e3	8b c8		 mov	 ecx, eax
  006e5	8b 43 10	 mov	 eax, DWORD PTR _upAxis$[ebx]
  006e8	83 c0 01	 add	 eax, 1
  006eb	99		 cdq
  006ec	be 03 00 00 00	 mov	 esi, 3
  006f1	f7 fe		 idiv	 esi
  006f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006fb	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 455  : 		drawArc(start-transform.getBasis()*(offsetHeight),transform.getBasis()*yaxis,transform.getBasis()*xaxis,radius,radius,0,SIMD_2_PI,color,false,10.0);

  00700	8b f4		 mov	 esi, esp
  00702	51		 push	 ecx
  00703	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	6a 00		 push	 0
  00712	8b 53 18	 mov	 edx, DWORD PTR _color$[ebx]
  00715	52		 push	 edx
  00716	51		 push	 ecx
  00717	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  0071f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00724	51		 push	 ecx
  00725	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0072d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00732	51		 push	 ecx
  00733	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	51		 push	 ecx
  0073e	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _radius$[ebx]
  00743	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00748	8d 85 50 fd ff
	ff		 lea	 eax, DWORD PTR _xaxis$[ebp]
  0074e	50		 push	 eax
  0074f	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00752	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00757	50		 push	 eax
  00758	8d 8d 00 fd ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  0075e	51		 push	 ecx
  0075f	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00764	83 c4 0c	 add	 esp, 12			; 0000000cH
  00767	50		 push	 eax
  00768	8d 95 70 fd ff
	ff		 lea	 edx, DWORD PTR _yaxis$[ebp]
  0076e	52		 push	 edx
  0076f	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  00772	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00777	50		 push	 eax
  00778	8d 85 10 fd ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  0077e	50		 push	 eax
  0077f	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  00784	83 c4 0c	 add	 esp, 12			; 0000000cH
  00787	50		 push	 eax
  00788	8d 4d c0	 lea	 ecx, DWORD PTR _offsetHeight$[ebp]
  0078b	51		 push	 ecx
  0078c	8b 4b 14	 mov	 ecx, DWORD PTR _transform$[ebx]
  0078f	e8 00 00 00 00	 call	 ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
  00794	50		 push	 eax
  00795	8d 95 30 fd ff
	ff		 lea	 edx, DWORD PTR $T22[ebp]
  0079b	52		 push	 edx
  0079c	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
  007a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  007a4	50		 push	 eax
  007a5	8d 45 e0	 lea	 eax, DWORD PTR _start$[ebp]
  007a8	50		 push	 eax
  007a9	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  007af	51		 push	 ecx
  007b0	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  007b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  007b8	50		 push	 eax
  007b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007bc	8b 02		 mov	 eax, DWORD PTR [edx]
  007be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c1	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  007c4	ff d2		 call	 edx
  007c6	3b f4		 cmp	 esi, esp
  007c8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 456  : 	}

  007cd	52		 push	 edx
  007ce	8b cd		 mov	 ecx, ebp
  007d0	50		 push	 eax
  007d1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@drawCone
  007d7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007dc	58		 pop	 eax
  007dd	5a		 pop	 edx
  007de	5f		 pop	 edi
  007df	5e		 pop	 esi
  007e0	8b e5		 mov	 esp, ebp
  007e2	5d		 pop	 ebp
  007e3	8b e3		 mov	 esp, ebx
  007e5	5b		 pop	 ebx
  007e6	c2 14 00	 ret	 20			; 00000014H
  007e9	0f 1f 00	 npad	 3
$LN14@drawCone:
  007ec	07 00 00 00	 DD	 7
  007f0	00 00 00 00	 DD	 $LN13@drawCone
$LN13@drawCone:
  007f4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  007f8	10 00 00 00	 DD	 16			; 00000010H
  007fc	00 00 00 00	 DD	 $LN6@drawCone
  00800	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00804	10 00 00 00	 DD	 16			; 00000010H
  00808	00 00 00 00	 DD	 $LN7@drawCone
  0080c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00810	10 00 00 00	 DD	 16			; 00000010H
  00814	00 00 00 00	 DD	 $LN8@drawCone
  00818	80 ff ff ff	 DD	 -128			; ffffff80H
  0081c	10 00 00 00	 DD	 16			; 00000010H
  00820	00 00 00 00	 DD	 $LN9@drawCone
  00824	60 ff ff ff	 DD	 -160			; ffffff60H
  00828	10 00 00 00	 DD	 16			; 00000010H
  0082c	00 00 00 00	 DD	 $LN10@drawCone
  00830	70 fd ff ff	 DD	 -656			; fffffd70H
  00834	10 00 00 00	 DD	 16			; 00000010H
  00838	00 00 00 00	 DD	 $LN11@drawCone
  0083c	50 fd ff ff	 DD	 -688			; fffffd50H
  00840	10 00 00 00	 DD	 16			; 00000010H
  00844	00 00 00 00	 DD	 $LN12@drawCone
$LN12@drawCone:
  00848	78		 DB	 120			; 00000078H
  00849	61		 DB	 97			; 00000061H
  0084a	78		 DB	 120			; 00000078H
  0084b	69		 DB	 105			; 00000069H
  0084c	73		 DB	 115			; 00000073H
  0084d	00		 DB	 0
$LN11@drawCone:
  0084e	79		 DB	 121			; 00000079H
  0084f	61		 DB	 97			; 00000061H
  00850	78		 DB	 120			; 00000078H
  00851	69		 DB	 105			; 00000069H
  00852	73		 DB	 115			; 00000073H
  00853	00		 DB	 0
$LN10@drawCone:
  00854	63		 DB	 99			; 00000063H
  00855	61		 DB	 97			; 00000061H
  00856	70		 DB	 112			; 00000070H
  00857	45		 DB	 69			; 00000045H
  00858	6e		 DB	 110			; 0000006eH
  00859	64		 DB	 100			; 00000064H
  0085a	00		 DB	 0
$LN9@drawCone:
  0085b	6f		 DB	 111			; 0000006fH
  0085c	66		 DB	 102			; 00000066H
  0085d	66		 DB	 102			; 00000066H
  0085e	73		 DB	 115			; 00000073H
  0085f	65		 DB	 101			; 00000065H
  00860	74		 DB	 116			; 00000074H
  00861	32		 DB	 50			; 00000032H
  00862	52		 DB	 82			; 00000052H
  00863	61		 DB	 97			; 00000061H
  00864	64		 DB	 100			; 00000064H
  00865	69		 DB	 105			; 00000069H
  00866	75		 DB	 117			; 00000075H
  00867	73		 DB	 115			; 00000073H
  00868	00		 DB	 0
$LN8@drawCone:
  00869	6f		 DB	 111			; 0000006fH
  0086a	66		 DB	 102			; 00000066H
  0086b	66		 DB	 102			; 00000066H
  0086c	73		 DB	 115			; 00000073H
  0086d	65		 DB	 101			; 00000065H
  0086e	74		 DB	 116			; 00000074H
  0086f	52		 DB	 82			; 00000052H
  00870	61		 DB	 97			; 00000061H
  00871	64		 DB	 100			; 00000064H
  00872	69		 DB	 105			; 00000069H
  00873	75		 DB	 117			; 00000075H
  00874	73		 DB	 115			; 00000073H
  00875	00		 DB	 0
$LN7@drawCone:
  00876	6f		 DB	 111			; 0000006fH
  00877	66		 DB	 102			; 00000066H
  00878	66		 DB	 102			; 00000066H
  00879	73		 DB	 115			; 00000073H
  0087a	65		 DB	 101			; 00000065H
  0087b	74		 DB	 116			; 00000074H
  0087c	48		 DB	 72			; 00000048H
  0087d	65		 DB	 101			; 00000065H
  0087e	69		 DB	 105			; 00000069H
  0087f	67		 DB	 103			; 00000067H
  00880	68		 DB	 104			; 00000068H
  00881	74		 DB	 116			; 00000074H
  00882	00		 DB	 0
$LN6@drawCone:
  00883	73		 DB	 115			; 00000073H
  00884	74		 DB	 116			; 00000074H
  00885	61		 DB	 97			; 00000061H
  00886	72		 DB	 114			; 00000072H
  00887	74		 DB	 116			; 00000074H
  00888	00		 DB	 0
?drawCone@btIDebugDraw@@UAEXMMHABVbtTransform@@ABVbtVector3@@@Z ENDP ; btIDebugDraw::drawCone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?drawPlane@btIDebugDraw@@UAEXABVbtVector3@@MABVbtTransform@@0@Z
_TEXT	SEGMENT
$T1 = -432						; size = 16
$T2 = -416						; size = 16
$T3 = -400						; size = 16
$T4 = -384						; size = 16
$T5 = -368						; size = 16
_pt3$ = -336						; size = 16
$T6 = -304						; size = 16
_pt2$ = -272						; size = 16
$T7 = -240						; size = 16
_pt1$ = -208						; size = 16
$T8 = -176						; size = 16
_pt0$ = -144						; size = 16
_vecLen$ = -108						; size = 4
_vec1$ = -96						; size = 16
_vec0$ = -64						; size = 16
_planeOrigin$ = -32					; size = 16
_this$ = -4						; size = 4
_planeNormal$ = 8					; size = 4
_planeConst$ = 12					; size = 4
_transform$ = 16					; size = 4
_color$ = 20						; size = 4
?drawPlane@btIDebugDraw@@UAEXABVbtVector3@@MABVbtTransform@@0@Z PROC ; btIDebugDraw::drawPlane, COMDAT
; _this$ = ecx

; 459  : 	{

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec bc 01 00
	00		 sub	 esp, 444		; 000001bcH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 44 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-444]
  00025	b9 6f 00 00 00	 mov	 ecx, 111		; 0000006fH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 460  : 		btVector3 planeOrigin = planeNormal * planeConst;

  00035	8d 43 0c	 lea	 eax, DWORD PTR _planeConst$[ebx]
  00038	50		 push	 eax
  00039	8b 4b 08	 mov	 ecx, DWORD PTR _planeNormal$[ebx]
  0003c	51		 push	 ecx
  0003d	8d 55 e0	 lea	 edx, DWORD PTR _planeOrigin$[ebp]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  : 		btVector3 vec0,vec1;

  00049	8d 4d c0	 lea	 ecx, DWORD PTR _vec0$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0btVector3@@QAE@XZ	; btVector3::btVector3
  00051	8d 4d a0	 lea	 ecx, DWORD PTR _vec1$[ebp]
  00054	e8 00 00 00 00	 call	 ??0btVector3@@QAE@XZ	; btVector3::btVector3

; 462  : 		btPlaneSpace1(planeNormal,vec0,vec1);

  00059	8d 45 a0	 lea	 eax, DWORD PTR _vec1$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d c0	 lea	 ecx, DWORD PTR _vec0$[ebp]
  00060	51		 push	 ecx
  00061	8b 53 08	 mov	 edx, DWORD PTR _planeNormal$[ebx]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??$btPlaneSpace1@VbtVector3@@@@YAXABVbtVector3@@AAV0@1@Z ; btPlaneSpace1<btVector3>
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 463  : 		btScalar vecLen = 100.f;

  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00075	f3 0f 11 45 94	 movss	 DWORD PTR _vecLen$[ebp], xmm0

; 464  : 		btVector3 pt0 = planeOrigin + vec0*vecLen;

  0007a	8d 45 94	 lea	 eax, DWORD PTR _vecLen$[ebp]
  0007d	50		 push	 eax
  0007e	8d 4d c0	 lea	 ecx, DWORD PTR _vec0$[ebp]
  00081	51		 push	 ecx
  00082	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00091	50		 push	 eax
  00092	8d 45 e0	 lea	 eax, DWORD PTR _planeOrigin$[ebp]
  00095	50		 push	 eax
  00096	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _pt0$[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  : 		btVector3 pt1 = planeOrigin - vec0*vecLen;

  000a5	8d 55 94	 lea	 edx, DWORD PTR _vecLen$[ebp]
  000a8	52		 push	 edx
  000a9	8d 45 c0	 lea	 eax, DWORD PTR _vec0$[ebp]
  000ac	50		 push	 eax
  000ad	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	50		 push	 eax
  000bd	8d 55 e0	 lea	 edx, DWORD PTR _planeOrigin$[ebp]
  000c0	52		 push	 edx
  000c1	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _pt1$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 466  : 		btVector3 pt2 = planeOrigin + vec1*vecLen;

  000d0	8d 4d 94	 lea	 ecx, DWORD PTR _vecLen$[ebp]
  000d3	51		 push	 ecx
  000d4	8d 55 a0	 lea	 edx, DWORD PTR _vec1$[ebp]
  000d7	52		 push	 edx
  000d8	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e7	50		 push	 eax
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR _planeOrigin$[ebp]
  000eb	51		 push	 ecx
  000ec	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _pt2$[ebp]
  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 467  : 		btVector3 pt3 = planeOrigin - vec1*vecLen;

  000fb	8d 45 94	 lea	 eax, DWORD PTR _vecLen$[ebp]
  000fe	50		 push	 eax
  000ff	8d 4d a0	 lea	 ecx, DWORD PTR _vec1$[ebp]
  00102	51		 push	 ecx
  00103	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00112	50		 push	 eax
  00113	8d 45 e0	 lea	 eax, DWORD PTR _planeOrigin$[ebp]
  00116	50		 push	 eax
  00117	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _pt3$[ebp]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ??G@YA?AVbtVector3@@ABV0@0@Z ; operator-
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH

; 468  : 		drawLine(transform*pt0,transform*pt1,color);

  00126	8b f4		 mov	 esi, esp
  00128	8b 53 14	 mov	 edx, DWORD PTR _color$[ebx]
  0012b	52		 push	 edx
  0012c	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _pt1$[ebp]
  00132	50		 push	 eax
  00133	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00139	51		 push	 ecx
  0013a	8b 4b 10	 mov	 ecx, DWORD PTR _transform$[ebx]
  0013d	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00142	50		 push	 eax
  00143	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _pt0$[ebp]
  00149	52		 push	 edx
  0014a	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00150	50		 push	 eax
  00151	8b 4b 10	 mov	 ecx, DWORD PTR _transform$[ebx]
  00154	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  00159	50		 push	 eax
  0015a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00165	ff d0		 call	 eax
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 469  : 		drawLine(transform*pt2,transform*pt3,color);

  0016e	8b f4		 mov	 esi, esp
  00170	8b 4b 14	 mov	 ecx, DWORD PTR _color$[ebx]
  00173	51		 push	 ecx
  00174	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR _pt3$[ebp]
  0017a	52		 push	 edx
  0017b	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00181	50		 push	 eax
  00182	8b 4b 10	 mov	 ecx, DWORD PTR _transform$[ebx]
  00185	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  0018a	50		 push	 eax
  0018b	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _pt2$[ebp]
  00191	51		 push	 ecx
  00192	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00198	52		 push	 edx
  00199	8b 4b 10	 mov	 ecx, DWORD PTR _transform$[ebx]
  0019c	e8 00 00 00 00	 call	 ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
  001a1	50		 push	 eax
  001a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 10		 mov	 edx, DWORD PTR [eax]
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ad	ff d0		 call	 eax
  001af	3b f4		 cmp	 esi, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 470  : 	}

  001b6	52		 push	 edx
  001b7	8b cd		 mov	 ecx, ebp
  001b9	50		 push	 eax
  001ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@drawPlane
  001c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c5	58		 pop	 eax
  001c6	5a		 pop	 edx
  001c7	5f		 pop	 edi
  001c8	5e		 pop	 esi
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	8b e3		 mov	 esp, ebx
  001ce	5b		 pop	 ebx
  001cf	c2 10 00	 ret	 16			; 00000010H
  001d2	66 90		 npad	 2
$LN12@drawPlane:
  001d4	08 00 00 00	 DD	 8
  001d8	00 00 00 00	 DD	 $LN11@drawPlane
$LN11@drawPlane:
  001dc	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001e0	10 00 00 00	 DD	 16			; 00000010H
  001e4	00 00 00 00	 DD	 $LN3@drawPlane
  001e8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  001ec	10 00 00 00	 DD	 16			; 00000010H
  001f0	00 00 00 00	 DD	 $LN4@drawPlane
  001f4	a0 ff ff ff	 DD	 -96			; ffffffa0H
  001f8	10 00 00 00	 DD	 16			; 00000010H
  001fc	00 00 00 00	 DD	 $LN5@drawPlane
  00200	94 ff ff ff	 DD	 -108			; ffffff94H
  00204	04 00 00 00	 DD	 4
  00208	00 00 00 00	 DD	 $LN6@drawPlane
  0020c	70 ff ff ff	 DD	 -144			; ffffff70H
  00210	10 00 00 00	 DD	 16			; 00000010H
  00214	00 00 00 00	 DD	 $LN7@drawPlane
  00218	30 ff ff ff	 DD	 -208			; ffffff30H
  0021c	10 00 00 00	 DD	 16			; 00000010H
  00220	00 00 00 00	 DD	 $LN8@drawPlane
  00224	f0 fe ff ff	 DD	 -272			; fffffef0H
  00228	10 00 00 00	 DD	 16			; 00000010H
  0022c	00 00 00 00	 DD	 $LN9@drawPlane
  00230	b0 fe ff ff	 DD	 -336			; fffffeb0H
  00234	10 00 00 00	 DD	 16			; 00000010H
  00238	00 00 00 00	 DD	 $LN10@drawPlane
$LN10@drawPlane:
  0023c	70		 DB	 112			; 00000070H
  0023d	74		 DB	 116			; 00000074H
  0023e	33		 DB	 51			; 00000033H
  0023f	00		 DB	 0
$LN9@drawPlane:
  00240	70		 DB	 112			; 00000070H
  00241	74		 DB	 116			; 00000074H
  00242	32		 DB	 50			; 00000032H
  00243	00		 DB	 0
$LN8@drawPlane:
  00244	70		 DB	 112			; 00000070H
  00245	74		 DB	 116			; 00000074H
  00246	31		 DB	 49			; 00000031H
  00247	00		 DB	 0
$LN7@drawPlane:
  00248	70		 DB	 112			; 00000070H
  00249	74		 DB	 116			; 00000074H
  0024a	30		 DB	 48			; 00000030H
  0024b	00		 DB	 0
$LN6@drawPlane:
  0024c	76		 DB	 118			; 00000076H
  0024d	65		 DB	 101			; 00000065H
  0024e	63		 DB	 99			; 00000063H
  0024f	4c		 DB	 76			; 0000004cH
  00250	65		 DB	 101			; 00000065H
  00251	6e		 DB	 110			; 0000006eH
  00252	00		 DB	 0
$LN5@drawPlane:
  00253	76		 DB	 118			; 00000076H
  00254	65		 DB	 101			; 00000065H
  00255	63		 DB	 99			; 00000063H
  00256	31		 DB	 49			; 00000031H
  00257	00		 DB	 0
$LN4@drawPlane:
  00258	76		 DB	 118			; 00000076H
  00259	65		 DB	 101			; 00000065H
  0025a	63		 DB	 99			; 00000063H
  0025b	30		 DB	 48			; 00000030H
  0025c	00		 DB	 0
$LN3@drawPlane:
  0025d	70		 DB	 112			; 00000070H
  0025e	6c		 DB	 108			; 0000006cH
  0025f	61		 DB	 97			; 00000061H
  00260	6e		 DB	 110			; 0000006eH
  00261	65		 DB	 101			; 00000065H
  00262	4f		 DB	 79			; 0000004fH
  00263	72		 DB	 114			; 00000072H
  00264	69		 DB	 105			; 00000069H
  00265	67		 DB	 103			; 00000067H
  00266	69		 DB	 105			; 00000069H
  00267	6e		 DB	 110			; 0000006eH
  00268	00		 DB	 0
?drawPlane@btIDebugDraw@@UAEXABVbtVector3@@MABVbtTransform@@0@Z ENDP ; btIDebugDraw::drawPlane
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btidebugdraw.h
;	COMDAT ?flushLines@btIDebugDraw@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flushLines@btIDebugDraw@@UAEXXZ PROC			; btIDebugDraw::flushLines, COMDAT
; _this$ = ecx

; 473  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 474  : 	}

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?flushLines@btIDebugDraw@@UAEXXZ ENDP			; btIDebugDraw::flushLines
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtIDebugDraw@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtIDebugDraw@@UAEPAXI@Z PROC			; btIDebugDraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1btIDebugDraw@@UAE@XZ	; btIDebugDraw::~btIDebugDraw
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 04		 push	 4
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GbtIDebugDraw@@UAEPAXI@Z ENDP			; btIDebugDraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??0Quaternion@@QAE@ABVVector3f@@M@Z
_TEXT	SEGMENT
tv178 = -36						; size = 4
tv167 = -32						; size = 4
tv176 = -28						; size = 4
tv162 = -24						; size = 4
tv174 = -20						; size = 4
tv157 = -16						; size = 4
_cosHalfAngle$ = -12					; size = 4
_sinHalfAngle$ = -8					; size = 4
_this$ = -4						; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
??0Quaternion@@QAE@ABVVector3f@@M@Z PROC		; Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 863  : 	Quaternion(const Vector3f& axis, float angle)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 864  : 	{

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$Vector4@M@@QAE@XZ	; Vector4<float>::Vector4<float>

; 865  : 		float sinHalfAngle = sinf(angle/2);

  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00036	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0003e	51		 push	 ecx
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 _sinf
  00049	83 c4 04	 add	 esp, 4
  0004c	d9 5d f8	 fstp	 DWORD PTR _sinHalfAngle$[ebp]

; 866  : 		float cosHalfAngle = cosf(angle/2);

  0004f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00054	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0005c	51		 push	 ecx
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	e8 00 00 00 00	 call	 _cosf
  00067	83 c4 04	 add	 esp, 4
  0006a	d9 5d f4	 fstp	 DWORD PTR _cosHalfAngle$[ebp]

; 867  : 		
; 868  : 		(*this)[0] = axis.GetX() * sinHalfAngle;

  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _axis$[ebp]
  00070	e8 00 00 00 00	 call	 ?GetX@Vector3f@@QBEMXZ	; Vector3f::GetX
  00075	d9 5d f0	 fstp	 DWORD PTR tv157[ebp]
  00078	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv157[ebp]
  0007d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _sinHalfAngle$[ebp]
  00082	6a 00		 push	 0
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	f3 0f 11 45 ec	 movss	 DWORD PTR tv174[ebp], xmm0
  0008c	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00091	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv174[ebp]
  00096	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 869  : 		(*this)[1] = axis.GetY() * sinHalfAngle;

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _axis$[ebp]
  0009d	e8 00 00 00 00	 call	 ?GetY@Vector3f@@QBEMXZ	; Vector3f::GetY
  000a2	d9 5d e8	 fstp	 DWORD PTR tv162[ebp]
  000a5	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv162[ebp]
  000aa	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _sinHalfAngle$[ebp]
  000af	6a 01		 push	 1
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	f3 0f 11 45 e4	 movss	 DWORD PTR tv176[ebp], xmm0
  000b9	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  000be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv176[ebp]
  000c3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 870  : 		(*this)[2] = axis.GetZ() * sinHalfAngle;

  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _axis$[ebp]
  000ca	e8 00 00 00 00	 call	 ?GetZ@Vector3f@@QBEMXZ	; Vector3f::GetZ
  000cf	d9 5d e0	 fstp	 DWORD PTR tv167[ebp]
  000d2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv167[ebp]
  000d7	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _sinHalfAngle$[ebp]
  000dc	6a 02		 push	 2
  000de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	f3 0f 11 45 dc	 movss	 DWORD PTR tv178[ebp], xmm0
  000e6	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  000eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv178[ebp]
  000f0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 871  : 		(*this)[3] = cosHalfAngle;

  000f4	6a 03		 push	 3
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  000fe	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _cosHalfAngle$[ebp]
  00103	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 872  : 	}

  00107	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	83 c4 24	 add	 esp, 36			; 00000024H
  0010d	3b ec		 cmp	 ebp, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
??0Quaternion@@QAE@ABVVector3f@@M@Z ENDP		; Quaternion::Quaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.h
;	COMDAT ?SetScale@Transform@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_scale$ = 8						; size = 4
?SetScale@Transform@@QAEXM@Z PROC			; Transform::SetScale, COMDAT
; _this$ = ecx

; 68   : 	inline void SetScale(float scale) { m_scale = scale; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00016	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetScale@Transform@@QAEXM@Z ENDP			; Transform::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\camera.h
;	COMDAT ??0Camera@@QAE@ABV?$Matrix4@M@@PAVTransform@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_projection$ = 8					; size = 4
_transform$ = 12					; size = 4
??0Camera@@QAE@ABV?$Matrix4@M@@PAVTransform@@@Z PROC	; Camera::Camera, COMDAT
; _this$ = ecx

; 36   : 		m_transform(transform) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 		m_projection(projection),

  00010	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00015	8b 75 08	 mov	 esi, DWORD PTR _projection$[ebp]
  00018	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0001b	f3 a5		 rep movsd

; 36   : 		m_transform(transform) {}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _transform$[ebp]
  00023	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0Camera@@QAE@ABV?$Matrix4@M@@PAVTransform@@@Z ENDP	; Camera::Camera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\camera.h
;	COMDAT ?GetTransform@Camera@@QAEPAVTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTransform@Camera@@QAEPAVTransform@@XZ PROC		; Camera::GetTransform, COMDAT
; _this$ = ecx

; 38   : 	inline Transform* GetTransform()             { return m_transform; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetTransform@Camera@@QAEPAVTransform@@XZ ENDP		; Camera::GetTransform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\camera.h
;	COMDAT ?SetProjection@Camera@@QAEXABV?$Matrix4@M@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_projection$ = 8					; size = 4
?SetProjection@Camera@@QAEXABV?$Matrix4@M@@@Z PROC	; Camera::SetProjection, COMDAT
; _this$ = ecx

; 46   : 	inline void SetProjection(const Matrix4f& projection) { m_projection = projection; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00010	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00015	8b 75 08	 mov	 esi, DWORD PTR _projection$[ebp]
  00018	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0001b	f3 a5		 rep movsd
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?SetProjection@Camera@@QAEXABV?$Matrix4@M@@@Z ENDP	; Camera::SetProjection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\texture.h
;	COMDAT ?GetWidth@TextureData@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWidth@TextureData@@QBEHXZ PROC			; TextureData::GetWidth, COMDAT
; _this$ = ecx

; 33   : 	inline int GetWidth()  const { return m_width; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetWidth@TextureData@@QBEHXZ ENDP			; TextureData::GetWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\texture.h
;	COMDAT ?GetHeight@TextureData@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeight@TextureData@@QBEHXZ PROC			; TextureData::GetHeight, COMDAT
; _this$ = ecx

; 34   : 	inline int GetHeight() const { return m_height; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetHeight@TextureData@@QBEHXZ ENDP			; TextureData::GetHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\texture.h
;	COMDAT ?GetWidth@Texture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWidth@Texture@@QBEHXZ PROC				; Texture::GetWidth, COMDAT
; _this$ = ecx

; 70   : 	inline int GetWidth()  const { return m_textureData->GetWidth(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	e8 00 00 00 00	 call	 ?GetWidth@TextureData@@QBEHXZ ; TextureData::GetWidth
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?GetWidth@Texture@@QBEHXZ ENDP				; Texture::GetWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\texture.h
;	COMDAT ?GetHeight@Texture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeight@Texture@@QBEHXZ PROC				; Texture::GetHeight, COMDAT
; _this$ = ecx

; 71   : 	inline int GetHeight() const { return m_textureData->GetHeight(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	e8 00 00 00 00	 call	 ?GetHeight@TextureData@@QBEHXZ ; TextureData::GetHeight
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?GetHeight@Texture@@QBEHXZ ENDP				; Texture::GetHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\mappedvalues.h
;	COMDAT ?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z PROC ; MappedValues::SetVector3f, COMDAT
; _this$ = ecx

; 32   : 	inline void SetVector3f(const std::string& name, const Vector3f& value) { m_vector3fMap[name] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 75 0c	 mov	 esi, DWORD PTR _value$[ebp]
  00012	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00015	50		 push	 eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::operator[]
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	89 08		 mov	 DWORD PTR [eax], ecx
  00022	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00025	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0002e	5e		 pop	 esi
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z ENDP ; MappedValues::SetVector3f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetPos@ShadowCameraTransform@@QBEABVVector3f@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPos@ShadowCameraTransform@@QBEABVVector3f@@XZ PROC	; ShadowCameraTransform::GetPos, COMDAT
; _this$ = ecx

; 37   : 	inline const Vector3f& GetPos()   const { return m_pos; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetPos@ShadowCameraTransform@@QBEABVVector3f@@XZ ENDP	; ShadowCameraTransform::GetPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetRot@ShadowCameraTransform@@QBEABVQuaternion@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRot@ShadowCameraTransform@@QBEABVQuaternion@@XZ PROC ; ShadowCameraTransform::GetRot, COMDAT
; _this$ = ecx

; 38   : 	inline const Quaternion& GetRot() const { return m_rot; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 0c	 add	 eax, 12			; 0000000cH
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetRot@ShadowCameraTransform@@QBEABVQuaternion@@XZ ENDP ; ShadowCameraTransform::GetRot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetProjection@ShadowInfo@@QBEABV?$Matrix4@M@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProjection@ShadowInfo@@QBEABV?$Matrix4@M@@XZ PROC	; ShadowInfo::GetProjection, COMDAT
; _this$ = ecx

; 55   : 	inline const Matrix4f& GetProjection()      const { return m_projection; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetProjection@ShadowInfo@@QBEABV?$Matrix4@M@@XZ ENDP	; ShadowInfo::GetProjection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetFlipFaces@ShadowInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlipFaces@ShadowInfo@@QBE_NXZ PROC			; ShadowInfo::GetFlipFaces, COMDAT
; _this$ = ecx

; 56   : 	inline bool GetFlipFaces()                  const { return m_flipFaces; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 40	 mov	 al, BYTE PTR [eax+64]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetFlipFaces@ShadowInfo@@QBE_NXZ ENDP			; ShadowInfo::GetFlipFaces
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ PROC	; ShadowInfo::GetShadowMapSizeAsPowerOf2, COMDAT
; _this$ = ecx

; 57   : 	inline int GetShadowMapSizeAsPowerOf2()     const { return m_shadowMapSizeAsPowerOf2; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ ENDP	; ShadowInfo::GetShadowMapSizeAsPowerOf2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetShadowSoftness@ShadowInfo@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetShadowSoftness@ShadowInfo@@QBEMXZ PROC		; ShadowInfo::GetShadowSoftness, COMDAT
; _this$ = ecx

; 58   : 	inline float GetShadowSoftness()            const { return m_shadowSoftness; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	d9 40 48	 fld	 DWORD PTR [eax+72]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetShadowSoftness@ShadowInfo@@QBEMXZ ENDP		; ShadowInfo::GetShadowSoftness
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetMinVariance@ShadowInfo@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMinVariance@ShadowInfo@@QBEMXZ PROC			; ShadowInfo::GetMinVariance, COMDAT
; _this$ = ecx

; 59   : 	inline float GetMinVariance()               const { return m_minVariance; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	d9 40 50	 fld	 DWORD PTR [eax+80]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMinVariance@ShadowInfo@@QBEMXZ ENDP			; ShadowInfo::GetMinVariance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetLightBleedReductionAmount@ShadowInfo@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLightBleedReductionAmount@ShadowInfo@@QBEMXZ PROC	; ShadowInfo::GetLightBleedReductionAmount, COMDAT
; _this$ = ecx

; 60   : 	inline float GetLightBleedReductionAmount() const { return m_lightBleedReductionAmount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	d9 40 4c	 fld	 DWORD PTR [eax+76]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetLightBleedReductionAmount@ShadowInfo@@QBEMXZ ENDP	; ShadowInfo::GetLightBleedReductionAmount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetShader@BaseLight@@QBEABVShader@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetShader@BaseLight@@QBEABVShader@@XZ PROC		; BaseLight::GetShader, COMDAT
; _this$ = ecx

; 87   : 	inline const Shader& GetShader()         const { return m_shader; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 18	 add	 eax, 24			; 00000018H
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetShader@BaseLight@@QBEABVShader@@XZ ENDP		; BaseLight::GetShader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\lighting.h
;	COMDAT ?GetShadowInfo@BaseLight@@QBEABVShadowInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetShadowInfo@BaseLight@@QBEABVShadowInfo@@XZ PROC	; BaseLight::GetShadowInfo, COMDAT
; _this$ = ecx

; 88   : 	inline const ShadowInfo& GetShadowInfo() const { return m_shadowInfo; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 3c	 add	 eax, 60			; 0000003cH
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetShadowInfo@BaseLight@@QBEABVShadowInfo@@XZ ENDP	; BaseLight::GetShadowInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.h
;	COMDAT ?GetSDLWindow@Window@@QAEPAUSDL_Window@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSDLWindow@Window@@QAEPAUSDL_Window@@XZ PROC		; Window::GetSDLWindow, COMDAT
; _this$ = ecx

; 43   : 	inline SDL_Window* GetSDLWindow()             { return m_window; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetSDLWindow@Window@@QAEPAUSDL_Window@@XZ ENDP		; Window::GetSDLWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.h
;	COMDAT ??1RenderingEngine@@UAE@XZ
_TEXT	SEGMENT
tv139 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RenderingEngine@@UAE@XZ PROC				; RenderingEngine::~RenderingEngine, COMDAT
; _this$ = ecx

; 42   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1RenderingEngine@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001d	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00020	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00023	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7RenderingEngine@@6B@

; 43   : 		delete m_defaultShader;

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 91 64 04 00
	00		 mov	 edx, DWORD PTR [ecx+1124]
  0004c	89 55 e8	 mov	 DWORD PTR $T2[ebp], edx
  0004f	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00052	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00055	83 7d ec 00	 cmp	 DWORD PTR $T3[ebp], 0
  00059	74 1c		 je	 SHORT $LN3@RenderingE
  0005b	8b f4		 mov	 esi, esp
  0005d	6a 01		 push	 1
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]
  00069	ff d0		 call	 eax
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	89 45 e4	 mov	 DWORD PTR tv139[ebp], eax
  00075	eb 07		 jmp	 SHORT $LN1@RenderingE
$LN3@RenderingE:
  00077	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN1@RenderingE:

; 44   : 	}

  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	81 c1 40 06 00
	00		 add	 ecx, 1600		; 00000640H
  00087	e8 00 00 00 00	 call	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAE@XZ
  0008c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	81 c1 30 06 00
	00		 add	 ecx, 1584		; 00000630H
  00095	e8 00 00 00 00	 call	 ??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::~vector<BaseLight *,std::allocator<BaseLight *> >
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	81 c1 f8 04 00
	00		 add	 ecx, 1272		; 000004f8H
  000a3	e8 00 00 00 00	 call	 ??1Shader@@UAE@XZ	; Shader::~Shader
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	81 c1 d4 04 00
	00		 add	 ecx, 1236		; 000004d4H
  000b1	e8 00 00 00 00	 call	 ??1Shader@@UAE@XZ	; Shader::~Shader
  000b6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	81 c1 b0 04 00
	00		 add	 ecx, 1200		; 000004b0H
  000bf	e8 00 00 00 00	 call	 ??1Shader@@UAE@XZ	; Shader::~Shader
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  000cd	e8 00 00 00 00	 call	 ??1Shader@@UAE@XZ	; Shader::~Shader
  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	81 c1 68 04 00
	00		 add	 ecx, 1128		; 00000468H
  000db	e8 00 00 00 00	 call	 ??1Shader@@UAE@XZ	; Shader::~Shader
  000e0	68 00 00 00 00	 push	 OFFSET ??1Texture@@UAE@XZ ; Texture::~Texture
  000e5	6a 0a		 push	 10			; 0000000aH
  000e7	6a 24		 push	 36			; 00000024H
  000e9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	81 c1 fc 02 00
	00		 add	 ecx, 764		; 000002fcH
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  000f8	68 00 00 00 00	 push	 OFFSET ??1Texture@@UAE@XZ ; Texture::~Texture
  000fd	6a 0a		 push	 10			; 0000000aH
  000ff	6a 24		 push	 36			; 00000024H
  00101	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00104	81 c2 94 01 00
	00		 add	 edx, 404		; 00000194H
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00110	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  00119	e8 00 00 00 00	 call	 ??1Material@@UAE@XZ	; Material::~Material
  0011e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  00127	e8 00 00 00 00	 call	 ??1Texture@@UAE@XZ	; Texture::~Texture
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00135	e8 00 00 00 00	 call	 ??1Mesh@@UAE@XZ		; Mesh::~Mesh
  0013a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	83 c1 08	 add	 ecx, 8
  00140	e8 00 00 00 00	 call	 ??1MappedValues@@QAE@XZ
  00145	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00148	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014f	59		 pop	 ecx
  00150	5e		 pop	 esi
  00151	83 c4 1c	 add	 esp, 28			; 0000001cH
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1RenderingEngine@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1RenderingEngine@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1RenderingEngine@@UAE@XZ ENDP				; RenderingEngine::~RenderingEngine
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.h
;	COMDAT ?UpdateUniformStruct@RenderingEngine@@UBEXABVTransform@@ABVMaterial@@ABVShader@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z
_TEXT	SEGMENT
$T1 = -36						; size = 28
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_transform$ = 8						; size = 4
_material$ = 12						; size = 4
_shader$ = 16						; size = 4
_uniformName$ = 20					; size = 4
_uniformType$ = 24					; size = 4
?UpdateUniformStruct@RenderingEngine@@UBEXABVTransform@@ABVMaterial@@ABVShader@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z PROC ; RenderingEngine::UpdateUniformStruct, COMDAT
; _this$ = ecx

; 54   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 		throw uniformType + " is not supported by the rendering engine";

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OGBHDMKG@?5is?5not?5supported?5by?5the?5renderi@
  00038	8b 45 18	 mov	 eax, DWORD PTR _uniformType$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d dc	 lea	 ecx, DWORD PTR $T1[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	68 00 00 00 00	 push	 OFFSET __TI2?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
  0004d	8d 55 dc	 lea	 edx, DWORD PTR $T1[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@UpdateUnif:

; 56   : 	}

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	83 c4 24	 add	 esp, 36			; 00000024H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 14 00	 ret	 20			; 00000014H
?UpdateUniformStruct@RenderingEngine@@UBEXABVTransform@@ABVMaterial@@ABVShader@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@3@Z ENDP ; RenderingEngine::UpdateUniformStruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.h
;	COMDAT ?GetNullShader@RenderingEngine@@QAEPAVShader@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNullShader@RenderingEngine@@QAEPAVShader@@XZ PROC	; RenderingEngine::GetNullShader, COMDAT
; _this$ = ecx

; 67   : 	inline Shader* GetNullShader () { return &m_nullShader; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	05 68 04 00 00	 add	 eax, 1128		; 00000468H
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetNullShader@RenderingEngine@@QAEPAVShader@@XZ ENDP	; RenderingEngine::GetNullShader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.h
;	COMDAT ?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; RenderingEngine::SetSamplerSlot, COMDAT
; _this$ = ecx

; 70   : 	inline void SetSamplerSlot(const std::string& name, unsigned int value) { m_samplerMap[name] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	81 c1 40 06 00
	00		 add	 ecx, 1600		; 00000640H
  0001b	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >::operator[]
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00023	89 08		 mov	 DWORD PTR [eax], ecx
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; RenderingEngine::SetSamplerSlot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GRenderingEngine@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRenderingEngine@@UAEPAXI@Z PROC			; RenderingEngine::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1RenderingEngine@@UAE@XZ ; RenderingEngine::~RenderingEngine
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 11		 je	 SHORT $LN2@scalar
  0001e	68 50 06 00 00	 push	 1616			; 00000650H
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_GRenderingEngine@@UAEPAXI@Z ENDP			; RenderingEngine::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_FTexture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FTexture@@QAEXXZ PROC				; Texture::`default constructor closure', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	68 08 19 00 00	 push	 6408			; 00001908H
  00017	68 08 19 00 00	 push	 6408			; 00001908H
  0001c	51		 push	 ecx
  0001d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c0c00
  00025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002a	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0Texture@@QAE@HHPAEIMII_NI@Z ; Texture::Texture
  0003d	83 c4 04	 add	 esp, 4
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??_FTexture@@QAEXXZ ENDP				; Texture::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.h
;	COMDAT ?getDebugMode@GLDebugDrawer@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDebugMode@GLDebugDrawer@@UBEHXZ PROC		; GLDebugDrawer::getDebugMode, COMDAT
; _this$ = ecx

; 131  : 	virtual int      getDebugMode() const { return m_debugMode; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?getDebugMode@GLDebugDrawer@@UBEHXZ ENDP		; GLDebugDrawer::getDebugMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
;	COMDAT ??__E?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B@@YAXXZ
text$di	SEGMENT
$T1 = -348						; size = 64
$T2 = -284						; size = 64
$T3 = -220						; size = 12
$T4 = -208						; size = 64
$T5 = -144						; size = 64
$T6 = -80						; size = 12
$T7 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
??__E?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B@@YAXXZ PROC ; `dynamic initializer for 'RenderingEngine::BIAS_MATRIX'', COMDAT

; 29   : const Matrix4f RenderingEngine::BIAS_MATRIX = Matrix4f().InitScale(Vector3f(0.5, 0.5, 0.5)) * Matrix4f().InitTranslation(Vector3f(1.0, 1.0, 1.0));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	57		 push	 edi
  0000a	8d bd a4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-348]
  00010	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	51		 push	 ecx
  00027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	51		 push	 ecx
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00056	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  0005b	50		 push	 eax
  0005c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00062	50		 push	 eax
  00063	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00069	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  0006e	8b c8		 mov	 ecx, eax
  00070	e8 00 00 00 00	 call	 ?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitTranslation
  00075	50		 push	 eax
  00076	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0007c	51		 push	 ecx
  0007d	51		 push	 ecx
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	51		 push	 ecx
  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	51		 push	 ecx
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	8d 4d b0	 lea	 ecx, DWORD PTR $T6[ebp]
  000aa	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  000af	50		 push	 eax
  000b0	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  000b6	52		 push	 edx
  000b7	8d 4d bc	 lea	 ecx, DWORD PTR $T7[ebp]
  000ba	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  000bf	8b c8		 mov	 ecx, eax
  000c1	e8 00 00 00 00	 call	 ?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitScale
  000c6	8b c8		 mov	 ecx, eax
  000c8	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  000cd	50		 push	 eax
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B ; RenderingEngine::BIAS_MATRIX
  000d3	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  000d8	5f		 pop	 edi
  000d9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dc	33 cd		 xor	 ecx, ebp
  000de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e3	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
??__E?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B@@YAXXZ ENDP ; `dynamic initializer for 'RenderingEngine::BIAS_MATRIX''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
tv701 = -1312						; size = 4
tv699 = -1308						; size = 4
tv697 = -1304						; size = 4
tv517 = -1300						; size = 4
tv364 = -1296						; size = 4
tv645 = -1292						; size = 4
tv188 = -1288						; size = 4
tv643 = -1284						; size = 4
tv200 = -1280						; size = 4
$T2 = -1276						; size = 4
$T3 = -1272						; size = 4
$T4 = -1268						; size = 4
$T5 = -1264						; size = 4
$T6 = -1260						; size = 4
$T7 = -1256						; size = 64
$T8 = -1192						; size = 64
$T9 = -1128						; size = 12
$T10 = -1116						; size = 64
_shadowMapSize$11 = -1052				; size = 4
_i$12 = -1048						; size = 4
$T13 = -1044						; size = 16
$T14 = -1028						; size = 12
$T15 = -1016						; size = 16
$T16 = -1000						; size = 12
$T17 = -988						; size = 28
$T18 = -960						; size = 36
$T19 = -924						; size = 28
$T20 = -896						; size = 28
$T21 = -868						; size = 28
$T22 = -840						; size = 28
$T23 = -812						; size = 28
$T24 = -784						; size = 12
$T25 = -772						; size = 28
$T26 = -744						; size = 28
$T27 = -716						; size = 28
$T28 = -688						; size = 28
$T29 = -660						; size = 28
$T30 = -632						; size = 28
$T31 = -604						; size = 64
$T32 = -540						; size = 28
$T33 = -512						; size = 28
$T34 = -484						; size = 28
$T35 = -456						; size = 28
$T36 = -428						; size = 28
$T37 = -400						; size = 28
$T38 = -372						; size = 28
$T39 = -344						; size = 36
$T40 = -308						; size = 28
$T41 = -280						; size = 36
$T42 = -244						; size = 12
$T43 = -232						; size = 16
$T44 = -216						; size = 64
$T45 = -152						; size = 64
$T46 = -88						; size = 16
$T47 = -72						; size = 12
$T48 = -60						; size = 12
$T49 = -48						; size = 28
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_window$ = 8						; size = 4
??0RenderingEngine@@QAE@PAVWindow@@@Z PROC		; RenderingEngine::RenderingEngine
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0RenderingEngine@@QAE@PAVWindow@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 05 00
	00		 sub	 esp, 1300		; 00000514H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd e0 fa ff
	ff		 lea	 edi, DWORD PTR [ebp-1312]
  00020	b9 45 01 00 00	 mov	 ecx, 325		; 00000145H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00044	c7 85 04 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 08	 add	 ecx, 8
  00054	e8 00 00 00 00	 call	 ??0MappedValues@@QAE@XZ	; MappedValues::MappedValues
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00060	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7RenderingEngine@@6B@

; 52   : 	m_fullbright(false),

  00069	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	c6 41 5c 00	 mov	 BYTE PTR [ecx+92], 0

; 56   : {

  00070	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 60	 add	 ecx, 96			; 00000060H
  00076	e8 00 00 00 00	 call	 ??0ProfileTimer@@QAE@XZ	; ProfileTimer::ProfileTimer
  0007b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 c1 78	 add	 ecx, 120		; 00000078H
  00081	e8 00 00 00 00	 call	 ??0ProfileTimer@@QAE@XZ	; ProfileTimer::ProfileTimer
  00086	51		 push	 ecx
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	51		 push	 ecx
  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	51		 push	 ecx
  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b0	51		 push	 ecx
  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	51		 push	 ecx
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  000d2	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@MMMM@Z ; Quaternion::Quaternion
  000d7	50		 push	 eax
  000d8	51		 push	 ecx
  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	51		 push	 ecx
  000e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	51		 push	 ecx
  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  00108	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  0010d	50		 push	 eax
  0010e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00117	e8 00 00 00 00	 call	 ??0Transform@@QAE@ABVVector3f@@ABVQuaternion@@M@Z ; Transform::Transform

; 44   : 	m_plane(Mesh("plane.obj")),

  0011c	68 00 00 00 00	 push	 OFFSET $SG4294895282
  00121	8d 4d d0	 lea	 ecx, DWORD PTR $T49[ebp]
  00124	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00129	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0012d	8d 55 d0	 lea	 edx, DWORD PTR $T49[ebp]
  00130	52		 push	 edx
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0013a	e8 00 00 00 00	 call	 ??0Mesh@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Mesh::Mesh
  0013f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00143	8d 4d d0	 lea	 ecx, DWORD PTR $T49[ebp]
  00146	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 45   : 	m_window(window),

  0014b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _window$[ebp]
  00151	89 88 3c 01 00
	00		 mov	 DWORD PTR [eax+316], ecx

; 46   : 	m_tempTarget(window->GetWidth(), window->GetHeight(), 0, GL_TEXTURE_2D, GL_NEAREST, GL_RGBA, GL_RGBA, false, GL_COLOR_ATTACHMENT0),

  00157	68 e0 8c 00 00	 push	 36064			; 00008ce0H
  0015c	6a 00		 push	 0
  0015e	68 08 19 00 00	 push	 6408			; 00001908H
  00163	68 08 19 00 00	 push	 6408			; 00001908H
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46180000
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0017b	6a 00		 push	 0
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _window$[ebp]
  00180	e8 00 00 00 00	 call	 ?GetHeight@Window@@QBEHXZ ; Window::GetHeight
  00185	50		 push	 eax
  00186	8b 4d 08	 mov	 ecx, DWORD PTR _window$[ebp]
  00189	e8 00 00 00 00	 call	 ?GetWidth@Window@@QBEHXZ ; Window::GetWidth
  0018e	50		 push	 eax
  0018f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  00198	e8 00 00 00 00	 call	 ??0Texture@@QAE@HHPAEIMII_NI@Z ; Texture::Texture
  0019d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 47   : 	m_planeMaterial("renderingEngine_filterPlane", m_tempTarget, 1, 8),

  001a1	68 00 00 00 00	 push	 OFFSET $SG4294895281
  001a6	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  001ac	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  001b5	68 00 00 00 00	 push	 OFFSET $SG4294895280
  001ba	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  001c0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c5	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001c9	68 00 00 00 00	 push	 OFFSET $SG4294895279
  001ce	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  001d4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d9	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001dd	6a 00		 push	 0
  001df	6a 00		 push	 0
  001e1	68 08 19 00 00	 push	 6408			; 00001908H
  001e6	68 08 19 00 00	 push	 6408			; 00001908H
  001eb	51		 push	 ecx
  001ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c0c00
  001f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f9	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001fe	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR $T40[ebp]
  00204	52		 push	 edx
  00205	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  0020b	e8 00 00 00 00	 call	 ??0Texture@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IMII_NI@Z ; Texture::Texture
  00210	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv200[ebp], eax
  00216	8b 85 00 fb ff
	ff		 mov	 eax, DWORD PTR tv200[ebp]
  0021c	89 85 fc fa ff
	ff		 mov	 DWORD PTR tv643[ebp], eax
  00222	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00226	6a 00		 push	 0
  00228	6a 00		 push	 0
  0022a	68 08 19 00 00	 push	 6408			; 00001908H
  0022f	68 08 19 00 00	 push	 6408			; 00001908H
  00234	51		 push	 ecx
  00235	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c0c00
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00247	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  0024d	51		 push	 ecx
  0024e	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  00254	e8 00 00 00 00	 call	 ??0Texture@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IMII_NI@Z ; Texture::Texture
  00259	89 85 f8 fa ff
	ff		 mov	 DWORD PTR tv188[ebp], eax
  0025f	8b 95 f8 fa ff
	ff		 mov	 edx, DWORD PTR tv188[ebp]
  00265	89 95 f4 fa ff
	ff		 mov	 DWORD PTR tv645[ebp], edx
  0026b	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0026f	51		 push	 ecx
  00270	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00278	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027d	51		 push	 ecx
  0027e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00286	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028b	8b 85 fc fa ff
	ff		 mov	 eax, DWORD PTR tv643[ebp]
  00291	50		 push	 eax
  00292	8b 8d f4 fa ff
	ff		 mov	 ecx, DWORD PTR tv645[ebp]
  00298	51		 push	 ecx
  00299	51		 push	 ecx
  0029a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	51		 push	 ecx
  002a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  002b8	81 c2 48 01 00
	00		 add	 edx, 328		; 00000148H
  002be	52		 push	 edx
  002bf	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T37[ebp]
  002c5	50		 push	 eax
  002c6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002c9	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  002cf	e8 00 00 00 00	 call	 ??0Material@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVTexture@@MM11MM@Z ; Material::Material
  002d4	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  002d8	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  002de	e8 00 00 00 00	 call	 ??1Texture@@UAE@XZ	; Texture::~Texture
  002e3	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  002e7	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  002ed	e8 00 00 00 00	 call	 ??1Texture@@UAE@XZ	; Texture::~Texture
  002f2	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  002f6	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  002fc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00301	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00305	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  0030b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00310	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00314	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  0031a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 56   : {

  0031f	68 00 00 00 00	 push	 OFFSET ??1Texture@@UAE@XZ ; Texture::~Texture
  00324	68 00 00 00 00	 push	 OFFSET ??_FTexture@@QAEXXZ
  00329	6a 0a		 push	 10			; 0000000aH
  0032b	6a 24		 push	 36			; 00000024H
  0032d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00330	81 c1 94 01 00
	00		 add	 ecx, 404		; 00000194H
  00336	51		 push	 ecx
  00337	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0033c	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00340	68 00 00 00 00	 push	 OFFSET ??1Texture@@UAE@XZ ; Texture::~Texture
  00345	68 00 00 00 00	 push	 OFFSET ??_FTexture@@QAEXXZ
  0034a	6a 0a		 push	 10			; 0000000aH
  0034c	6a 24		 push	 36			; 00000024H
  0034e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00351	81 c2 fc 02 00
	00		 add	 edx, 764		; 000002fcH
  00357	52		 push	 edx
  00358	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0035d	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H

; 48   : 	m_nullShader("forward-null"),

  00361	68 00 00 00 00	 push	 OFFSET $SG4294895278
  00366	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  0036c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00371	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00375	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  0037b	50		 push	 eax
  0037c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0037f	81 c1 68 04 00
	00		 add	 ecx, 1128		; 00000468H
  00385	e8 00 00 00 00	 call	 ??0Shader@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Shader::Shader
  0038a	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  0038e	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  00394	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 49   : 	m_shadowMapShader("shadowMapGenerator"),

  00399	68 00 00 00 00	 push	 OFFSET $SG4294895277
  0039e	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  003a4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003a9	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  003ad	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  003b3	51		 push	 ecx
  003b4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003b7	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  003bd	e8 00 00 00 00	 call	 ??0Shader@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Shader::Shader
  003c2	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  003c6	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  003cc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 50   : 	m_nullFilter("filter-null"),

  003d1	68 00 00 00 00	 push	 OFFSET $SG4294895276
  003d6	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  003dc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003e1	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  003e5	8d 95 1c fe ff
	ff		 lea	 edx, DWORD PTR $T34[ebp]
  003eb	52		 push	 edx
  003ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003ef	81 c1 b0 04 00
	00		 add	 ecx, 1200		; 000004b0H
  003f5	e8 00 00 00 00	 call	 ??0Shader@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Shader::Shader
  003fa	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  003fe	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  00404	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 51   : 	m_gausBlurFilter("filter-gausBlur7x1"),

  00409	68 00 00 00 00	 push	 OFFSET $SG4294895275
  0040e	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  00414	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00419	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  0041d	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR $T33[ebp]
  00423	50		 push	 eax
  00424	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00427	81 c1 d4 04 00
	00		 add	 ecx, 1236		; 000004d4H
  0042d	e8 00 00 00 00	 call	 ??0Shader@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Shader::Shader
  00432	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  00436	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  0043c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 53   : 	m_fxaaFilter("filter-fxaa"),

  00441	68 00 00 00 00	 push	 OFFSET $SG4294895274
  00446	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  0044c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00451	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  00455	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  0045b	51		 push	 ecx
  0045c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0045f	81 c1 f8 04 00
	00		 add	 ecx, 1272		; 000004f8H
  00465	e8 00 00 00 00	 call	 ??0Shader@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Shader::Shader
  0046a	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  0046e	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  00474	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 56   : {

  00479	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0047c	81 c1 1c 05 00
	00		 add	 ecx, 1308		; 0000051cH
  00482	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>

; 54   : 	m_altCameraTransform(Vector3f(0,0,0), Quaternion(Vector3f(0,1,0),ToRadians(180.0f))),

  00487	51		 push	 ecx
  00488	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00490	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00495	51		 push	 ecx
  00496	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	51		 push	 ecx
  004a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	51		 push	 ecx
  004b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bf	51		 push	 ecx
  004c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	8d 4d b8	 lea	 ecx, DWORD PTR $T47[ebp]
  004d0	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  004d5	50		 push	 eax
  004d6	8d 4d a8	 lea	 ecx, DWORD PTR $T46[ebp]
  004d9	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABVVector3f@@M@Z ; Quaternion::Quaternion
  004de	50		 push	 eax
  004df	51		 push	 ecx
  004e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  004e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	8d 4d c4	 lea	 ecx, DWORD PTR $T48[ebp]
  0050c	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00511	50		 push	 eax
  00512	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00515	81 c1 5c 05 00
	00		 add	 ecx, 1372		; 0000055cH
  0051b	e8 00 00 00 00	 call	 ??0Transform@@QAE@ABVVector3f@@ABVQuaternion@@M@Z ; Transform::Transform

; 55   : 	m_altCamera(Matrix4f().InitIdentity(), &m_altCameraTransform)

  00520	8d 95 28 ff ff
	ff		 lea	 edx, DWORD PTR $T44[ebp]
  00526	52		 push	 edx
  00527	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  0052d	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  00532	8b c8		 mov	 ecx, eax
  00534	e8 00 00 00 00	 call	 ?InitIdentity@?$Matrix@M$03@@QAE?AV1@XZ ; Matrix<float,4>::InitIdentity
  00539	50		 push	 eax
  0053a	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  00540	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  00545	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00548	05 5c 05 00 00	 add	 eax, 1372		; 0000055cH
  0054d	50		 push	 eax
  0054e	8d 8d a4 fd ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  00554	51		 push	 ecx
  00555	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00558	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  0055e	e8 00 00 00 00	 call	 ??0Camera@@QAE@ABV?$Matrix4@M@@PAVTransform@@@Z ; Camera::Camera

; 56   : {

  00563	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00566	81 c1 30 06 00
	00		 add	 ecx, 1584		; 00000630H
  0056c	e8 00 00 00 00	 call	 ??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::vector<BaseLight *,std::allocator<BaseLight *> >
  00571	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00575	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00578	81 c1 40 06 00
	00		 add	 ecx, 1600		; 00000640H
  0057e	e8 00 00 00 00	 call	 ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >
  00583	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H

; 57   : #if SDL_BYTEORDER == SDL_BIG_ENDIAN
; 58   : 	rmask = 0xff000000;
; 59   : 	gmask = 0x00ff0000;
; 60   : 	bmask = 0x0000ff00;
; 61   : 	amask = 0x000000ff;
; 62   : #else
; 63   : 	rmask = 0x000000ff;

  00587	c7 05 00 00 00
	00 ff 00 00 00	 mov	 DWORD PTR ?rmask@@3IA, 255 ; rmask, 000000ffH

; 64   : 	gmask = 0x0000ff00;

  00591	c7 05 00 00 00
	00 00 ff 00 00	 mov	 DWORD PTR ?gmask@@3IA, 65280 ; gmask, 0000ff00H

; 65   : 	bmask = 0x00ff0000;

  0059b	c7 05 00 00 00
	00 00 00 ff 00	 mov	 DWORD PTR ?bmask@@3IA, 16711680 ; bmask, 00ff0000H

; 66   : 	amask = 0xff000000;

  005a5	c7 05 00 00 00
	00 00 00 00 ff	 mov	 DWORD PTR ?amask@@3IA, -16777216 ; amask, ff000000H

; 67   : #endif
; 68   : 
; 69   : 	m_gui = SDL_CreateRenderer(m_window->GetSDLWindow(), -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);

  005af	8b f4		 mov	 esi, esp
  005b1	6a 06		 push	 6
  005b3	6a ff		 push	 -1
  005b5	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  005b8	8b 8a 3c 01 00
	00		 mov	 ecx, DWORD PTR [edx+316]
  005be	e8 00 00 00 00	 call	 ?GetSDLWindow@Window@@QAEPAUSDL_Window@@XZ ; Window::GetSDLWindow
  005c3	50		 push	 eax
  005c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_CreateRenderer
  005ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  005cd	3b f4		 cmp	 esi, esp
  005cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005d4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005d7	89 81 40 01 00
	00		 mov	 DWORD PTR [ecx+320], eax

; 70   : 	m_surface = SDL_CreateRGBSurface(0, window->GetWidth(), window->GetHeight(), 32, rmask, gmask, bmask, amask);

  005dd	8b f4		 mov	 esi, esp
  005df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?amask@@3IA ; amask
  005e5	52		 push	 edx
  005e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bmask@@3IA ; bmask
  005eb	50		 push	 eax
  005ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gmask@@3IA ; gmask
  005f2	51		 push	 ecx
  005f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?rmask@@3IA ; rmask
  005f9	52		 push	 edx
  005fa	6a 20		 push	 32			; 00000020H
  005fc	8b 4d 08	 mov	 ecx, DWORD PTR _window$[ebp]
  005ff	e8 00 00 00 00	 call	 ?GetHeight@Window@@QBEHXZ ; Window::GetHeight
  00604	50		 push	 eax
  00605	8b 4d 08	 mov	 ecx, DWORD PTR _window$[ebp]
  00608	e8 00 00 00 00	 call	 ?GetWidth@Window@@QBEHXZ ; Window::GetWidth
  0060d	50		 push	 eax
  0060e	6a 00		 push	 0
  00610	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_CreateRGBSurface
  00616	83 c4 20	 add	 esp, 32			; 00000020H
  00619	3b f4		 cmp	 esi, esp
  0061b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00620	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00623	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 71   : 	m_defaultShader = new Shader("forward-ambient");

  00629	6a 24		 push	 36			; 00000024H
  0062b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00630	83 c4 04	 add	 esp, 4
  00633	89 85 10 fb ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00639	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  0063d	68 00 00 00 00	 push	 OFFSET $SG4294895273
  00642	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  00648	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0064d	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
  00651	8b 95 04 fb ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00657	83 ca 01	 or	 edx, 1
  0065a	89 95 04 fb ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00660	8d 85 88 fd ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  00666	50		 push	 eax
  00667	8b 8d 10 fb ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  0066d	e8 00 00 00 00	 call	 ??0Shader@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Shader::Shader
  00672	89 85 f0 fa ff
	ff		 mov	 DWORD PTR tv364[ebp], eax
  00678	eb 0a		 jmp	 SHORT $LN7@RenderingE
  0067a	c7 85 f0 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR tv364[ebp], 0
$LN7@RenderingE:
  00684	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR tv364[ebp]
  0068a	89 8d 14 fb ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00690	c7 45 fc 25 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 37 ; 00000025H
  00697	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0069a	8b 85 14 fb ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  006a0	89 82 64 04 00
	00		 mov	 DWORD PTR [edx+1124], eax
  006a6	c7 45 fc 22 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 34 ; 00000022H
  006ad	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  006b3	83 e1 01	 and	 ecx, 1
  006b6	74 12		 je	 SHORT $LN35@RenderingE
  006b8	83 a5 04 fb ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  006bf	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  006c5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN35@RenderingE:

; 72   : 	SetSamplerSlot("diffuse",   0);

  006ca	68 00 00 00 00	 push	 OFFSET $SG4294895272
  006cf	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  006d5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  006da	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  006de	6a 00		 push	 0
  006e0	8d 95 6c fd ff
	ff		 lea	 edx, DWORD PTR $T29[ebp]
  006e6	52		 push	 edx
  006e7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006ea	e8 00 00 00 00	 call	 ?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; RenderingEngine::SetSamplerSlot
  006ef	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  006f3	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  006f9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 73   : 	SetSamplerSlot("normalMap", 1);

  006fe	68 00 00 00 00	 push	 OFFSET $SG4294895271
  00703	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00709	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0070e	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  00712	6a 01		 push	 1
  00714	8d 85 50 fd ff
	ff		 lea	 eax, DWORD PTR $T28[ebp]
  0071a	50		 push	 eax
  0071b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0071e	e8 00 00 00 00	 call	 ?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; RenderingEngine::SetSamplerSlot
  00723	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  00727	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  0072d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 74   : 	SetSamplerSlot("dispMap",   2);

  00732	68 00 00 00 00	 push	 OFFSET $SG4294895270
  00737	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  0073d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00742	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  00746	6a 02		 push	 2
  00748	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  0074e	51		 push	 ecx
  0074f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00752	e8 00 00 00 00	 call	 ?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; RenderingEngine::SetSamplerSlot
  00757	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  0075b	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  00761	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 75   : 	SetSamplerSlot("shadowMap", 3);

  00766	68 00 00 00 00	 push	 OFFSET $SG4294895269
  0076b	8d 8d 18 fd ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00771	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00776	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  0077a	6a 03		 push	 3
  0077c	8d 95 18 fd ff
	ff		 lea	 edx, DWORD PTR $T26[ebp]
  00782	52		 push	 edx
  00783	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00786	e8 00 00 00 00	 call	 ?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; RenderingEngine::SetSamplerSlot
  0078b	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  0078f	8d 8d 18 fd ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00795	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 76   : 	
; 77   : 	SetSamplerSlot("filterTexture", 0);

  0079a	68 00 00 00 00	 push	 OFFSET $SG4294895268
  0079f	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  007a5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007aa	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  007ae	6a 00		 push	 0
  007b0	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR $T25[ebp]
  007b6	50		 push	 eax
  007b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007ba	e8 00 00 00 00	 call	 ?SetSamplerSlot@RenderingEngine@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; RenderingEngine::SetSamplerSlot
  007bf	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  007c3	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  007c9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 78   : 	
; 79   : 	SetVector3f("ambient", Vector3f(0.2f, 0.2f, 0.2f));

  007ce	68 00 00 00 00	 push	 OFFSET $SG4294895267
  007d3	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  007d9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007de	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  007e2	51		 push	 ecx
  007e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	51		 push	 ecx
  007f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  007f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fe	51		 push	 ecx
  007ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00807	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080c	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  00812	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00817	50		 push	 eax
  00818	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  0081e	51		 push	 ecx
  0081f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00822	83 c1 08	 add	 ecx, 8
  00825	e8 00 00 00 00	 call	 ?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z ; MappedValues::SetVector3f
  0082a	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  0082e	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  00834	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 80   : 	
; 81   : 	SetFloat("fxaaSpanMax", 8.0f);

  00839	68 00 00 00 00	 push	 OFFSET $SG4294895266
  0083e	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  00844	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00849	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  0084d	51		 push	 ecx
  0084e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00856	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085b	8d 95 b8 fc ff
	ff		 lea	 edx, DWORD PTR $T22[ebp]
  00861	52		 push	 edx
  00862	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00865	83 c1 08	 add	 ecx, 8
  00868	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  0086d	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  00871	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  00877	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 82   : 	SetFloat("fxaaReduceMin", 1.0f/128.0f);

  0087c	68 00 00 00 00	 push	 OFFSET $SG4294895265
  00881	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  00887	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0088c	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  00890	51		 push	 ecx
  00891	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  00899	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089e	8d 85 9c fc ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  008a4	50		 push	 eax
  008a5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008a8	83 c1 08	 add	 ecx, 8
  008ab	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  008b0	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  008b4	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  008ba	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 83   : 	SetFloat("fxaaReduceMul", 1.0f/8.0f);

  008bf	68 00 00 00 00	 push	 OFFSET $SG4294895264
  008c4	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  008ca	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  008cf	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  008d3	51		 push	 ecx
  008d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  008dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e1	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  008e7	51		 push	 ecx
  008e8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008eb	83 c1 08	 add	 ecx, 8
  008ee	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  008f3	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  008f7	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  008fd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 84   : 	SetFloat("fxaaAspectDistortion", 150.0f);

  00902	68 00 00 00 00	 push	 OFFSET $SG4294895263
  00907	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  0090d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00912	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  00916	51		 push	 ecx
  00917	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  0091f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00924	8d 95 64 fc ff
	ff		 lea	 edx, DWORD PTR $T19[ebp]
  0092a	52		 push	 edx
  0092b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0092e	83 c1 08	 add	 ecx, 8
  00931	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  00936	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  0093a	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  00940	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 85   : 
; 86   : 	SetTexture("displayTexture", Texture(m_window->GetWidth(), m_window->GetHeight(), 0, GL_TEXTURE_2D, GL_LINEAR, GL_RGBA, GL_RGBA, true, GL_COLOR_ATTACHMENT0));

  00945	68 00 00 00 00	 push	 OFFSET $SG4294895262
  0094a	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00950	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00955	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+8], 48 ; 00000030H
  00959	68 e0 8c 00 00	 push	 36064			; 00008ce0H
  0095e	6a 01		 push	 1
  00960	68 08 19 00 00	 push	 6408			; 00001908H
  00965	68 08 19 00 00	 push	 6408			; 00001908H
  0096a	51		 push	 ecx
  0096b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46180400
  00973	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00978	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0097d	6a 00		 push	 0
  0097f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00982	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [eax+316]
  00988	e8 00 00 00 00	 call	 ?GetHeight@Window@@QBEHXZ ; Window::GetHeight
  0098d	50		 push	 eax
  0098e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00991	8b 89 3c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+316]
  00997	e8 00 00 00 00	 call	 ?GetWidth@Window@@QBEHXZ ; Window::GetWidth
  0099c	50		 push	 eax
  0099d	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  009a3	e8 00 00 00 00	 call	 ??0Texture@@QAE@HHPAEIMII_NI@Z ; Texture::Texture
  009a8	89 85 ec fa ff
	ff		 mov	 DWORD PTR tv517[ebp], eax
  009ae	8b 95 ec fa ff
	ff		 mov	 edx, DWORD PTR tv517[ebp]
  009b4	89 95 e8 fa ff
	ff		 mov	 DWORD PTR tv697[ebp], edx
  009ba	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
  009be	8b 85 e8 fa ff
	ff		 mov	 eax, DWORD PTR tv697[ebp]
  009c4	50		 push	 eax
  009c5	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  009cb	51		 push	 ecx
  009cc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009cf	83 c1 08	 add	 ecx, 8
  009d2	e8 00 00 00 00	 call	 ?SetTexture@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVTexture@@@Z ; MappedValues::SetTexture
  009d7	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+8], 48 ; 00000030H
  009db	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  009e1	e8 00 00 00 00	 call	 ??1Texture@@UAE@XZ	; Texture::~Texture
  009e6	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  009ea	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  009f0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 87   : 
; 88   : 	glClearColor(1.0f, 1.0f, 1.0f, 0.0f);

  009f5	8b f4		 mov	 esi, esp
  009f7	51		 push	 ecx
  009f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00a00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a05	51		 push	 ecx
  00a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a13	51		 push	 ecx
  00a14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a21	51		 push	 ecx
  00a22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glClearColor@16
  00a35	3b f4		 cmp	 esi, esp
  00a37	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 89   : 
; 90   : 	glFrontFace(GL_CW);

  00a3c	8b f4		 mov	 esi, esp
  00a3e	68 00 09 00 00	 push	 2304			; 00000900H
  00a43	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glFrontFace@4
  00a49	3b f4		 cmp	 esi, esp
  00a4b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 91   : 	glCullFace(GL_BACK);

  00a50	8b f4		 mov	 esi, esp
  00a52	68 05 04 00 00	 push	 1029			; 00000405H
  00a57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glCullFace@4
  00a5d	3b f4		 cmp	 esi, esp
  00a5f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 92   : 	glEnable(GL_CULL_FACE);

  00a64	8b f4		 mov	 esi, esp
  00a66	68 44 0b 00 00	 push	 2884			; 00000b44H
  00a6b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glEnable@4
  00a71	3b f4		 cmp	 esi, esp
  00a73	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : 	glEnable(GL_DEPTH_TEST);

  00a78	8b f4		 mov	 esi, esp
  00a7a	68 71 0b 00 00	 push	 2929			; 00000b71H
  00a7f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glEnable@4
  00a85	3b f4		 cmp	 esi, esp
  00a87	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 94   : 	//glEnable(GL_DEPTH_CLAMP);
; 95   : 	//glEnable(GL_MULTISAMPLE);
; 96   : 	//glEnable(GL_FRAMEBUFFER_SRGB);
; 97   : 	                  
; 98   : 	//m_planeMaterial("renderingEngine_filterPlane", m_tempTarget, 1, 8);
; 99   : 	m_planeTransform.SetScale(1.0f);

  00a8c	51		 push	 ecx
  00a8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00aa3	e8 00 00 00 00	 call	 ?SetScale@Transform@@QAEXM@Z ; Transform::SetScale

; 100  : 	m_planeTransform.Rotate(Quaternion(Vector3f(1,0,0), ToRadians(90.0f)));

  00aa8	51		 push	 ecx
  00aa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00ab1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab6	51		 push	 ecx
  00ab7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00abf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac4	51		 push	 ecx
  00ac5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00acd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad2	51		 push	 ecx
  00ad3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00adb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae0	8d 8d 18 fc ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00ae6	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00aeb	50		 push	 eax
  00aec	8d 8d 08 fc ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00af2	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABVVector3f@@M@Z ; Quaternion::Quaternion
  00af7	50		 push	 eax
  00af8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00afb	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00b01	e8 00 00 00 00	 call	 ?Rotate@Transform@@QAEXABVQuaternion@@@Z ; Transform::Rotate

; 101  : 	m_planeTransform.Rotate(Quaternion(Vector3f(0,0,1), ToRadians(180.0f)));

  00b06	51		 push	 ecx
  00b07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00b0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b14	51		 push	 ecx
  00b15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b22	51		 push	 ecx
  00b23	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00b2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b30	51		 push	 ecx
  00b31	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00b39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3e	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00b44	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00b49	50		 push	 eax
  00b4a	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00b50	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABVVector3f@@M@Z ; Quaternion::Quaternion
  00b55	50		 push	 eax
  00b56	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b59	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00b5f	e8 00 00 00 00	 call	 ?Rotate@Transform@@QAEXABVQuaternion@@@Z ; Transform::Rotate

; 102  : 	
; 103  : 	for(int i = 0; i < NUM_SHADOW_MAPS; i++)

  00b64	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$12[ebp], 0
  00b6e	eb 0f		 jmp	 SHORT $LN4@RenderingE
$LN2@RenderingE:
  00b70	8b 95 e8 fb ff
	ff		 mov	 edx, DWORD PTR _i$12[ebp]
  00b76	83 c2 01	 add	 edx, 1
  00b79	89 95 e8 fb ff
	ff		 mov	 DWORD PTR _i$12[ebp], edx
$LN4@RenderingE:
  00b7f	83 bd e8 fb ff
	ff 0a		 cmp	 DWORD PTR _i$12[ebp], 10 ; 0000000aH
  00b86	0f 8d cf 00 00
	00		 jge	 $LN3@RenderingE

; 104  : 	{
; 105  : 		int shadowMapSize = 2048;//1 << (i + 1);

  00b8c	c7 85 e4 fb ff
	ff 00 08 00 00	 mov	 DWORD PTR _shadowMapSize$11[ebp], 2048 ; 00000800H

; 106  : 
; 107  : 		m_shadowMaps[i] = Texture(shadowMapSize, shadowMapSize, 0, GL_TEXTURE_2D, GL_LINEAR, GL_RG32F, GL_RGBA, true, GL_COLOR_ATTACHMENT0);

  00b96	83 ec 24	 sub	 esp, 36			; 00000024H
  00b99	8b cc		 mov	 ecx, esp
  00b9b	89 a5 0c fb ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  00ba1	68 e0 8c 00 00	 push	 36064			; 00008ce0H
  00ba6	6a 01		 push	 1
  00ba8	68 08 19 00 00	 push	 6408			; 00001908H
  00bad	68 30 82 00 00	 push	 33328			; 00008230H
  00bb2	51		 push	 ecx
  00bb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46180400
  00bbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc0	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00bc5	6a 00		 push	 0
  00bc7	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _shadowMapSize$11[ebp]
  00bcd	50		 push	 eax
  00bce	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _shadowMapSize$11[ebp]
  00bd4	52		 push	 edx
  00bd5	e8 00 00 00 00	 call	 ??0Texture@@QAE@HHPAEIMII_NI@Z ; Texture::Texture
  00bda	89 85 e4 fa ff
	ff		 mov	 DWORD PTR tv699[ebp], eax
  00be0	6b 85 e8 fb ff
	ff 24		 imul	 eax, DWORD PTR _i$12[ebp], 36
  00be7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bea	8d 8c 01 94 01
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+404]
  00bf1	e8 00 00 00 00	 call	 ??4Texture@@QAEXV0@@Z	; Texture::operator=

; 108  : 		m_shadowMapTempTargets[i] = Texture(shadowMapSize, shadowMapSize, 0, GL_TEXTURE_2D, GL_LINEAR, GL_RG32F, GL_RGBA, true, GL_COLOR_ATTACHMENT0);

  00bf6	83 ec 24	 sub	 esp, 36			; 00000024H
  00bf9	8b cc		 mov	 ecx, esp
  00bfb	89 a5 08 fb ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00c01	68 e0 8c 00 00	 push	 36064			; 00008ce0H
  00c06	6a 01		 push	 1
  00c08	68 08 19 00 00	 push	 6408			; 00001908H
  00c0d	68 30 82 00 00	 push	 33328			; 00008230H
  00c12	51		 push	 ecx
  00c13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46180400
  00c1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c20	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00c25	6a 00		 push	 0
  00c27	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _shadowMapSize$11[ebp]
  00c2d	52		 push	 edx
  00c2e	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _shadowMapSize$11[ebp]
  00c34	50		 push	 eax
  00c35	e8 00 00 00 00	 call	 ??0Texture@@QAE@HHPAEIMII_NI@Z ; Texture::Texture
  00c3a	89 85 e0 fa ff
	ff		 mov	 DWORD PTR tv701[ebp], eax
  00c40	6b 8d e8 fb ff
	ff 24		 imul	 ecx, DWORD PTR _i$12[ebp], 36
  00c47	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00c4a	8d 8c 0a fc 02
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+764]
  00c51	e8 00 00 00 00	 call	 ??4Texture@@QAEXV0@@Z	; Texture::operator=

; 109  : 	}

  00c56	e9 15 ff ff ff	 jmp	 $LN2@RenderingE
$LN3@RenderingE:

; 110  : 	
; 111  : 	m_lightMatrix = Matrix4f().InitScale(Vector3f(0, 0, 0));

  00c5b	51		 push	 ecx
  00c5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00c64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c69	51		 push	 ecx
  00c6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c77	51		 push	 ecx
  00c78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00c80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c85	8d 8d 98 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00c8b	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00c90	50		 push	 eax
  00c91	8d 85 58 fb ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00c97	50		 push	 eax
  00c98	8d 8d a4 fb ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00c9e	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  00ca3	8b c8		 mov	 ecx, eax
  00ca5	e8 00 00 00 00	 call	 ?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitScale
  00caa	50		 push	 eax
  00cab	8d 8d 18 fb ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00cb1	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  00cb6	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00cb9	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  00cbf	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00cc4	8d b5 18 fb ff
	ff		 lea	 esi, DWORD PTR $T7[ebp]
  00cca	f3 a5		 rep movsd

; 112  : }

  00ccc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00cd3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00cd6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00cd9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00ce0	59		 pop	 ecx
  00ce1	5f		 pop	 edi
  00ce2	5e		 pop	 esi
  00ce3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ce6	33 cd		 xor	 ecx, ebp
  00ce8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ced	81 c4 20 05 00
	00		 add	 esp, 1312		; 00000520H
  00cf3	3b ec		 cmp	 ebp, esp
  00cf5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cfa	8b e5		 mov	 esp, ebp
  00cfc	5d		 pop	 ebp
  00cfd	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1MappedValues@@QAE@XZ
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$1:
  0000b	8d 4d d0	 lea	 ecx, DWORD PTR $T49[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$2:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0001c	e9 00 00 00 00	 jmp	 ??1Mesh@@UAE@XZ		; Mesh::~Mesh
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$3:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  0002a	e9 00 00 00 00	 jmp	 ??1Texture@@UAE@XZ	; Texture::~Texture
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$4:
  0002f	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  00035	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$5:
  0003a	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$6:
  00045	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$7:
  00050	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1Texture@@UAE@XZ	; Texture::~Texture
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$8:
  0005b	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  00061	e9 00 00 00 00	 jmp	 ??1Texture@@UAE@XZ	; Texture::~Texture
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$9:
  00066	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  0006f	e9 00 00 00 00	 jmp	 ??1Material@@UAE@XZ	; Material::~Material
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$10:
  00074	68 00 00 00 00	 push	 OFFSET ??1Texture@@UAE@XZ ; Texture::~Texture
  00079	6a 0a		 push	 10			; 0000000aH
  0007b	6a 24		 push	 36			; 00000024H
  0007d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00080	05 94 01 00 00	 add	 eax, 404		; 00000194H
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0008b	c3		 ret	 0
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$11:
  0008c	68 00 00 00 00	 push	 OFFSET ??1Texture@@UAE@XZ ; Texture::~Texture
  00091	6a 0a		 push	 10			; 0000000aH
  00093	6a 24		 push	 36			; 00000024H
  00095	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00098	05 fc 02 00 00	 add	 eax, 764		; 000002fcH
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  000a3	c3		 ret	 0
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$12:
  000a4	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  000aa	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$13:
  000af	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	81 c1 68 04 00
	00		 add	 ecx, 1128		; 00000468H
  000b8	e9 00 00 00 00	 jmp	 ??1Shader@@UAE@XZ	; Shader::~Shader
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$14:
  000bd	8d 8d 38 fe ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  000c3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$15:
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  000d1	e9 00 00 00 00	 jmp	 ??1Shader@@UAE@XZ	; Shader::~Shader
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$16:
  000d6	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  000dc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$17:
  000e1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	81 c1 b0 04 00
	00		 add	 ecx, 1200		; 000004b0H
  000ea	e9 00 00 00 00	 jmp	 ??1Shader@@UAE@XZ	; Shader::~Shader
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$18:
  000ef	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  000f5	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$19:
  000fa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	81 c1 d4 04 00
	00		 add	 ecx, 1236		; 000004d4H
  00103	e9 00 00 00 00	 jmp	 ??1Shader@@UAE@XZ	; Shader::~Shader
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$20:
  00108	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  0010e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$21:
  00113	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	81 c1 f8 04 00
	00		 add	 ecx, 1272		; 000004f8H
  0011c	e9 00 00 00 00	 jmp	 ??1Shader@@UAE@XZ	; Shader::~Shader
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$22:
  00121	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	81 c1 30 06 00
	00		 add	 ecx, 1584		; 00000630H
  0012a	e9 00 00 00 00	 jmp	 ??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::~vector<BaseLight *,std::allocator<BaseLight *> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$23:
  0012f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	81 c1 40 06 00
	00		 add	 ecx, 1600		; 00000640H
  00138	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$24:
  0013d	6a 24		 push	 36			; 00000024H
  0013f	8b 85 10 fb ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014b	83 c4 08	 add	 esp, 8
  0014e	c3		 ret	 0
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$25:
  0014f	8b 85 04 fb ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00155	83 e0 01	 and	 eax, 1
  00158	0f 84 12 00 00
	00		 je	 $LN34@RenderingE
  0015e	83 a5 04 fb ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00165	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  0016b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN34@RenderingE:
  00170	c3		 ret	 0
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$26:
  00171	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  00177	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$27:
  0017c	8d 8d 50 fd ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00182	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$28:
  00187	8d 8d 34 fd ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  0018d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$29:
  00192	8d 8d 18 fd ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00198	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$30:
  0019d	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  001a3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$31:
  001a8	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  001ae	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$32:
  001b3	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  001b9	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$33:
  001be	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  001c4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$34:
  001c9	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  001cf	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$35:
  001d4	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  001da	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$36:
  001df	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  001e5	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0RenderingEngine@@QAE@PAVWindow@@@Z$37:
  001ea	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  001f0	e9 00 00 00 00	 jmp	 ??1Texture@@UAE@XZ	; Texture::~Texture
__ehhandler$??0RenderingEngine@@QAE@PAVWindow@@@Z:
  001f5	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  001f9	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  001fc	8b 8a e0 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1312]
  00202	33 c8		 xor	 ecx, eax
  00204	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00209	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0020c	33 c8		 xor	 ecx, eax
  0020e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00213	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0RenderingEngine@@QAE@PAVWindow@@@Z
  00218	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0RenderingEngine@@QAE@PAVWindow@@@Z ENDP		; RenderingEngine::RenderingEngine
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
$T2 = -100						; size = 28
$T3 = -72						; size = 12
$T4 = -60						; size = 28
$T5 = -32						; size = 12
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_shadowMapIndex$ = 8					; size = 4
_blurAmount$ = 12					; size = 4
?BlurShadowMap@RenderingEngine@@AAEXHM@Z PROC		; RenderingEngine::BlurShadowMap
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?BlurShadowMap@RenderingEngine@@AAEXHM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00019	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 	SetVector3f("blurScale", Vector3f(blurAmount/(m_shadowMaps[shadowMapIndex].GetWidth()), 0.0f, 0.0f));

  0003d	68 00 00 00 00	 push	 OFFSET $SG4294895261
  00042	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	51		 push	 ecx
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	51		 push	 ecx
  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	6b 45 08 24	 imul	 eax, DWORD PTR _shadowMapIndex$[ebp], 36
  00071	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8d 8c 01 94 01
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+404]
  0007b	e8 00 00 00 00	 call	 ?GetWidth@Texture@@QBEHXZ ; Texture::GetWidth
  00080	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00084	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _blurAmount$[ebp]
  00089	f3 0f 5e c8	 divss	 xmm1, xmm0
  0008d	51		 push	 ecx
  0008e	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00093	8d 4d e0	 lea	 ecx, DWORD PTR $T5[ebp]
  00096	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  0009b	50		 push	 eax
  0009c	8d 55 c4	 lea	 edx, DWORD PTR $T4[ebp]
  0009f	52		 push	 edx
  000a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	83 c1 08	 add	 ecx, 8
  000a6	e8 00 00 00 00	 call	 ?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z ; MappedValues::SetVector3f
  000ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b2	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  000b5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 117  : 	ApplyFilter(m_gausBlurFilter, m_shadowMaps[shadowMapIndex], &m_shadowMapTempTargets[shadowMapIndex]);

  000ba	6b 45 08 24	 imul	 eax, DWORD PTR _shadowMapIndex$[ebp], 36
  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	8d 94 01 fc 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+764]
  000c8	52		 push	 edx
  000c9	6b 45 08 24	 imul	 eax, DWORD PTR _shadowMapIndex$[ebp], 36
  000cd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8d 94 01 94 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+404]
  000d7	52		 push	 edx
  000d8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000db	05 d4 04 00 00	 add	 eax, 1236		; 000004d4H
  000e0	50		 push	 eax
  000e1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	e8 00 00 00 00	 call	 ?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z ; RenderingEngine::ApplyFilter

; 118  : 	
; 119  : 	SetVector3f("blurScale", Vector3f(0.0f, blurAmount/(m_shadowMaps[shadowMapIndex].GetHeight()), 0.0f));

  000e9	68 00 00 00 00	 push	 OFFSET $SG4294895260
  000ee	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  000f1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000fd	51		 push	 ecx
  000fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	6b 4d 08 24	 imul	 ecx, DWORD PTR _shadowMapIndex$[ebp], 36
  0010f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8d 8c 0a 94 01
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+404]
  00119	e8 00 00 00 00	 call	 ?GetHeight@Texture@@QBEHXZ ; Texture::GetHeight
  0011e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00122	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _blurAmount$[ebp]
  00127	f3 0f 5e c8	 divss	 xmm1, xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00131	51		 push	 ecx
  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	8d 4d b8	 lea	 ecx, DWORD PTR $T3[ebp]
  00142	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00147	50		 push	 eax
  00148	8d 45 9c	 lea	 eax, DWORD PTR $T2[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	83 c1 08	 add	 ecx, 8
  00152	e8 00 00 00 00	 call	 ?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z ; MappedValues::SetVector3f
  00157	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015e	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00161	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 120  : 	ApplyFilter(m_gausBlurFilter, m_shadowMapTempTargets[shadowMapIndex], &m_shadowMaps[shadowMapIndex]); 

  00166	6b 4d 08 24	 imul	 ecx, DWORD PTR _shadowMapIndex$[ebp], 36
  0016a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0016d	8d 84 0a 94 01
	00 00		 lea	 eax, DWORD PTR [edx+ecx+404]
  00174	50		 push	 eax
  00175	6b 4d 08 24	 imul	 ecx, DWORD PTR _shadowMapIndex$[ebp], 36
  00179	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0017c	8d 84 0a fc 02
	00 00		 lea	 eax, DWORD PTR [edx+ecx+764]
  00183	50		 push	 eax
  00184	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	81 c1 d4 04 00
	00		 add	 ecx, 1236		; 000004d4H
  0018d	51		 push	 ecx
  0018e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	e8 00 00 00 00	 call	 ?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z ; RenderingEngine::ApplyFilter

; 121  : 
; 122  : //	SetVector3f("inverseFilterTextureSize", Vector3f(blurAmount/m_shadowMaps[shadowMapIndex].GetWidth(), blurAmount/m_shadowMaps[shadowMapIndex].GetHeight(), 0.0f));
; 123  : //	ApplyFilter(m_fxaaFilter, m_shadowMaps[shadowMapIndex], &m_shadowMapTempTargets[shadowMapIndex]);
; 124  : //	
; 125  : //	ApplyFilter(m_nullFilter, m_shadowMapTempTargets[shadowMapIndex], &m_shadowMaps[shadowMapIndex]);
; 126  : }

  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a5	33 cd		 xor	 ecx, ebp
  001a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ac	83 c4 64	 add	 esp, 100		; 00000064H
  001af	3b ec		 cmp	 ebp, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BlurShadowMap@RenderingEngine@@AAEXHM@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?BlurShadowMap@RenderingEngine@@AAEXHM@Z$1:
  00008	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?BlurShadowMap@RenderingEngine@@AAEXHM@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BlurShadowMap@RenderingEngine@@AAEXHM@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BlurShadowMap@RenderingEngine@@AAEXHM@Z ENDP		; RenderingEngine::BlurShadowMap
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
$T1 = -240						; size = 16
$T2 = -224						; size = 12
$T3 = -212						; size = 12
$T4 = -200						; size = 64
$T5 = -136						; size = 64
$T6 = -72						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filter$ = 8						; size = 4
?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z PROC ; RenderingEngine::ApplyFilterInternal
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 130  : 	m_altCamera.SetProjection (Matrix4f ().InitIdentity ());

  0002c	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00032	50		 push	 eax
  00033	8d 4d b8	 lea	 ecx, DWORD PTR $T6[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?InitIdentity@?$Matrix@M$03@@QAE?AV1@XZ ; Matrix<float,4>::InitIdentity
  00042	50		 push	 eax
  00043	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00049	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  0004e	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  0005e	e8 00 00 00 00	 call	 ?SetProjection@Camera@@QAEXABV?$Matrix4@M@@@Z ; Camera::SetProjection

; 131  : 	m_altCamera.GetTransform ()->SetPos (Vector3f (0, 0, 0));

  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00093	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00098	50		 push	 eax
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  000a2	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QAEPAVTransform@@XZ ; Camera::GetTransform
  000a7	8b c8		 mov	 ecx, eax
  000a9	e8 00 00 00 00	 call	 ?SetPos@Transform@@QAEXABVVector3f@@@Z ; Transform::SetPos

; 132  : 	m_altCamera.GetTransform ()->SetRot (Quaternion (Vector3f (0, 1, 0), ToRadians (180.0f)));

  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	51		 push	 ecx
  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	51		 push	 ecx
  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	51		 push	 ecx
  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000ec	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  000f1	50		 push	 eax
  000f2	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000f8	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABVVector3f@@M@Z ; Quaternion::Quaternion
  000fd	50		 push	 eax
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  00107	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QAEPAVTransform@@XZ ; Camera::GetTransform
  0010c	8b c8		 mov	 ecx, eax
  0010e	e8 00 00 00 00	 call	 ?SetRot@Transform@@QAEXABVQuaternion@@@Z ; Transform::SetRot

; 133  : 
; 134  : 	glClear (GL_DEPTH_BUFFER_BIT);

  00113	8b f4		 mov	 esi, esp
  00115	68 00 01 00 00	 push	 256			; 00000100H
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glClear@4
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 135  : 	filter.Bind ();

  00127	8b 4d 08	 mov	 ecx, DWORD PTR _filter$[ebp]
  0012a	e8 00 00 00 00	 call	 ?Bind@Shader@@QBEXXZ	; Shader::Bind

; 136  : 	filter.UpdateUniforms (m_planeTransform, m_planeMaterial, *this, m_altCamera);

  0012f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00132	81 c2 e4 05 00
	00		 add	 edx, 1508		; 000005e4H
  00138	8b f4		 mov	 esi, esp
  0013a	52		 push	 edx
  0013b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  00148	51		 push	 ecx
  00149	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	81 c2 90 00 00
	00		 add	 edx, 144		; 00000090H
  00152	52		 push	 edx
  00153	8b 45 08	 mov	 eax, DWORD PTR _filter$[ebp]
  00156	8b 10		 mov	 edx, DWORD PTR [eax]
  00158	8b 4d 08	 mov	 ecx, DWORD PTR _filter$[ebp]
  0015b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0015e	ff d0		 call	 eax
  00160	3b f4		 cmp	 esi, esp
  00162	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 137  : 	m_plane.Draw ();

  00167	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00170	e8 00 00 00 00	 call	 ?Draw@Mesh@@QBEXXZ	; Mesh::Draw

; 138  : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017a	33 cd		 xor	 ecx, ebp
  0017c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00181	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00187	3b ec		 cmp	 ebp, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 04 00	 ret	 4
?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z ENDP ; RenderingEngine::ApplyFilterInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
$T2 = -168						; size = 28
$T3 = -140						; size = 36
$T4 = -104						; size = 28
$T5 = -76						; size = 28
$T6 = -48						; size = 28
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filter$ = 8						; size = 4
_source$ = 12						; size = 4
_dest$ = 16						; size = 4
?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z PROC ; RenderingEngine::ApplyFilter
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-168]
  0001f	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 142  : 	//assert(&source != dest);
; 143  : 
; 144  : 	if (&source == dest)

  00043	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00046	3b 45 10	 cmp	 eax, DWORD PTR _dest$[ebp]
  00049	0f 85 97 00 00
	00		 jne	 $LN2@ApplyFilte

; 145  : 	{
; 146  : 		//SetTexture ("tempTexture", Texture (m_window->GetWidth (), m_window->GetHeight (), 0, GL_TEXTURE_2D, GL_LINEAR, GL_RGBA, GL_RGBA, true, GL_COLOR_ATTACHMENT0));
; 147  : 		GetTexture ("tempTarget").BindAsRenderTarget ();

  0004f	68 00 00 00 00	 push	 OFFSET $SG4294895259
  00054	8d 4d d0	 lea	 ecx, DWORD PTR $T6[ebp]
  00057	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	8d 4d d0	 lea	 ecx, DWORD PTR $T6[ebp]
  00066	51		 push	 ecx
  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 08	 add	 ecx, 8
  0006d	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Texture@@QBEXXZ ; Texture::BindAsRenderTarget
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8d 4d d0	 lea	 ecx, DWORD PTR $T6[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 148  : 
; 149  : 		SetTexture ("filterTexture", source);

  00088	68 00 00 00 00	 push	 OFFSET $SG4294895258
  0008d	8d 4d b4	 lea	 ecx, DWORD PTR $T5[ebp]
  00090	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00095	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0009c	8b 55 0c	 mov	 edx, DWORD PTR _source$[ebp]
  0009f	52		 push	 edx
  000a0	8d 45 b4	 lea	 eax, DWORD PTR $T5[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	83 c1 08	 add	 ecx, 8
  000aa	e8 00 00 00 00	 call	 ?SetTexture@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVTexture@@@Z ; MappedValues::SetTexture
  000af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	8d 4d b4	 lea	 ecx, DWORD PTR $T5[ebp]
  000b9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 150  : 
; 151  : 		ApplyFilterInternal (filter);

  000be	8b 4d 08	 mov	 ecx, DWORD PTR _filter$[ebp]
  000c1	51		 push	 ecx
  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	e8 00 00 00 00	 call	 ?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z ; RenderingEngine::ApplyFilterInternal

; 152  : 
; 153  : 		dest->BindAsRenderTarget ();

  000ca	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000cd	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Texture@@QBEXXZ ; Texture::BindAsRenderTarget

; 154  : 
; 155  : 		ApplyFilterInternal (m_nullFilter);

  000d2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	81 c2 b0 04 00
	00		 add	 edx, 1200		; 000004b0H
  000db	52		 push	 edx
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z ; RenderingEngine::ApplyFilterInternal
  000e4	eb 1e		 jmp	 SHORT $LN5@ApplyFilte
$LN2@ApplyFilte:

; 156  : 	}
; 157  : 	else if(dest == 0)

  000e6	83 7d 10 00	 cmp	 DWORD PTR _dest$[ebp], 0
  000ea	75 10		 jne	 SHORT $LN4@ApplyFilte

; 158  : 	{
; 159  : 		m_window->BindAsRenderTarget();

  000ec	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [eax+316]
  000f5	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Window@@QBEXXZ ; Window::BindAsRenderTarget

; 160  : 	}
; 161  : 	else

  000fa	eb 08		 jmp	 SHORT $LN5@ApplyFilte
$LN4@ApplyFilte:

; 162  : 	{
; 163  : 		dest->BindAsRenderTarget();

  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000ff	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Texture@@QBEXXZ ; Texture::BindAsRenderTarget
$LN5@ApplyFilte:

; 164  : 	}
; 165  : 	
; 166  : 	SetTexture("filterTexture", source);

  00104	68 00 00 00 00	 push	 OFFSET $SG4294895257
  00109	8d 4d 98	 lea	 ecx, DWORD PTR $T4[ebp]
  0010c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00111	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  0011b	51		 push	 ecx
  0011c	8d 55 98	 lea	 edx, DWORD PTR $T4[ebp]
  0011f	52		 push	 edx
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	83 c1 08	 add	 ecx, 8
  00126	e8 00 00 00 00	 call	 ?SetTexture@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVTexture@@@Z ; MappedValues::SetTexture
  0012b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00132	8d 4d 98	 lea	 ecx, DWORD PTR $T4[ebp]
  00135	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 167  : 	
; 168  : 	ApplyFilterInternal (filter);

  0013a	8b 45 08	 mov	 eax, DWORD PTR _filter$[ebp]
  0013d	50		 push	 eax
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z ; RenderingEngine::ApplyFilterInternal

; 169  : 	m_window->BindAsRenderTarget ();

  00146	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	8b 89 3c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+316]
  0014f	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Window@@QBEXXZ ; Window::BindAsRenderTarget

; 170  : 	ApplyFilterInternal (m_nullFilter);

  00154	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00157	81 c2 b0 04 00
	00		 add	 edx, 1200		; 000004b0H
  0015d	52		 push	 edx
  0015e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	e8 00 00 00 00	 call	 ?ApplyFilterInternal@RenderingEngine@@QAEXABVShader@@@Z ; RenderingEngine::ApplyFilterInternal

; 171  : 
; 172  : 	SetTexture("filterTexture", 0);

  00166	6a 00		 push	 0
  00168	6a 00		 push	 0
  0016a	68 08 19 00 00	 push	 6408			; 00001908H
  0016f	68 08 19 00 00	 push	 6408			; 00001908H
  00174	51		 push	 ecx
  00175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c0c00
  0017d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00182	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00187	6a 00		 push	 0
  00189	6a 00		 push	 0
  0018b	6a 00		 push	 0
  0018d	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00193	e8 00 00 00 00	 call	 ??0Texture@@QAE@HHPAEIMII_NI@Z ; Texture::Texture
  00198	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0019f	68 00 00 00 00	 push	 OFFSET $SG4294895256
  001a4	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001aa	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001af	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001b3	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001b9	50		 push	 eax
  001ba	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001c0	51		 push	 ecx
  001c1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	83 c1 08	 add	 ecx, 8
  001c7	e8 00 00 00 00	 call	 ?SetTexture@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVTexture@@@Z ; MappedValues::SetTexture
  001cc	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001d0	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001d6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e2	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001e8	e8 00 00 00 00	 call	 ??1Texture@@UAE@XZ	; Texture::~Texture

; 173  : }

  001ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f7	59		 pop	 ecx
  001f8	5f		 pop	 edi
  001f9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fc	33 cd		 xor	 ecx, ebp
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  00209	3b ec		 cmp	 ebp, esp
  0020b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$2:
  00010	8d 4d 98	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$3:
  00018	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1Texture@@UAE@XZ	; Texture::~Texture
__unwindfunclet$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z$4:
  00023	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z:
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z ENDP ; RenderingEngine::ApplyFilter
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
_r$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_w$ = 16						; size = 4
_h$ = 20						; size = 4
_color$ = 24						; size = 4
?drawrect@RenderingEngine@@AAEXHHHHH@Z PROC		; RenderingEngine::drawrect
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 	SDL_Rect r;
; 178  : 	r.x = x;

  00031	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00034	89 45 e4	 mov	 DWORD PTR _r$[ebp], eax

; 179  : 	r.y = y;

  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0003a	89 4d e8	 mov	 DWORD PTR _r$[ebp+4], ecx

; 180  : 	r.w = w;

  0003d	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00040	89 55 ec	 mov	 DWORD PTR _r$[ebp+8], edx

; 181  : 	r.h = h;

  00043	8b 45 14	 mov	 eax, DWORD PTR _h$[ebp]
  00046	89 45 f0	 mov	 DWORD PTR _r$[ebp+12], eax

; 182  : 	SDL_FillRect(m_surface, &r, color);

  00049	8b f4		 mov	 esi, esp
  0004b	8b 4d 18	 mov	 ecx, DWORD PTR _color$[ebp]
  0004e	51		 push	 ecx
  0004f	8d 55 e4	 lea	 edx, DWORD PTR _r$[ebp]
  00052	52		 push	 edx
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  0005c	51		 push	 ecx
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_FillRect
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  : }

  0006d	52		 push	 edx
  0006e	8b cd		 mov	 ecx, ebp
  00070	50		 push	 eax
  00071	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@drawrect
  00077	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007c	58		 pop	 eax
  0007d	5a		 pop	 edx
  0007e	5e		 pop	 esi
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	33 cd		 xor	 ecx, ebp
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	83 c4 20	 add	 esp, 32			; 00000020H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 14 00	 ret	 20			; 00000014H
  00099	0f 1f 00	 npad	 3
$LN5@drawrect:
  0009c	01 00 00 00	 DD	 1
  000a0	00 00 00 00	 DD	 $LN4@drawrect
$LN4@drawrect:
  000a4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000a8	10 00 00 00	 DD	 16			; 00000010H
  000ac	00 00 00 00	 DD	 $LN3@drawrect
$LN3@drawrect:
  000b0	72		 DB	 114			; 00000072H
  000b1	00		 DB	 0
?drawrect@RenderingEngine@@AAEXHHHHH@Z ENDP		; RenderingEngine::drawrect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
tv693 = -1036						; size = 4
tv728 = -1032						; size = 4
$T2 = -1028						; size = 28
$T3 = -1000						; size = 28
$T4 = -972						; size = 28
$T5 = -944						; size = 12
$T6 = -932						; size = 28
$T7 = -904						; size = 28
$T8 = -876						; size = 28
_displayTextureHeightAdditive$ = -848			; size = 4
$T9 = -844						; size = 28
$T10 = -816						; size = 28
_displayTextureAspect$ = -788				; size = 4
$T11 = -784						; size = 28
$T12 = -756						; size = 28
$T13 = -728						; size = 28
$T14 = -700						; size = 64
$T15 = -636						; size = 64
$T16 = -572						; size = 12
$T17 = -560						; size = 64
_shadowSoftness$18 = -496				; size = 4
_flipFaces$19 = -489					; size = 1
$T20 = -488						; size = 28
$T21 = -460						; size = 28
$T22 = -432						; size = 64
$T23 = -368						; size = 64
$T24 = -304						; size = 64
$T25 = -240						; size = 16
$T26 = -224						; size = 12
_shadowCameraTransform$27 = -208			; size = 28
$T28 = -176						; size = 28
_shadowMapIndex$29 = -148				; size = 4
_shadowInfo$30 = -140					; size = 84
_i$31 = -52						; size = 4
$T32 = -48						; size = 28
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_object$ = 8						; size = 4
?Render@RenderingEngine@@UAEXABVEntity@@@Z PROC		; RenderingEngine::Render
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@RenderingEngine@@UAEXABVEntity@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 04 00
	00		 sub	 esp, 1024		; 00000400H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd f4 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1036]
  00020	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 	m_renderProfileTimer.StartInvocation();

  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 60	 add	 ecx, 96			; 00000060H
  0004a	e8 00 00 00 00	 call	 ?StartInvocation@ProfileTimer@@QAEXXZ ; ProfileTimer::StartInvocation

; 188  : 	GetTexture("displayTexture").BindAsRenderTarget();

  0004f	68 00 00 00 00	 push	 OFFSET $SG4294895255
  00054	8d 4d d0	 lea	 ecx, DWORD PTR $T32[ebp]
  00057	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	8d 45 d0	 lea	 eax, DWORD PTR $T32[ebp]
  00066	50		 push	 eax
  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 08	 add	 ecx, 8
  0006d	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Texture@@QBEXXZ ; Texture::BindAsRenderTarget
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8d 4d d0	 lea	 ecx, DWORD PTR $T32[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 189  : 	//m_window->BindAsRenderTarget();
; 190  : 	//m_tempTarget->BindAsRenderTarget();
; 191  : 
; 192  : 	glClearColor(1.0f,1.0f,1.0f,0.0f);

  00088	8b f4		 mov	 esi, esp
  0008a	51		 push	 ecx
  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	51		 push	 ecx
  00099	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	51		 push	 ecx
  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	51		 push	 ecx
  000b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glClearColor@16
  000c8	3b f4		 cmp	 esi, esp
  000ca	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 193  : 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  000cf	8b f4		 mov	 esi, esp
  000d1	68 00 41 00 00	 push	 16640			; 00004100H
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glClear@4
  000dc	3b f4		 cmp	 esi, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 194  : 	object.RenderAll(*m_defaultShader, *this, *m_mainCamera);

  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 91 28 06 00
	00		 mov	 edx, DWORD PTR [ecx+1576]
  000ec	52		 push	 edx
  000ed	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	50		 push	 eax
  000f1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	8b 91 64 04 00
	00		 mov	 edx, DWORD PTR [ecx+1124]
  000fa	52		 push	 edx
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000fe	e8 00 00 00 00	 call	 ?RenderAll@Entity@@QBEXABVShader@@ABVRenderingEngine@@ABVCamera@@@Z ; Entity::RenderAll

; 195  : 	if (!m_fullbright)

  00103	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00106	0f b6 48 5c	 movzx	 ecx, BYTE PTR [eax+92]
  0010a	85 c9		 test	 ecx, ecx
  0010c	0f 85 02 06 00
	00		 jne	 $LN3@Render

; 196  : 	{
; 197  : 		for (unsigned int i = 0; i < m_lights.size(); i++)

  00112	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _i$31[ebp], 0
  00119	eb 09		 jmp	 SHORT $LN4@Render
$LN2@Render:
  0011b	8b 55 cc	 mov	 edx, DWORD PTR _i$31[ebp]
  0011e	83 c2 01	 add	 edx, 1
  00121	89 55 cc	 mov	 DWORD PTR _i$31[ebp], edx
$LN4@Render:
  00124	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	81 c1 30 06 00
	00		 add	 ecx, 1584		; 00000630H
  0012d	e8 00 00 00 00	 call	 ?size@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QBEIXZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::size
  00132	39 45 cc	 cmp	 DWORD PTR _i$31[ebp], eax
  00135	0f 83 d9 05 00
	00		 jae	 $LN3@Render

; 198  : 		{
; 199  : 			m_activeLight = m_lights[i];

  0013b	8b 45 cc	 mov	 eax, DWORD PTR _i$31[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	81 c1 30 06 00
	00		 add	 ecx, 1584		; 00000630H
  00148	e8 00 00 00 00	 call	 ??A?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAEAAPAVBaseLight@@I@Z ; std::vector<BaseLight *,std::allocator<BaseLight *> >::operator[]
  0014d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	8b 10		 mov	 edx, DWORD PTR [eax]
  00152	89 91 2c 06 00
	00		 mov	 DWORD PTR [ecx+1580], edx

; 200  : 			ShadowInfo shadowInfo = m_activeLight->GetShadowInfo();

  00158	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	8b 88 2c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1580]
  00161	e8 00 00 00 00	 call	 ?GetShadowInfo@BaseLight@@QBEABVShadowInfo@@XZ ; BaseLight::GetShadowInfo
  00166	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0016b	8b f0		 mov	 esi, eax
  0016d	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR _shadowInfo$30[ebp]
  00173	f3 a5		 rep movsd

; 201  : 
; 202  : 			int shadowMapIndex = 0;

  00175	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _shadowMapIndex$29[ebp], 0

; 203  : 			if (shadowInfo.GetShadowMapSizeAsPowerOf2() != 0)

  0017f	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  00185	e8 00 00 00 00	 call	 ?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ ; ShadowInfo::GetShadowMapSizeAsPowerOf2
  0018a	85 c0		 test	 eax, eax
  0018c	74 14		 je	 SHORT $LN6@Render

; 204  : 				shadowMapIndex = shadowInfo.GetShadowMapSizeAsPowerOf2() - 1;

  0018e	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  00194	e8 00 00 00 00	 call	 ?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ ; ShadowInfo::GetShadowMapSizeAsPowerOf2
  00199	83 e8 01	 sub	 eax, 1
  0019c	89 85 6c ff ff
	ff		 mov	 DWORD PTR _shadowMapIndex$29[ebp], eax
$LN6@Render:

; 205  : 
; 206  : 			assert(shadowMapIndex >= 0 && shadowMapIndex < NUM_SHADOW_MAPS);

  001a2	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _shadowMapIndex$29[ebp], 0
  001a9	7c 09		 jl	 SHORT $LN13@Render
  001ab	83 bd 6c ff ff
	ff 0a		 cmp	 DWORD PTR _shadowMapIndex$29[ebp], 10 ; 0000000aH
  001b2	7c 21		 jl	 SHORT $LN14@Render
$LN13@Render:
  001b4	8b f4		 mov	 esi, esp
  001b6	68 ce 00 00 00	 push	 206			; 000000ceH
  001bb	68 00 00 00 00	 push	 OFFSET $SG4294895254
  001c0	68 00 00 00 00	 push	 OFFSET $SG4294895253
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  001cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ce	3b f4		 cmp	 esi, esp
  001d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN14@Render:

; 207  : 
; 208  : 			SetTexture("shadowMap", m_shadowMaps[shadowMapIndex]);

  001d5	68 00 00 00 00	 push	 OFFSET $SG4294895252
  001da	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  001e0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001e5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001ec	6b 95 6c ff ff
	ff 24		 imul	 edx, DWORD PTR _shadowMapIndex$29[ebp], 36
  001f3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001f6	8d 8c 10 94 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+404]
  001fd	51		 push	 ecx
  001fe	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR $T28[ebp]
  00204	52		 push	 edx
  00205	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	83 c1 08	 add	 ecx, 8
  0020b	e8 00 00 00 00	 call	 ?SetTexture@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVTexture@@@Z ; MappedValues::SetTexture
  00210	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00217	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  0021d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 209  : 			m_shadowMaps[shadowMapIndex].BindAsRenderTarget();

  00222	6b 85 6c ff ff
	ff 24		 imul	 eax, DWORD PTR _shadowMapIndex$29[ebp], 36
  00229	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0022c	8d 8c 01 94 01
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+404]
  00233	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Texture@@QBEXXZ ; Texture::BindAsRenderTarget

; 210  : 			glClearColor(1.0f, 1.0f, 0.0f, 0.0f);

  00238	8b f4		 mov	 esi, esp
  0023a	51		 push	 ecx
  0023b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00243	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00248	51		 push	 ecx
  00249	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00251	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00256	51		 push	 ecx
  00257	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0025f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00264	51		 push	 ecx
  00265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0026d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00272	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glClearColor@16
  00278	3b f4		 cmp	 esi, esp
  0027a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 211  : 			glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

  0027f	8b f4		 mov	 esi, esp
  00281	68 00 41 00 00	 push	 16640			; 00004100H
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glClear@4
  0028c	3b f4		 cmp	 esi, esp
  0028e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 212  : 
; 213  : 			if (shadowInfo.GetShadowMapSizeAsPowerOf2() != 0)

  00293	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  00299	e8 00 00 00 00	 call	 ?GetShadowMapSizeAsPowerOf2@ShadowInfo@@QBEHXZ ; ShadowInfo::GetShadowMapSizeAsPowerOf2
  0029e	85 c0		 test	 eax, eax
  002a0	0f 84 7a 02 00
	00		 je	 $LN7@Render

; 214  : 			{
; 215  : 				m_altCamera.SetProjection(shadowInfo.GetProjection());

  002a6	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  002ac	e8 00 00 00 00	 call	 ?GetProjection@ShadowInfo@@QBEABV?$Matrix4@M@@XZ ; ShadowInfo::GetProjection
  002b1	50		 push	 eax
  002b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002b5	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  002bb	e8 00 00 00 00	 call	 ?SetProjection@Camera@@QAEXABV?$Matrix4@M@@@Z ; Camera::SetProjection

; 216  : 				ShadowCameraTransform shadowCameraTransform = m_activeLight->CalcShadowCameraTransform(m_mainCamera->GetTransform().GetTransformedPos(),

  002c0	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR $T25[ebp]
  002c6	52		 push	 edx
  002c7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002ca	8b 88 28 06 00
	00		 mov	 ecx, DWORD PTR [eax+1576]
  002d0	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QBEABVTransform@@XZ ; Camera::GetTransform
  002d5	8b c8		 mov	 ecx, eax
  002d7	e8 00 00 00 00	 call	 ?GetTransformedRot@Transform@@QBE?AVQuaternion@@XZ ; Transform::GetTransformedRot
  002dc	8b f4		 mov	 esi, esp
  002de	50		 push	 eax
  002df	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  002e5	51		 push	 ecx
  002e6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  002e9	8b 8a 28 06 00
	00		 mov	 ecx, DWORD PTR [edx+1576]
  002ef	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QBEABVTransform@@XZ ; Camera::GetTransform
  002f4	8b c8		 mov	 ecx, eax
  002f6	e8 00 00 00 00	 call	 ?GetTransformedPos@Transform@@QBE?AVVector3f@@XZ ; Transform::GetTransformedPos
  002fb	50		 push	 eax
  002fc	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _shadowCameraTransform$27[ebp]
  00302	50		 push	 eax
  00303	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00306	8b 91 2c 06 00
	00		 mov	 edx, DWORD PTR [ecx+1580]
  0030c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0030f	8b 12		 mov	 edx, DWORD PTR [edx]
  00311	8b 88 2c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1580]
  00317	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0031a	ff d0		 call	 eax
  0031c	3b f4		 cmp	 esi, esp
  0031e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 217  : 					m_mainCamera->GetTransform().GetTransformedRot());
; 218  : 				m_altCamera.GetTransform()->SetPos(shadowCameraTransform.GetPos());

  00323	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowCameraTransform$27[ebp]
  00329	e8 00 00 00 00	 call	 ?GetPos@ShadowCameraTransform@@QBEABVVector3f@@XZ ; ShadowCameraTransform::GetPos
  0032e	50		 push	 eax
  0032f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00332	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  00338	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QAEPAVTransform@@XZ ; Camera::GetTransform
  0033d	8b c8		 mov	 ecx, eax
  0033f	e8 00 00 00 00	 call	 ?SetPos@Transform@@QAEXABVVector3f@@@Z ; Transform::SetPos

; 219  : 				m_altCamera.GetTransform()->SetRot(shadowCameraTransform.GetRot());

  00344	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowCameraTransform$27[ebp]
  0034a	e8 00 00 00 00	 call	 ?GetRot@ShadowCameraTransform@@QBEABVQuaternion@@XZ ; ShadowCameraTransform::GetRot
  0034f	50		 push	 eax
  00350	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00353	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  00359	e8 00 00 00 00	 call	 ?GetTransform@Camera@@QAEPAVTransform@@XZ ; Camera::GetTransform
  0035e	8b c8		 mov	 ecx, eax
  00360	e8 00 00 00 00	 call	 ?SetRot@Transform@@QAEXABVQuaternion@@@Z ; Transform::SetRot

; 220  : 
; 221  : 				m_lightMatrix = BIAS_MATRIX * m_altCamera.GetViewProjection();

  00365	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  0036b	51		 push	 ecx
  0036c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	81 c1 e4 05 00
	00		 add	 ecx, 1508		; 000005e4H
  00375	e8 00 00 00 00	 call	 ?GetViewProjection@Camera@@QBE?AV?$Matrix4@M@@XZ ; Camera::GetViewProjection
  0037a	50		 push	 eax
  0037b	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR $T23[ebp]
  00381	52		 push	 edx
  00382	b9 00 00 00 00	 mov	 ecx, OFFSET ?BIAS_MATRIX@RenderingEngine@@0V?$Matrix4@M@@B ; RenderingEngine::BIAS_MATRIX
  00387	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  0038c	50		 push	 eax
  0038d	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  00393	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  00398	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  0039b	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  003a1	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003a6	8d b5 50 fe ff
	ff		 lea	 esi, DWORD PTR $T22[ebp]
  003ac	f3 a5		 rep movsd

; 222  : 
; 223  : 				SetFloat("shadowVarianceMin", shadowInfo.GetMinVariance());

  003ae	68 00 00 00 00	 push	 OFFSET $SG4294895251
  003b3	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  003b9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003be	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  003c5	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  003cb	e8 00 00 00 00	 call	 ?GetMinVariance@ShadowInfo@@QBEMXZ ; ShadowInfo::GetMinVariance
  003d0	51		 push	 ecx
  003d1	d9 1c 24	 fstp	 DWORD PTR [esp]
  003d4	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  003da	50		 push	 eax
  003db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003de	83 c1 08	 add	 ecx, 8
  003e1	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  003e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003ed	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  003f3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 224  : 				SetFloat("shadowLightBleedingReduction", shadowInfo.GetLightBleedReductionAmount());

  003f8	68 00 00 00 00	 push	 OFFSET $SG4294895250
  003fd	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00403	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00408	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0040f	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  00415	e8 00 00 00 00	 call	 ?GetLightBleedReductionAmount@ShadowInfo@@QBEMXZ ; ShadowInfo::GetLightBleedReductionAmount
  0041a	51		 push	 ecx
  0041b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0041e	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00424	51		 push	 ecx
  00425	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00428	83 c1 08	 add	 ecx, 8
  0042b	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  00430	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00437	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  0043d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 225  : 				bool flipFaces = shadowInfo.GetFlipFaces();

  00442	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  00448	e8 00 00 00 00	 call	 ?GetFlipFaces@ShadowInfo@@QBE_NXZ ; ShadowInfo::GetFlipFaces
  0044d	88 85 17 fe ff
	ff		 mov	 BYTE PTR _flipFaces$19[ebp], al

; 226  : 
; 227  : 				//			const Camera* temp = m_mainCamera;
; 228  : 				//			m_mainCamera = m_altCamera;
; 229  : 
; 230  : 				if (flipFaces)

  00453	0f b6 95 17 fe
	ff ff		 movzx	 edx, BYTE PTR _flipFaces$19[ebp]
  0045a	85 d2		 test	 edx, edx
  0045c	74 14		 je	 SHORT $LN9@Render

; 231  : 				{
; 232  : 					glCullFace(GL_FRONT);

  0045e	8b f4		 mov	 esi, esp
  00460	68 04 04 00 00	 push	 1028			; 00000404H
  00465	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glCullFace@4
  0046b	3b f4		 cmp	 esi, esp
  0046d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@Render:

; 233  : 				}
; 234  : 
; 235  : 				glEnable(GL_DEPTH_CLAMP);

  00472	8b f4		 mov	 esi, esp
  00474	68 4f 86 00 00	 push	 34383			; 0000864fH
  00479	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glEnable@4
  0047f	3b f4		 cmp	 esi, esp
  00481	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 236  : 				object.RenderAll(m_shadowMapShader, *this, m_altCamera);

  00486	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00489	05 e4 05 00 00	 add	 eax, 1508		; 000005e4H
  0048e	50		 push	 eax
  0048f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00492	51		 push	 ecx
  00493	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00496	81 c2 8c 04 00
	00		 add	 edx, 1164		; 0000048cH
  0049c	52		 push	 edx
  0049d	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  004a0	e8 00 00 00 00	 call	 ?RenderAll@Entity@@QBEXABVShader@@ABVRenderingEngine@@ABVCamera@@@Z ; Entity::RenderAll

; 237  : 				glDisable(GL_DEPTH_CLAMP);

  004a5	8b f4		 mov	 esi, esp
  004a7	68 4f 86 00 00	 push	 34383			; 0000864fH
  004ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDisable@4
  004b2	3b f4		 cmp	 esi, esp
  004b4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 238  : 
; 239  : 				if (flipFaces)

  004b9	0f b6 85 17 fe
	ff ff		 movzx	 eax, BYTE PTR _flipFaces$19[ebp]
  004c0	85 c0		 test	 eax, eax
  004c2	74 14		 je	 SHORT $LN10@Render

; 240  : 				{
; 241  : 					glCullFace(GL_BACK);

  004c4	8b f4		 mov	 esi, esp
  004c6	68 05 04 00 00	 push	 1029			; 00000405H
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glCullFace@4
  004d1	3b f4		 cmp	 esi, esp
  004d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@Render:

; 242  : 				}
; 243  : 
; 244  : 				//			m_mainCamera = temp;
; 245  : 
; 246  : 				float shadowSoftness = shadowInfo.GetShadowSoftness();

  004d8	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _shadowInfo$30[ebp]
  004de	e8 00 00 00 00	 call	 ?GetShadowSoftness@ShadowInfo@@QBEMXZ ; ShadowInfo::GetShadowSoftness
  004e3	d9 9d 10 fe ff
	ff		 fstp	 DWORD PTR _shadowSoftness$18[ebp]

; 247  : 				if (shadowSoftness != 0)

  004e9	f3 0f 10 85 10
	fe ff ff	 movss	 xmm0, DWORD PTR _shadowSoftness$18[ebp]
  004f1	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  004f8	9f		 lahf
  004f9	f6 c4 44	 test	 ah, 68			; 00000044H
  004fc	7b 1d		 jnp	 SHORT $LN11@Render

; 248  : 				{
; 249  : 					BlurShadowMap(shadowMapIndex, shadowSoftness);

  004fe	51		 push	 ecx
  004ff	f3 0f 10 85 10
	fe ff ff	 movss	 xmm0, DWORD PTR _shadowSoftness$18[ebp]
  00507	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050c	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _shadowMapIndex$29[ebp]
  00512	51		 push	 ecx
  00513	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00516	e8 00 00 00 00	 call	 ?BlurShadowMap@RenderingEngine@@AAEXHM@Z ; RenderingEngine::BlurShadowMap
$LN11@Render:

; 250  : 				}
; 251  : 			}
; 252  : 			else

  0051b	e9 03 01 00 00	 jmp	 $LN8@Render
$LN7@Render:

; 253  : 			{
; 254  : 				m_lightMatrix = Matrix4f().InitScale(Vector3f(0, 0, 0));

  00520	51		 push	 ecx
  00521	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052e	51		 push	 ecx
  0052f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	51		 push	 ecx
  0053d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054a	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00550	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00555	50		 push	 eax
  00556	8d 95 84 fd ff
	ff		 lea	 edx, DWORD PTR $T15[ebp]
  0055c	52		 push	 edx
  0055d	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00563	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  00568	8b c8		 mov	 ecx, eax
  0056a	e8 00 00 00 00	 call	 ?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitScale
  0056f	50		 push	 eax
  00570	8d 8d 44 fd ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00576	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  0057b	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  0057e	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  00584	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00589	8d b5 44 fd ff
	ff		 lea	 esi, DWORD PTR $T14[ebp]
  0058f	f3 a5		 rep movsd

; 255  : 				SetFloat("shadowVarianceMin", 0.00002f);

  00591	68 00 00 00 00	 push	 OFFSET $SG4294895249
  00596	8d 8d 28 fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0059c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  005a1	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  005a8	51		 push	 ecx
  005a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@37a7c5ac
  005b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b6	8d 85 28 fd ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  005bc	50		 push	 eax
  005bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005c0	83 c1 08	 add	 ecx, 8
  005c3	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  005c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005cf	8d 8d 28 fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  005d5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 256  : 				SetFloat("shadowLightBleedingReduction", 0.0f);

  005da	68 00 00 00 00	 push	 OFFSET $SG4294895248
  005df	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  005e5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  005ea	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  005f1	51		 push	 ecx
  005f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00605	51		 push	 ecx
  00606	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00609	83 c1 08	 add	 ecx, 8
  0060c	e8 00 00 00 00	 call	 ?SetFloat@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; MappedValues::SetFloat
  00611	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00618	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0061e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Render:

; 257  : 			}
; 258  : 
; 259  : 			GetTexture("displayTexture").BindAsRenderTarget();

  00623	68 00 00 00 00	 push	 OFFSET $SG4294895247
  00628	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0062e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00633	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0063a	8d 95 f0 fc ff
	ff		 lea	 edx, DWORD PTR $T11[ebp]
  00640	52		 push	 edx
  00641	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00644	83 c1 08	 add	 ecx, 8
  00647	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  0064c	8b c8		 mov	 ecx, eax
  0064e	e8 00 00 00 00	 call	 ?BindAsRenderTarget@Texture@@QBEXXZ ; Texture::BindAsRenderTarget
  00653	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0065a	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00660	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 260  : 			//m_window->BindAsRenderTarget();
; 261  : 
; 262  : 	//		glEnable(GL_SCISSOR_TEST);
; 263  : 	//		TODO: Make use of scissor test to limit light area
; 264  : 	//		glScissor(0, 0, 100, 100);
; 265  : 
; 266  : 			glEnable(GL_BLEND);

  00665	8b f4		 mov	 esi, esp
  00667	68 e2 0b 00 00	 push	 3042			; 00000be2H
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glEnable@4
  00672	3b f4		 cmp	 esi, esp
  00674	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 267  : 			glBlendFunc(GL_ONE, GL_ONE);

  00679	8b f4		 mov	 esi, esp
  0067b	6a 01		 push	 1
  0067d	6a 01		 push	 1
  0067f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glBlendFunc@8
  00685	3b f4		 cmp	 esi, esp
  00687	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 268  : 			glDepthMask(GL_FALSE);

  0068c	8b f4		 mov	 esi, esp
  0068e	6a 00		 push	 0
  00690	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDepthMask@4
  00696	3b f4		 cmp	 esi, esp
  00698	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 269  : 			glDepthFunc(GL_EQUAL);

  0069d	8b f4		 mov	 esi, esp
  0069f	68 02 02 00 00	 push	 514			; 00000202H
  006a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDepthFunc@4
  006aa	3b f4		 cmp	 esi, esp
  006ac	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 270  : 
; 271  : 			object.RenderAll(m_activeLight->GetShader(), *this, *m_mainCamera);

  006b1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  006b4	8b 88 28 06 00
	00		 mov	 ecx, DWORD PTR [eax+1576]
  006ba	51		 push	 ecx
  006bb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  006be	52		 push	 edx
  006bf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  006c2	8b 88 2c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1580]
  006c8	e8 00 00 00 00	 call	 ?GetShader@BaseLight@@QBEABVShader@@XZ ; BaseLight::GetShader
  006cd	50		 push	 eax
  006ce	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  006d1	e8 00 00 00 00	 call	 ?RenderAll@Entity@@QBEXABVShader@@ABVRenderingEngine@@ABVCamera@@@Z ; Entity::RenderAll

; 272  : 
; 273  : 			glDepthMask(GL_TRUE);

  006d6	8b f4		 mov	 esi, esp
  006d8	6a 01		 push	 1
  006da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDepthMask@4
  006e0	3b f4		 cmp	 esi, esp
  006e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 274  : 			glDepthFunc(GL_LESS);

  006e7	8b f4		 mov	 esi, esp
  006e9	68 01 02 00 00	 push	 513			; 00000201H
  006ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDepthFunc@4
  006f4	3b f4		 cmp	 esi, esp
  006f6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 275  : 			glDisable(GL_BLEND);

  006fb	8b f4		 mov	 esi, esp
  006fd	68 e2 0b 00 00	 push	 3042			; 00000be2H
  00702	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDisable@4
  00708	3b f4		 cmp	 esi, esp
  0070a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 276  : 		}

  0070f	e9 07 fa ff ff	 jmp	 $LN2@Render
$LN3@Render:

; 277  : //		glDisable(GL_SCISSOR_TEST);
; 278  : 	}
; 279  : 	
; 280  : 	float displayTextureAspect = (float)GetTexture("displayTexture").GetWidth()/(float)GetTexture("displayTexture").GetHeight();

  00714	68 00 00 00 00	 push	 OFFSET $SG4294895246
  00719	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0071f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00724	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  0072b	68 00 00 00 00	 push	 OFFSET $SG4294895245
  00730	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00736	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0073b	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0073f	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00745	51		 push	 ecx
  00746	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00749	83 c1 08	 add	 ecx, 8
  0074c	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  00751	8b c8		 mov	 ecx, eax
  00753	e8 00 00 00 00	 call	 ?GetWidth@Texture@@QBEHXZ ; Texture::GetWidth
  00758	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0075c	8d 95 b4 fc ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  00762	52		 push	 edx
  00763	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00766	83 c1 08	 add	 ecx, 8
  00769	f3 0f 11 85 f8
	fb ff ff	 movss	 DWORD PTR tv728[ebp], xmm0
  00771	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  00776	8b c8		 mov	 ecx, eax
  00778	e8 00 00 00 00	 call	 ?GetHeight@Texture@@QBEHXZ ; Texture::GetHeight
  0077d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00781	f3 0f 10 8d f8
	fb ff ff	 movss	 xmm1, DWORD PTR tv728[ebp]
  00789	f3 0f 5e c8	 divss	 xmm1, xmm0
  0078d	f3 0f 11 8d ec
	fc ff ff	 movss	 DWORD PTR _displayTextureAspect$[ebp], xmm1
  00795	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00799	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0079f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  007a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  007ab	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  007b1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 281  : 	float displayTextureHeightAdditive = displayTextureAspect * GetFloat("fxaaAspectDistortion");

  007b6	68 00 00 00 00	 push	 OFFSET $SG4294895244
  007bb	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  007c1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007c6	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  007cd	8d 85 94 fc ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  007d3	50		 push	 eax
  007d4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007d7	83 c1 08	 add	 ecx, 8
  007da	e8 00 00 00 00	 call	 ?GetFloat@MappedValues@@QBEMABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetFloat
  007df	d9 9d f4 fb ff
	ff		 fstp	 DWORD PTR tv693[ebp]
  007e5	f3 0f 10 85 f4
	fb ff ff	 movss	 xmm0, DWORD PTR tv693[ebp]
  007ed	f3 0f 59 85 ec
	fc ff ff	 mulss	 xmm0, DWORD PTR _displayTextureAspect$[ebp]
  007f5	f3 0f 11 85 b0
	fc ff ff	 movss	 DWORD PTR _displayTextureHeightAdditive$[ebp], xmm0
  007fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00804	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0080a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 282  : 	SetVector3f("inverseFilterTextureSize", Vector3f(1.0f/(float)GetTexture("displayTexture").GetWidth(), 

  0080f	68 00 00 00 00	 push	 OFFSET $SG4294895243
  00814	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0081a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0081f	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00826	68 00 00 00 00	 push	 OFFSET $SG4294895242
  0082b	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00831	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00836	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0083a	68 00 00 00 00	 push	 OFFSET $SG4294895241
  0083f	8d 8d 34 fc ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00845	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0084a	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0084e	51		 push	 ecx
  0084f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00857	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085c	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00862	51		 push	 ecx
  00863	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00866	83 c1 08	 add	 ecx, 8
  00869	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  0086e	8b c8		 mov	 ecx, eax
  00870	e8 00 00 00 00	 call	 ?GetHeight@Texture@@QBEHXZ ; Texture::GetHeight
  00875	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00879	f3 0f 58 85 b0
	fc ff ff	 addss	 xmm0, DWORD PTR _displayTextureHeightAdditive$[ebp]
  00881	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00889	f3 0f 5e c8	 divss	 xmm1, xmm0
  0088d	51		 push	 ecx
  0088e	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00893	8d 95 78 fc ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  00899	52		 push	 edx
  0089a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0089d	83 c1 08	 add	 ecx, 8
  008a0	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  008a5	8b c8		 mov	 ecx, eax
  008a7	e8 00 00 00 00	 call	 ?GetWidth@Texture@@QBEHXZ ; Texture::GetWidth
  008ac	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008b0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  008b8	f3 0f 5e c8	 divss	 xmm1, xmm0
  008bc	51		 push	 ecx
  008bd	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  008c2	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  008c8	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  008cd	50		 push	 eax
  008ce	8d 85 34 fc ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  008d4	50		 push	 eax
  008d5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008d8	83 c1 08	 add	 ecx, 8
  008db	e8 00 00 00 00	 call	 ?SetVector3f@MappedValues@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVVector3f@@@Z ; MappedValues::SetVector3f
  008e0	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  008e4	8d 8d 34 fc ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  008ea	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008ef	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  008f3	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  008f9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00905	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0090b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 283  : 	                                                 1.0f/((float)GetTexture("displayTexture").GetHeight() + displayTextureHeightAdditive), 0.0f));
; 284  : 
; 285  : 	object.PostRenderAll(m_nullShader, *this, *m_mainCamera);

  00910	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00913	8b 91 28 06 00
	00		 mov	 edx, DWORD PTR [ecx+1576]
  00919	52		 push	 edx
  0091a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0091d	50		 push	 eax
  0091e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00921	81 c1 68 04 00
	00		 add	 ecx, 1128		; 00000468H
  00927	51		 push	 ecx
  00928	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0092b	e8 00 00 00 00	 call	 ?PostRenderAll@Entity@@QBEXABVShader@@ABVRenderingEngine@@ABVCamera@@@Z ; Entity::PostRenderAll

; 286  : 
; 287  : 	m_renderProfileTimer.StopInvocation();

  00930	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00933	83 c1 60	 add	 ecx, 96			; 00000060H
  00936	e8 00 00 00 00	 call	 ?StopInvocation@ProfileTimer@@QAEXXZ ; ProfileTimer::StopInvocation

; 288  : 	
; 289  : 	m_windowSyncProfileTimer.StartInvocation();

  0093b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0093e	83 c1 78	 add	 ecx, 120		; 00000078H
  00941	e8 00 00 00 00	 call	 ?StartInvocation@ProfileTimer@@QAEXXZ ; ProfileTimer::StartInvocation

; 290  : 	ApplyFilter(m_fxaaFilter, GetTexture("displayTexture"), &GetTexture ("displayTexture"));

  00946	68 00 00 00 00	 push	 OFFSET $SG4294895240
  0094b	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00951	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00956	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0095d	68 00 00 00 00	 push	 OFFSET $SG4294895239
  00962	8d 8d 18 fc ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00968	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0096d	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00971	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00977	52		 push	 edx
  00978	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0097b	83 c1 08	 add	 ecx, 8
  0097e	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  00983	50		 push	 eax
  00984	8d 85 18 fc ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0098a	50		 push	 eax
  0098b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0098e	83 c1 08	 add	 ecx, 8
  00991	e8 00 00 00 00	 call	 ?GetTexture@MappedValues@@QBEABVTexture@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; MappedValues::GetTexture
  00996	50		 push	 eax
  00997	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0099a	81 c1 f8 04 00
	00		 add	 ecx, 1272		; 000004f8H
  009a0	51		 push	 ecx
  009a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009a4	e8 00 00 00 00	 call	 ?ApplyFilter@RenderingEngine@@IAEXABVShader@@ABVTexture@@PBV3@@Z ; RenderingEngine::ApplyFilter
  009a9	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  009ad	8d 8d 18 fc ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  009b3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  009bf	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  009c5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 291  : 	m_windowSyncProfileTimer.StopInvocation();

  009ca	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009cd	83 c1 78	 add	 ecx, 120		; 00000078H
  009d0	e8 00 00 00 00	 call	 ?StopInvocation@ProfileTimer@@QAEXXZ ; ProfileTimer::StopInvocation

; 292  : }

  009d5	52		 push	 edx
  009d6	8b cd		 mov	 ecx, ebp
  009d8	50		 push	 eax
  009d9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN34@Render
  009df	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009e4	58		 pop	 eax
  009e5	5a		 pop	 edx
  009e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  009e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  009f0	59		 pop	 ecx
  009f1	5f		 pop	 edi
  009f2	5e		 pop	 esi
  009f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009f6	33 cd		 xor	 ecx, ebp
  009f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009fd	81 c4 0c 04 00
	00		 add	 esp, 1036		; 0000040cH
  00a03	3b ec		 cmp	 ebp, esp
  00a05	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a0a	8b e5		 mov	 esp, ebp
  00a0c	5d		 pop	 ebp
  00a0d	c2 04 00	 ret	 4
$LN34@Render:
  00a10	02 00 00 00	 DD	 2
  00a14	00 00 00 00	 DD	 $LN33@Render
$LN33@Render:
  00a18	74 ff ff ff	 DD	 -140			; ffffff74H
  00a1c	54 00 00 00	 DD	 84			; 00000054H
  00a20	00 00 00 00	 DD	 $LN30@Render
  00a24	30 ff ff ff	 DD	 -208			; ffffff30H
  00a28	1c 00 00 00	 DD	 28			; 0000001cH
  00a2c	00 00 00 00	 DD	 $LN31@Render
$LN31@Render:
  00a30	73		 DB	 115			; 00000073H
  00a31	68		 DB	 104			; 00000068H
  00a32	61		 DB	 97			; 00000061H
  00a33	64		 DB	 100			; 00000064H
  00a34	6f		 DB	 111			; 0000006fH
  00a35	77		 DB	 119			; 00000077H
  00a36	43		 DB	 67			; 00000043H
  00a37	61		 DB	 97			; 00000061H
  00a38	6d		 DB	 109			; 0000006dH
  00a39	65		 DB	 101			; 00000065H
  00a3a	72		 DB	 114			; 00000072H
  00a3b	61		 DB	 97			; 00000061H
  00a3c	54		 DB	 84			; 00000054H
  00a3d	72		 DB	 114			; 00000072H
  00a3e	61		 DB	 97			; 00000061H
  00a3f	6e		 DB	 110			; 0000006eH
  00a40	73		 DB	 115			; 00000073H
  00a41	66		 DB	 102			; 00000066H
  00a42	6f		 DB	 111			; 0000006fH
  00a43	72		 DB	 114			; 00000072H
  00a44	6d		 DB	 109			; 0000006dH
  00a45	00		 DB	 0
$LN30@Render:
  00a46	73		 DB	 115			; 00000073H
  00a47	68		 DB	 104			; 00000068H
  00a48	61		 DB	 97			; 00000061H
  00a49	64		 DB	 100			; 00000064H
  00a4a	6f		 DB	 111			; 0000006fH
  00a4b	77		 DB	 119			; 00000077H
  00a4c	49		 DB	 73			; 00000049H
  00a4d	6e		 DB	 110			; 0000006eH
  00a4e	66		 DB	 102			; 00000066H
  00a4f	6f		 DB	 111			; 0000006fH
  00a50	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T32[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$1:
  00008	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$2:
  00013	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$3:
  0001e	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$4:
  00029	8d 8d 28 fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$5:
  00034	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$6:
  0003f	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$7:
  0004a	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$8:
  00055	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$9:
  00060	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$10:
  0006b	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00071	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$11:
  00076	8d 8d 78 fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$12:
  00081	8d 8d 34 fc ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00087	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$13:
  0008c	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00092	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Render@RenderingEngine@@UAEXABVEntity@@@Z$14:
  00097	8d 8d 18 fc ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0009d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Render@RenderingEngine@@UAEXABVEntity@@@Z:
  000a2	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000a6	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a9	8b 8a f4 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1036]
  000af	33 c8		 xor	 ecx, eax
  000b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b6	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000b9	33 c8		 xor	 ecx, eax
  000bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c0	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@RenderingEngine@@UAEXABVEntity@@@Z
  000c5	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@RenderingEngine@@UAEXABVEntity@@@Z ENDP		; RenderingEngine::Render
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GGLDebugDrawer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGLDebugDrawer@@UAEPAXI@Z PROC			; GLDebugDrawer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1GLDebugDrawer@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GGLDebugDrawer@@UAEPAXI@Z ENDP			; GLDebugDrawer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1GLDebugDrawer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GLDebugDrawer@@UAE@XZ PROC				; GLDebugDrawer::~GLDebugDrawer, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1btIDebugDraw@@UAE@XZ	; btIDebugDraw::~btIDebugDraw
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1GLDebugDrawer@@UAE@XZ ENDP				; GLDebugDrawer::~GLDebugDrawer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btIDebugDraw@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btIDebugDraw@@QAE@XZ PROC				; btIDebugDraw::btIDebugDraw, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7btIDebugDraw@@6B@
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0btIDebugDraw@@QAE@XZ ENDP				; btIDebugDraw::btIDebugDraw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
tv255 = -428						; size = 4
tv91 = -424						; size = 4
_colorbuffer$2 = -416					; size = 4
_vertexbuffer$3 = -404					; size = 4
_vbo$4 = -392						; size = 4
_colors$5 = -380					; size = 24
_vertices$6 = -348					; size = 24
$T7 = -320						; size = 28
$T8 = -292						; size = 40
$T9 = -252						; size = 12
$T10 = -240						; size = 16
$T11 = -224						; size = 136
$T12 = -88						; size = 12
_E$13 = -72						; size = 12
$T14 = -56						; size = 12
_S$15 = -40						; size = 12
_shader$16 = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_color$ = 16						; size = 4
?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z PROC	; GLDebugDrawer::drawLine
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 01 00
	00		 sub	 esp, 416		; 000001a0H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 54 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-428]
  00020	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 304  : 	//      if (m_debugMode > 0)
; 305  : 	{
; 306  : 		auto shader = m_renderer->GetNullShader ();

  00044	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004a	e8 00 00 00 00	 call	 ?GetNullShader@RenderingEngine@@QAEPAVShader@@XZ ; RenderingEngine::GetNullShader
  0004f	89 45 e8	 mov	 DWORD PTR _shader$16[ebp], eax

; 307  : 		
; 308  : 		if (shader == nullptr)

  00052	83 7d e8 00	 cmp	 DWORD PTR _shader$16[ebp], 0
  00056	75 05		 jne	 SHORT $LN2@drawLine

; 309  : 			return;

  00058	e9 86 04 00 00	 jmp	 $LN1@drawLine
$LN2@drawLine:

; 310  : 
; 311  : 		Vector3f S = Vector3f::GetFT (from);

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _from$[ebp]
  00060	51		 push	 ecx
  00061	8d 55 c8	 lea	 edx, DWORD PTR $T14[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?GetFT@?$Vector3@M@@SA?AV1@ABVbtVector3@@@Z ; Vector3<float>::GetFT
  0006a	83 c4 08	 add	 esp, 8
  0006d	50		 push	 eax
  0006e	8d 4d d8	 lea	 ecx, DWORD PTR _S$15[ebp]
  00071	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@ABV?$Vector3@M@@@Z ; Vector3f::Vector3f

; 312  : 		Vector3f E = Vector3f::GetFT (to);

  00076	8b 45 0c	 mov	 eax, DWORD PTR _to$[ebp]
  00079	50		 push	 eax
  0007a	8d 4d a8	 lea	 ecx, DWORD PTR $T12[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ?GetFT@?$Vector3@M@@SA?AV1@ABVbtVector3@@@Z ; Vector3<float>::GetFT
  00083	83 c4 08	 add	 esp, 8
  00086	50		 push	 eax
  00087	8d 4d b8	 lea	 ecx, DWORD PTR _E$13[ebp]
  0008a	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@ABV?$Vector3@M@@@Z ; Vector3f::Vector3f

; 313  : 
; 314  : 		shader->Bind ();

  0008f	8b 4d e8	 mov	 ecx, DWORD PTR _shader$16[ebp]
  00092	e8 00 00 00 00	 call	 ?Bind@Shader@@QBEXXZ	; Shader::Bind

; 315  : 		shader->UpdateUniforms (Transform (), Material("null"), *m_renderer, *m_renderer->GetMainCamera ());

  00097	68 00 00 00 00	 push	 OFFSET $SG4294895238
  0009c	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000a2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ae	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  000b4	52		 push	 edx
  000b5	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  000bb	e8 00 00 00 00	 call	 ??0Material@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Material::Material
  000c0	89 85 58 fe ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
  000c6	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR tv91[ebp]
  000cc	89 85 54 fe ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  000d2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000dc	e8 00 00 00 00	 call	 ?GetMainCamera@RenderingEngine@@QAEPBVCamera@@XZ ; RenderingEngine::GetMainCamera
  000e1	8b f4		 mov	 esi, esp
  000e3	50		 push	 eax
  000e4	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000e7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ea	50		 push	 eax
  000eb	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  000f1	51		 push	 ecx
  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	51		 push	 ecx
  00101	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	51		 push	 ecx
  0010f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00117	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011c	51		 push	 ecx
  0011d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	51		 push	 ecx
  0012b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0013e	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@MMMM@Z ; Quaternion::Quaternion
  00143	50		 push	 eax
  00144	51		 push	 ecx
  00145	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	51		 push	 ecx
  00153	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	51		 push	 ecx
  00161	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00174	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  00179	50		 push	 eax
  0017a	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00180	e8 00 00 00 00	 call	 ??0Transform@@QAE@ABVVector3f@@ABVQuaternion@@M@Z ; Transform::Transform
  00185	50		 push	 eax
  00186	8b 55 e8	 mov	 edx, DWORD PTR _shader$16[ebp]
  00189	8b 02		 mov	 eax, DWORD PTR [edx]
  0018b	8b 4d e8	 mov	 ecx, DWORD PTR _shader$16[ebp]
  0018e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00191	ff d2		 call	 edx
  00193	3b f4		 cmp	 esi, esp
  00195	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0019e	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  001a4	e8 00 00 00 00	 call	 ??1Material@@UAE@XZ	; Material::~Material
  001a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b0	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001b6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 316  : 
; 317  : 		float vertices[] = { 
; 318  : 			S.GetX(), S.GetY(), S.GetZ(),

  001bb	8d 4d d8	 lea	 ecx, DWORD PTR _S$15[ebp]
  001be	e8 00 00 00 00	 call	 ?GetX@Vector3f@@QBEMXZ	; Vector3f::GetX
  001c3	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR _vertices$6[ebp]
  001c9	8d 4d d8	 lea	 ecx, DWORD PTR _S$15[ebp]
  001cc	e8 00 00 00 00	 call	 ?GetY@Vector3f@@QBEMXZ	; Vector3f::GetY
  001d1	d9 9d a8 fe ff
	ff		 fstp	 DWORD PTR _vertices$6[ebp+4]
  001d7	8d 4d d8	 lea	 ecx, DWORD PTR _S$15[ebp]
  001da	e8 00 00 00 00	 call	 ?GetZ@Vector3f@@QBEMXZ	; Vector3f::GetZ
  001df	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _vertices$6[ebp+8]

; 319  : 			E.GetX (), E.GetY (), E.GetZ ()

  001e5	8d 4d b8	 lea	 ecx, DWORD PTR _E$13[ebp]
  001e8	e8 00 00 00 00	 call	 ?GetX@Vector3f@@QBEMXZ	; Vector3f::GetX
  001ed	d9 9d b0 fe ff
	ff		 fstp	 DWORD PTR _vertices$6[ebp+12]
  001f3	8d 4d b8	 lea	 ecx, DWORD PTR _E$13[ebp]
  001f6	e8 00 00 00 00	 call	 ?GetY@Vector3f@@QBEMXZ	; Vector3f::GetY
  001fb	d9 9d b4 fe ff
	ff		 fstp	 DWORD PTR _vertices$6[ebp+16]
  00201	8d 4d b8	 lea	 ecx, DWORD PTR _E$13[ebp]
  00204	e8 00 00 00 00	 call	 ?GetZ@Vector3f@@QBEMXZ	; Vector3f::GetZ
  00209	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR _vertices$6[ebp+20]

; 320  : 		};
; 321  : 		float colors[] = {
; 322  : 			color.getX (),color.getY (),color.getZ (),

  0020f	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  00212	e8 00 00 00 00	 call	 ?getX@btVector3@@QBEABMXZ ; btVector3::getX
  00217	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0021b	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _colors$5[ebp], xmm0
  00223	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  00226	e8 00 00 00 00	 call	 ?getY@btVector3@@QBEABMXZ ; btVector3::getY
  0022b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0022f	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _colors$5[ebp+4], xmm0
  00237	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  0023a	e8 00 00 00 00	 call	 ?getZ@btVector3@@QBEABMXZ ; btVector3::getZ
  0023f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00243	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _colors$5[ebp+8], xmm0

; 323  : 			color.getX (),color.getY (),color.getZ ()

  0024b	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  0024e	e8 00 00 00 00	 call	 ?getX@btVector3@@QBEABMXZ ; btVector3::getX
  00253	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00257	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _colors$5[ebp+12], xmm0
  0025f	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  00262	e8 00 00 00 00	 call	 ?getY@btVector3@@QBEABMXZ ; btVector3::getY
  00267	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0026b	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _colors$5[ebp+16], xmm0
  00273	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  00276	e8 00 00 00 00	 call	 ?getZ@btVector3@@QBEABMXZ ; btVector3::getZ
  0027b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027f	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _colors$5[ebp+20], xmm0

; 324  : 		};
; 325  : 		
; 326  : 		GLuint vbo;
; 327  : 		glGenVertexArrays (1, &vbo);

  00287	8b f4		 mov	 esi, esp
  00289	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _vbo$4[ebp]
  0028f	50		 push	 eax
  00290	6a 01		 push	 1
  00292	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewGenVertexArrays
  00298	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029a	ff d2		 call	 edx
  0029c	3b f4		 cmp	 esi, esp
  0029e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 328  : 		glBindVertexArray (vbo);

  002a3	8b f4		 mov	 esi, esp
  002a5	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _vbo$4[ebp]
  002ab	50		 push	 eax
  002ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewBindVertexArray
  002b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  002b4	ff d2		 call	 edx
  002b6	3b f4		 cmp	 esi, esp
  002b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 329  : 		
; 330  : 		GLuint vertexbuffer, colorbuffer;
; 331  : 		glGenBuffers (1, &vertexbuffer);

  002bd	8b f4		 mov	 esi, esp
  002bf	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _vertexbuffer$3[ebp]
  002c5	50		 push	 eax
  002c6	6a 01		 push	 1
  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewGenBuffers
  002ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d0	ff d2		 call	 edx
  002d2	3b f4		 cmp	 esi, esp
  002d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 332  : 		glBindBuffer (GL_ARRAY_BUFFER, vertexbuffer);

  002d9	8b f4		 mov	 esi, esp
  002db	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _vertexbuffer$3[ebp]
  002e1	50		 push	 eax
  002e2	68 92 88 00 00	 push	 34962			; 00008892H
  002e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewBindBuffer
  002ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ef	ff d2		 call	 edx
  002f1	3b f4		 cmp	 esi, esp
  002f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 333  : 		glBufferData (GL_ARRAY_BUFFER, sizeof (vertices), vertices, GL_DYNAMIC_DRAW);

  002f8	8b f4		 mov	 esi, esp
  002fa	68 e8 88 00 00	 push	 35048			; 000088e8H
  002ff	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _vertices$6[ebp]
  00305	50		 push	 eax
  00306	6a 18		 push	 24			; 00000018H
  00308	68 92 88 00 00	 push	 34962			; 00008892H
  0030d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewBufferData
  00313	8b 11		 mov	 edx, DWORD PTR [ecx]
  00315	ff d2		 call	 edx
  00317	3b f4		 cmp	 esi, esp
  00319	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 334  : 
; 335  : 		glGenBuffers (1, &colorbuffer);

  0031e	8b f4		 mov	 esi, esp
  00320	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _colorbuffer$2[ebp]
  00326	50		 push	 eax
  00327	6a 01		 push	 1
  00329	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewGenBuffers
  0032f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00331	ff d2		 call	 edx
  00333	3b f4		 cmp	 esi, esp
  00335	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 336  : 		glBindBuffer (GL_ARRAY_BUFFER, colorbuffer);

  0033a	8b f4		 mov	 esi, esp
  0033c	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _colorbuffer$2[ebp]
  00342	50		 push	 eax
  00343	68 92 88 00 00	 push	 34962			; 00008892H
  00348	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewBindBuffer
  0034e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00350	ff d2		 call	 edx
  00352	3b f4		 cmp	 esi, esp
  00354	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 337  : 		glBufferData (GL_ARRAY_BUFFER, sizeof (colors), colors, GL_DYNAMIC_DRAW);

  00359	8b f4		 mov	 esi, esp
  0035b	68 e8 88 00 00	 push	 35048			; 000088e8H
  00360	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _colors$5[ebp]
  00366	50		 push	 eax
  00367	6a 18		 push	 24			; 00000018H
  00369	68 92 88 00 00	 push	 34962			; 00008892H
  0036e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewBufferData
  00374	8b 11		 mov	 edx, DWORD PTR [ecx]
  00376	ff d2		 call	 edx
  00378	3b f4		 cmp	 esi, esp
  0037a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 338  : 
; 339  : 		glEnableVertexAttribArray (0);

  0037f	8b f4		 mov	 esi, esp
  00381	6a 00		 push	 0
  00383	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp____glewEnableVertexAttribArray
  00388	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038a	ff d1		 call	 ecx
  0038c	3b f4		 cmp	 esi, esp
  0038e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 340  : 		glBindBuffer (GL_ARRAY_BUFFER, vertexbuffer);

  00393	8b f4		 mov	 esi, esp
  00395	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _vertexbuffer$3[ebp]
  0039b	52		 push	 edx
  0039c	68 92 88 00 00	 push	 34962			; 00008892H
  003a1	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp____glewBindBuffer
  003a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a8	ff d1		 call	 ecx
  003aa	3b f4		 cmp	 esi, esp
  003ac	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 341  : 		glVertexAttribPointer (0, 3, GL_FLOAT, GL_FALSE, 0, 0);

  003b1	8b f4		 mov	 esi, esp
  003b3	6a 00		 push	 0
  003b5	6a 00		 push	 0
  003b7	6a 00		 push	 0
  003b9	68 06 14 00 00	 push	 5126			; 00001406H
  003be	6a 03		 push	 3
  003c0	6a 00		 push	 0
  003c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp____glewVertexAttribPointer
  003c8	8b 02		 mov	 eax, DWORD PTR [edx]
  003ca	ff d0		 call	 eax
  003cc	3b f4		 cmp	 esi, esp
  003ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 342  : 		
; 343  : 		glEnableVertexAttribArray (1);

  003d3	8b f4		 mov	 esi, esp
  003d5	6a 01		 push	 1
  003d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewEnableVertexAttribArray
  003dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003df	ff d2		 call	 edx
  003e1	3b f4		 cmp	 esi, esp
  003e3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 344  : 		glBindBuffer (GL_ARRAY_BUFFER, colorbuffer);

  003e8	8b f4		 mov	 esi, esp
  003ea	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _colorbuffer$2[ebp]
  003f0	50		 push	 eax
  003f1	68 92 88 00 00	 push	 34962			; 00008892H
  003f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewBindBuffer
  003fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  003fe	ff d2		 call	 edx
  00400	3b f4		 cmp	 esi, esp
  00402	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 345  : 		glVertexAttribPointer (1, 3, GL_FLOAT, GL_FALSE, 0, 0);

  00407	8b f4		 mov	 esi, esp
  00409	6a 00		 push	 0
  0040b	6a 00		 push	 0
  0040d	6a 00		 push	 0
  0040f	68 06 14 00 00	 push	 5126			; 00001406H
  00414	6a 03		 push	 3
  00416	6a 01		 push	 1
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp____glewVertexAttribPointer
  0041d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041f	ff d1		 call	 ecx
  00421	3b f4		 cmp	 esi, esp
  00423	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 346  : 
; 347  : 		glDisable (GL_DEPTH_TEST);

  00428	8b f4		 mov	 esi, esp
  0042a	68 71 0b 00 00	 push	 2929			; 00000b71H
  0042f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDisable@4
  00435	3b f4		 cmp	 esi, esp
  00437	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 348  : 		
; 349  : 		glDrawArrays (GL_LINES, 0, 2);

  0043c	8b f4		 mov	 esi, esp
  0043e	6a 02		 push	 2
  00440	6a 00		 push	 0
  00442	6a 01		 push	 1
  00444	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDrawArrays@12
  0044a	3b f4		 cmp	 esi, esp
  0044c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 350  : 		
; 351  : 		glEnable (GL_DEPTH_TEST);

  00451	8b f4		 mov	 esi, esp
  00453	68 71 0b 00 00	 push	 2929			; 00000b71H
  00458	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glEnable@4
  0045e	3b f4		 cmp	 esi, esp
  00460	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : 
; 353  : 		glDisableVertexAttribArray (1);

  00465	8b f4		 mov	 esi, esp
  00467	6a 01		 push	 1
  00469	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp____glewDisableVertexAttribArray
  0046f	8b 02		 mov	 eax, DWORD PTR [edx]
  00471	ff d0		 call	 eax
  00473	3b f4		 cmp	 esi, esp
  00475	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 354  : 		glDisableVertexAttribArray (0);

  0047a	8b f4		 mov	 esi, esp
  0047c	6a 00		 push	 0
  0047e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewDisableVertexAttribArray
  00484	8b 11		 mov	 edx, DWORD PTR [ecx]
  00486	ff d2		 call	 edx
  00488	3b f4		 cmp	 esi, esp
  0048a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 355  : 		
; 356  : 
; 357  : 		glDeleteBuffers (1, &vertexbuffer);

  0048f	8b f4		 mov	 esi, esp
  00491	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _vertexbuffer$3[ebp]
  00497	50		 push	 eax
  00498	6a 01		 push	 1
  0049a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewDeleteBuffers
  004a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  004a2	ff d2		 call	 edx
  004a4	3b f4		 cmp	 esi, esp
  004a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 358  : 		glDeleteBuffers (1, &colorbuffer);

  004ab	8b f4		 mov	 esi, esp
  004ad	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _colorbuffer$2[ebp]
  004b3	50		 push	 eax
  004b4	6a 01		 push	 1
  004b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewDeleteBuffers
  004bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  004be	ff d2		 call	 edx
  004c0	3b f4		 cmp	 esi, esp
  004c2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 359  : 		glDeleteVertexArrays (1, &vbo);

  004c7	8b f4		 mov	 esi, esp
  004c9	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _vbo$4[ebp]
  004cf	50		 push	 eax
  004d0	6a 01		 push	 1
  004d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp____glewDeleteVertexArrays
  004d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  004da	ff d2		 call	 edx
  004dc	3b f4		 cmp	 esi, esp
  004de	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@drawLine:

; 360  : 
; 361  : 		/*glGenVertexArrays (1, &m_vertexArrayObject);
; 362  : 		glBindVertexArray (m_vertexArrayObject);
; 363  : 
; 364  : 		glGenBuffers (1, m_vertexArrayBuffers);
; 365  : 		glBindBuffer (GL_ARRAY_BUFFER, m_vertexArrayBuffers[0]);
; 366  : 		glBufferData (GL_ARRAY_BUFFER, pos.size () * sizeof (pos[0]), &pos[0], GL_STATIC_DRAW);
; 367  : 
; 368  : 		glEnableVertexAttribArray (0);
; 369  : 		glVertexAttribPointer (0, 2, GL_FLOAT, GL_FALSE, 0, 0);
; 370  : 		glDisableVertexAttribArray (0);
; 371  : 		glBindVertexArray (m_vertexArrayObject);
; 372  : 		glDrawElements (GL_LINES, 2, GL_UNSIGNED_INT, 0);
; 373  : */
; 374  : 		//glDeleteBuffers (1, m_vertexArrayBuffers);
; 375  : 		//glDeleteVertexArrays (1, &m_vertexArrayObject);
; 376  : 	}
; 377  : }

  004e3	52		 push	 edx
  004e4	8b cd		 mov	 ecx, ebp
  004e6	50		 push	 eax
  004e7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@drawLine
  004ed	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004f2	58		 pop	 eax
  004f3	5a		 pop	 edx
  004f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004fe	59		 pop	 ecx
  004ff	5f		 pop	 edi
  00500	5e		 pop	 esi
  00501	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00504	33 cd		 xor	 ecx, ebp
  00506	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0050b	81 c4 ac 01 00
	00		 add	 esp, 428		; 000001acH
  00511	3b ec		 cmp	 ebp, esp
  00513	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00518	8b e5		 mov	 esp, ebp
  0051a	5d		 pop	 ebp
  0051b	c2 0c 00	 ret	 12			; 0000000cH
  0051e	66 90		 npad	 2
$LN15@drawLine:
  00520	07 00 00 00	 DD	 7
  00524	00 00 00 00	 DD	 $LN14@drawLine
$LN14@drawLine:
  00528	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0052c	0c 00 00 00	 DD	 12			; 0000000cH
  00530	00 00 00 00	 DD	 $LN6@drawLine
  00534	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00538	0c 00 00 00	 DD	 12			; 0000000cH
  0053c	00 00 00 00	 DD	 $LN7@drawLine
  00540	a4 fe ff ff	 DD	 -348			; fffffea4H
  00544	18 00 00 00	 DD	 24			; 00000018H
  00548	00 00 00 00	 DD	 $LN8@drawLine
  0054c	84 fe ff ff	 DD	 -380			; fffffe84H
  00550	18 00 00 00	 DD	 24			; 00000018H
  00554	00 00 00 00	 DD	 $LN9@drawLine
  00558	78 fe ff ff	 DD	 -392			; fffffe78H
  0055c	04 00 00 00	 DD	 4
  00560	00 00 00 00	 DD	 $LN10@drawLine
  00564	6c fe ff ff	 DD	 -404			; fffffe6cH
  00568	04 00 00 00	 DD	 4
  0056c	00 00 00 00	 DD	 $LN11@drawLine
  00570	60 fe ff ff	 DD	 -416			; fffffe60H
  00574	04 00 00 00	 DD	 4
  00578	00 00 00 00	 DD	 $LN12@drawLine
$LN12@drawLine:
  0057c	63		 DB	 99			; 00000063H
  0057d	6f		 DB	 111			; 0000006fH
  0057e	6c		 DB	 108			; 0000006cH
  0057f	6f		 DB	 111			; 0000006fH
  00580	72		 DB	 114			; 00000072H
  00581	62		 DB	 98			; 00000062H
  00582	75		 DB	 117			; 00000075H
  00583	66		 DB	 102			; 00000066H
  00584	66		 DB	 102			; 00000066H
  00585	65		 DB	 101			; 00000065H
  00586	72		 DB	 114			; 00000072H
  00587	00		 DB	 0
$LN11@drawLine:
  00588	76		 DB	 118			; 00000076H
  00589	65		 DB	 101			; 00000065H
  0058a	72		 DB	 114			; 00000072H
  0058b	74		 DB	 116			; 00000074H
  0058c	65		 DB	 101			; 00000065H
  0058d	78		 DB	 120			; 00000078H
  0058e	62		 DB	 98			; 00000062H
  0058f	75		 DB	 117			; 00000075H
  00590	66		 DB	 102			; 00000066H
  00591	66		 DB	 102			; 00000066H
  00592	65		 DB	 101			; 00000065H
  00593	72		 DB	 114			; 00000072H
  00594	00		 DB	 0
$LN10@drawLine:
  00595	76		 DB	 118			; 00000076H
  00596	62		 DB	 98			; 00000062H
  00597	6f		 DB	 111			; 0000006fH
  00598	00		 DB	 0
$LN9@drawLine:
  00599	63		 DB	 99			; 00000063H
  0059a	6f		 DB	 111			; 0000006fH
  0059b	6c		 DB	 108			; 0000006cH
  0059c	6f		 DB	 111			; 0000006fH
  0059d	72		 DB	 114			; 00000072H
  0059e	73		 DB	 115			; 00000073H
  0059f	00		 DB	 0
$LN8@drawLine:
  005a0	76		 DB	 118			; 00000076H
  005a1	65		 DB	 101			; 00000065H
  005a2	72		 DB	 114			; 00000072H
  005a3	74		 DB	 116			; 00000074H
  005a4	69		 DB	 105			; 00000069H
  005a5	63		 DB	 99			; 00000063H
  005a6	65		 DB	 101			; 00000065H
  005a7	73		 DB	 115			; 00000073H
  005a8	00		 DB	 0
$LN7@drawLine:
  005a9	45		 DB	 69			; 00000045H
  005aa	00		 DB	 0
$LN6@drawLine:
  005ab	53		 DB	 83			; 00000053H
  005ac	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z$0:
  00000	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z$1:
  0000b	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Material@@UAE@XZ	; Material::~Material
__ehhandler$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 54 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-428]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?drawLine@GLDebugDrawer@@UAEXABVbtVector3@@00@Z ENDP	; GLDebugDrawer::drawLine
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_debugMode$ = 8						; size = 4
?setDebugMode@GLDebugDrawer@@UAEXH@Z PROC		; GLDebugDrawer::setDebugMode
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 381  : 	m_debugMode = debugMode;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _debugMode$[ebp]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 382  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?setDebugMode@GLDebugDrawer@@UAEXH@Z ENDP		; GLDebugDrawer::setDebugMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_location$ = 8						; size = 4
_textString$ = 12					; size = 4
?draw3dText@GLDebugDrawer@@UAEXABVbtVector3@@PBD@Z PROC	; GLDebugDrawer::draw3dText
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 386  : 	//glRasterPos3f(location.x(),  location.y(),  location.z());
; 387  : 	//BMF_DrawString(BMF_GetFont(BMF_kHelvetica10),textString);
; 388  : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?draw3dText@GLDebugDrawer@@UAEXABVbtVector3@@PBD@Z ENDP	; GLDebugDrawer::draw3dText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_warningString$ = 8					; size = 4
?reportErrorWarning@GLDebugDrawer@@UAEXPBD@Z PROC	; GLDebugDrawer::reportErrorWarning
; _this$ = ecx

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 392  : 	printf(warningString);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _warningString$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _printf
  00017	83 c4 04	 add	 esp, 4

; 393  : }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?reportErrorWarning@GLDebugDrawer@@UAEXPBD@Z ENDP	; GLDebugDrawer::reportErrorWarning
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\renderingengine.cpp
_TEXT	SEGMENT
_from$1 = -68						; size = 4
$T2 = -64						; size = 16
_to$3 = -32						; size = 16
_this$ = -4						; size = 4
_pointOnB$ = 8						; size = 4
_normalOnB$ = 12					; size = 4
_distance$ = 16						; size = 4
_lifeTime$ = 20						; size = 4
_color$ = 24						; size = 4
?drawContactPoint@GLDebugDrawer@@UAEXABVbtVector3@@0MH0@Z PROC ; GLDebugDrawer::drawContactPoint
; _this$ = ecx

; 396  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0001f	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 	{
; 398  : 		btVector3 to=pointOnB+normalOnB*distance;

  0002f	8d 43 10	 lea	 eax, DWORD PTR _distance$[ebx]
  00032	50		 push	 eax
  00033	8b 4b 0c	 mov	 ecx, DWORD PTR _normalOnB$[ebx]
  00036	51		 push	 ecx
  00037	8d 55 c0	 lea	 edx, DWORD PTR $T2[ebp]
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 ??D@YA?AVbtVector3@@ABV0@ABM@Z ; operator*
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	50		 push	 eax
  00044	8b 43 08	 mov	 eax, DWORD PTR _pointOnB$[ebx]
  00047	50		 push	 eax
  00048	8d 4d e0	 lea	 ecx, DWORD PTR _to$3[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??H@YA?AVbtVector3@@ABV0@0@Z ; operator+
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 399  : 		const btVector3&from = pointOnB;

  00054	8b 53 08	 mov	 edx, DWORD PTR _pointOnB$[ebx]
  00057	89 55 bc	 mov	 DWORD PTR _from$1[ebp], edx

; 400  : 		glColor4f(color.getX(), color.getY(), color.getZ(), 1.0f);   

  0005a	8b f4		 mov	 esi, esp
  0005c	51		 push	 ecx
  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	8b 4b 18	 mov	 ecx, DWORD PTR _color$[ebx]
  0006d	e8 00 00 00 00	 call	 ?getZ@btVector3@@QBEABMXZ ; btVector3::getZ
  00072	51		 push	 ecx
  00073	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	8b 4b 18	 mov	 ecx, DWORD PTR _color$[ebx]
  0007f	e8 00 00 00 00	 call	 ?getY@btVector3@@QBEABMXZ ; btVector3::getY
  00084	51		 push	 ecx
  00085	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	8b 4b 18	 mov	 ecx, DWORD PTR _color$[ebx]
  00091	e8 00 00 00 00	 call	 ?getX@btVector3@@QBEABMXZ ; btVector3::getX
  00096	51		 push	 ecx
  00097	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glColor4f@16
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 401  : 
; 402  : 		//GLDebugDrawer::drawLine(from, to, color);
; 403  : 		//glRasterPos3f(from.x(),  from.y(),  from.z());
; 404  : 		//char buf[12];
; 405  : 		//sprintf(buf," %d",lifeTime);
; 406  : 		//BMF_DrawString(BMF_GetFont(BMF_kHelvetica10),buf);
; 407  : 	}
; 408  : }

  000ad	52		 push	 edx
  000ae	8b cd		 mov	 ecx, ebp
  000b0	50		 push	 eax
  000b1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@drawContac
  000b7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bc	58		 pop	 eax
  000bd	5a		 pop	 edx
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	8b e3		 mov	 esp, ebx
  000c5	5b		 pop	 ebx
  000c6	c2 14 00	 ret	 20			; 00000014H
  000c9	0f 1f 00	 npad	 3
$LN5@drawContac:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN4@drawContac
$LN4@drawContac:
  000d4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000d8	10 00 00 00	 DD	 16			; 00000010H
  000dc	00 00 00 00	 DD	 $LN3@drawContac
$LN3@drawContac:
  000e0	74		 DB	 116			; 00000074H
  000e1	6f		 DB	 111			; 0000006fH
  000e2	00		 DB	 0
?drawContactPoint@GLDebugDrawer@@UAEXABVbtVector3@@0MH0@Z ENDP ; GLDebugDrawer::drawContactPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAEAAPAVBaseLight@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAEAAPAVBaseLight@@I@Z PROC ; std::vector<BaseLight *,std::allocator<BaseLight *> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?size@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QBEIXZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::size
  00017	3b 45 08	 cmp	 eax, DWORD PTR __Pos$[ebp]
  0001a	0f 87 86 00 00
	00		 ja	 $LN2@operator

; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");

  00020	8b f4		 mov	 esi, esp
  00022	68 d0 04 00 00	 push	 1232			; 000004d0H
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_1IM@LECEOODI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;

  00041	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
  00046	85 c0		 test	 eax, eax
  00048	74 04		 je	 SHORT $LN4@operator
  0004a	33 c9		 xor	 ecx, ecx
  0004c	75 30		 jne	 SHORT $LN5@operator
$LN4@operator:
  0004e	8b f4		 mov	 esi, esp
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  0005a	6a 00		 push	 0
  0005c	68 d1 04 00 00	 push	 1233			; 000004d1H
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1IM@LECEOODI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00066	6a 02		 push	 2
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0006e	83 c4 18	 add	 esp, 24			; 00000018H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	83 f8 01	 cmp	 eax, 1
  0007b	75 01		 jne	 SHORT $LN5@operator
  0007d	cc		 int	 3
$LN5@operator:
  0007e	8b f4		 mov	 esi, esp
  00080	6a 00		 push	 0
  00082	68 d1 04 00 00	 push	 1233			; 000004d1H
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1IM@LECEOODI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1KK@EAEHFHOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAB?$AAa?$AAs?$AAe?$AAL?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  000ae	8b 00		 mov	 eax, DWORD PTR [eax]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  000b3	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1241 : 		}

  000b6	5e		 pop	 esi
  000b7	83 c4 04	 add	 esp, 4
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
??A?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAEAAPAVBaseLight@@I@Z ENDP ; std::vector<BaseLight *,std::allocator<BaseLight *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QBEIXZ PROC ; std::vector<BaseLight *,std::allocator<BaseLight *> >::size, COMDAT
; _this$ = ecx

; 1178 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
  00017	8b f0		 mov	 esi, eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  00021	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00023	2b 08		 sub	 ecx, DWORD PTR [eax]
  00025	c1 f9 02	 sar	 ecx, 2
  00028	8b c1		 mov	 eax, ecx

; 1180 : 		}

  0002a	5e		 pop	 esi
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?size@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QBEIXZ ENDP ; std::vector<BaseLight *,std::allocator<BaseLight *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ PROC ; std::vector<BaseLight *,std::allocator<BaseLight *> >::~vector<BaseLight *,std::allocator<BaseLight *> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 975  : 		_Tidy();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXXZ ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Tidy

; 976  : 		}

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::~_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ENDP ; std::vector<BaseLight *,std::allocator<BaseLight *> >::~vector<BaseLight *,std::allocator<BaseLight *> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ PROC ; std::vector<BaseLight *,std::allocator<BaseLight *> >::vector<BaseLight *,std::allocator<BaseLight *> >, COMDAT
; _this$ = ecx

; 706  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 705  : 		: _Mybase()

  00036	8d 4d ef	 lea	 ecx, DWORD PTR $T2[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$allocator@PAVBaseLight@@@std@@QAE@XZ ; std::allocator<BaseLight *>::allocator<BaseLight *>
  0003e	50		 push	 eax
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >

; 707  : 		}

  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	83 c4 14	 add	 esp, 20			; 00000014H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@XZ ENDP ; std::vector<BaseLight *,std::allocator<BaseLight *> >::vector<BaseLight *,std::allocator<BaseLight *> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
tv210 = -108						; size = 4
tv163 = -104						; size = 4
tv208 = -100						; size = 4
tv152 = -96						; size = 4
tv201 = -92						; size = 4
tv69 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 12
$T5 = -64						; size = 4
$T6 = -60						; size = 4
$T7 = -53						; size = 1
$T8 = -52						; size = 12
$T9 = -37						; size = 1
__Where$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >::operator[], COMDAT
; _this$ = ecx

; 340  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  00019	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 341  : 		iterator _Where = _Mybase::lower_bound(_Keyval);

  00041	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00044	50		 push	 eax
  00045	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00048	51		 push	 ecx
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::lower_bound
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 342  : 		if (_Where == _Mybase::end()
; 343  : 			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))

  00058	8d 55 cc	 lea	 edx, DWORD PTR $T8[ebp]
  0005b	52		 push	 edx
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::end
  00064	89 45 a8	 mov	 DWORD PTR tv69[ebp], eax
  00067	8b 45 a8	 mov	 eax, DWORD PTR tv69[ebp]
  0006a	89 45 a4	 mov	 DWORD PTR tv201[ebp], eax
  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	8b 4d ac	 mov	 ecx, DWORD PTR $T2[ebp]
  00074	83 c9 01	 or	 ecx, 1
  00077	89 4d ac	 mov	 DWORD PTR $T2[ebp], ecx
  0007a	8b 55 a4	 mov	 edx, DWORD PTR tv201[ebp]
  0007d	52		 push	 edx
  0007e	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00081	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  00086	0f b6 c0	 movzx	 eax, al
  00089	85 c0		 test	 eax, eax
  0008b	75 35		 jne	 SHORT $LN4@operator
  0008d	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00095	50		 push	 eax
  00096	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  0009e	50		 push	 eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  000ab	8b c8		 mov	 ecx, eax
  000ad	e8 00 00 00 00	 call	 ??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
  000b2	0f b6 d0	 movzx	 edx, al
  000b5	85 d2		 test	 edx, edx
  000b7	75 09		 jne	 SHORT $LN4@operator
  000b9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
  000c0	eb 07		 jmp	 SHORT $LN5@operator
$LN4@operator:
  000c2	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv152[ebp], 1
$LN5@operator:
  000c9	8a 45 a0	 mov	 al, BYTE PTR tv152[ebp]
  000cc	88 45 db	 mov	 BYTE PTR $T9[ebp], al
  000cf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d6	8b 4d ac	 mov	 ecx, DWORD PTR $T2[ebp]
  000d9	83 e1 01	 and	 ecx, 1
  000dc	74 0c		 je	 SHORT $LN9@operator
  000de	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000e2	8d 4d cc	 lea	 ecx, DWORD PTR $T8[ebp]
  000e5	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN9@operator:
  000ea	0f b6 55 db	 movzx	 edx, BYTE PTR $T9[ebp]
  000ee	85 d2		 test	 edx, edx
  000f0	74 64		 je	 SHORT $LN2@operator

; 344  : 
; 345  : 			_Where = _Mybase::emplace_hint(_Where,

  000f2	8d 4d cb	 lea	 ecx, DWORD PTR $T7[ebp]
  000f5	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@XZ ; std::tuple<>::tuple<>
  000fa	50		 push	 eax
  000fb	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000fe	50		 push	 eax
  000ff	8d 4d c4	 lea	 ecx, DWORD PTR $T6[ebp]
  00102	51		 push	 ecx
  00103	e8 00 00 00 00	 call	 ??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00108	83 c4 08	 add	 esp, 8
  0010b	50		 push	 eax
  0010c	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  00111	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00114	8b cc		 mov	 ecx, esp
  00116	89 65 c0	 mov	 DWORD PTR $T5[ebp], esp
  00119	8d 55 e0	 lea	 edx, DWORD PTR __Where$[ebp]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00122	89 45 9c	 mov	 DWORD PTR tv208[ebp], eax
  00125	8d 45 b4	 lea	 eax, DWORD PTR $T4[ebp]
  00128	50		 push	 eax
  00129	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	e8 00 00 00 00	 call	 ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  00131	89 45 98	 mov	 DWORD PTR tv163[ebp], eax
  00134	8b 4d 98	 mov	 ecx, DWORD PTR tv163[ebp]
  00137	89 4d 94	 mov	 DWORD PTR tv210[ebp], ecx
  0013a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013e	8b 55 94	 mov	 edx, DWORD PTR tv210[ebp]
  00141	52		 push	 edx
  00142	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00145	e8 00 00 00 00	 call	 ??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
  0014a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0014e	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00151	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN2@operator:

; 346  : 				piecewise_construct,
; 347  : 				_STD forward_as_tuple(_Keyval),
; 348  : 				tuple<>());
; 349  : 
; 350  : 
; 351  : 		return (_Where->second);

  00156	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00159	e8 00 00 00 00	 call	 ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator->
  0015e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00161	89 45 b0	 mov	 DWORD PTR $T3[ebp], eax
  00164	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016b	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  0016e	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00173	8b 45 b0	 mov	 eax, DWORD PTR $T3[ebp]

; 352  : 		}

  00176	52		 push	 edx
  00177	8b cd		 mov	 ecx, ebp
  00179	50		 push	 eax
  0017a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@operator
  00180	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00185	58		 pop	 eax
  00186	5a		 pop	 edx
  00187	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00191	59		 pop	 ecx
  00192	5f		 pop	 edi
  00193	83 c4 6c	 add	 esp, 108		; 0000006cH
  00196	3b ec		 cmp	 ebp, esp
  00198	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 04 00	 ret	 4
  001a3	90		 npad	 1
$LN15@operator:
  001a4	01 00 00 00	 DD	 1
  001a8	00 00 00 00	 DD	 $LN14@operator
$LN14@operator:
  001ac	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001b0	0c 00 00 00	 DD	 12			; 0000000cH
  001b4	00 00 00 00	 DD	 $LN12@operator
$LN12@operator:
  001b8	5f		 DB	 95			; 0000005fH
  001b9	57		 DB	 87			; 00000057H
  001ba	68		 DB	 104			; 00000068H
  001bb	65		 DB	 101			; 00000065H
  001bc	72		 DB	 114			; 00000072H
  001bd	65		 DB	 101			; 00000065H
  001be	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN8@operator
  00014	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8d 4d cc	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN8@operator:
  00020	c3		 ret	 0
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  00021	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@QAEAAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >::operator[]
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
tv210 = -108						; size = 4
tv163 = -104						; size = 4
tv208 = -100						; size = 4
tv152 = -96						; size = 4
tv201 = -92						; size = 4
tv69 = -88						; size = 4
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 12
$T5 = -64						; size = 4
$T6 = -60						; size = 4
$T7 = -53						; size = 1
$T8 = -52						; size = 12
$T9 = -37						; size = 1
__Where$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::operator[], COMDAT
; _this$ = ecx

; 340  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  00019	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 341  : 		iterator _Where = _Mybase::lower_bound(_Keyval);

  00041	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00044	50		 push	 eax
  00045	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00048	51		 push	 ecx
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::lower_bound
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 342  : 		if (_Where == _Mybase::end()
; 343  : 			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))

  00058	8d 55 cc	 lea	 edx, DWORD PTR $T8[ebp]
  0005b	52		 push	 edx
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::end
  00064	89 45 a8	 mov	 DWORD PTR tv69[ebp], eax
  00067	8b 45 a8	 mov	 eax, DWORD PTR tv69[ebp]
  0006a	89 45 a4	 mov	 DWORD PTR tv201[ebp], eax
  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	8b 4d ac	 mov	 ecx, DWORD PTR $T2[ebp]
  00074	83 c9 01	 or	 ecx, 1
  00077	89 4d ac	 mov	 DWORD PTR $T2[ebp], ecx
  0007a	8b 55 a4	 mov	 edx, DWORD PTR tv201[ebp]
  0007d	52		 push	 edx
  0007e	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00081	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  00086	0f b6 c0	 movzx	 eax, al
  00089	85 c0		 test	 eax, eax
  0008b	75 35		 jne	 SHORT $LN4@operator
  0008d	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00095	50		 push	 eax
  00096	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  0009e	50		 push	 eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  000ab	8b c8		 mov	 ecx, eax
  000ad	e8 00 00 00 00	 call	 ??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
  000b2	0f b6 d0	 movzx	 edx, al
  000b5	85 d2		 test	 edx, edx
  000b7	75 09		 jne	 SHORT $LN4@operator
  000b9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
  000c0	eb 07		 jmp	 SHORT $LN5@operator
$LN4@operator:
  000c2	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv152[ebp], 1
$LN5@operator:
  000c9	8a 45 a0	 mov	 al, BYTE PTR tv152[ebp]
  000cc	88 45 db	 mov	 BYTE PTR $T9[ebp], al
  000cf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d6	8b 4d ac	 mov	 ecx, DWORD PTR $T2[ebp]
  000d9	83 e1 01	 and	 ecx, 1
  000dc	74 0c		 je	 SHORT $LN9@operator
  000de	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000e2	8d 4d cc	 lea	 ecx, DWORD PTR $T8[ebp]
  000e5	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN9@operator:
  000ea	0f b6 55 db	 movzx	 edx, BYTE PTR $T9[ebp]
  000ee	85 d2		 test	 edx, edx
  000f0	74 64		 je	 SHORT $LN2@operator

; 344  : 
; 345  : 			_Where = _Mybase::emplace_hint(_Where,

  000f2	8d 4d cb	 lea	 ecx, DWORD PTR $T7[ebp]
  000f5	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@XZ ; std::tuple<>::tuple<>
  000fa	50		 push	 eax
  000fb	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000fe	50		 push	 eax
  000ff	8d 4d c4	 lea	 ecx, DWORD PTR $T6[ebp]
  00102	51		 push	 ecx
  00103	e8 00 00 00 00	 call	 ??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00108	83 c4 08	 add	 esp, 8
  0010b	50		 push	 eax
  0010c	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  00111	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00114	8b cc		 mov	 ecx, esp
  00116	89 65 c0	 mov	 DWORD PTR $T5[ebp], esp
  00119	8d 55 e0	 lea	 edx, DWORD PTR __Where$[ebp]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00122	89 45 9c	 mov	 DWORD PTR tv208[ebp], eax
  00125	8d 45 b4	 lea	 eax, DWORD PTR $T4[ebp]
  00128	50		 push	 eax
  00129	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	e8 00 00 00 00	 call	 ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  00131	89 45 98	 mov	 DWORD PTR tv163[ebp], eax
  00134	8b 4d 98	 mov	 ecx, DWORD PTR tv163[ebp]
  00137	89 4d 94	 mov	 DWORD PTR tv210[ebp], ecx
  0013a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013e	8b 55 94	 mov	 edx, DWORD PTR tv210[ebp]
  00141	52		 push	 edx
  00142	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00145	e8 00 00 00 00	 call	 ??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
  0014a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0014e	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00151	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN2@operator:

; 346  : 				piecewise_construct,
; 347  : 				_STD forward_as_tuple(_Keyval),
; 348  : 				tuple<>());
; 349  : 
; 350  : 
; 351  : 		return (_Where->second);

  00156	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00159	e8 00 00 00 00	 call	 ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator->
  0015e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00161	89 45 b0	 mov	 DWORD PTR $T3[ebp], eax
  00164	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016b	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  0016e	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00173	8b 45 b0	 mov	 eax, DWORD PTR $T3[ebp]

; 352  : 		}

  00176	52		 push	 edx
  00177	8b cd		 mov	 ecx, ebp
  00179	50		 push	 eax
  0017a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@operator
  00180	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00185	58		 pop	 eax
  00186	5a		 pop	 edx
  00187	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00191	59		 pop	 ecx
  00192	5f		 pop	 edi
  00193	83 c4 6c	 add	 esp, 108		; 0000006cH
  00196	3b ec		 cmp	 ebp, esp
  00198	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 04 00	 ret	 4
  001a3	90		 npad	 1
$LN15@operator:
  001a4	01 00 00 00	 DD	 1
  001a8	00 00 00 00	 DD	 $LN14@operator
$LN14@operator:
  001ac	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001b0	0c 00 00 00	 DD	 12			; 0000000cH
  001b4	00 00 00 00	 DD	 $LN12@operator
$LN12@operator:
  001b8	5f		 DB	 95			; 0000005fH
  001b9	57		 DB	 87			; 00000057H
  001ba	68		 DB	 104			; 00000068H
  001bb	65		 DB	 101			; 00000065H
  001bc	72		 DB	 114			; 00000072H
  001bd	65		 DB	 101			; 00000065H
  001be	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN8@operator
  00014	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8d 4d cc	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN8@operator:
  00020	c3		 ret	 0
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  00021	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@@std@@QAEAAVVector3f@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::operator[]
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z
_TEXT	SEGMENT
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z PROC ; Matrix<float,4>::InitTranslation, COMDAT
; _this$ = ecx

; 392  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000f	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00016	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 393  : 		for(unsigned int i = 0; i < D; i++)

  00020	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00027	eb 09		 jmp	 SHORT $LN4@InitTransl
$LN2@InitTransl:
  00029	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@InitTransl:
  00032	83 7d f8 04	 cmp	 DWORD PTR _i$2[ebp], 4
  00036	0f 83 84 00 00
	00		 jae	 $LN3@InitTransl

; 394  : 		{
; 395  : 			for(unsigned int j = 0; j < D; j++)

  0003c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN7@InitTransl
$LN5@InitTransl:
  00045	8b 4d f4	 mov	 ecx, DWORD PTR _j$1[ebp]
  00048	83 c1 01	 add	 ecx, 1
  0004b	89 4d f4	 mov	 DWORD PTR _j$1[ebp], ecx
$LN7@InitTransl:
  0004e	83 7d f4 04	 cmp	 DWORD PTR _j$1[ebp], 4
  00052	73 67		 jae	 SHORT $LN6@InitTransl

; 396  : 			{
; 397  : 				if(i == D - 1 && j != D - 1)

  00054	83 7d f8 03	 cmp	 DWORD PTR _i$2[ebp], 3
  00058	75 23		 jne	 SHORT $LN8@InitTransl
  0005a	83 7d f4 03	 cmp	 DWORD PTR _j$1[ebp], 3
  0005e	74 1d		 je	 SHORT $LN8@InitTransl

; 398  : 					m[i][j] = r[j];

  00060	8b 55 f4	 mov	 edx, DWORD PTR _j$1[ebp]
  00063	52		 push	 edx
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00067	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  0006c	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0006f	c1 e0 04	 shl	 eax, 4
  00072	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _j$1[ebp]
  00078	d9 1c 88	 fstp	 DWORD PTR [eax+ecx*4]
  0007b	eb 3c		 jmp	 SHORT $LN11@InitTransl
$LN8@InitTransl:

; 399  : 				else if(i == j)

  0007d	8b 55 f8	 mov	 edx, DWORD PTR _i$2[ebp]
  00080	3b 55 f4	 cmp	 edx, DWORD PTR _j$1[ebp]
  00083	75 1b		 jne	 SHORT $LN10@InitTransl

; 400  : 					m[i][j] = T(1);

  00085	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00088	c1 e0 04	 shl	 eax, 4
  0008b	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR _j$1[ebp]
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00099	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 401  : 				else

  0009e	eb 19		 jmp	 SHORT $LN11@InitTransl
$LN10@InitTransl:

; 402  : 					m[i][j] = T(0);

  000a0	8b 55 f8	 mov	 edx, DWORD PTR _i$2[ebp]
  000a3	c1 e2 04	 shl	 edx, 4
  000a6	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  000a9	8b 45 f4	 mov	 eax, DWORD PTR _j$1[ebp]
  000ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000b4	f3 0f 11 04 82	 movss	 DWORD PTR [edx+eax*4], xmm0
$LN11@InitTransl:

; 403  : 			}

  000b9	eb 8a		 jmp	 SHORT $LN5@InitTransl
$LN6@InitTransl:

; 404  : 		}

  000bb	e9 69 ff ff ff	 jmp	 $LN2@InitTransl
$LN3@InitTransl:

; 405  : 		
; 406  : 		m[D - 1][D - 1] = T(1);

  000c0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000c5	6b d1 03	 imul	 edx, ecx, 3
  000c8	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  000cb	b8 04 00 00 00	 mov	 eax, 4
  000d0	6b c8 03	 imul	 ecx, eax, 3
  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000db	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 407  : 		
; 408  : 		return *this;

  000e0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000e5	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000e8	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  000eb	f3 a5		 rep movsd
  000ed	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 409  : 	}

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ENDP ; Matrix<float,4>::InitTranslation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z
_TEXT	SEGMENT
_j$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z PROC ; Matrix<float,4>::InitScale, COMDAT
; _this$ = ecx

; 374  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000f	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00016	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 375  : 		for(unsigned int i = 0; i < D; i++)

  00020	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00027	eb 09		 jmp	 SHORT $LN4@InitScale
$LN2@InitScale:
  00029	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@InitScale:
  00032	83 7d f8 04	 cmp	 DWORD PTR _i$2[ebp], 4
  00036	73 60		 jae	 SHORT $LN3@InitScale

; 376  : 		{
; 377  : 			for(unsigned int j = 0; j < D; j++)

  00038	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$1[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN7@InitScale
$LN5@InitScale:
  00041	8b 4d f4	 mov	 ecx, DWORD PTR _j$1[ebp]
  00044	83 c1 01	 add	 ecx, 1
  00047	89 4d f4	 mov	 DWORD PTR _j$1[ebp], ecx
$LN7@InitScale:
  0004a	83 7d f4 04	 cmp	 DWORD PTR _j$1[ebp], 4
  0004e	73 46		 jae	 SHORT $LN6@InitScale

; 378  : 			{
; 379  : 				if(i == j && i != D - 1)

  00050	8b 55 f8	 mov	 edx, DWORD PTR _i$2[ebp]
  00053	3b 55 f4	 cmp	 edx, DWORD PTR _j$1[ebp]
  00056	75 23		 jne	 SHORT $LN8@InitScale
  00058	83 7d f8 03	 cmp	 DWORD PTR _i$2[ebp], 3
  0005c	74 1d		 je	 SHORT $LN8@InitScale

; 380  : 					m[i][j] = r[i];

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00061	50		 push	 eax
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00065	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  0006d	c1 e1 04	 shl	 ecx, 4
  00070	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00073	8b 55 f4	 mov	 edx, DWORD PTR _j$1[ebp]
  00076	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]

; 381  : 				else

  00079	eb 19		 jmp	 SHORT $LN9@InitScale
$LN8@InitScale:

; 382  : 					m[i][j] = T(0);

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0007e	c1 e0 04	 shl	 eax, 4
  00081	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00084	8b 4d f4	 mov	 ecx, DWORD PTR _j$1[ebp]
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0008f	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0
$LN9@InitScale:

; 383  : 			}

  00094	eb ab		 jmp	 SHORT $LN5@InitScale
$LN6@InitScale:

; 384  : 		}

  00096	eb 91		 jmp	 SHORT $LN2@InitScale
$LN3@InitScale:

; 385  : 		
; 386  : 		m[D - 1][D - 1] = T(1);

  00098	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009d	6b c2 03	 imul	 eax, edx, 3
  000a0	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  000a3	b9 04 00 00 00	 mov	 ecx, 4
  000a8	6b d1 03	 imul	 edx, ecx, 3
  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b3	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 387  : 		
; 388  : 		return *this;

  000b8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000bd	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000c0	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  000c3	f3 a5		 rep movsd
  000c5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 389  : 	}

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ENDP ; Matrix<float,4>::InitScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00020	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00023	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00020	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00023	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const &,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const &,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myend, COMDAT
; _this$ = ecx

; 661  : 		{	// return reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 662  : 		return (_Get_data()._Myend);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  00016	83 c0 0c	 add	 eax, 12			; 0000000cH

; 663  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast, COMDAT
; _this$ = ecx

; 656  : 		{	// return const reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 657  : 		return (_Get_data()._Mylast);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  00016	83 c0 08	 add	 eax, 8

; 658  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast, COMDAT
; _this$ = ecx

; 651  : 		{	// return reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  : 		return (_Get_data()._Mylast);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  00016	83 c0 08	 add	 eax, 8

; 653  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 646  : 		{	// return const reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Get_data()._Myfirst);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  00016	83 c0 04	 add	 eax, 4

; 648  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABQAPAVBaseLight@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 641  : 		{	// return reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 642  : 		return (_Get_data()._Myfirst);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  00016	83 c0 04	 add	 eax, 4

; 643  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal, COMDAT
; _this$ = ecx

; 621  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 622  : 		return (_Mypair._Get_first());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_first

; 623  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::~_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >, COMDAT
; _this$ = ecx

; 551  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 552  : 		_Free_proxy();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Free_proxy

; 553  : 		}

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@XZ
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::~_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >, COMDAT
; _this$ = ecx

; 540  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)

  00036	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00039	50		 push	 eax
  0003a	0f b6 4d ef	 movzx	 ecx, BYTE PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@PAVBaseLight@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1><std::allocator<BaseLight *> const &>
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 541  : 		_Alloc_proxy();

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Alloc_proxy

; 542  : 		}

  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXXZ PROC ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  00017	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001a	0f 84 84 00 00
	00		 je	 $LN1@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Orphan_all

; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	50		 push	 eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	51		 push	 ecx
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXPAPAVBaseLight@@0@Z ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Destroy

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myend
  0004e	8b f0		 mov	 esi, eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  00058	8b 16		 mov	 edx, DWORD PTR [esi]
  0005a	2b 10		 sub	 edx, DWORD PTR [eax]
  0005c	c1 fa 02	 sar	 edx, 2
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	50		 push	 eax
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal
  00073	8b c8		 mov	 ecx, eax
  00075	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAEXPAPAVBaseLight@@I@Z ; std::_Wrap_alloc<std::allocator<BaseLight *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myfirst
  00082	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1663 : 			this->_Mylast() = pointer();

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Mylast
  00090	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1664 : 			this->_Myend() = pointer();

  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAPAVBaseLight@@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myend
  0009e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1665 : 			}
; 1666 : 		}

  000a4	5e		 pop	 esi
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
?_Tidy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXXZ ENDP ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVBaseLight@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVBaseLight@@@std@@QAE@XZ PROC		; std::allocator<BaseLight *>::allocator<BaseLight *>, COMDAT
; _this$ = ecx

; 617  : 	allocator() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@PAVBaseLight@@@std@@QAE@XZ ENDP		; std::allocator<BaseLight *>::allocator<BaseLight *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator->, COMDAT
; _this$ = ecx

; 404  : 		{	// return pointer to class object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator*
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@AAU32@@Z ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> *>::pointer_to
  0001c	83 c4 04	 add	 esp, 4

; 406  : 		}

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Get_data
  00026	50		 push	 eax
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00037	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003f	83 c9 01	 or	 ecx, 1
  00042	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1548 : 		}

  00048	83 c4 08	 add	 esp, 8
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator->, COMDAT
; _this$ = ecx

; 404  : 		{	// return pointer to class object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@AAU32@@Z ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> *>::pointer_to
  0001c	83 c4 04	 add	 esp, 4

; 406  : 		}

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 907  : 		{	// return reference to ordering predicate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 908  : 		return (_Mypair._Get_first());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first

; 909  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2206 : 		return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myval
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn

; 2207 : 		}

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Get_data
  00026	50		 push	 eax
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00037	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003f	83 c9 01	 or	 ecx, 1
  00042	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1548 : 		}

  00048	83 c4 08	 add	 esp, 8
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<BaseLight *> >::~_Vector_val<std::_Simple_types<BaseLight *> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<BaseLight *> >::~_Vector_val<std::_Simple_types<BaseLight *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >
  0000c	83 c4 04	 add	 esp, 4

; 318  : 		}

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >
  0000c	83 c4 04	 add	 esp, 4

; 318  : 		}

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 293  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 294  : 		return (*this);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 295  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAEXPAPAVBaseLight@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAEXPAPAVBaseLight@@I@Z PROC ; std::_Wrap_alloc<std::allocator<BaseLight *> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVBaseLight@@@std@@QAEXPAPAVBaseLight@@I@Z ; std::allocator<BaseLight *>::deallocate

; 910  : 		}

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAEXPAPAVBaseLight@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<BaseLight *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data, COMDAT
; _this$ = ecx

; 636  : 		{	// return const reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 637  : 		return (_Mypair._Get_second());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second

; 638  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data, COMDAT
; _this$ = ecx

; 631  : 		{	// return reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 632  : 		return (_Mypair._Get_second());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second

; 633  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 611  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 612  : 		_Get_data()._Orphan_all();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 613  : 		}

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 585  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal
  00022	50		 push	 eax
  00023	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00026	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<BaseLight *> > >

; 588  : 		_Orphan_all();

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Orphan_all

; 589  : 		_Alproxy.destroy(_Myproxy());

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
  0003d	50		 push	 eax
  0003e	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00041	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>

; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);

  00046	6a 01		 push	 1
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	51		 push	 ecx
  00053	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00056	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate

; 591  : 		_Myproxy() = 0;

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 592  : 		}

  00069	52		 push	 edx
  0006a	8b cd		 mov	 ecx, ebp
  0006c	50		 push	 eax
  0006d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  00073	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00078	58		 pop	 eax
  00079	5a		 pop	 edx
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN5@Free_proxy:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  00090	f7 ff ff ff	 DD	 -9			; fffffff7H
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  0009c	5f		 DB	 95			; 0000005fH
  0009d	41		 DB	 65			; 00000041H
  0009e	6c		 DB	 108			; 0000006cH
  0009f	70		 DB	 112			; 00000070H
  000a0	72		 DB	 114			; 00000072H
  000a1	6f		 DB	 111			; 0000006fH
  000a2	78		 DB	 120			; 00000078H
  000a3	79		 DB	 121			; 00000079H
  000a4	00		 DB	 0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 576  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal
  00029	50		 push	 eax
  0002a	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<BaseLight *> > >

; 579  : 		_Myproxy() = _Alproxy.allocate(1);

  00032	6a 01		 push	 1
  00034	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00037	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
  0003c	8b f0		 mov	 esi, eax
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
  00046	89 30		 mov	 DWORD PTR [eax], esi

; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());

  00048	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0004b	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00050	50		 push	 eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	50		 push	 eax
  0005c	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0005f	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>

; 581  : 		_Myproxy()->_Mycont = &_Get_data();

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data
  0006c	8b f0		 mov	 esi, eax
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	89 31		 mov	 DWORD PTR [ecx], esi

; 582  : 		}

  0007a	52		 push	 edx
  0007b	8b cd		 mov	 ecx, ebp
  0007d	50		 push	 eax
  0007e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  00084	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00089	58		 pop	 eax
  0008a	5a		 pop	 edx
  0008b	5e		 pop	 esi
  0008c	83 c4 18	 add	 esp, 24			; 00000018H
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
  0009a	66 90		 npad	 2
$LN5@Alloc_prox:
  0009c	01 00 00 00	 DD	 1
  000a0	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000a4	f7 ff ff ff	 DD	 -9			; fffffff7H
  000a8	01 00 00 00	 DD	 1
  000ac	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000b0	5f		 DB	 95			; 0000005fH
  000b1	41		 DB	 65			; 00000041H
  000b2	6c		 DB	 108			; 0000006cH
  000b3	70		 DB	 112			; 00000070H
  000b4	72		 DB	 114			; 00000072H
  000b5	6f		 DB	 111			; 0000006fH
  000b6	78		 DB	 120			; 00000078H
  000b7	79		 DB	 121			; 00000079H
  000b8	00		 DB	 0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXPAPAVBaseLight@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXPAPAVBaseLight@@0@Z PROC ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Destroy, COMDAT
; _this$ = ecx

; 1599 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1601 : 		}

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@IAEXPAPAVBaseLight@@0@Z ENDP ; std::vector<BaseLight *,std::allocator<BaseLight *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator*, COMDAT
; _this$ = ecx

; 399  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 400  : 		return ((reference)**(_Mybase *)this);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator*

; 401  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 293  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 294  : 		return (*this);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 295  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*, COMDAT
; _this$ = ecx

; 399  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 400  : 		return ((reference)**(_Mybase *)this);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*

; 401  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2201 : 		return (_Traits::_Kfn(_Val));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>
  00017	83 c4 04	 add	 esp, 4

; 2202 : 		}

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 318  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  : 		return (_Myval2);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 320  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 313  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 314  : 		return (_Myval2);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 315  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy, COMDAT
; _this$ = ecx

; 600  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myproxy);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Get_data

; 602  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVBaseLight@@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<BaseLight *,std::allocator<BaseLight *> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVBaseLight@@@std@@QAEXPAPAVBaseLight@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVBaseLight@@@std@@QAEXPAPAVBaseLight@@I@Z PROC ; std::allocator<BaseLight *>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  0000e	6a 04		 push	 4
  00010	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXII@Z ; std::_Deallocate
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  : 		}

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVBaseLight@@@std@@QAEXPAPAVBaseLight@@I@Z ENDP ; std::allocator<BaseLight *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*, COMDAT
; _this$ = ecx

; 231  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00017	85 c0		 test	 eax, eax
  00019	74 20		 je	 SHORT $LN3@operator
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00022	74 17		 je	 SHORT $LN3@operator
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00032	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00035	0f 85 86 00 00
	00		 jne	 $LN2@operator
$LN3@operator:

; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");

  0003b	8b f4		 mov	 esi, esp
  0003d	68 ed 00 00 00	 push	 237			; 000000edH
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 238  : 			_SCL_SECURE_OUT_OF_RANGE;

  0005c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
  00061	85 c0		 test	 eax, eax
  00063	74 04		 je	 SHORT $LN5@operator
  00065	33 c9		 xor	 ecx, ecx
  00067	75 30		 jne	 SHORT $LN6@operator
$LN5@operator:
  00069	8b f4		 mov	 esi, esp
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00075	6a 00		 push	 0
  00077	68 ee 00 00 00	 push	 238			; 000000eeH
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00081	6a 02		 push	 2
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00089	83 c4 18	 add	 esp, 24			; 00000018H
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	83 f8 01	 cmp	 eax, 1
  00096	75 01		 jne	 SHORT $LN6@operator
  00098	cc		 int	 3
$LN6@operator:
  00099	8b f4		 mov	 esi, esp
  0009b	6a 00		 push	 0
  0009d	68 ee 00 00 00	 push	 238			; 000000eeH
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_1BMA@MMALOBMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b7	83 c4 14	 add	 esp, 20			; 00000014H
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Myval
  000cd	83 c4 04	 add	 esp, 4

; 248  : 		}

  000d0	5e		 pop	 esi
  000d1	83 c4 04	 add	 esp, 4
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\lib\bullet3\include\linearmath\btvector3.h
;	COMDAT ??$btPlaneSpace1@VbtVector3@@@@YAXABVbtVector3@@AAV0@1@Z
_TEXT	SEGMENT
tv390 = -84						; size = 4
tv388 = -80						; size = 4
tv386 = -76						; size = 4
tv384 = -72						; size = 4
tv382 = -68						; size = 4
tv380 = -64						; size = 4
tv331 = -60						; size = 4
tv378 = -56						; size = 4
tv376 = -52						; size = 4
tv374 = -48						; size = 4
tv372 = -44						; size = 4
tv370 = -40						; size = 4
tv368 = -36						; size = 4
tv366 = -32						; size = 4
tv284 = -28						; size = 4
tv364 = -24						; size = 4
tv268 = -20						; size = 4
_k$1 = -16						; size = 4
_a$2 = -12						; size = 4
_k$3 = -8						; size = 4
_a$4 = -4						; size = 4
_n$ = 8							; size = 4
_p$ = 12						; size = 4
_q$ = 16						; size = 4
??$btPlaneSpace1@VbtVector3@@@@YAXABVbtVector3@@AAV0@1@Z PROC ; btPlaneSpace1<btVector3>, COMDAT

; 1273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0000b	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 1274 :   if (btFabs(n[2]) > SIMDSQRT12) {

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0001a	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0001f	b9 04 00 00 00	 mov	 ecx, 4
  00024	d1 e1		 shl	 ecx, 1
  00026	51		 push	 ecx
  00027	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?btFabs@@YAMM@Z		; btFabs
  00036	83 c4 04	 add	 esp, 4
  00039	d9 5d ec	 fstp	 DWORD PTR tv268[ebp]
  0003c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv268[ebp]
  00041	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f3504f3
  00048	0f 86 f6 01 00
	00		 jbe	 $LN2@btPlaneSpa

; 1275 :     // choose p in y-z plane
; 1276 :     btScalar a = n[1]*n[1] + n[2]*n[2];

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00051	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00056	8b f0		 mov	 esi, eax
  00058	bf 04 00 00 00	 mov	 edi, 4
  0005d	c1 e7 00	 shl	 edi, 0
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00063	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00068	ba 04 00 00 00	 mov	 edx, 4
  0006d	c1 e2 00	 shl	 edx, 0
  00070	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  00075	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0007d	f3 0f 11 45 e8	 movss	 DWORD PTR tv364[ebp], xmm0
  00082	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00087	8b f0		 mov	 esi, eax
  00089	bf 04 00 00 00	 mov	 edi, 4
  0008e	d1 e7		 shl	 edi, 1
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00093	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00098	b9 04 00 00 00	 mov	 ecx, 4
  0009d	d1 e1		 shl	 ecx, 1
  0009f	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  000a4	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  000a9	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR tv364[ebp]
  000ae	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b2	f3 0f 11 4d fc	 movss	 DWORD PTR _a$4[ebp], xmm1

; 1277 :     btScalar k = btRecipSqrt (a);

  000b7	51		 push	 ecx
  000b8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _a$4[ebp]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 ?btSqrt@@YAMM@Z		; btSqrt
  000c7	83 c4 04	 add	 esp, 4
  000ca	d9 5d e4	 fstp	 DWORD PTR tv284[ebp]
  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d5	f3 0f 5e 45 e4	 divss	 xmm0, DWORD PTR tv284[ebp]
  000da	f3 0f 11 45 f8	 movss	 DWORD PTR _k$3[ebp], xmm0

; 1278 :     p[0] = 0;

  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  000e2	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  000e7	ba 04 00 00 00	 mov	 edx, 4
  000ec	6b ca 00	 imul	 ecx, edx, 0
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000f7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1279 : 	p[1] = -n[2]*k;

  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000ff	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00104	ba 04 00 00 00	 mov	 edx, 4
  00109	d1 e2		 shl	 edx, 1
  0010b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00110	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00117	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _k$3[ebp]
  0011c	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  0011f	f3 0f 11 45 e0	 movss	 DWORD PTR tv366[ebp], xmm0
  00124	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00129	b9 04 00 00 00	 mov	 ecx, 4
  0012e	c1 e1 00	 shl	 ecx, 0
  00131	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv366[ebp]
  00136	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1280 : 	p[2] = n[1]*k;

  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0013e	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00143	ba 04 00 00 00	 mov	 edx, 4
  00148	c1 e2 00	 shl	 edx, 0
  0014b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00150	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _k$3[ebp]
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  00158	f3 0f 11 45 dc	 movss	 DWORD PTR tv368[ebp], xmm0
  0015d	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00162	b9 04 00 00 00	 mov	 ecx, 4
  00167	d1 e1		 shl	 ecx, 1
  00169	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv368[ebp]
  0016e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1281 :     // set q = n x p
; 1282 :     q[0] = a*k;

  00173	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _a$4[ebp]
  00178	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _k$3[ebp]
  0017d	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00180	f3 0f 11 45 d8	 movss	 DWORD PTR tv370[ebp], xmm0
  00185	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0018a	ba 04 00 00 00	 mov	 edx, 4
  0018f	6b ca 00	 imul	 ecx, edx, 0
  00192	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv370[ebp]
  00197	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1283 : 	q[1] = -n[0]*p[2];

  0019c	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0019f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001a4	ba 04 00 00 00	 mov	 edx, 4
  001a9	6b ca 00	 imul	 ecx, edx, 0
  001ac	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001b1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001b8	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  001bb	f3 0f 11 45 d4	 movss	 DWORD PTR tv372[ebp], xmm0
  001c0	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  001c5	ba 04 00 00 00	 mov	 edx, 4
  001ca	d1 e2		 shl	 edx, 1
  001cc	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR tv372[ebp]
  001d1	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  001d6	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  001d9	f3 0f 11 45 d0	 movss	 DWORD PTR tv374[ebp], xmm0
  001de	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  001e3	b9 04 00 00 00	 mov	 ecx, 4
  001e8	c1 e1 00	 shl	 ecx, 0
  001eb	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv374[ebp]
  001f0	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1284 : 	q[2] = n[0]*p[1];

  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  001f8	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  001fd	8b f0		 mov	 esi, eax
  001ff	ba 04 00 00 00	 mov	 edx, 4
  00204	6b fa 00	 imul	 edi, edx, 0
  00207	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  0020a	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0020f	b9 04 00 00 00	 mov	 ecx, 4
  00214	c1 e1 00	 shl	 ecx, 0
  00217	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0021c	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00221	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00224	f3 0f 11 45 cc	 movss	 DWORD PTR tv376[ebp], xmm0
  00229	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0022e	ba 04 00 00 00	 mov	 edx, 4
  00233	d1 e2		 shl	 edx, 1
  00235	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR tv376[ebp]
  0023a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 1285 :   }
; 1286 :   else {

  0023f	e9 f3 01 00 00	 jmp	 $LN3@btPlaneSpa
$LN2@btPlaneSpa:

; 1287 :     // choose p in x-y plane
; 1288 :     btScalar a = n[0]*n[0] + n[1]*n[1];

  00244	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00247	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0024c	8b f0		 mov	 esi, eax
  0024e	b8 04 00 00 00	 mov	 eax, 4
  00253	6b f8 00	 imul	 edi, eax, 0
  00256	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00259	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0025e	b9 04 00 00 00	 mov	 ecx, 4
  00263	6b d1 00	 imul	 edx, ecx, 0
  00266	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0026b	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00270	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00273	f3 0f 11 45 c8	 movss	 DWORD PTR tv378[ebp], xmm0
  00278	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0027d	8b f0		 mov	 esi, eax
  0027f	bf 04 00 00 00	 mov	 edi, 4
  00284	c1 e7 00	 shl	 edi, 0
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0028a	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0028f	b9 04 00 00 00	 mov	 ecx, 4
  00294	c1 e1 00	 shl	 ecx, 0
  00297	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0029c	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  002a1	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR tv378[ebp]
  002a6	f3 0f 58 c8	 addss	 xmm1, xmm0
  002aa	f3 0f 11 4d f4	 movss	 DWORD PTR _a$2[ebp], xmm1

; 1289 :     btScalar k = btRecipSqrt (a);

  002af	51		 push	 ecx
  002b0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _a$2[ebp]
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	e8 00 00 00 00	 call	 ?btSqrt@@YAMM@Z		; btSqrt
  002bf	83 c4 04	 add	 esp, 4
  002c2	d9 5d c4	 fstp	 DWORD PTR tv331[ebp]
  002c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002cd	f3 0f 5e 45 c4	 divss	 xmm0, DWORD PTR tv331[ebp]
  002d2	f3 0f 11 45 f0	 movss	 DWORD PTR _k$1[ebp], xmm0

; 1290 :     p[0] = -n[1]*k;

  002d7	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  002da	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  002df	ba 04 00 00 00	 mov	 edx, 4
  002e4	c1 e2 00	 shl	 edx, 0
  002e7	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  002ec	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002f3	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _k$1[ebp]
  002f8	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  002fb	f3 0f 11 45 c0	 movss	 DWORD PTR tv380[ebp], xmm0
  00300	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00305	b9 04 00 00 00	 mov	 ecx, 4
  0030a	6b d1 00	 imul	 edx, ecx, 0
  0030d	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR tv380[ebp]
  00312	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 1291 : 	p[1] = n[0]*k;

  00317	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0031a	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  0031f	b9 04 00 00 00	 mov	 ecx, 4
  00324	6b d1 00	 imul	 edx, ecx, 0
  00327	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0032c	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _k$1[ebp]
  00331	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  00334	f3 0f 11 45 bc	 movss	 DWORD PTR tv382[ebp], xmm0
  00339	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  0033e	b9 04 00 00 00	 mov	 ecx, 4
  00343	c1 e1 00	 shl	 ecx, 0
  00346	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR tv382[ebp]
  0034b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1292 : 	p[2] = 0;

  00350	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  00353	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00358	ba 04 00 00 00	 mov	 edx, 4
  0035d	d1 e2		 shl	 edx, 1
  0035f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00367	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 1293 :     // set q = n x p
; 1294 :     q[0] = -n[2]*p[1];

  0036c	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0036f	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  00374	b9 04 00 00 00	 mov	 ecx, 4
  00379	d1 e1		 shl	 ecx, 1
  0037b	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00380	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00387	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  0038a	f3 0f 11 45 b8	 movss	 DWORD PTR tv384[ebp], xmm0
  0038f	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00394	ba 04 00 00 00	 mov	 edx, 4
  00399	c1 e2 00	 shl	 edx, 0
  0039c	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv384[ebp]
  003a1	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  003a6	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  003a9	f3 0f 11 45 b4	 movss	 DWORD PTR tv386[ebp], xmm0
  003ae	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  003b3	b9 04 00 00 00	 mov	 ecx, 4
  003b8	6b d1 00	 imul	 edx, ecx, 0
  003bb	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv386[ebp]
  003c0	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 1295 : 	q[1] = n[2]*p[0];

  003c5	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  003c8	e8 00 00 00 00	 call	 ??BbtVector3@@QBEPBMXZ	; btVector3::operator float const *
  003cd	8b f0		 mov	 esi, eax
  003cf	bf 04 00 00 00	 mov	 edi, 4
  003d4	d1 e7		 shl	 edi, 1
  003d6	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  003d9	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  003de	b9 04 00 00 00	 mov	 ecx, 4
  003e3	6b d1 00	 imul	 edx, ecx, 0
  003e6	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  003eb	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  003f0	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  003f3	f3 0f 11 45 b0	 movss	 DWORD PTR tv388[ebp], xmm0
  003f8	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  003fd	b9 04 00 00 00	 mov	 ecx, 4
  00402	c1 e1 00	 shl	 ecx, 0
  00405	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR tv388[ebp]
  0040a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1296 : 	q[2] = a*k;

  0040f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _a$2[ebp]
  00414	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _k$1[ebp]
  00419	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  0041c	f3 0f 11 45 ac	 movss	 DWORD PTR tv390[ebp], xmm0
  00421	e8 00 00 00 00	 call	 ??BbtVector3@@QAEPAMXZ	; btVector3::operator float *
  00426	ba 04 00 00 00	 mov	 edx, 4
  0042b	d1 e2		 shl	 edx, 1
  0042d	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv390[ebp]
  00432	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
$LN3@btPlaneSpa:

; 1297 :   }
; 1298 : }

  00437	5f		 pop	 edi
  00438	5e		 pop	 esi
  00439	83 c4 54	 add	 esp, 84			; 00000054H
  0043c	3b ec		 cmp	 ebp, esp
  0043e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00443	8b e5		 mov	 esp, ebp
  00445	5d		 pop	 ebp
  00446	c3		 ret	 0
??$btPlaneSpace1@VbtVector3@@@@YAXABVbtVector3@@AAV0@1@Z ENDP ; btPlaneSpace1<btVector3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv81 = -36						; size = 4
tv138 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Newnode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
_<_Val_0>$ = 24						; size = 4
_<_Val_1>$ = 28						; size = 4
_<_Val_2>$ = 32						; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1118 : 		{	// insert value_type(_Val...) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  0004d	8b 45 20	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d 1c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8b 55 18	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00070	83 c4 04	 add	 esp, 4
  00073	50		 push	 eax
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  0007c	89 45 ec	 mov	 DWORD PTR __Newnode$[ebp], eax

; 1120 : 		return (_Insert_hint(_Where,

  0007f	8b 45 ec	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00082	50		 push	 eax
  00083	8b 4d ec	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Myval
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00093	8b cc		 mov	 ecx, esp
  00095	89 65 e8	 mov	 DWORD PTR $T3[ebp], esp
  00098	8d 55 0c	 lea	 edx, DWORD PTR __Where$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  000a1	89 45 e0	 mov	 DWORD PTR tv138[ebp], eax
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  000b0	89 45 dc	 mov	 DWORD PTR tv81[ebp], eax
  000b3	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  000b6	83 c9 01	 or	 ecx, 1
  000b9	89 4d e4	 mov	 DWORD PTR $T2[ebp], ecx
  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  000cb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	83 c4 24	 add	 esp, 36			; 00000024H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv81 = -36						; size = 4
tv138 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Newnode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
_<_Val_0>$ = 24						; size = 4
_<_Val_1>$ = 28						; size = 4
_<_Val_2>$ = 32						; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1118 : 		{	// insert value_type(_Val...) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  0004d	8b 45 20	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d 1c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00063	83 c4 04	 add	 esp, 4
  00066	50		 push	 eax
  00067	8b 55 18	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00070	83 c4 04	 add	 esp, 4
  00073	50		 push	 eax
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  0007c	89 45 ec	 mov	 DWORD PTR __Newnode$[ebp], eax

; 1120 : 		return (_Insert_hint(_Where,

  0007f	8b 45 ec	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00082	50		 push	 eax
  00083	8b 4d ec	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myval
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00093	8b cc		 mov	 ecx, esp
  00095	89 65 e8	 mov	 DWORD PTR $T3[ebp], esp
  00098	8d 55 0c	 lea	 edx, DWORD PTR __Where$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  000a1	89 45 e0	 mov	 DWORD PTR tv138[ebp], eax
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  000b0	89 45 dc	 mov	 DWORD PTR tv81[ebp], eax
  000b3	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  000b6	83 c9 01	 or	 ecx, 1
  000b9	89 4d e4	 mov	 DWORD PTR $T2[ebp], ecx
  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  000cb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	83 c4 24	 add	 esp, 36			; 00000024H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAVBaseLight@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVBaseLight@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PAVBaseLight@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVBaseLight@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1><std::allocator<BaseLight *> const &>, COMDAT
; _this$ = ecx

; 288  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@PAVBaseLight@@@std@@@std@@YAABV?$allocator@PAVBaseLight@@@0@ABV10@@Z ; std::forward<std::allocator<BaseLight *> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::_Wrap_alloc<std::allocator<BaseLight *> >::_Wrap_alloc<std::allocator<BaseLight *> >

; 287  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<BaseLight *> >::_Vector_val<std::_Simple_types<BaseLight *> >

; 289  : 		}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
??$?0ABV?$allocator@PAVBaseLight@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVBaseLight@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<BaseLight *> >,std::_Vector_val<std::_Simple_types<BaseLight *> >,1><std::allocator<BaseLight *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Wherenode$ = -12					; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 2087 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2088 : 		_Nodeptr _Pnode = _Root();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Root
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d f4	 mov	 DWORD PTR __Wherenode$[ebp], ecx
$LN2@Lbound:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00038	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  00041	83 c4 04	 add	 esp, 4
  00044	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00047	85 c0		 test	 eax, eax
  00049	75 4c		 jne	 SHORT $LN3@Lbound

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00052	52		 push	 edx
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  0005b	50		 push	 eax
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Compare
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 13		 je	 SHORT $LN4@Lbound

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  00074	83 c4 04	 add	 esp, 4
  00077	8b 10		 mov	 edx, DWORD PTR [eax]
  00079	89 55 f8	 mov	 DWORD PTR __Pnode$[ebp], edx

; 2094 : 			else

  0007c	eb 17		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00081	89 45 f4	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00084	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 10		 mov	 edx, DWORD PTR [eax]
  00092	89 55 f8	 mov	 DWORD PTR __Pnode$[ebp], edx
$LN5@Lbound:

; 2098 : 				}

  00095	eb a1		 jmp	 SHORT $LN2@Lbound
$LN3@Lbound:

; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate

  00097	8b 45 f4	 mov	 eax, DWORD PTR __Wherenode$[ebp]

; 2101 : 		}

  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<BaseLight *> > >, COMDAT
; _this$ = ecx

; 874  : 		{	// construct from a related allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 873  : 		: _Mybase(_Right)

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??$?0PAVBaseLight@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><BaseLight *>

; 875  : 		}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<BaseLight *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >, COMDAT

; 185  : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAVBaseLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVBaseLight@@0@Z ; std::_Ptr_cat<BaseLight *,BaseLight *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  0001e	0f b6 55 ff	 movzx	 edx, BYTE PTR $T1[ebp]
  00022	52		 push	 edx
  00023	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 187  : 	}

  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z PROC ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ENDP ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<BaseLight *> >::_Vector_val<std::_Simple_types<BaseLight *> >, COMDAT
; _this$ = ecx

; 478  : 	_Vector_val()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 479  : 		{	// initialize values

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 480  : 		_Myfirst = pointer();

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 481  : 		_Mylast = pointer();

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 483  : 		}

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVBaseLight@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<BaseLight *> >::_Vector_val<std::_Simple_types<BaseLight *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<BaseLight *> >::_Wrap_alloc<std::allocator<BaseLight *> >, COMDAT
; _this$ = ecx

; 857  : 		{	// construct by copying base

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 856  : 		: _Mybase(_Right)

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$allocator@PAVBaseLight@@@std@@QAE@ABV01@@Z ; std::allocator<BaseLight *>::allocator<BaseLight *>

; 858  : 		}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<BaseLight *> >::_Wrap_alloc<std::allocator<BaseLight *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2074 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

  0000e	68 1b 08 00 00	 push	 2075			; 0000081bH
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00028	8a 10		 mov	 dl, BYTE PTR [eax]
  0002a	0f b6 c2	 movzx	 eax, dl
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00033	83 c4 14	 add	 esp, 20			; 00000014H

; 2076 : 		}

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVBaseLight@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVBaseLight@@@std@@QAE@ABV01@@Z PROC	; std::allocator<BaseLight *>::allocator<BaseLight *>, COMDAT
; _this$ = ecx

; 621  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??0?$allocator@PAVBaseLight@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<BaseLight *>::allocator<BaseLight *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 912  : 		{	// return const reference to ordering predicate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 913  : 		return (_Mypair._Get_first());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first

; 914  : 		}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 298  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  : 		return (*this);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 300  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0PAVBaseLight@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVBaseLight@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><BaseLight *>, COMDAT
; _this$ = ecx

; 627  : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 628  : 		}

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0PAVBaseLight@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVBaseLight@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><BaseLight *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv92 = -28						; size = 4
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	c7 45 e4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-28], -858993460 ; ccccccccH
  0001f	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00026	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Buynode0
  0004c	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0004f	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Color
  00058	83 c4 04	 add	 esp, 4
  0005b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 891  : 		this->_Isnil(_Pnode) = false;

  0005e	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Isnil
  00067	83 c4 04	 add	 esp, 4
  0006a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 892  : 
; 893  : 		_TRY_BEGIN

  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 894  : 		this->_Getal().construct(

  00074	8b 55 e8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Myval
  0007d	83 c4 04	 add	 esp, 4
  00080	89 45 e4	 mov	 DWORD PTR tv92[ebp], eax
  00083	8b 45 10	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00099	83 c4 04	 add	 esp, 4
  0009c	50		 push	 eax
  0009d	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  000a6	83 c4 04	 add	 esp, 4
  000a9	50		 push	 eax
  000aa	8b 45 e4	 mov	 eax, DWORD PTR tv92[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getal
  000bf	8b c8		 mov	 ecx, eax
  000c1	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  000c6	eb 1b		 jmp	 SHORT $LN4@Buynode
__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:

; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);

  000c8	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Freenode0

; 899  : 		_RERAISE;

  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	e8 00 00 00 00	 call	 __CxxThrowException@8

; 900  : 		_CATCH_END

  000dd	b8 00 00 00 00	 mov	 eax, $LN7@Buynode
  000e2	c3		 ret	 0
$LN4@Buynode:
  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ea	eb 07		 jmp	 SHORT __tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
$LN7@Buynode:
  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1:

; 901  : 
; 902  : 		return (_Pnode);

  000f3	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:

; 903  : 		}

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	83 c4 1c	 add	 esp, 28			; 0000001cH
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z
_TEXT	SEGMENT
tv875 = -568						; size = 4
tv963 = -564						; size = 4
tv962 = -560						; size = 4
tv961 = -556						; size = 4
tv960 = -552						; size = 4
tv959 = -548						; size = 4
tv958 = -544						; size = 4
tv740 = -540						; size = 4
tv957 = -533						; size = 1
tv956 = -532						; size = 4
tv955 = -528						; size = 4
tv954 = -524						; size = 4
tv953 = -517						; size = 1
tv952 = -516						; size = 4
tv951 = -512						; size = 4
tv864 = -508						; size = 4
tv947 = -504						; size = 4
tv946 = -497						; size = 1
tv945 = -496						; size = 4
tv944 = -492						; size = 4
tv943 = -488						; size = 4
tv942 = -484						; size = 4
tv941 = -480						; size = 4
tv940 = -476						; size = 4
tv939 = -472						; size = 4
tv938 = -468						; size = 4
tv937 = -461						; size = 1
tv936 = -460						; size = 4
tv935 = -456						; size = 4
tv934 = -452						; size = 4
tv933 = -448						; size = 4
tv932 = -444						; size = 4
tv931 = -437						; size = 1
tv930 = -436						; size = 4
tv929 = -432						; size = 4
tv928 = -428						; size = 4
tv927 = -424						; size = 4
tv926 = -417						; size = 1
tv925 = -416						; size = 4
tv924 = -412						; size = 4
tv923 = -408						; size = 4
tv922 = -401						; size = 1
tv850 = -400						; size = 4
tv921 = -396						; size = 4
tv920 = -392						; size = 4
tv919 = -385						; size = 1
tv918 = -384						; size = 4
tv917 = -380						; size = 4
tv916 = -376						; size = 4
tv915 = -369						; size = 1
tv845 = -368						; size = 4
tv914 = -364						; size = 4
tv913 = -360						; size = 4
tv912 = -356						; size = 4
tv911 = -352						; size = 4
tv910 = -348						; size = 4
tv909 = -344						; size = 4
tv416 = -340						; size = 4
tv908 = -333						; size = 1
tv907 = -332						; size = 4
tv906 = -328						; size = 4
tv905 = -324						; size = 4
tv904 = -317						; size = 1
tv903 = -316						; size = 4
tv902 = -312						; size = 4
tv835 = -308						; size = 4
tv898 = -304						; size = 4
tv897 = -297						; size = 1
tv896 = -296						; size = 4
tv895 = -292						; size = 4
tv894 = -288						; size = 4
tv893 = -284						; size = 4
tv892 = -280						; size = 4
tv891 = -276						; size = 4
tv890 = -272						; size = 4
tv889 = -268						; size = 4
tv888 = -261						; size = 1
tv887 = -260						; size = 4
tv886 = -256						; size = 4
tv885 = -252						; size = 4
tv884 = -248						; size = 4
tv883 = -244						; size = 4
tv882 = -237						; size = 1
tv881 = -236						; size = 4
tv880 = -232						; size = 4
tv879 = -228						; size = 4
tv92 = -224						; size = 4
tv181 = -217						; size = 1
tv233 = -216						; size = 4
tv314 = -212						; size = 4
tv330 = -208						; size = 4
tv433 = -201						; size = 1
tv821 = -200						; size = 4
tv449 = -196						; size = 4
tv505 = -192						; size = 4
tv557 = -185						; size = 1
tv638 = -184						; size = 4
tv654 = -180						; size = 4
tv757 = -176						; size = 4
tv773 = -169						; size = 1
tv816 = -168						; size = 4
tv793 = -164						; size = 4
tv66 = -160						; size = 4
$T2 = -156						; size = 4
$T3 = -152						; size = 16
$T4 = -136						; size = 12
$T5 = -121						; size = 1
$T6 = -120						; size = 12
$T7 = -105						; size = 1
$T8 = -104						; size = 12
$T9 = -89						; size = 1
$T10 = -88						; size = 12
$T11 = -73						; size = 1
$T12 = -72						; size = 12
$T13 = -57						; size = 1
$T14 = -56						; size = 12
$T15 = -42						; size = 1
__Leftish$ = -41					; size = 1
__Next$ = -36						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
__Newnode$ = 28						; size = 4
??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>, COMDAT
; _this$ = ecx

; 1683 : 		{	// try to insert node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd c8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-568]
  00022	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00046	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1684 : 		const_iterator _Next;

  00057	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0005a	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >
  0005f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence

  00063	c6 45 d7 00	 mov	 BYTE PTR __Leftish$[ebp], 0

; 1686 : 
; 1687 : 		_TRY_BEGIN

  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())

  0006b	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00073	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Get_data
  00081	39 85 60 ff ff
	ff		 cmp	 DWORD PTR tv66[ebp], eax
  00087	74 21		 je	 SHORT $LN3@Insert_hin

; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");

  00089	8b f4		 mov	 esi, esp
  0008b	68 9b 06 00 00	 push	 1691			; 0000069bH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@MHOKKPFH@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Insert_hin:

; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)

  000aa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::size
  000b2	85 c0		 test	 eax, eax
  000b4	75 61		 jne	 SHORT $LN4@Insert_hin

; 1695 : 			return (_Insert_at(true, this->_Myhead(),

  000b6	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  000c3	83 c4 04	 add	 esp, 4
  000c6	50		 push	 eax
  000c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Myhead
  000cf	8b 10		 mov	 edx, DWORD PTR [eax]
  000d1	52		 push	 edx
  000d2	6a 01		 push	 1
  000d4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  000e0	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  000e6	83 c9 01	 or	 ecx, 1
  000e9	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  000ef	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000f3	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  000f6	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00102	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00105	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  0010a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0010d	e9 a1 0f 00 00	 jmp	 $LN35@Insert_hin
  00112	e9 e9 0e 00 00	 jmp	 $LN5@Insert_hin
$LN4@Insert_hin:

; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)

  00117	33 d2		 xor	 edx, edx
  00119	0f 84 75 07 00
	00		 je	 $LN6@Insert_hin

; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())

  0011f	8d 45 c8	 lea	 eax, DWORD PTR $T14[ebp]
  00122	50		 push	 eax
  00123	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::begin
  0012b	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv793[ebp], eax
  00131	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv793[ebp]
  00137	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv816[ebp], ecx
  0013d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00141	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv816[ebp]
  00147	52		 push	 edx
  00148	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0014b	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  00150	88 85 57 ff ff
	ff		 mov	 BYTE PTR tv773[ebp], al
  00156	8a 85 57 ff ff
	ff		 mov	 al, BYTE PTR tv773[ebp]
  0015c	88 45 d6	 mov	 BYTE PTR $T15[ebp], al
  0015f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00163	8d 4d c8	 lea	 ecx, DWORD PTR $T14[ebp]
  00166	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  0016b	0f b6 4d d6	 movzx	 ecx, BYTE PTR $T15[ebp]
  0016f	85 c9		 test	 ecx, ecx
  00171	0f 84 e3 00 00
	00		 je	 $LN8@Insert_hin

; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00177	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  0017a	52		 push	 edx
  0017b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00183	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv757[ebp], eax
  00189	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0018c	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00191	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv654[ebp], eax
  00197	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv654[ebp]
  0019d	50		 push	 eax
  0019e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  001a6	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv638[ebp], eax
  001ac	68 a6 06 00 00	 push	 1702			; 000006a6H
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  001b6	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv757[ebp]
  001bc	51		 push	 ecx
  001bd	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv638[ebp]
  001c3	52		 push	 edx
  001c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  001cc	8a 00		 mov	 al, BYTE PTR [eax]
  001ce	0f b6 c8	 movzx	 ecx, al
  001d1	51		 push	 ecx
  001d2	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  001d7	83 c4 14	 add	 esp, 20			; 00000014H
  001da	88 85 47 ff ff
	ff		 mov	 BYTE PTR tv557[ebp], al
  001e0	0f b6 95 47 ff
	ff ff		 movzx	 edx, BYTE PTR tv557[ebp]
  001e7	85 d2		 test	 edx, edx
  001e9	75 66		 jne	 SHORT $LN10@Insert_hin

; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),

  001eb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  001ee	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  001f3	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv505[ebp], eax
  001f9	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  001fc	50		 push	 eax
  001fd	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00200	51		 push	 ecx
  00201	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00206	83 c4 04	 add	 esp, 4
  00209	50		 push	 eax
  0020a	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR tv505[ebp]
  00210	52		 push	 edx
  00211	6a 01		 push	 1
  00213	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00216	50		 push	 eax
  00217	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  0021f	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00225	83 c9 01	 or	 ecx, 1
  00228	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0022e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00232	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00235	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  0023a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00241	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00244	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00249	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0024c	e9 62 0e 00 00	 jmp	 $LN35@Insert_hin
$LN10@Insert_hin:

; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence

  00251	c6 45 d7 01	 mov	 BYTE PTR __Leftish$[ebp], 1
  00255	e9 35 06 00 00	 jmp	 $LN9@Insert_hin
$LN8@Insert_hin:

; 1706 : 				}
; 1707 : 			else if (_Where == end())

  0025a	8d 55 b8	 lea	 edx, DWORD PTR $T12[ebp]
  0025d	52		 push	 edx
  0025e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00261	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::end
  00266	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv449[ebp], eax
  0026c	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv449[ebp]
  00272	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv821[ebp], eax
  00278	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0027c	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv821[ebp]
  00282	51		 push	 ecx
  00283	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00286	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  0028b	88 85 37 ff ff
	ff		 mov	 BYTE PTR tv433[ebp], al
  00291	8a 95 37 ff ff
	ff		 mov	 dl, BYTE PTR tv433[ebp]
  00297	88 55 c7	 mov	 BYTE PTR $T13[ebp], dl
  0029a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0029e	8d 4d b8	 lea	 ecx, DWORD PTR $T12[ebp]
  002a1	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  002a6	0f b6 45 c7	 movzx	 eax, BYTE PTR $T13[ebp]
  002aa	85 c0		 test	 eax, eax
  002ac	0f 84 e3 00 00
	00		 je	 $LN11@Insert_hin

; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),

  002b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002b5	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Rmost
  002ba	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv330[ebp], eax
  002c0	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv330[ebp]
  002c6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c8	52		 push	 edx
  002c9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002cc	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  002d1	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  002d7	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  002da	50		 push	 eax
  002db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002de	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  002e3	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv233[ebp], eax
  002e9	68 ae 06 00 00	 push	 1710			; 000006aeH
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  002f3	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv314[ebp]
  002f9	51		 push	 ecx
  002fa	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv233[ebp]
  00300	52		 push	 edx
  00301	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00304	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00309	8a 00		 mov	 al, BYTE PTR [eax]
  0030b	0f b6 c8	 movzx	 ecx, al
  0030e	51		 push	 ecx
  0030f	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00314	83 c4 14	 add	 esp, 20			; 00000014H
  00317	88 85 27 ff ff
	ff		 mov	 BYTE PTR tv181[ebp], al
  0031d	0f b6 95 27 ff
	ff ff		 movzx	 edx, BYTE PTR tv181[ebp]
  00324	85 d2		 test	 edx, edx
  00326	75 68		 jne	 SHORT $LN13@Insert_hin

; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),

  00328	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Rmost
  00330	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  00336	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00339	50		 push	 eax
  0033a	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0033d	51		 push	 ecx
  0033e	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00343	83 c4 04	 add	 esp, 4
  00346	50		 push	 eax
  00347	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv92[ebp]
  0034d	8b 02		 mov	 eax, DWORD PTR [edx]
  0034f	50		 push	 eax
  00350	6a 00		 push	 0
  00352	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00355	51		 push	 ecx
  00356	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00359	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  0035e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00364	83 ca 01	 or	 edx, 1
  00367	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0036d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00371	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00374	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00379	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00380	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00383	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00388	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0038b	e9 23 0d 00 00	 jmp	 $LN35@Insert_hin
$LN13@Insert_hin:

; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00390	e9 fa 04 00 00	 jmp	 $LN9@Insert_hin
$LN11@Insert_hin:

; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),

  00395	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00398	50		 push	 eax
  00399	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0039c	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  003a1	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv879[ebp], eax
  003a7	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  003aa	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  003af	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv880[ebp], eax
  003b5	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv880[ebp]
  003bb	51		 push	 ecx
  003bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003bf	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  003c4	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv881[ebp], eax
  003ca	68 b3 06 00 00	 push	 1715			; 000006b3H
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  003d4	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv879[ebp]
  003da	52		 push	 edx
  003db	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv881[ebp]
  003e1	50		 push	 eax
  003e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003e5	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  003ea	8a 08		 mov	 cl, BYTE PTR [eax]
  003ec	0f b6 d1	 movzx	 edx, cl
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  003f5	83 c4 14	 add	 esp, 20			; 00000014H
  003f8	88 85 13 ff ff
	ff		 mov	 BYTE PTR tv882[ebp], al
  003fe	0f b6 85 13 ff
	ff ff		 movzx	 eax, BYTE PTR tv882[ebp]
  00405	85 c0		 test	 eax, eax
  00407	0f 85 b8 01 00
	00		 jne	 $LN14@Insert_hin
  0040d	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00410	51		 push	 ecx
  00411	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00414	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00419	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv883[ebp], eax
  0041f	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv883[ebp]
  00425	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator--
  0042a	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv884[ebp], eax
  00430	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv884[ebp]
  00436	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  0043b	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv885[ebp], eax
  00441	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv885[ebp]
  00447	52		 push	 edx
  00448	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0044b	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00450	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv886[ebp], eax
  00456	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00459	50		 push	 eax
  0045a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0045d	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00462	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv887[ebp], eax
  00468	68 b6 06 00 00	 push	 1718			; 000006b6H
  0046d	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00472	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv886[ebp]
  00478	51		 push	 ecx
  00479	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR tv887[ebp]
  0047f	52		 push	 edx
  00480	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00483	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00488	8a 00		 mov	 al, BYTE PTR [eax]
  0048a	0f b6 c8	 movzx	 ecx, al
  0048d	51		 push	 ecx
  0048e	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00493	83 c4 14	 add	 esp, 20			; 00000014H
  00496	88 85 fb fe ff
	ff		 mov	 BYTE PTR tv888[ebp], al
  0049c	0f b6 95 fb fe
	ff ff		 movzx	 edx, BYTE PTR tv888[ebp]
  004a3	85 d2		 test	 edx, edx
  004a5	0f 85 1a 01 00
	00		 jne	 $LN14@Insert_hin

; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  004ab	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  004ae	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  004b3	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv889[ebp], eax
  004b9	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR tv889[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Right
  004c5	83 c4 04	 add	 esp, 4
  004c8	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv890[ebp], eax
  004ce	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv890[ebp]
  004d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d6	52		 push	 edx
  004d7	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Isnil
  004dc	83 c4 04	 add	 esp, 4
  004df	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv891[ebp], eax
  004e5	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv891[ebp]
  004eb	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004ee	85 c9		 test	 ecx, ecx
  004f0	74 68		 je	 SHORT $LN16@Insert_hin

; 1721 : 					return (_Insert_at(false, _Next._Mynode(),

  004f2	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  004f5	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  004fa	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv892[ebp], eax
  00500	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00503	52		 push	 edx
  00504	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00507	50		 push	 eax
  00508	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  0050d	83 c4 04	 add	 esp, 4
  00510	50		 push	 eax
  00511	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv892[ebp]
  00517	51		 push	 ecx
  00518	6a 00		 push	 0
  0051a	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0051d	52		 push	 edx
  0051e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00521	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00526	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0052c	83 c8 01	 or	 eax, 1
  0052f	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00535	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00539	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0053c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00541	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00548	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0054b	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00550	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00553	e9 5b 0b 00 00	 jmp	 $LN35@Insert_hin

; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else

  00558	eb 66		 jmp	 SHORT $LN17@Insert_hin
$LN16@Insert_hin:

; 1724 : 					return (_Insert_at(true, _Where._Mynode(),

  0055a	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0055d	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00562	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv893[ebp], eax
  00568	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0056b	51		 push	 ecx
  0056c	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  0056f	52		 push	 edx
  00570	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00575	83 c4 04	 add	 esp, 4
  00578	50		 push	 eax
  00579	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv893[ebp]
  0057f	50		 push	 eax
  00580	6a 01		 push	 1
  00582	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00585	51		 push	 ecx
  00586	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00589	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  0058e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00594	83 ca 01	 or	 edx, 1
  00597	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0059d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  005a1	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  005a4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  005a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  005b0	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  005b3	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  005b8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  005bb	e9 f3 0a 00 00	 jmp	 $LN35@Insert_hin
$LN17@Insert_hin:

; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),

  005c0	e9 ca 02 00 00	 jmp	 $LN9@Insert_hin
$LN14@Insert_hin:

; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()

  005c5	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  005c8	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  005cd	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv894[ebp], eax
  005d3	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv894[ebp]
  005d9	50		 push	 eax
  005da	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005dd	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  005e2	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv895[ebp], eax
  005e8	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  005eb	51		 push	 ecx
  005ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005ef	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  005f4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv896[ebp], eax
  005fa	68 c0 06 00 00	 push	 1728			; 000006c0H
  005ff	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00604	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv895[ebp]
  0060a	52		 push	 edx
  0060b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR tv896[ebp]
  00611	50		 push	 eax
  00612	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00615	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  0061a	8a 08		 mov	 cl, BYTE PTR [eax]
  0061c	0f b6 d1	 movzx	 edx, cl
  0061f	52		 push	 edx
  00620	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00625	83 c4 14	 add	 esp, 20			; 00000014H
  00628	88 85 d7 fe ff
	ff		 mov	 BYTE PTR tv897[ebp], al
  0062e	0f b6 85 d7 fe
	ff ff		 movzx	 eax, BYTE PTR tv897[ebp]
  00635	85 c0		 test	 eax, eax
  00637	0f 85 f7 00 00
	00		 jne	 $LN37@Insert_hin
  0063d	8d 4d a8	 lea	 ecx, DWORD PTR $T10[ebp]
  00640	51		 push	 ecx
  00641	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00644	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::end
  00649	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv898[ebp], eax
  0064f	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR tv898[ebp]
  00655	89 95 cc fe ff
	ff		 mov	 DWORD PTR tv835[ebp], edx
  0065b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0065f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00665	83 c8 02	 or	 eax, 2
  00668	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0066e	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00671	51		 push	 ecx
  00672	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00675	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  0067a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv902[ebp], eax
  00680	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR tv902[ebp]
  00686	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator++
  0068b	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv903[ebp], eax
  00691	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR tv835[ebp]
  00697	52		 push	 edx
  00698	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv903[ebp]
  0069e	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  006a3	88 85 c3 fe ff
	ff		 mov	 BYTE PTR tv904[ebp], al
  006a9	0f b6 85 c3 fe
	ff ff		 movzx	 eax, BYTE PTR tv904[ebp]
  006b0	85 c0		 test	 eax, eax
  006b2	75 74		 jne	 SHORT $LN36@Insert_hin
  006b4	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  006b7	51		 push	 ecx
  006b8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006bb	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  006c0	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv905[ebp], eax
  006c6	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  006c9	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  006ce	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv906[ebp], eax
  006d4	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR tv906[ebp]
  006da	52		 push	 edx
  006db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006de	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  006e3	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv907[ebp], eax
  006e9	68 c3 06 00 00	 push	 1731			; 000006c3H
  006ee	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  006f3	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv905[ebp]
  006f9	50		 push	 eax
  006fa	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv907[ebp]
  00700	51		 push	 ecx
  00701	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00704	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00709	8a 10		 mov	 dl, BYTE PTR [eax]
  0070b	0f b6 c2	 movzx	 eax, dl
  0070e	50		 push	 eax
  0070f	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00714	83 c4 14	 add	 esp, 20			; 00000014H
  00717	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv908[ebp], al
  0071d	0f b6 8d b3 fe
	ff ff		 movzx	 ecx, BYTE PTR tv908[ebp]
  00724	85 c9		 test	 ecx, ecx
  00726	75 0c		 jne	 SHORT $LN37@Insert_hin
$LN36@Insert_hin:
  00728	c7 85 ac fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv416[ebp], 1
  00732	eb 0a		 jmp	 SHORT $LN38@Insert_hin
$LN37@Insert_hin:
  00734	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv416[ebp], 0
$LN38@Insert_hin:
  0073e	8a 95 ac fe ff
	ff		 mov	 dl, BYTE PTR tv416[ebp]
  00744	88 55 b7	 mov	 BYTE PTR $T11[ebp], dl
  00747	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0074e	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00754	83 e0 02	 and	 eax, 2
  00757	74 0f		 je	 SHORT $LN52@Insert_hin
  00759	83 a5 64 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00760	8d 4d a8	 lea	 ecx, DWORD PTR $T10[ebp]
  00763	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN52@Insert_hin:
  00768	0f b6 4d b7	 movzx	 ecx, BYTE PTR $T11[ebp]
  0076c	85 c9		 test	 ecx, ecx
  0076e	0f 84 17 01 00
	00		 je	 $LN18@Insert_hin

; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  00774	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00777	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  0077c	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv909[ebp], eax
  00782	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv909[ebp]
  00788	52		 push	 edx
  00789	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Right
  0078e	83 c4 04	 add	 esp, 4
  00791	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv910[ebp], eax
  00797	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv910[ebp]
  0079d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0079f	51		 push	 ecx
  007a0	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Isnil
  007a5	83 c4 04	 add	 esp, 4
  007a8	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv911[ebp], eax
  007ae	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv911[ebp]
  007b4	0f be 02	 movsx	 eax, BYTE PTR [edx]
  007b7	85 c0		 test	 eax, eax
  007b9	74 68		 je	 SHORT $LN20@Insert_hin

; 1734 : 					return (_Insert_at(false, _Where._Mynode(),

  007bb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  007be	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  007c3	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv912[ebp], eax
  007c9	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  007cc	51		 push	 ecx
  007cd	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  007d0	52		 push	 edx
  007d1	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  007d6	83 c4 04	 add	 esp, 4
  007d9	50		 push	 eax
  007da	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv912[ebp]
  007e0	50		 push	 eax
  007e1	6a 00		 push	 0
  007e3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  007e6	51		 push	 ecx
  007e7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007ea	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  007ef	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  007f5	83 ca 01	 or	 edx, 1
  007f8	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  007fe	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00802	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00805	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  0080a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00811	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00814	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00819	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0081c	e9 92 08 00 00	 jmp	 $LN35@Insert_hin

; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else

  00821	eb 66		 jmp	 SHORT $LN21@Insert_hin
$LN20@Insert_hin:

; 1737 : 					return (_Insert_at(true, _Next._Mynode(),

  00823	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00826	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  0082b	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv913[ebp], eax
  00831	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00834	50		 push	 eax
  00835	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00838	51		 push	 ecx
  00839	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  0083e	83 c4 04	 add	 esp, 4
  00841	50		 push	 eax
  00842	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR tv913[ebp]
  00848	52		 push	 edx
  00849	6a 01		 push	 1
  0084b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0084e	50		 push	 eax
  0084f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00852	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00857	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0085d	83 c9 01	 or	 ecx, 1
  00860	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00866	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0086a	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0086d	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00872	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00879	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0087c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00881	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00884	e9 2a 08 00 00	 jmp	 $LN35@Insert_hin
$LN21@Insert_hin:

; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else

  00889	eb 04		 jmp	 SHORT $LN9@Insert_hin
$LN18@Insert_hin:

; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence

  0088b	c6 45 d7 01	 mov	 BYTE PTR __Leftish$[ebp], 1
$LN9@Insert_hin:

; 1742 : 			}
; 1743 : 		else

  0088f	e9 6c 07 00 00	 jmp	 $LN5@Insert_hin
$LN6@Insert_hin:

; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())

  00894	8d 55 98	 lea	 edx, DWORD PTR $T8[ebp]
  00897	52		 push	 edx
  00898	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0089b	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::begin
  008a0	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv914[ebp], eax
  008a6	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR tv914[ebp]
  008ac	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv845[ebp], eax
  008b2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  008b6	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv845[ebp]
  008bc	51		 push	 ecx
  008bd	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  008c0	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  008c5	88 85 8f fe ff
	ff		 mov	 BYTE PTR tv915[ebp], al
  008cb	8a 95 8f fe ff
	ff		 mov	 dl, BYTE PTR tv915[ebp]
  008d1	88 55 a7	 mov	 BYTE PTR $T9[ebp], dl
  008d4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  008d8	8d 4d 98	 lea	 ecx, DWORD PTR $T8[ebp]
  008db	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  008e0	0f b6 45 a7	 movzx	 eax, BYTE PTR $T9[ebp]
  008e4	85 c0		 test	 eax, eax
  008e6	0f 84 df 00 00
	00		 je	 $LN22@Insert_hin

; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  008ec	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  008ef	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  008f4	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv916[ebp], eax
  008fa	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv916[ebp]
  00900	51		 push	 ecx
  00901	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00904	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00909	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv917[ebp], eax
  0090f	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  00912	52		 push	 edx
  00913	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00916	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  0091b	89 85 80 fe ff
	ff		 mov	 DWORD PTR tv918[ebp], eax
  00921	68 d4 06 00 00	 push	 1748			; 000006d4H
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0092b	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR tv917[ebp]
  00931	50		 push	 eax
  00932	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR tv918[ebp]
  00938	51		 push	 ecx
  00939	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0093c	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00941	8a 10		 mov	 dl, BYTE PTR [eax]
  00943	0f b6 c2	 movzx	 eax, dl
  00946	50		 push	 eax
  00947	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0094c	83 c4 14	 add	 esp, 20			; 00000014H
  0094f	88 85 7f fe ff
	ff		 mov	 BYTE PTR tv919[ebp], al
  00955	0f b6 8d 7f fe
	ff ff		 movzx	 ecx, BYTE PTR tv919[ebp]
  0095c	85 c9		 test	 ecx, ecx
  0095e	74 66		 je	 SHORT $LN24@Insert_hin

; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),

  00960	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00963	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00968	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv920[ebp], eax
  0096e	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00971	52		 push	 edx
  00972	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00975	50		 push	 eax
  00976	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  0097b	83 c4 04	 add	 esp, 4
  0097e	50		 push	 eax
  0097f	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR tv920[ebp]
  00985	51		 push	 ecx
  00986	6a 01		 push	 1
  00988	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0098b	52		 push	 edx
  0098c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0098f	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00994	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0099a	83 c8 01	 or	 eax, 1
  0099d	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  009a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  009a7	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  009aa	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  009af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  009b6	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  009b9	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  009be	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  009c1	e9 ed 06 00 00	 jmp	 $LN35@Insert_hin
$LN24@Insert_hin:

; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}

  009c6	e9 35 06 00 00	 jmp	 $LN5@Insert_hin
$LN22@Insert_hin:

; 1752 : 			else if (_Where == end())

  009cb	8d 4d 88	 lea	 ecx, DWORD PTR $T6[ebp]
  009ce	51		 push	 ecx
  009cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009d2	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::end
  009d7	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv921[ebp], eax
  009dd	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR tv921[ebp]
  009e3	89 95 70 fe ff
	ff		 mov	 DWORD PTR tv850[ebp], edx
  009e9	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  009ed	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv850[ebp]
  009f3	50		 push	 eax
  009f4	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  009f7	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  009fc	88 85 6f fe ff
	ff		 mov	 BYTE PTR tv922[ebp], al
  00a02	8a 8d 6f fe ff
	ff		 mov	 cl, BYTE PTR tv922[ebp]
  00a08	88 4d 97	 mov	 BYTE PTR $T7[ebp], cl
  00a0b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00a0f	8d 4d 88	 lea	 ecx, DWORD PTR $T6[ebp]
  00a12	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00a17	0f b6 55 97	 movzx	 edx, BYTE PTR $T7[ebp]
  00a1b	85 d2		 test	 edx, edx
  00a1d	0f 84 e3 00 00
	00		 je	 $LN25@Insert_hin

; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  00a23	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00a26	50		 push	 eax
  00a27	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a2a	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00a2f	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv923[ebp], eax
  00a35	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a38	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Rmost
  00a3d	89 85 64 fe ff
	ff		 mov	 DWORD PTR tv924[ebp], eax
  00a43	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv924[ebp]
  00a49	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a4b	52		 push	 edx
  00a4c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a4f	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00a54	89 85 60 fe ff
	ff		 mov	 DWORD PTR tv925[ebp], eax
  00a5a	68 db 06 00 00	 push	 1755			; 000006dbH
  00a5f	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00a64	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv923[ebp]
  00a6a	50		 push	 eax
  00a6b	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR tv925[ebp]
  00a71	51		 push	 ecx
  00a72	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a75	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00a7a	8a 10		 mov	 dl, BYTE PTR [eax]
  00a7c	0f b6 c2	 movzx	 eax, dl
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00a85	83 c4 14	 add	 esp, 20			; 00000014H
  00a88	88 85 5f fe ff
	ff		 mov	 BYTE PTR tv926[ebp], al
  00a8e	0f b6 8d 5f fe
	ff ff		 movzx	 ecx, BYTE PTR tv926[ebp]
  00a95	85 c9		 test	 ecx, ecx
  00a97	74 68		 je	 SHORT $LN27@Insert_hin

; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),

  00a99	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9c	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Rmost
  00aa1	89 85 58 fe ff
	ff		 mov	 DWORD PTR tv927[ebp], eax
  00aa7	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00aaa	52		 push	 edx
  00aab	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00aae	50		 push	 eax
  00aaf	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00ab4	83 c4 04	 add	 esp, 4
  00ab7	50		 push	 eax
  00ab8	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv927[ebp]
  00abe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ac0	52		 push	 edx
  00ac1	6a 00		 push	 0
  00ac3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ac6	50		 push	 eax
  00ac7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00aca	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00acf	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00ad5	83 c9 01	 or	 ecx, 1
  00ad8	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00ade	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00ae2	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00ae5	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00aea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00af1	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00af4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00af9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00afc	e9 b2 05 00 00	 jmp	 $LN35@Insert_hin
$LN27@Insert_hin:

; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),

  00b01	e9 fa 04 00 00	 jmp	 $LN5@Insert_hin
$LN25@Insert_hin:

; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  00b06	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00b09	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00b0e	89 85 54 fe ff
	ff		 mov	 DWORD PTR tv928[ebp], eax
  00b14	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR tv928[ebp]
  00b1a	52		 push	 edx
  00b1b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1e	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00b23	89 85 50 fe ff
	ff		 mov	 DWORD PTR tv929[ebp], eax
  00b29	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00b2c	50		 push	 eax
  00b2d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b30	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00b35	89 85 4c fe ff
	ff		 mov	 DWORD PTR tv930[ebp], eax
  00b3b	68 e0 06 00 00	 push	 1760			; 000006e0H
  00b40	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00b45	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00b4b	51		 push	 ecx
  00b4c	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR tv930[ebp]
  00b52	52		 push	 edx
  00b53	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b56	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00b5b	8a 00		 mov	 al, BYTE PTR [eax]
  00b5d	0f b6 c8	 movzx	 ecx, al
  00b60	51		 push	 ecx
  00b61	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00b66	83 c4 14	 add	 esp, 20			; 00000014H
  00b69	88 85 4b fe ff
	ff		 mov	 BYTE PTR tv931[ebp], al
  00b6f	0f b6 95 4b fe
	ff ff		 movzx	 edx, BYTE PTR tv931[ebp]
  00b76	85 d2		 test	 edx, edx
  00b78	0f 84 b8 01 00
	00		 je	 $LN28@Insert_hin
  00b7e	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00b81	50		 push	 eax
  00b82	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b85	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00b8a	89 85 44 fe ff
	ff		 mov	 DWORD PTR tv932[ebp], eax
  00b90	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00b93	51		 push	 ecx
  00b94	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00b97	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00b9c	89 85 40 fe ff
	ff		 mov	 DWORD PTR tv933[ebp], eax
  00ba2	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv933[ebp]
  00ba8	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator--
  00bad	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv934[ebp], eax
  00bb3	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv934[ebp]
  00bb9	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00bbe	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv935[ebp], eax
  00bc4	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR tv935[ebp]
  00bca	52		 push	 edx
  00bcb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bce	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00bd3	89 85 34 fe ff
	ff		 mov	 DWORD PTR tv936[ebp], eax
  00bd9	68 e3 06 00 00	 push	 1763			; 000006e3H
  00bde	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00be3	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv932[ebp]
  00be9	50		 push	 eax
  00bea	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv936[ebp]
  00bf0	51		 push	 ecx
  00bf1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf4	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00bf9	8a 10		 mov	 dl, BYTE PTR [eax]
  00bfb	0f b6 c2	 movzx	 eax, dl
  00bfe	50		 push	 eax
  00bff	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00c04	83 c4 14	 add	 esp, 20			; 00000014H
  00c07	88 85 33 fe ff
	ff		 mov	 BYTE PTR tv937[ebp], al
  00c0d	0f b6 8d 33 fe
	ff ff		 movzx	 ecx, BYTE PTR tv937[ebp]
  00c14	85 c9		 test	 ecx, ecx
  00c16	0f 84 1a 01 00
	00		 je	 $LN28@Insert_hin

; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  00c1c	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00c1f	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00c24	89 85 2c fe ff
	ff		 mov	 DWORD PTR tv938[ebp], eax
  00c2a	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR tv938[ebp]
  00c30	52		 push	 edx
  00c31	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Right
  00c36	83 c4 04	 add	 esp, 4
  00c39	89 85 28 fe ff
	ff		 mov	 DWORD PTR tv939[ebp], eax
  00c3f	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR tv939[ebp]
  00c45	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c47	51		 push	 ecx
  00c48	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Isnil
  00c4d	83 c4 04	 add	 esp, 4
  00c50	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv940[ebp], eax
  00c56	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR tv940[ebp]
  00c5c	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00c5f	85 c0		 test	 eax, eax
  00c61	74 68		 je	 SHORT $LN30@Insert_hin

; 1766 : 					return (_Insert_at(false, _Next._Mynode(),

  00c63	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00c66	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00c6b	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv941[ebp], eax
  00c71	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00c74	51		 push	 ecx
  00c75	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  00c78	52		 push	 edx
  00c79	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00c7e	83 c4 04	 add	 esp, 4
  00c81	50		 push	 eax
  00c82	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR tv941[ebp]
  00c88	50		 push	 eax
  00c89	6a 00		 push	 0
  00c8b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00c8e	51		 push	 ecx
  00c8f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00c92	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00c97	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00c9d	83 ca 01	 or	 edx, 1
  00ca0	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00ca6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00caa	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00cad	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00cb2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00cb9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00cbc	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00cc1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00cc4	e9 ea 03 00 00	 jmp	 $LN35@Insert_hin

; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else

  00cc9	eb 66		 jmp	 SHORT $LN31@Insert_hin
$LN30@Insert_hin:

; 1769 : 					return (_Insert_at(true, _Where._Mynode(),

  00ccb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00cce	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00cd3	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv942[ebp], eax
  00cd9	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00cdc	50		 push	 eax
  00cdd	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00ce0	51		 push	 ecx
  00ce1	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00ce6	83 c4 04	 add	 esp, 4
  00ce9	50		 push	 eax
  00cea	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR tv942[ebp]
  00cf0	52		 push	 edx
  00cf1	6a 01		 push	 1
  00cf3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00cf6	50		 push	 eax
  00cf7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00cfa	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00cff	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00d05	83 c9 01	 or	 ecx, 1
  00d08	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00d0e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00d12	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00d15	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00d1a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00d21	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00d24	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00d29	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00d2c	e9 82 03 00 00	 jmp	 $LN35@Insert_hin
$LN31@Insert_hin:

; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),

  00d31	e9 ca 02 00 00	 jmp	 $LN5@Insert_hin
$LN28@Insert_hin:

; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()

  00d36	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  00d39	52		 push	 edx
  00d3a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d3d	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00d42	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv943[ebp], eax
  00d48	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00d4b	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00d50	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv944[ebp], eax
  00d56	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR tv944[ebp]
  00d5c	50		 push	 eax
  00d5d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d60	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00d65	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv945[ebp], eax
  00d6b	68 ed 06 00 00	 push	 1773			; 000006edH
  00d70	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00d75	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv943[ebp]
  00d7b	51		 push	 ecx
  00d7c	8b 95 10 fe ff
	ff		 mov	 edx, DWORD PTR tv945[ebp]
  00d82	52		 push	 edx
  00d83	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d86	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00d8b	8a 00		 mov	 al, BYTE PTR [eax]
  00d8d	0f b6 c8	 movzx	 ecx, al
  00d90	51		 push	 ecx
  00d91	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00d96	83 c4 14	 add	 esp, 20			; 00000014H
  00d99	88 85 0f fe ff
	ff		 mov	 BYTE PTR tv946[ebp], al
  00d9f	0f b6 95 0f fe
	ff ff		 movzx	 edx, BYTE PTR tv946[ebp]
  00da6	85 d2		 test	 edx, edx
  00da8	0f 84 fa 00 00
	00		 je	 $LN40@Insert_hin
  00dae	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00db4	50		 push	 eax
  00db5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00db8	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::end
  00dbd	89 85 08 fe ff
	ff		 mov	 DWORD PTR tv947[ebp], eax
  00dc3	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv947[ebp]
  00dc9	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv864[ebp], ecx
  00dcf	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  00dd3	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00dd9	83 ca 04	 or	 edx, 4
  00ddc	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00de2	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00de5	50		 push	 eax
  00de6	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00de9	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00dee	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv951[ebp], eax
  00df4	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv951[ebp]
  00dfa	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator++
  00dff	89 85 fc fd ff
	ff		 mov	 DWORD PTR tv952[ebp], eax
  00e05	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv864[ebp]
  00e0b	51		 push	 ecx
  00e0c	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv952[ebp]
  00e12	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator==
  00e17	88 85 fb fd ff
	ff		 mov	 BYTE PTR tv953[ebp], al
  00e1d	0f b6 95 fb fd
	ff ff		 movzx	 edx, BYTE PTR tv953[ebp]
  00e24	85 d2		 test	 edx, edx
  00e26	75 74		 jne	 SHORT $LN39@Insert_hin
  00e28	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00e2b	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00e30	89 85 f4 fd ff
	ff		 mov	 DWORD PTR tv954[ebp], eax
  00e36	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR tv954[ebp]
  00e3c	50		 push	 eax
  00e3d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e40	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Key
  00e45	89 85 f0 fd ff
	ff		 mov	 DWORD PTR tv955[ebp], eax
  00e4b	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00e4e	51		 push	 ecx
  00e4f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e52	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Kfn
  00e57	89 85 ec fd ff
	ff		 mov	 DWORD PTR tv956[ebp], eax
  00e5d	68 f0 06 00 00	 push	 1776			; 000006f0H
  00e62	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00e67	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR tv955[ebp]
  00e6d	52		 push	 edx
  00e6e	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR tv956[ebp]
  00e74	50		 push	 eax
  00e75	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e78	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Getcomp
  00e7d	8a 08		 mov	 cl, BYTE PTR [eax]
  00e7f	0f b6 d1	 movzx	 edx, cl
  00e82	52		 push	 edx
  00e83	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00e88	83 c4 14	 add	 esp, 20			; 00000014H
  00e8b	88 85 eb fd ff
	ff		 mov	 BYTE PTR tv957[ebp], al
  00e91	0f b6 85 eb fd
	ff ff		 movzx	 eax, BYTE PTR tv957[ebp]
  00e98	85 c0		 test	 eax, eax
  00e9a	74 0c		 je	 SHORT $LN40@Insert_hin
$LN39@Insert_hin:
  00e9c	c7 85 e4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv740[ebp], 1
  00ea6	eb 0a		 jmp	 SHORT $LN41@Insert_hin
$LN40@Insert_hin:
  00ea8	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv740[ebp], 0
$LN41@Insert_hin:
  00eb2	8a 8d e4 fd ff
	ff		 mov	 cl, BYTE PTR tv740[ebp]
  00eb8	88 4d 87	 mov	 BYTE PTR $T5[ebp], cl
  00ebb	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00ec2	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00ec8	83 e2 04	 and	 edx, 4
  00ecb	74 12		 je	 SHORT $LN57@Insert_hin
  00ecd	83 a5 64 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00ed4	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00eda	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN57@Insert_hin:
  00edf	0f b6 45 87	 movzx	 eax, BYTE PTR $T5[ebp]
  00ee3	85 c0		 test	 eax, eax
  00ee5	0f 84 15 01 00
	00		 je	 $LN5@Insert_hin

; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  00eeb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00eee	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00ef3	89 85 e0 fd ff
	ff		 mov	 DWORD PTR tv958[ebp], eax
  00ef9	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR tv958[ebp]
  00eff	51		 push	 ecx
  00f00	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Right
  00f05	83 c4 04	 add	 esp, 4
  00f08	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv959[ebp], eax
  00f0e	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR tv959[ebp]
  00f14	8b 02		 mov	 eax, DWORD PTR [edx]
  00f16	50		 push	 eax
  00f17	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Isnil
  00f1c	83 c4 04	 add	 esp, 4
  00f1f	89 85 d8 fd ff
	ff		 mov	 DWORD PTR tv960[ebp], eax
  00f25	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR tv960[ebp]
  00f2b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00f2e	85 d2		 test	 edx, edx
  00f30	74 68		 je	 SHORT $LN33@Insert_hin

; 1779 : 					return (_Insert_at(false, _Where._Mynode(),

  00f32	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00f35	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00f3a	89 85 d4 fd ff
	ff		 mov	 DWORD PTR tv961[ebp], eax
  00f40	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00f43	50		 push	 eax
  00f44	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00f47	51		 push	 ecx
  00f48	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00f4d	83 c4 04	 add	 esp, 4
  00f50	50		 push	 eax
  00f51	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR tv961[ebp]
  00f57	52		 push	 edx
  00f58	6a 00		 push	 0
  00f5a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00f5d	50		 push	 eax
  00f5e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00f61	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00f66	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00f6c	83 c9 01	 or	 ecx, 1
  00f6f	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00f75	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00f79	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00f7c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00f81	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00f88	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00f8b	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00f90	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00f93	e9 1b 01 00 00	 jmp	 $LN35@Insert_hin

; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else

  00f98	eb 66		 jmp	 SHORT $LN5@Insert_hin
$LN33@Insert_hin:

; 1782 : 					return (_Insert_at(true, _Next._Mynode(),

  00f9a	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00f9d	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Mynode
  00fa2	89 85 d0 fd ff
	ff		 mov	 DWORD PTR tv962[ebp], eax
  00fa8	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00fab	52		 push	 edx
  00fac	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00faf	50		 push	 eax
  00fb0	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  00fb5	83 c4 04	 add	 esp, 4
  00fb8	50		 push	 eax
  00fb9	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR tv962[ebp]
  00fbf	51		 push	 ecx
  00fc0	6a 01		 push	 1
  00fc2	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00fc5	52		 push	 edx
  00fc6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00fc9	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  00fce	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00fd4	83 c8 01	 or	 eax, 1
  00fd7	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00fdd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00fe1	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00fe4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00fe9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00ff0	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00ff3	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  00ff8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ffb	e9 b3 00 00 00	 jmp	 $LN35@Insert_hin
$LN5@Insert_hin:
  01000	eb 1b		 jmp	 SHORT $LN42@Insert_hin
__catch$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$0:

; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);

  01002	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  01005	51		 push	 ecx
  01006	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01009	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Destroy_if_not_nil

; 1788 : 		_RERAISE;

  0100e	6a 00		 push	 0
  01010	6a 00		 push	 0
  01012	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1789 : 		_CATCH_END

  01017	b8 00 00 00 00	 mov	 eax, $LN60@Insert_hin
  0101c	c3		 ret	 0
$LN42@Insert_hin:
  0101d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  01024	eb 07		 jmp	 SHORT __tryend$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$1
$LN60@Insert_hin:
  01026	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$1:

; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,

  0102d	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  01030	52		 push	 edx
  01031	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  01034	50		 push	 eax
  01035	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &>
  0103a	83 c4 04	 add	 esp, 4
  0103d	50		 push	 eax
  0103e	0f b6 4d d7	 movzx	 ecx, BYTE PTR __Leftish$[ebp]
  01042	51		 push	 ecx
  01043	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  01049	52		 push	 edx
  0104a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0104d	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
  01052	89 85 cc fd ff
	ff		 mov	 DWORD PTR tv963[ebp], eax
  01058	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR tv963[ebp]
  0105e	89 85 c8 fd ff
	ff		 mov	 DWORD PTR tv875[ebp], eax
  01064	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  01068	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR tv875[ebp]
  0106e	51		 push	 ecx
  0106f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01072	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  01077	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0107d	83 ca 01	 or	 edx, 1
  01080	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  01086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0108a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  01090	e8 00 00 00 00	 call	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  01095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  01099	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0109c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  010a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  010a8	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  010ab	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
  010b0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN35@Insert_hin:

; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}

  010b3	52		 push	 edx
  010b4	8b cd		 mov	 ecx, ebp
  010b6	50		 push	 eax
  010b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN90@Insert_hin
  010bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  010c2	58		 pop	 eax
  010c3	5a		 pop	 edx
  010c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  010c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  010ce	59		 pop	 ecx
  010cf	5f		 pop	 edi
  010d0	5e		 pop	 esi
  010d1	5b		 pop	 ebx
  010d2	81 c4 38 02 00
	00		 add	 esp, 568		; 00000238H
  010d8	3b ec		 cmp	 ebp, esp
  010da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010df	8b e5		 mov	 esp, ebp
  010e1	5d		 pop	 ebp
  010e2	c2 18 00	 ret	 24			; 00000018H
  010e5	0f 1f 00	 npad	 3
$LN90@Insert_hin:
  010e8	01 00 00 00	 DD	 1
  010ec	00 00 00 00	 DD	 $LN89@Insert_hin
$LN89@Insert_hin:
  010f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  010f4	0c 00 00 00	 DD	 12			; 0000000cH
  010f8	00 00 00 00	 DD	 $LN87@Insert_hin
$LN87@Insert_hin:
  010fc	5f		 DB	 95			; 0000005fH
  010fd	4e		 DB	 78			; 0000004eH
  010fe	65		 DB	 101			; 00000065H
  010ff	78		 DB	 120			; 00000078H
  01100	74		 DB	 116			; 00000074H
  01101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$2:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$3:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$5:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T14[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$6:
  00018	8d 4d b8	 lea	 ecx, DWORD PTR $T12[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$7:
  00020	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00026	83 e0 02	 and	 eax, 2
  00029	0f 84 0f 00 00
	00		 je	 $LN51@Insert_hin
  0002f	83 a5 64 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00036	8d 4d a8	 lea	 ecx, DWORD PTR $T10[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN51@Insert_hin:
  0003e	c3		 ret	 0
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$8:
  0003f	8d 4d 98	 lea	 ecx, DWORD PTR $T8[ebp]
  00042	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$9:
  00047	8d 4d 88	 lea	 ecx, DWORD PTR $T6[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$10:
  0004f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00055	83 e0 04	 and	 eax, 4
  00058	0f 84 12 00 00
	00		 je	 $LN56@Insert_hin
  0005e	83 a5 64 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00065	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
$LN56@Insert_hin:
  00070	c3		 ret	 0
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z$11:
  00071	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00077	e9 00 00 00 00	 jmp	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z:
  0007c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00080	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00083	8b 8a c4 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-572]
  00089	33 c8		 xor	 ecx, eax
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z
  00095	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> *>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv92 = -28						; size = 4
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	c7 45 e4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-28], -858993460 ; ccccccccH
  0001f	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  00026	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode0
  0004c	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0004f	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00058	83 c4 04	 add	 esp, 4
  0005b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 891  : 		this->_Isnil(_Pnode) = false;

  0005e	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  00067	83 c4 04	 add	 esp, 4
  0006a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 892  : 
; 893  : 		_TRY_BEGIN

  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 894  : 		this->_Getal().construct(

  00074	8b 55 e8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myval
  0007d	83 c4 04	 add	 esp, 4
  00080	89 45 e4	 mov	 DWORD PTR tv92[ebp], eax
  00083	8b 45 10	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00099	83 c4 04	 add	 esp, 4
  0009c	50		 push	 eax
  0009d	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  000a6	83 c4 04	 add	 esp, 4
  000a9	50		 push	 eax
  000aa	8b 45 e4	 mov	 eax, DWORD PTR tv92[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  000bf	8b c8		 mov	 ecx, eax
  000c1	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  000c6	eb 1b		 jmp	 SHORT $LN4@Buynode
__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:

; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);

  000c8	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Freenode0

; 899  : 		_RERAISE;

  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	e8 00 00 00 00	 call	 __CxxThrowException@8

; 900  : 		_CATCH_END

  000dd	b8 00 00 00 00	 mov	 eax, $LN7@Buynode
  000e2	c3		 ret	 0
$LN4@Buynode:
  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ea	eb 07		 jmp	 SHORT __tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
$LN7@Buynode:
  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1:

; 901  : 
; 902  : 		return (_Pnode);

  000f3	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:

; 903  : 		}

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	83 c4 1c	 add	 esp, 28			; 0000001cH
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv875 = -568						; size = 4
tv963 = -564						; size = 4
tv962 = -560						; size = 4
tv961 = -556						; size = 4
tv960 = -552						; size = 4
tv959 = -548						; size = 4
tv958 = -544						; size = 4
tv740 = -540						; size = 4
tv957 = -533						; size = 1
tv956 = -532						; size = 4
tv955 = -528						; size = 4
tv954 = -524						; size = 4
tv953 = -517						; size = 1
tv952 = -516						; size = 4
tv951 = -512						; size = 4
tv864 = -508						; size = 4
tv947 = -504						; size = 4
tv946 = -497						; size = 1
tv945 = -496						; size = 4
tv944 = -492						; size = 4
tv943 = -488						; size = 4
tv942 = -484						; size = 4
tv941 = -480						; size = 4
tv940 = -476						; size = 4
tv939 = -472						; size = 4
tv938 = -468						; size = 4
tv937 = -461						; size = 1
tv936 = -460						; size = 4
tv935 = -456						; size = 4
tv934 = -452						; size = 4
tv933 = -448						; size = 4
tv932 = -444						; size = 4
tv931 = -437						; size = 1
tv930 = -436						; size = 4
tv929 = -432						; size = 4
tv928 = -428						; size = 4
tv927 = -424						; size = 4
tv926 = -417						; size = 1
tv925 = -416						; size = 4
tv924 = -412						; size = 4
tv923 = -408						; size = 4
tv922 = -401						; size = 1
tv850 = -400						; size = 4
tv921 = -396						; size = 4
tv920 = -392						; size = 4
tv919 = -385						; size = 1
tv918 = -384						; size = 4
tv917 = -380						; size = 4
tv916 = -376						; size = 4
tv915 = -369						; size = 1
tv845 = -368						; size = 4
tv914 = -364						; size = 4
tv913 = -360						; size = 4
tv912 = -356						; size = 4
tv911 = -352						; size = 4
tv910 = -348						; size = 4
tv909 = -344						; size = 4
tv416 = -340						; size = 4
tv908 = -333						; size = 1
tv907 = -332						; size = 4
tv906 = -328						; size = 4
tv905 = -324						; size = 4
tv904 = -317						; size = 1
tv903 = -316						; size = 4
tv902 = -312						; size = 4
tv835 = -308						; size = 4
tv898 = -304						; size = 4
tv897 = -297						; size = 1
tv896 = -296						; size = 4
tv895 = -292						; size = 4
tv894 = -288						; size = 4
tv893 = -284						; size = 4
tv892 = -280						; size = 4
tv891 = -276						; size = 4
tv890 = -272						; size = 4
tv889 = -268						; size = 4
tv888 = -261						; size = 1
tv887 = -260						; size = 4
tv886 = -256						; size = 4
tv885 = -252						; size = 4
tv884 = -248						; size = 4
tv883 = -244						; size = 4
tv882 = -237						; size = 1
tv881 = -236						; size = 4
tv880 = -232						; size = 4
tv879 = -228						; size = 4
tv92 = -224						; size = 4
tv181 = -217						; size = 1
tv233 = -216						; size = 4
tv314 = -212						; size = 4
tv330 = -208						; size = 4
tv433 = -201						; size = 1
tv821 = -200						; size = 4
tv449 = -196						; size = 4
tv505 = -192						; size = 4
tv557 = -185						; size = 1
tv638 = -184						; size = 4
tv654 = -180						; size = 4
tv757 = -176						; size = 4
tv773 = -169						; size = 1
tv816 = -168						; size = 4
tv793 = -164						; size = 4
tv66 = -160						; size = 4
$T2 = -156						; size = 4
$T3 = -152						; size = 16
$T4 = -136						; size = 12
$T5 = -121						; size = 1
$T6 = -120						; size = 12
$T7 = -105						; size = 1
$T8 = -104						; size = 12
$T9 = -89						; size = 1
$T10 = -88						; size = 12
$T11 = -73						; size = 1
$T12 = -72						; size = 12
$T13 = -57						; size = 1
$T14 = -56						; size = 12
$T15 = -42						; size = 1
__Leftish$ = -41					; size = 1
__Next$ = -36						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
__Newnode$ = 28						; size = 4
??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>, COMDAT
; _this$ = ecx

; 1683 : 		{	// try to insert node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd c8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-568]
  00022	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00046	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1684 : 		const_iterator _Next;

  00057	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0005a	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
  0005f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence

  00063	c6 45 d7 00	 mov	 BYTE PTR __Leftish$[ebp], 0

; 1686 : 
; 1687 : 		_TRY_BEGIN

  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())

  0006b	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00073	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Get_data
  00081	39 85 60 ff ff
	ff		 cmp	 DWORD PTR tv66[ebp], eax
  00087	74 21		 je	 SHORT $LN3@Insert_hin

; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");

  00089	8b f4		 mov	 esi, esp
  0008b	68 9b 06 00 00	 push	 1691			; 0000069bH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@MHOKKPFH@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Insert_hin:

; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)

  000aa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::size
  000b2	85 c0		 test	 eax, eax
  000b4	75 61		 jne	 SHORT $LN4@Insert_hin

; 1695 : 			return (_Insert_at(true, this->_Myhead(),

  000b6	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  000c3	83 c4 04	 add	 esp, 4
  000c6	50		 push	 eax
  000c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  000cf	8b 10		 mov	 edx, DWORD PTR [eax]
  000d1	52		 push	 edx
  000d2	6a 01		 push	 1
  000d4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  000e0	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  000e6	83 c9 01	 or	 ecx, 1
  000e9	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  000ef	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000f3	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  000f6	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00102	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00105	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  0010a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0010d	e9 a1 0f 00 00	 jmp	 $LN35@Insert_hin
  00112	e9 e9 0e 00 00	 jmp	 $LN5@Insert_hin
$LN4@Insert_hin:

; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)

  00117	33 d2		 xor	 edx, edx
  00119	0f 84 75 07 00
	00		 je	 $LN6@Insert_hin

; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())

  0011f	8d 45 c8	 lea	 eax, DWORD PTR $T14[ebp]
  00122	50		 push	 eax
  00123	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::begin
  0012b	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv793[ebp], eax
  00131	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv793[ebp]
  00137	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv816[ebp], ecx
  0013d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00141	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv816[ebp]
  00147	52		 push	 edx
  00148	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0014b	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  00150	88 85 57 ff ff
	ff		 mov	 BYTE PTR tv773[ebp], al
  00156	8a 85 57 ff ff
	ff		 mov	 al, BYTE PTR tv773[ebp]
  0015c	88 45 d6	 mov	 BYTE PTR $T15[ebp], al
  0015f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00163	8d 4d c8	 lea	 ecx, DWORD PTR $T14[ebp]
  00166	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  0016b	0f b6 4d d6	 movzx	 ecx, BYTE PTR $T15[ebp]
  0016f	85 c9		 test	 ecx, ecx
  00171	0f 84 e3 00 00
	00		 je	 $LN8@Insert_hin

; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00177	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  0017a	52		 push	 edx
  0017b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00183	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv757[ebp], eax
  00189	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0018c	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00191	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv654[ebp], eax
  00197	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv654[ebp]
  0019d	50		 push	 eax
  0019e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  001a6	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv638[ebp], eax
  001ac	68 a6 06 00 00	 push	 1702			; 000006a6H
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  001b6	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv757[ebp]
  001bc	51		 push	 ecx
  001bd	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv638[ebp]
  001c3	52		 push	 edx
  001c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  001cc	8a 00		 mov	 al, BYTE PTR [eax]
  001ce	0f b6 c8	 movzx	 ecx, al
  001d1	51		 push	 ecx
  001d2	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  001d7	83 c4 14	 add	 esp, 20			; 00000014H
  001da	88 85 47 ff ff
	ff		 mov	 BYTE PTR tv557[ebp], al
  001e0	0f b6 95 47 ff
	ff ff		 movzx	 edx, BYTE PTR tv557[ebp]
  001e7	85 d2		 test	 edx, edx
  001e9	75 66		 jne	 SHORT $LN10@Insert_hin

; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),

  001eb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  001ee	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  001f3	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv505[ebp], eax
  001f9	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  001fc	50		 push	 eax
  001fd	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00200	51		 push	 ecx
  00201	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00206	83 c4 04	 add	 esp, 4
  00209	50		 push	 eax
  0020a	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR tv505[ebp]
  00210	52		 push	 edx
  00211	6a 01		 push	 1
  00213	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00216	50		 push	 eax
  00217	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  0021f	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00225	83 c9 01	 or	 ecx, 1
  00228	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0022e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00232	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00235	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  0023a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00241	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00244	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00249	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0024c	e9 62 0e 00 00	 jmp	 $LN35@Insert_hin
$LN10@Insert_hin:

; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence

  00251	c6 45 d7 01	 mov	 BYTE PTR __Leftish$[ebp], 1
  00255	e9 35 06 00 00	 jmp	 $LN9@Insert_hin
$LN8@Insert_hin:

; 1706 : 				}
; 1707 : 			else if (_Where == end())

  0025a	8d 55 b8	 lea	 edx, DWORD PTR $T12[ebp]
  0025d	52		 push	 edx
  0025e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00261	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::end
  00266	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv449[ebp], eax
  0026c	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv449[ebp]
  00272	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv821[ebp], eax
  00278	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0027c	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv821[ebp]
  00282	51		 push	 ecx
  00283	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00286	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  0028b	88 85 37 ff ff
	ff		 mov	 BYTE PTR tv433[ebp], al
  00291	8a 95 37 ff ff
	ff		 mov	 dl, BYTE PTR tv433[ebp]
  00297	88 55 c7	 mov	 BYTE PTR $T13[ebp], dl
  0029a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0029e	8d 4d b8	 lea	 ecx, DWORD PTR $T12[ebp]
  002a1	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  002a6	0f b6 45 c7	 movzx	 eax, BYTE PTR $T13[ebp]
  002aa	85 c0		 test	 eax, eax
  002ac	0f 84 e3 00 00
	00		 je	 $LN11@Insert_hin

; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),

  002b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002b5	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  002ba	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv330[ebp], eax
  002c0	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv330[ebp]
  002c6	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c8	52		 push	 edx
  002c9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002cc	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  002d1	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  002d7	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  002da	50		 push	 eax
  002db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002de	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  002e3	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv233[ebp], eax
  002e9	68 ae 06 00 00	 push	 1710			; 000006aeH
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  002f3	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv314[ebp]
  002f9	51		 push	 ecx
  002fa	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv233[ebp]
  00300	52		 push	 edx
  00301	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00304	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00309	8a 00		 mov	 al, BYTE PTR [eax]
  0030b	0f b6 c8	 movzx	 ecx, al
  0030e	51		 push	 ecx
  0030f	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00314	83 c4 14	 add	 esp, 20			; 00000014H
  00317	88 85 27 ff ff
	ff		 mov	 BYTE PTR tv181[ebp], al
  0031d	0f b6 95 27 ff
	ff ff		 movzx	 edx, BYTE PTR tv181[ebp]
  00324	85 d2		 test	 edx, edx
  00326	75 68		 jne	 SHORT $LN13@Insert_hin

; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),

  00328	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  00330	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  00336	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00339	50		 push	 eax
  0033a	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0033d	51		 push	 ecx
  0033e	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00343	83 c4 04	 add	 esp, 4
  00346	50		 push	 eax
  00347	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv92[ebp]
  0034d	8b 02		 mov	 eax, DWORD PTR [edx]
  0034f	50		 push	 eax
  00350	6a 00		 push	 0
  00352	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00355	51		 push	 ecx
  00356	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00359	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  0035e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00364	83 ca 01	 or	 edx, 1
  00367	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0036d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00371	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00374	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00379	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00380	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00383	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00388	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0038b	e9 23 0d 00 00	 jmp	 $LN35@Insert_hin
$LN13@Insert_hin:

; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00390	e9 fa 04 00 00	 jmp	 $LN9@Insert_hin
$LN11@Insert_hin:

; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),

  00395	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00398	50		 push	 eax
  00399	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0039c	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  003a1	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv879[ebp], eax
  003a7	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  003aa	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  003af	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv880[ebp], eax
  003b5	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv880[ebp]
  003bb	51		 push	 ecx
  003bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003bf	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  003c4	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv881[ebp], eax
  003ca	68 b3 06 00 00	 push	 1715			; 000006b3H
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  003d4	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv879[ebp]
  003da	52		 push	 edx
  003db	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv881[ebp]
  003e1	50		 push	 eax
  003e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003e5	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  003ea	8a 08		 mov	 cl, BYTE PTR [eax]
  003ec	0f b6 d1	 movzx	 edx, cl
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  003f5	83 c4 14	 add	 esp, 20			; 00000014H
  003f8	88 85 13 ff ff
	ff		 mov	 BYTE PTR tv882[ebp], al
  003fe	0f b6 85 13 ff
	ff ff		 movzx	 eax, BYTE PTR tv882[ebp]
  00405	85 c0		 test	 eax, eax
  00407	0f 85 b8 01 00
	00		 jne	 $LN14@Insert_hin
  0040d	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00410	51		 push	 ecx
  00411	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00414	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00419	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv883[ebp], eax
  0041f	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv883[ebp]
  00425	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
  0042a	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv884[ebp], eax
  00430	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv884[ebp]
  00436	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  0043b	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv885[ebp], eax
  00441	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv885[ebp]
  00447	52		 push	 edx
  00448	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0044b	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00450	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv886[ebp], eax
  00456	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00459	50		 push	 eax
  0045a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0045d	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00462	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv887[ebp], eax
  00468	68 b6 06 00 00	 push	 1718			; 000006b6H
  0046d	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00472	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv886[ebp]
  00478	51		 push	 ecx
  00479	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR tv887[ebp]
  0047f	52		 push	 edx
  00480	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00483	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00488	8a 00		 mov	 al, BYTE PTR [eax]
  0048a	0f b6 c8	 movzx	 ecx, al
  0048d	51		 push	 ecx
  0048e	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00493	83 c4 14	 add	 esp, 20			; 00000014H
  00496	88 85 fb fe ff
	ff		 mov	 BYTE PTR tv888[ebp], al
  0049c	0f b6 95 fb fe
	ff ff		 movzx	 edx, BYTE PTR tv888[ebp]
  004a3	85 d2		 test	 edx, edx
  004a5	0f 85 1a 01 00
	00		 jne	 $LN14@Insert_hin

; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  004ab	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  004ae	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  004b3	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv889[ebp], eax
  004b9	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR tv889[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  004c5	83 c4 04	 add	 esp, 4
  004c8	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv890[ebp], eax
  004ce	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv890[ebp]
  004d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d6	52		 push	 edx
  004d7	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  004dc	83 c4 04	 add	 esp, 4
  004df	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv891[ebp], eax
  004e5	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv891[ebp]
  004eb	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004ee	85 c9		 test	 ecx, ecx
  004f0	74 68		 je	 SHORT $LN16@Insert_hin

; 1721 : 					return (_Insert_at(false, _Next._Mynode(),

  004f2	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  004f5	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  004fa	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv892[ebp], eax
  00500	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00503	52		 push	 edx
  00504	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00507	50		 push	 eax
  00508	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  0050d	83 c4 04	 add	 esp, 4
  00510	50		 push	 eax
  00511	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv892[ebp]
  00517	51		 push	 ecx
  00518	6a 00		 push	 0
  0051a	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0051d	52		 push	 edx
  0051e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00521	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00526	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0052c	83 c8 01	 or	 eax, 1
  0052f	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00535	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00539	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0053c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00541	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00548	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0054b	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00550	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00553	e9 5b 0b 00 00	 jmp	 $LN35@Insert_hin

; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else

  00558	eb 66		 jmp	 SHORT $LN17@Insert_hin
$LN16@Insert_hin:

; 1724 : 					return (_Insert_at(true, _Where._Mynode(),

  0055a	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0055d	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00562	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv893[ebp], eax
  00568	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0056b	51		 push	 ecx
  0056c	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  0056f	52		 push	 edx
  00570	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00575	83 c4 04	 add	 esp, 4
  00578	50		 push	 eax
  00579	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv893[ebp]
  0057f	50		 push	 eax
  00580	6a 01		 push	 1
  00582	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00585	51		 push	 ecx
  00586	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00589	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  0058e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00594	83 ca 01	 or	 edx, 1
  00597	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0059d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  005a1	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  005a4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  005a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  005b0	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  005b3	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  005b8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  005bb	e9 f3 0a 00 00	 jmp	 $LN35@Insert_hin
$LN17@Insert_hin:

; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),

  005c0	e9 ca 02 00 00	 jmp	 $LN9@Insert_hin
$LN14@Insert_hin:

; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()

  005c5	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  005c8	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  005cd	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv894[ebp], eax
  005d3	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv894[ebp]
  005d9	50		 push	 eax
  005da	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005dd	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  005e2	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv895[ebp], eax
  005e8	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  005eb	51		 push	 ecx
  005ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005ef	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  005f4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv896[ebp], eax
  005fa	68 c0 06 00 00	 push	 1728			; 000006c0H
  005ff	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00604	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv895[ebp]
  0060a	52		 push	 edx
  0060b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR tv896[ebp]
  00611	50		 push	 eax
  00612	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00615	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  0061a	8a 08		 mov	 cl, BYTE PTR [eax]
  0061c	0f b6 d1	 movzx	 edx, cl
  0061f	52		 push	 edx
  00620	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00625	83 c4 14	 add	 esp, 20			; 00000014H
  00628	88 85 d7 fe ff
	ff		 mov	 BYTE PTR tv897[ebp], al
  0062e	0f b6 85 d7 fe
	ff ff		 movzx	 eax, BYTE PTR tv897[ebp]
  00635	85 c0		 test	 eax, eax
  00637	0f 85 f7 00 00
	00		 jne	 $LN37@Insert_hin
  0063d	8d 4d a8	 lea	 ecx, DWORD PTR $T10[ebp]
  00640	51		 push	 ecx
  00641	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00644	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::end
  00649	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv898[ebp], eax
  0064f	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR tv898[ebp]
  00655	89 95 cc fe ff
	ff		 mov	 DWORD PTR tv835[ebp], edx
  0065b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0065f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00665	83 c8 02	 or	 eax, 2
  00668	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0066e	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00671	51		 push	 ecx
  00672	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00675	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  0067a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv902[ebp], eax
  00680	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR tv902[ebp]
  00686	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator++
  0068b	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv903[ebp], eax
  00691	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR tv835[ebp]
  00697	52		 push	 edx
  00698	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv903[ebp]
  0069e	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  006a3	88 85 c3 fe ff
	ff		 mov	 BYTE PTR tv904[ebp], al
  006a9	0f b6 85 c3 fe
	ff ff		 movzx	 eax, BYTE PTR tv904[ebp]
  006b0	85 c0		 test	 eax, eax
  006b2	75 74		 jne	 SHORT $LN36@Insert_hin
  006b4	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  006b7	51		 push	 ecx
  006b8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006bb	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  006c0	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv905[ebp], eax
  006c6	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  006c9	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  006ce	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv906[ebp], eax
  006d4	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR tv906[ebp]
  006da	52		 push	 edx
  006db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006de	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  006e3	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv907[ebp], eax
  006e9	68 c3 06 00 00	 push	 1731			; 000006c3H
  006ee	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  006f3	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv905[ebp]
  006f9	50		 push	 eax
  006fa	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv907[ebp]
  00700	51		 push	 ecx
  00701	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00704	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00709	8a 10		 mov	 dl, BYTE PTR [eax]
  0070b	0f b6 c2	 movzx	 eax, dl
  0070e	50		 push	 eax
  0070f	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00714	83 c4 14	 add	 esp, 20			; 00000014H
  00717	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv908[ebp], al
  0071d	0f b6 8d b3 fe
	ff ff		 movzx	 ecx, BYTE PTR tv908[ebp]
  00724	85 c9		 test	 ecx, ecx
  00726	75 0c		 jne	 SHORT $LN37@Insert_hin
$LN36@Insert_hin:
  00728	c7 85 ac fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv416[ebp], 1
  00732	eb 0a		 jmp	 SHORT $LN38@Insert_hin
$LN37@Insert_hin:
  00734	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv416[ebp], 0
$LN38@Insert_hin:
  0073e	8a 95 ac fe ff
	ff		 mov	 dl, BYTE PTR tv416[ebp]
  00744	88 55 b7	 mov	 BYTE PTR $T11[ebp], dl
  00747	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0074e	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00754	83 e0 02	 and	 eax, 2
  00757	74 0f		 je	 SHORT $LN52@Insert_hin
  00759	83 a5 64 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00760	8d 4d a8	 lea	 ecx, DWORD PTR $T10[ebp]
  00763	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN52@Insert_hin:
  00768	0f b6 4d b7	 movzx	 ecx, BYTE PTR $T11[ebp]
  0076c	85 c9		 test	 ecx, ecx
  0076e	0f 84 17 01 00
	00		 je	 $LN18@Insert_hin

; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  00774	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00777	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  0077c	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv909[ebp], eax
  00782	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv909[ebp]
  00788	52		 push	 edx
  00789	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  0078e	83 c4 04	 add	 esp, 4
  00791	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv910[ebp], eax
  00797	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv910[ebp]
  0079d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0079f	51		 push	 ecx
  007a0	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  007a5	83 c4 04	 add	 esp, 4
  007a8	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv911[ebp], eax
  007ae	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv911[ebp]
  007b4	0f be 02	 movsx	 eax, BYTE PTR [edx]
  007b7	85 c0		 test	 eax, eax
  007b9	74 68		 je	 SHORT $LN20@Insert_hin

; 1734 : 					return (_Insert_at(false, _Where._Mynode(),

  007bb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  007be	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  007c3	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv912[ebp], eax
  007c9	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  007cc	51		 push	 ecx
  007cd	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  007d0	52		 push	 edx
  007d1	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  007d6	83 c4 04	 add	 esp, 4
  007d9	50		 push	 eax
  007da	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv912[ebp]
  007e0	50		 push	 eax
  007e1	6a 00		 push	 0
  007e3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  007e6	51		 push	 ecx
  007e7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007ea	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  007ef	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  007f5	83 ca 01	 or	 edx, 1
  007f8	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  007fe	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00802	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00805	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  0080a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00811	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00814	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00819	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0081c	e9 92 08 00 00	 jmp	 $LN35@Insert_hin

; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else

  00821	eb 66		 jmp	 SHORT $LN21@Insert_hin
$LN20@Insert_hin:

; 1737 : 					return (_Insert_at(true, _Next._Mynode(),

  00823	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00826	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  0082b	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv913[ebp], eax
  00831	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00834	50		 push	 eax
  00835	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00838	51		 push	 ecx
  00839	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  0083e	83 c4 04	 add	 esp, 4
  00841	50		 push	 eax
  00842	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR tv913[ebp]
  00848	52		 push	 edx
  00849	6a 01		 push	 1
  0084b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0084e	50		 push	 eax
  0084f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00852	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00857	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0085d	83 c9 01	 or	 ecx, 1
  00860	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00866	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0086a	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0086d	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00872	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00879	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0087c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00881	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00884	e9 2a 08 00 00	 jmp	 $LN35@Insert_hin
$LN21@Insert_hin:

; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else

  00889	eb 04		 jmp	 SHORT $LN9@Insert_hin
$LN18@Insert_hin:

; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence

  0088b	c6 45 d7 01	 mov	 BYTE PTR __Leftish$[ebp], 1
$LN9@Insert_hin:

; 1742 : 			}
; 1743 : 		else

  0088f	e9 6c 07 00 00	 jmp	 $LN5@Insert_hin
$LN6@Insert_hin:

; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())

  00894	8d 55 98	 lea	 edx, DWORD PTR $T8[ebp]
  00897	52		 push	 edx
  00898	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0089b	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::begin
  008a0	89 85 94 fe ff
	ff		 mov	 DWORD PTR tv914[ebp], eax
  008a6	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR tv914[ebp]
  008ac	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv845[ebp], eax
  008b2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  008b6	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv845[ebp]
  008bc	51		 push	 ecx
  008bd	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  008c0	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  008c5	88 85 8f fe ff
	ff		 mov	 BYTE PTR tv915[ebp], al
  008cb	8a 95 8f fe ff
	ff		 mov	 dl, BYTE PTR tv915[ebp]
  008d1	88 55 a7	 mov	 BYTE PTR $T9[ebp], dl
  008d4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  008d8	8d 4d 98	 lea	 ecx, DWORD PTR $T8[ebp]
  008db	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  008e0	0f b6 45 a7	 movzx	 eax, BYTE PTR $T9[ebp]
  008e4	85 c0		 test	 eax, eax
  008e6	0f 84 df 00 00
	00		 je	 $LN22@Insert_hin

; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  008ec	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  008ef	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  008f4	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv916[ebp], eax
  008fa	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv916[ebp]
  00900	51		 push	 ecx
  00901	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00904	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00909	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv917[ebp], eax
  0090f	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  00912	52		 push	 edx
  00913	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00916	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  0091b	89 85 80 fe ff
	ff		 mov	 DWORD PTR tv918[ebp], eax
  00921	68 d4 06 00 00	 push	 1748			; 000006d4H
  00926	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0092b	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR tv917[ebp]
  00931	50		 push	 eax
  00932	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR tv918[ebp]
  00938	51		 push	 ecx
  00939	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0093c	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00941	8a 10		 mov	 dl, BYTE PTR [eax]
  00943	0f b6 c2	 movzx	 eax, dl
  00946	50		 push	 eax
  00947	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0094c	83 c4 14	 add	 esp, 20			; 00000014H
  0094f	88 85 7f fe ff
	ff		 mov	 BYTE PTR tv919[ebp], al
  00955	0f b6 8d 7f fe
	ff ff		 movzx	 ecx, BYTE PTR tv919[ebp]
  0095c	85 c9		 test	 ecx, ecx
  0095e	74 66		 je	 SHORT $LN24@Insert_hin

; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),

  00960	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00963	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00968	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv920[ebp], eax
  0096e	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00971	52		 push	 edx
  00972	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00975	50		 push	 eax
  00976	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  0097b	83 c4 04	 add	 esp, 4
  0097e	50		 push	 eax
  0097f	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR tv920[ebp]
  00985	51		 push	 ecx
  00986	6a 01		 push	 1
  00988	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0098b	52		 push	 edx
  0098c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0098f	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00994	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0099a	83 c8 01	 or	 eax, 1
  0099d	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  009a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  009a7	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  009aa	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  009af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  009b6	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  009b9	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  009be	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  009c1	e9 ed 06 00 00	 jmp	 $LN35@Insert_hin
$LN24@Insert_hin:

; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}

  009c6	e9 35 06 00 00	 jmp	 $LN5@Insert_hin
$LN22@Insert_hin:

; 1752 : 			else if (_Where == end())

  009cb	8d 4d 88	 lea	 ecx, DWORD PTR $T6[ebp]
  009ce	51		 push	 ecx
  009cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009d2	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::end
  009d7	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv921[ebp], eax
  009dd	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR tv921[ebp]
  009e3	89 95 70 fe ff
	ff		 mov	 DWORD PTR tv850[ebp], edx
  009e9	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  009ed	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv850[ebp]
  009f3	50		 push	 eax
  009f4	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  009f7	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  009fc	88 85 6f fe ff
	ff		 mov	 BYTE PTR tv922[ebp], al
  00a02	8a 8d 6f fe ff
	ff		 mov	 cl, BYTE PTR tv922[ebp]
  00a08	88 4d 97	 mov	 BYTE PTR $T7[ebp], cl
  00a0b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00a0f	8d 4d 88	 lea	 ecx, DWORD PTR $T6[ebp]
  00a12	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00a17	0f b6 55 97	 movzx	 edx, BYTE PTR $T7[ebp]
  00a1b	85 d2		 test	 edx, edx
  00a1d	0f 84 e3 00 00
	00		 je	 $LN25@Insert_hin

; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  00a23	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00a26	50		 push	 eax
  00a27	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a2a	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00a2f	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv923[ebp], eax
  00a35	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a38	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  00a3d	89 85 64 fe ff
	ff		 mov	 DWORD PTR tv924[ebp], eax
  00a43	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv924[ebp]
  00a49	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a4b	52		 push	 edx
  00a4c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a4f	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00a54	89 85 60 fe ff
	ff		 mov	 DWORD PTR tv925[ebp], eax
  00a5a	68 db 06 00 00	 push	 1755			; 000006dbH
  00a5f	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00a64	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv923[ebp]
  00a6a	50		 push	 eax
  00a6b	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR tv925[ebp]
  00a71	51		 push	 ecx
  00a72	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a75	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00a7a	8a 10		 mov	 dl, BYTE PTR [eax]
  00a7c	0f b6 c2	 movzx	 eax, dl
  00a7f	50		 push	 eax
  00a80	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00a85	83 c4 14	 add	 esp, 20			; 00000014H
  00a88	88 85 5f fe ff
	ff		 mov	 BYTE PTR tv926[ebp], al
  00a8e	0f b6 8d 5f fe
	ff ff		 movzx	 ecx, BYTE PTR tv926[ebp]
  00a95	85 c9		 test	 ecx, ecx
  00a97	74 68		 je	 SHORT $LN27@Insert_hin

; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),

  00a99	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9c	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  00aa1	89 85 58 fe ff
	ff		 mov	 DWORD PTR tv927[ebp], eax
  00aa7	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00aaa	52		 push	 edx
  00aab	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00aae	50		 push	 eax
  00aaf	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00ab4	83 c4 04	 add	 esp, 4
  00ab7	50		 push	 eax
  00ab8	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv927[ebp]
  00abe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ac0	52		 push	 edx
  00ac1	6a 00		 push	 0
  00ac3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ac6	50		 push	 eax
  00ac7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00aca	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00acf	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00ad5	83 c9 01	 or	 ecx, 1
  00ad8	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00ade	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00ae2	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00ae5	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00aea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00af1	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00af4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00af9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00afc	e9 b2 05 00 00	 jmp	 $LN35@Insert_hin
$LN27@Insert_hin:

; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),

  00b01	e9 fa 04 00 00	 jmp	 $LN5@Insert_hin
$LN25@Insert_hin:

; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  00b06	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00b09	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00b0e	89 85 54 fe ff
	ff		 mov	 DWORD PTR tv928[ebp], eax
  00b14	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR tv928[ebp]
  00b1a	52		 push	 edx
  00b1b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1e	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00b23	89 85 50 fe ff
	ff		 mov	 DWORD PTR tv929[ebp], eax
  00b29	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00b2c	50		 push	 eax
  00b2d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b30	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00b35	89 85 4c fe ff
	ff		 mov	 DWORD PTR tv930[ebp], eax
  00b3b	68 e0 06 00 00	 push	 1760			; 000006e0H
  00b40	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00b45	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00b4b	51		 push	 ecx
  00b4c	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR tv930[ebp]
  00b52	52		 push	 edx
  00b53	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b56	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00b5b	8a 00		 mov	 al, BYTE PTR [eax]
  00b5d	0f b6 c8	 movzx	 ecx, al
  00b60	51		 push	 ecx
  00b61	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00b66	83 c4 14	 add	 esp, 20			; 00000014H
  00b69	88 85 4b fe ff
	ff		 mov	 BYTE PTR tv931[ebp], al
  00b6f	0f b6 95 4b fe
	ff ff		 movzx	 edx, BYTE PTR tv931[ebp]
  00b76	85 d2		 test	 edx, edx
  00b78	0f 84 b8 01 00
	00		 je	 $LN28@Insert_hin
  00b7e	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00b81	50		 push	 eax
  00b82	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b85	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00b8a	89 85 44 fe ff
	ff		 mov	 DWORD PTR tv932[ebp], eax
  00b90	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00b93	51		 push	 ecx
  00b94	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00b97	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00b9c	89 85 40 fe ff
	ff		 mov	 DWORD PTR tv933[ebp], eax
  00ba2	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv933[ebp]
  00ba8	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
  00bad	89 85 3c fe ff
	ff		 mov	 DWORD PTR tv934[ebp], eax
  00bb3	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR tv934[ebp]
  00bb9	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00bbe	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv935[ebp], eax
  00bc4	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR tv935[ebp]
  00bca	52		 push	 edx
  00bcb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bce	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00bd3	89 85 34 fe ff
	ff		 mov	 DWORD PTR tv936[ebp], eax
  00bd9	68 e3 06 00 00	 push	 1763			; 000006e3H
  00bde	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00be3	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv932[ebp]
  00be9	50		 push	 eax
  00bea	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR tv936[ebp]
  00bf0	51		 push	 ecx
  00bf1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf4	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00bf9	8a 10		 mov	 dl, BYTE PTR [eax]
  00bfb	0f b6 c2	 movzx	 eax, dl
  00bfe	50		 push	 eax
  00bff	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00c04	83 c4 14	 add	 esp, 20			; 00000014H
  00c07	88 85 33 fe ff
	ff		 mov	 BYTE PTR tv937[ebp], al
  00c0d	0f b6 8d 33 fe
	ff ff		 movzx	 ecx, BYTE PTR tv937[ebp]
  00c14	85 c9		 test	 ecx, ecx
  00c16	0f 84 1a 01 00
	00		 je	 $LN28@Insert_hin

; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  00c1c	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00c1f	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00c24	89 85 2c fe ff
	ff		 mov	 DWORD PTR tv938[ebp], eax
  00c2a	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR tv938[ebp]
  00c30	52		 push	 edx
  00c31	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  00c36	83 c4 04	 add	 esp, 4
  00c39	89 85 28 fe ff
	ff		 mov	 DWORD PTR tv939[ebp], eax
  00c3f	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR tv939[ebp]
  00c45	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c47	51		 push	 ecx
  00c48	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  00c4d	83 c4 04	 add	 esp, 4
  00c50	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv940[ebp], eax
  00c56	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR tv940[ebp]
  00c5c	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00c5f	85 c0		 test	 eax, eax
  00c61	74 68		 je	 SHORT $LN30@Insert_hin

; 1766 : 					return (_Insert_at(false, _Next._Mynode(),

  00c63	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00c66	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00c6b	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv941[ebp], eax
  00c71	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00c74	51		 push	 ecx
  00c75	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  00c78	52		 push	 edx
  00c79	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00c7e	83 c4 04	 add	 esp, 4
  00c81	50		 push	 eax
  00c82	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR tv941[ebp]
  00c88	50		 push	 eax
  00c89	6a 00		 push	 0
  00c8b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00c8e	51		 push	 ecx
  00c8f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00c92	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00c97	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00c9d	83 ca 01	 or	 edx, 1
  00ca0	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00ca6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00caa	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00cad	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00cb2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00cb9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00cbc	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00cc1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00cc4	e9 ea 03 00 00	 jmp	 $LN35@Insert_hin

; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else

  00cc9	eb 66		 jmp	 SHORT $LN31@Insert_hin
$LN30@Insert_hin:

; 1769 : 					return (_Insert_at(true, _Where._Mynode(),

  00ccb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00cce	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00cd3	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv942[ebp], eax
  00cd9	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00cdc	50		 push	 eax
  00cdd	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00ce0	51		 push	 ecx
  00ce1	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00ce6	83 c4 04	 add	 esp, 4
  00ce9	50		 push	 eax
  00cea	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR tv942[ebp]
  00cf0	52		 push	 edx
  00cf1	6a 01		 push	 1
  00cf3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00cf6	50		 push	 eax
  00cf7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00cfa	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00cff	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00d05	83 c9 01	 or	 ecx, 1
  00d08	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00d0e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00d12	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00d15	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00d1a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00d21	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00d24	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00d29	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00d2c	e9 82 03 00 00	 jmp	 $LN35@Insert_hin
$LN31@Insert_hin:

; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),

  00d31	e9 ca 02 00 00	 jmp	 $LN5@Insert_hin
$LN28@Insert_hin:

; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()

  00d36	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  00d39	52		 push	 edx
  00d3a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d3d	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00d42	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv943[ebp], eax
  00d48	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00d4b	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00d50	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv944[ebp], eax
  00d56	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR tv944[ebp]
  00d5c	50		 push	 eax
  00d5d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d60	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00d65	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv945[ebp], eax
  00d6b	68 ed 06 00 00	 push	 1773			; 000006edH
  00d70	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00d75	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv943[ebp]
  00d7b	51		 push	 ecx
  00d7c	8b 95 10 fe ff
	ff		 mov	 edx, DWORD PTR tv945[ebp]
  00d82	52		 push	 edx
  00d83	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d86	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00d8b	8a 00		 mov	 al, BYTE PTR [eax]
  00d8d	0f b6 c8	 movzx	 ecx, al
  00d90	51		 push	 ecx
  00d91	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00d96	83 c4 14	 add	 esp, 20			; 00000014H
  00d99	88 85 0f fe ff
	ff		 mov	 BYTE PTR tv946[ebp], al
  00d9f	0f b6 95 0f fe
	ff ff		 movzx	 edx, BYTE PTR tv946[ebp]
  00da6	85 d2		 test	 edx, edx
  00da8	0f 84 fa 00 00
	00		 je	 $LN40@Insert_hin
  00dae	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00db4	50		 push	 eax
  00db5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00db8	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::end
  00dbd	89 85 08 fe ff
	ff		 mov	 DWORD PTR tv947[ebp], eax
  00dc3	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv947[ebp]
  00dc9	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv864[ebp], ecx
  00dcf	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  00dd3	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00dd9	83 ca 04	 or	 edx, 4
  00ddc	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00de2	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00de5	50		 push	 eax
  00de6	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00de9	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00dee	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv951[ebp], eax
  00df4	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv951[ebp]
  00dfa	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator++
  00dff	89 85 fc fd ff
	ff		 mov	 DWORD PTR tv952[ebp], eax
  00e05	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv864[ebp]
  00e0b	51		 push	 ecx
  00e0c	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv952[ebp]
  00e12	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  00e17	88 85 fb fd ff
	ff		 mov	 BYTE PTR tv953[ebp], al
  00e1d	0f b6 95 fb fd
	ff ff		 movzx	 edx, BYTE PTR tv953[ebp]
  00e24	85 d2		 test	 edx, edx
  00e26	75 74		 jne	 SHORT $LN39@Insert_hin
  00e28	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00e2b	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00e30	89 85 f4 fd ff
	ff		 mov	 DWORD PTR tv954[ebp], eax
  00e36	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR tv954[ebp]
  00e3c	50		 push	 eax
  00e3d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e40	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00e45	89 85 f0 fd ff
	ff		 mov	 DWORD PTR tv955[ebp], eax
  00e4b	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00e4e	51		 push	 ecx
  00e4f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e52	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00e57	89 85 ec fd ff
	ff		 mov	 DWORD PTR tv956[ebp], eax
  00e5d	68 f0 06 00 00	 push	 1776			; 000006f0H
  00e62	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00e67	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR tv955[ebp]
  00e6d	52		 push	 edx
  00e6e	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR tv956[ebp]
  00e74	50		 push	 eax
  00e75	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00e78	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00e7d	8a 08		 mov	 cl, BYTE PTR [eax]
  00e7f	0f b6 d1	 movzx	 edx, cl
  00e82	52		 push	 edx
  00e83	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00e88	83 c4 14	 add	 esp, 20			; 00000014H
  00e8b	88 85 eb fd ff
	ff		 mov	 BYTE PTR tv957[ebp], al
  00e91	0f b6 85 eb fd
	ff ff		 movzx	 eax, BYTE PTR tv957[ebp]
  00e98	85 c0		 test	 eax, eax
  00e9a	74 0c		 je	 SHORT $LN40@Insert_hin
$LN39@Insert_hin:
  00e9c	c7 85 e4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv740[ebp], 1
  00ea6	eb 0a		 jmp	 SHORT $LN41@Insert_hin
$LN40@Insert_hin:
  00ea8	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv740[ebp], 0
$LN41@Insert_hin:
  00eb2	8a 8d e4 fd ff
	ff		 mov	 cl, BYTE PTR tv740[ebp]
  00eb8	88 4d 87	 mov	 BYTE PTR $T5[ebp], cl
  00ebb	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00ec2	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00ec8	83 e2 04	 and	 edx, 4
  00ecb	74 12		 je	 SHORT $LN57@Insert_hin
  00ecd	83 a5 64 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00ed4	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00eda	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN57@Insert_hin:
  00edf	0f b6 45 87	 movzx	 eax, BYTE PTR $T5[ebp]
  00ee3	85 c0		 test	 eax, eax
  00ee5	0f 84 15 01 00
	00		 je	 $LN5@Insert_hin

; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  00eeb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00eee	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00ef3	89 85 e0 fd ff
	ff		 mov	 DWORD PTR tv958[ebp], eax
  00ef9	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR tv958[ebp]
  00eff	51		 push	 ecx
  00f00	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  00f05	83 c4 04	 add	 esp, 4
  00f08	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv959[ebp], eax
  00f0e	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR tv959[ebp]
  00f14	8b 02		 mov	 eax, DWORD PTR [edx]
  00f16	50		 push	 eax
  00f17	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  00f1c	83 c4 04	 add	 esp, 4
  00f1f	89 85 d8 fd ff
	ff		 mov	 DWORD PTR tv960[ebp], eax
  00f25	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR tv960[ebp]
  00f2b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00f2e	85 d2		 test	 edx, edx
  00f30	74 68		 je	 SHORT $LN33@Insert_hin

; 1779 : 					return (_Insert_at(false, _Where._Mynode(),

  00f32	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00f35	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00f3a	89 85 d4 fd ff
	ff		 mov	 DWORD PTR tv961[ebp], eax
  00f40	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00f43	50		 push	 eax
  00f44	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00f47	51		 push	 ecx
  00f48	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00f4d	83 c4 04	 add	 esp, 4
  00f50	50		 push	 eax
  00f51	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR tv961[ebp]
  00f57	52		 push	 edx
  00f58	6a 00		 push	 0
  00f5a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00f5d	50		 push	 eax
  00f5e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00f61	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00f66	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00f6c	83 c9 01	 or	 ecx, 1
  00f6f	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00f75	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00f79	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00f7c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00f81	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00f88	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00f8b	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00f90	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00f93	e9 1b 01 00 00	 jmp	 $LN35@Insert_hin

; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else

  00f98	eb 66		 jmp	 SHORT $LN5@Insert_hin
$LN33@Insert_hin:

; 1782 : 					return (_Insert_at(true, _Next._Mynode(),

  00f9a	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00f9d	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00fa2	89 85 d0 fd ff
	ff		 mov	 DWORD PTR tv962[ebp], eax
  00fa8	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00fab	52		 push	 edx
  00fac	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00faf	50		 push	 eax
  00fb0	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00fb5	83 c4 04	 add	 esp, 4
  00fb8	50		 push	 eax
  00fb9	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR tv962[ebp]
  00fbf	51		 push	 ecx
  00fc0	6a 01		 push	 1
  00fc2	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00fc5	52		 push	 edx
  00fc6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00fc9	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00fce	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00fd4	83 c8 01	 or	 eax, 1
  00fd7	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00fdd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00fe1	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  00fe4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00fe9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00ff0	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00ff3	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00ff8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ffb	e9 b3 00 00 00	 jmp	 $LN35@Insert_hin
$LN5@Insert_hin:
  01000	eb 1b		 jmp	 SHORT $LN42@Insert_hin
__catch$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$0:

; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);

  01002	8b 4d 1c	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  01005	51		 push	 ecx
  01006	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  01009	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil

; 1788 : 		_RERAISE;

  0100e	6a 00		 push	 0
  01010	6a 00		 push	 0
  01012	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1789 : 		_CATCH_END

  01017	b8 00 00 00 00	 mov	 eax, $LN60@Insert_hin
  0101c	c3		 ret	 0
$LN42@Insert_hin:
  0101d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  01024	eb 07		 jmp	 SHORT __tryend$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$1
$LN60@Insert_hin:
  01026	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$1:

; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,

  0102d	8b 55 1c	 mov	 edx, DWORD PTR __Newnode$[ebp]
  01030	52		 push	 edx
  01031	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  01034	50		 push	 eax
  01035	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  0103a	83 c4 04	 add	 esp, 4
  0103d	50		 push	 eax
  0103e	0f b6 4d d7	 movzx	 ecx, BYTE PTR __Leftish$[ebp]
  01042	51		 push	 ecx
  01043	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  01049	52		 push	 edx
  0104a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0104d	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  01052	89 85 cc fd ff
	ff		 mov	 DWORD PTR tv963[ebp], eax
  01058	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR tv963[ebp]
  0105e	89 85 c8 fd ff
	ff		 mov	 DWORD PTR tv875[ebp], eax
  01064	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  01068	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR tv875[ebp]
  0106e	51		 push	 ecx
  0106f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  01072	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  01077	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0107d	83 ca 01	 or	 edx, 1
  01080	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  01086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0108a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  01090	e8 00 00 00 00	 call	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  01095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  01099	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0109c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  010a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  010a8	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  010ab	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  010b0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN35@Insert_hin:

; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}

  010b3	52		 push	 edx
  010b4	8b cd		 mov	 ecx, ebp
  010b6	50		 push	 eax
  010b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN90@Insert_hin
  010bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  010c2	58		 pop	 eax
  010c3	5a		 pop	 edx
  010c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  010c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  010ce	59		 pop	 ecx
  010cf	5f		 pop	 edi
  010d0	5e		 pop	 esi
  010d1	5b		 pop	 ebx
  010d2	81 c4 38 02 00
	00		 add	 esp, 568		; 00000238H
  010d8	3b ec		 cmp	 ebp, esp
  010da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010df	8b e5		 mov	 esp, ebp
  010e1	5d		 pop	 ebp
  010e2	c2 18 00	 ret	 24			; 00000018H
  010e5	0f 1f 00	 npad	 3
$LN90@Insert_hin:
  010e8	01 00 00 00	 DD	 1
  010ec	00 00 00 00	 DD	 $LN89@Insert_hin
$LN89@Insert_hin:
  010f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  010f4	0c 00 00 00	 DD	 12			; 0000000cH
  010f8	00 00 00 00	 DD	 $LN87@Insert_hin
$LN87@Insert_hin:
  010fc	5f		 DB	 95			; 0000005fH
  010fd	4e		 DB	 78			; 0000004eH
  010fe	65		 DB	 101			; 00000065H
  010ff	78		 DB	 120			; 00000078H
  01100	74		 DB	 116			; 00000074H
  01101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$2:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$3:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Next$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$5:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR $T14[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$6:
  00018	8d 4d b8	 lea	 ecx, DWORD PTR $T12[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$7:
  00020	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00026	83 e0 02	 and	 eax, 2
  00029	0f 84 0f 00 00
	00		 je	 $LN51@Insert_hin
  0002f	83 a5 64 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00036	8d 4d a8	 lea	 ecx, DWORD PTR $T10[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN51@Insert_hin:
  0003e	c3		 ret	 0
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$8:
  0003f	8d 4d 98	 lea	 ecx, DWORD PTR $T8[ebp]
  00042	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$9:
  00047	8d 4d 88	 lea	 ecx, DWORD PTR $T6[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$10:
  0004f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00055	83 e0 04	 and	 eax, 4
  00058	0f 84 12 00 00
	00		 je	 $LN56@Insert_hin
  0005e	83 a5 64 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00065	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN56@Insert_hin:
  00070	c3		 ret	 0
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$11:
  00071	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00077	e9 00 00 00 00	 jmp	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z:
  0007c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00080	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00083	8b 8a c4 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-572]
  00089	33 c8		 xor	 ecx, eax
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
  00095	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAVBaseLight@@@std@@@std@@YAABV?$allocator@PAVBaseLight@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PAVBaseLight@@@std@@@std@@YAABV?$allocator@PAVBaseLight@@@0@ABV10@@Z PROC ; std::forward<std::allocator<BaseLight *> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@PAVBaseLight@@@std@@@std@@YAABV?$allocator@PAVBaseLight@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<BaseLight *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVBaseLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVBaseLight@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVBaseLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVBaseLight@@0@Z PROC ; std::_Ptr_cat<BaseLight *,BaseLight *>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  0001b	8a 45 fb	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  0001e	52		 push	 edx
  0001f	8b cd		 mov	 ecx, ebp
  00021	50		 push	 eax
  00022	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Ptr_cat
  00028	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0002d	58		 pop	 eax
  0002e	5a		 pop	 edx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
  00033	90		 npad	 1
$LN5@Ptr_cat:
  00034	01 00 00 00	 DD	 1
  00038	00 00 00 00	 DD	 $LN4@Ptr_cat
$LN4@Ptr_cat:
  0003c	fb ff ff ff	 DD	 -5			; fffffffbH
  00040	01 00 00 00	 DD	 1
  00044	00 00 00 00	 DD	 $LN3@Ptr_cat
$LN3@Ptr_cat:
  00048	5f		 DB	 95			; 0000005fH
  00049	43		 DB	 67			; 00000043H
  0004a	61		 DB	 97			; 00000061H
  0004b	74		 DB	 116			; 00000074H
  0004c	00		 DB	 0
??$_Ptr_cat@PAVBaseLight@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVBaseLight@@0@Z ENDP ; std::_Ptr_cat<BaseLight *,BaseLight *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >, COMDAT

; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@std@@@std@@YAXPAPAVBaseLight@@0AAU?$_Wrap_alloc@V?$allocator@PAVBaseLight@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<BaseLight *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00020	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00023	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00020	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00023	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z PROC ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z PROC ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const &,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z ENDP ; std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> const &,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >, COMDAT
; _this$ = ecx

; 209  : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		: _Mybase()

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>

; 210  : 		}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::size, COMDAT
; _this$ = ecx

; 1206 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1207 : 		return (this->_Mysize());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEABIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Mysize
  00016	8b 00		 mov	 eax, DWORD PTR [eax]

; 1208 : 		}

  00018	83 c4 04	 add	 esp, 4
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Ptrsav$ = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00020	85 c0		 test	 eax, eax
  00022	74 0d		 je	 SHORT $LN3@operator
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0002b	0f 85 86 00 00
	00		 jne	 $LN2@operator
$LN3@operator:

; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");

  00031	8b f4		 mov	 esi, esp
  00033	68 20 01 00 00	 push	 288			; 00000120H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 289  : 			_SCL_SECURE_OUT_OF_RANGE;

  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
  00057	85 c9		 test	 ecx, ecx
  00059	74 04		 je	 SHORT $LN6@operator
  0005b	33 d2		 xor	 edx, edx
  0005d	75 30		 jne	 SHORT $LN7@operator
$LN6@operator:
  0005f	8b f4		 mov	 esi, esp
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  0006b	6a 00		 push	 0
  0006d	68 21 01 00 00	 push	 289			; 00000121H
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00077	6a 02		 push	 2
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 01		 jne	 SHORT $LN7@operator
  0008e	cc		 int	 3
$LN7@operator:
  0008f	8b f4		 mov	 esi, esp
  00091	6a 00		 push	 0
  00093	68 21 01 00 00	 push	 289			; 00000121H
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@NEDCJCDP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000bd	89 55 f8	 mov	 DWORD PTR __Ptrsav$[ebp], edx

; 293  : 		--(*(_Mybase *)this);

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator--

; 294  : 		if (_Ptrsav == this->_Ptr)

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR __Ptrsav$[ebp]
  000ce	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d1	0f 85 86 00 00
	00		 jne	 $LN4@operator

; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");

  000d7	8b f4		 mov	 esi, esp
  000d9	68 28 01 00 00	 push	 296			; 00000128H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 297  : 			_SCL_SECURE_OUT_OF_RANGE;

  000f8	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
  000fd	85 d2		 test	 edx, edx
  000ff	74 04		 je	 SHORT $LN8@operator
  00101	33 c0		 xor	 eax, eax
  00103	75 30		 jne	 SHORT $LN9@operator
$LN8@operator:
  00105	8b f4		 mov	 esi, esp
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00111	6a 00		 push	 0
  00113	68 29 01 00 00	 push	 297			; 00000129H
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0011d	6a 02		 push	 2
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00125	83 c4 18	 add	 esp, 24			; 00000018H
  00128	3b f4		 cmp	 esi, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	83 f8 01	 cmp	 eax, 1
  00132	75 01		 jne	 SHORT $LN9@operator
  00134	cc		 int	 3
$LN9@operator:
  00135	8b f4		 mov	 esi, esp
  00137	6a 00		 push	 0
  00139	68 29 01 00 00	 push	 297			; 00000129H
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@NEDCJCDP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00153	83 c4 14	 add	 esp, 20			; 00000014H
  00156	3b f4		 cmp	 esi, esp
  00158	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@operator:

; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  0015d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 312  : 		}

  00160	5e		 pop	 esi
  00161	83 c4 08	 add	 esp, 8
  00164	3b ec		 cmp	 ebp, esp
  00166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >, COMDAT
; _this$ = ecx

; 209  : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		: _Mybase()

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>

; 210  : 		}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 876  : 		_Getal().destroy(

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>

; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(

  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>

; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(

  00058	8b 55 08	 mov	 edx, DWORD PTR __Pnode$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  00061	83 c4 04	 add	 esp, 4
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  0006a	83 c4 04	 add	 esp, 4
  0006d	50		 push	 eax
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  00076	8b c8		 mov	 ecx, eax
  00078	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>

; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);

  0007d	6a 01		 push	 1
  0007f	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00082	50		 push	 eax
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  0008b	8b c8		 mov	 ecx, eax
  0008d	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::deallocate

; 883  : 		}

  00092	83 c4 04	 add	 esp, 4
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ
_TEXT	SEGMENT
tv147 = -36						; size = 4
tv146 = -32						; size = 4
tv145 = -28						; size = 4
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 14	 sub	 esp, 20			; 00000014H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00020	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00023	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00026	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00029	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00040	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00043	6a 01		 push	 1
  00045	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 858  : 
; 859  : 		_TRY_BEGIN

  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 860  : 		_Getal().construct(

  0005e	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  00067	83 c4 04	 add	 esp, 4
  0006a	89 45 e4	 mov	 DWORD PTR tv145[ebp], eax
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  00075	50		 push	 eax
  00076	8b 4d e4	 mov	 ecx, DWORD PTR tv145[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  0007f	83 c4 04	 add	 esp, 4
  00082	50		 push	 eax
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  0008b	8b c8		 mov	 ecx, eax
  0008d	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> * &>

; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(

  00092	8b 55 e8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 45 e0	 mov	 DWORD PTR tv146[ebp], eax
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  000a9	50		 push	 eax
  000aa	8b 45 e0	 mov	 eax, DWORD PTR tv146[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  000bf	8b c8		 mov	 ecx, eax
  000c1	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> * &>

; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(

  000c6	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  000cf	83 c4 04	 add	 esp, 4
  000d2	89 45 dc	 mov	 DWORD PTR tv147[ebp], eax
  000d5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  000dd	50		 push	 eax
  000de	8b 55 dc	 mov	 edx, DWORD PTR tv147[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  000e7	83 c4 04	 add	 esp, 4
  000ea	50		 push	 eax
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  000f3	8b c8		 mov	 ecx, eax
  000f5	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> * &>
  000fa	eb 24		 jmp	 SHORT $LN4@Buynode0
__catch$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ$0:

; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);

  000fc	6a 01		 push	 1
  000fe	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00101	50		 push	 eax
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  0010a	8b c8		 mov	 ecx, eax
  0010c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::deallocate

; 868  : 		_RERAISE;

  00111	6a 00		 push	 0
  00113	6a 00		 push	 0
  00115	e8 00 00 00 00	 call	 __CxxThrowException@8

; 869  : 		_CATCH_END

  0011a	b8 00 00 00 00	 mov	 eax, $LN7@Buynode0
  0011f	c3		 ret	 0
$LN4@Buynode0:
  00120	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00127	eb 07		 jmp	 SHORT __tryend$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ$1
$LN7@Buynode0:
  00129	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ$1:

; 870  : 
; 871  : 		return (_Pnode);

  00130	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode0:

; 872  : 		}

  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	83 c4 24	 add	 esp, 36			; 00000024H
  00144	3b ec		 cmp	 ebp, esp
  00146	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode0
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1668 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1669 : 		this->_Getal().destroy(

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myval
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >

; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);

  00033	6a 01		 push	 1
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00038	51		 push	 ecx
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::deallocate

; 1673 : 		}

  00048	83 c4 04	 add	 esp, 4
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::size, COMDAT
; _this$ = ecx

; 1206 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1207 : 		return (this->_Mysize());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Mysize
  00016	8b 00		 mov	 eax, DWORD PTR [eax]

; 1208 : 		}

  00018	83 c4 04	 add	 esp, 4
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Isnil
  00023	83 c4 04	 add	 esp, 4
  00026	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00029	85 d2		 test	 edx, edx
  0002b	74 1c		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Right
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00044	e9 ac 00 00 00	 jmp	 $LN5@operator
$LN4@operator:

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Left
  00055	83 c4 04	 add	 esp, 4
  00058	8b 00		 mov	 eax, DWORD PTR [eax]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Isnil
  00060	83 c4 04	 add	 esp, 4
  00063	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00066	85 c9		 test	 ecx, ecx
  00068	75 22		 jne	 SHORT $LN2@operator

; 88   : 			_Ptr = _Mytree::_Max(

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Left
  00076	83 c4 04	 add	 esp, 4
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Max
  00081	83 c4 04	 add	 esp, 4
  00084	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00087	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else

  0008a	eb 69		 jmp	 SHORT $LN5@operator
$LN2@operator:

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Parent
  00098	83 c4 04	 add	 esp, 4
  0009b	8b 10		 mov	 edx, DWORD PTR [eax]
  0009d	89 55 f8	 mov	 DWORD PTR __Pnode$1[ebp], edx
  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Isnil
  000a9	83 c4 04	 add	 esp, 4
  000ac	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000af	85 c9		 test	 ecx, ecx
  000b1	75 21		 jne	 SHORT $LN3@operator
  000b3	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$1[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Left
  000bc	83 c4 04	 add	 esp, 4
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c5	3b 10		 cmp	 edx, DWORD PTR [eax]
  000c7	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  000cf	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d2	eb b8		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  000d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >::_Isnil
  000e0	83 c4 04	 add	 esp, 4
  000e3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 02		 je	 SHORT $LN8@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else

  000ea	eb 09		 jmp	 SHORT $LN5@operator
$LN8@operator:

; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  000f2	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN5@operator:

; 100  : 			}
; 101  : 		return (*this);

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 102  : 		}

  000f8	83 c4 08	 add	 esp, 8
  000fb	3b ec		 cmp	 ebp, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ

; 38   : 		: _Ptr(0)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 40   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ

; 38   : 		: _Ptr(0)

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 40   : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEABIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 952  : 		{	// return const reference to _Mysize

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 953  : 		return (_Get_data()._Mysize);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Get_data
  00016	83 c0 08	 add	 eax, 8

; 954  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@$0A@@std@@@std@@QBEABIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 952  : 		{	// return const reference to _Mysize

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 953  : 		return (_Get_data()._Mysize);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Get_data
  00016	83 c0 08	 add	 eax, 8

; 954  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 		_Mytraits::construct(*this, _Ptr,

  0000e	8b 45 14	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 55 0c	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00038	50		 push	 eax
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 		_Mytraits::construct(*this, _Ptr,

  0000e	8b 45 14	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 55 0c	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00038	50		 push	 eax
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z PROC ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ENDP ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z
_TEXT	SEGMENT
tv89 = -20						; size = 4
$T1 = -16						; size = 4
__Pnode$2 = -12						; size = 4
__Newnode$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::max_size
  0002d	8b f0		 mov	 esi, eax
  0002f	83 ee 01	 sub	 esi, 1
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Mysize
  0003a	3b 30		 cmp	 esi, DWORD PTR [eax]
  0003c	77 20		 ja	 SHORT $LN5@Insert_at

; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);

  0003e	8b 45 18	 mov	 eax, DWORD PTR __Node$[ebp]
  00041	50		 push	 eax
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil

; 1859 : 			_Xlength_error("map/set<T> too long");

  0004a	8b f4		 mov	 esi, esp
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Insert_at:

; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,

  0005e	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00067	83 c4 04	 add	 esp, 4
  0006a	50		 push	 eax
  0006b	8b 55 18	 mov	 edx, DWORD PTR __Node$[ebp]
  0006e	52		 push	 edx
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode_if_nil<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  00077	89 45 f8	 mov	 DWORD PTR __Newnode$[ebp], eax

; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Mysize
  00082	89 45 ec	 mov	 DWORD PTR tv89[ebp], eax
  00085	8b 45 ec	 mov	 eax, DWORD PTR tv89[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	83 c1 01	 add	 ecx, 1
  0008d	8b 55 ec	 mov	 edx, DWORD PTR tv89[ebp]
  00090	89 0a		 mov	 DWORD PTR [edx], ecx

; 1865 : 		_Newnode->_Parent = _Wherenode;

  00092	8b 45 f8	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00095	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00098	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  000a3	8b 55 10	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  000a6	3b 10		 cmp	 edx, DWORD PTR [eax]
  000a8	75 29		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Root
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx

; 1870 : 			_Lmost() = _Newnode;

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lmost
  000bf	8b 55 f8	 mov	 edx, DWORD PTR __Newnode$[ebp]
  000c2	89 10		 mov	 DWORD PTR [eax], edx

; 1871 : 			_Rmost() = _Newnode;

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000cf	89 08		 mov	 DWORD PTR [eax], ecx
  000d1	eb 64		 jmp	 SHORT $LN7@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  000d3	0f b6 55 0c	 movzx	 edx, BYTE PTR __Addleft$[ebp]
  000d7	85 d2		 test	 edx, edx
  000d9	74 2f		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  000db	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b 4d f8	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000ea	89 08		 mov	 DWORD PTR [eax], ecx

; 1876 : 			if (_Wherenode == _Lmost())

  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lmost
  000f4	8b 55 10	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  000f7	3b 10		 cmp	 edx, DWORD PTR [eax]
  000f9	75 0d		 jne	 SHORT $LN10@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lmost
  00103	8b 4d f8	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00106	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Insert_at:

; 1878 : 			}
; 1879 : 		else

  00108	eb 2d		 jmp	 SHORT $LN7@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  0010a	8b 55 10	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  00113	83 c4 04	 add	 esp, 4
  00116	8b 4d f8	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00119	89 08		 mov	 DWORD PTR [eax], ecx

; 1882 : 			if (_Wherenode == _Rmost())

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  00123	8b 55 10	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00126	3b 10		 cmp	 edx, DWORD PTR [eax]
  00128	75 0d		 jne	 SHORT $LN7@Insert_at

; 1883 : 				_Rmost() = _Newnode;

  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rmost
  00132	8b 4d f8	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00135	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;

  00137	8b 55 f8	 mov	 edx, DWORD PTR __Newnode$[ebp]
  0013a	89 55 f4	 mov	 DWORD PTR __Pnode$2[ebp], edx
$LN4@Insert_at:

; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0013d	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00146	83 c4 04	 add	 esp, 4
  00149	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00151	83 c4 04	 add	 esp, 4
  00154	0f be 10	 movsx	 edx, BYTE PTR [eax]
  00157	85 d2		 test	 edx, edx
  00159	0f 85 ce 02 00
	00		 jne	 $LN3@Insert_at

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0015f	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00168	83 c4 04	 add	 esp, 4
  0016b	8b f0		 mov	 esi, eax
  0016d	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00176	83 c4 04	 add	 esp, 4
  00179	8b 10		 mov	 edx, DWORD PTR [eax]
  0017b	52		 push	 edx
  0017c	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00181	83 c4 04	 add	 esp, 4
  00184	8b 00		 mov	 eax, DWORD PTR [eax]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  0018c	83 c4 04	 add	 esp, 4
  0018f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00191	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00193	0f 85 4a 01 00
	00		 jne	 $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  00199	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  0019c	52		 push	 edx
  0019d	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  001a2	83 c4 04	 add	 esp, 4
  001a5	8b 00		 mov	 eax, DWORD PTR [eax]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  001ad	83 c4 04	 add	 esp, 4
  001b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  001b8	83 c4 04	 add	 esp, 4
  001bb	8b 10		 mov	 edx, DWORD PTR [eax]
  001bd	89 55 10	 mov	 DWORD PTR __Wherenode$[ebp], edx

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  001c0	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  001c9	83 c4 04	 add	 esp, 4
  001cc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001cf	85 c9		 test	 ecx, ecx
  001d1	75 6f		 jne	 SHORT $LN14@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  001d3	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  001d6	52		 push	 edx
  001d7	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  001dc	83 c4 04	 add	 esp, 4
  001df	8b 00		 mov	 eax, DWORD PTR [eax]
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  001e7	83 c4 04	 add	 esp, 4
  001ea	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1896 : 					this->_Color(_Wherenode) = this->_Black;

  001ed	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  001f0	51		 push	 ecx
  001f1	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  001f6	83 c4 04	 add	 esp, 4
  001f9	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;

  001fc	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  001ff	52		 push	 edx
  00200	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00205	83 c4 04	 add	 esp, 4
  00208	8b 00		 mov	 eax, DWORD PTR [eax]
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00210	83 c4 04	 add	 esp, 4
  00213	8b 08		 mov	 ecx, DWORD PTR [eax]
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  0021b	83 c4 04	 add	 esp, 4
  0021e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00221	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  00224	52		 push	 edx
  00225	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0022a	83 c4 04	 add	 esp, 4
  0022d	8b 00		 mov	 eax, DWORD PTR [eax]
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00235	83 c4 04	 add	 esp, 4
  00238	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023a	89 4d f4	 mov	 DWORD PTR __Pnode$2[ebp], ecx

; 1900 : 					}
; 1901 : 				else

  0023d	e9 9c 00 00 00	 jmp	 $LN15@Insert_at
$LN14@Insert_at:

; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  00242	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  00245	52		 push	 edx
  00246	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0024b	83 c4 04	 add	 esp, 4
  0024e	8b 00		 mov	 eax, DWORD PTR [eax]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  00256	83 c4 04	 add	 esp, 4
  00259	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  0025c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0025e	75 1d		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  00260	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00269	83 c4 04	 add	 esp, 4
  0026c	8b 00		 mov	 eax, DWORD PTR [eax]
  0026e	89 45 f4	 mov	 DWORD PTR __Pnode$2[ebp], eax

; 1906 : 						_Lrotate(_Pnode);

  00271	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00274	51		 push	 ecx
  00275	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00278	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  0027d	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  00280	52		 push	 edx
  00281	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00286	83 c4 04	 add	 esp, 4
  00289	8b 00		 mov	 eax, DWORD PTR [eax]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00291	83 c4 04	 add	 esp, 4
  00294	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00297	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  0029a	51		 push	 ecx
  0029b	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  002a0	83 c4 04	 add	 esp, 4
  002a3	8b 10		 mov	 edx, DWORD PTR [eax]
  002a5	52		 push	 edx
  002a6	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  002ab	83 c4 04	 add	 esp, 4
  002ae	8b 00		 mov	 eax, DWORD PTR [eax]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  002b6	83 c4 04	 add	 esp, 4
  002b9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  002bc	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  002c5	83 c4 04	 add	 esp, 4
  002c8	8b 10		 mov	 edx, DWORD PTR [eax]
  002ca	52		 push	 edx
  002cb	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  002d0	83 c4 04	 add	 esp, 4
  002d3	8b 00		 mov	 eax, DWORD PTR [eax]
  002d5	50		 push	 eax
  002d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rrotate
$LN15@Insert_at:

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  002de	e9 45 01 00 00	 jmp	 $LN13@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =

  002e3	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  002e6	51		 push	 ecx
  002e7	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  002ec	83 c4 04	 add	 esp, 4
  002ef	8b 10		 mov	 edx, DWORD PTR [eax]
  002f1	52		 push	 edx
  002f2	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  002f7	83 c4 04	 add	 esp, 4
  002fa	8b 00		 mov	 eax, DWORD PTR [eax]
  002fc	50		 push	 eax
  002fd	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  00302	83 c4 04	 add	 esp, 4
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	89 4d 10	 mov	 DWORD PTR __Wherenode$[ebp], ecx

; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  0030a	8b 55 10	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  0030d	52		 push	 edx
  0030e	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00313	83 c4 04	 add	 esp, 4
  00316	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00319	85 c0		 test	 eax, eax
  0031b	75 6f		 jne	 SHORT $LN17@Insert_at

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0031d	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00320	51		 push	 ecx
  00321	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00326	83 c4 04	 add	 esp, 4
  00329	8b 10		 mov	 edx, DWORD PTR [eax]
  0032b	52		 push	 edx
  0032c	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00331	83 c4 04	 add	 esp, 4
  00334	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  00337	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00340	83 c4 04	 add	 esp, 4
  00343	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00346	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00349	51		 push	 ecx
  0034a	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0034f	83 c4 04	 add	 esp, 4
  00352	8b 10		 mov	 edx, DWORD PTR [eax]
  00354	52		 push	 edx
  00355	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0035a	83 c4 04	 add	 esp, 4
  0035d	8b 00		 mov	 eax, DWORD PTR [eax]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00365	83 c4 04	 add	 esp, 4
  00368	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  0036b	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00374	83 c4 04	 add	 esp, 4
  00377	8b 10		 mov	 edx, DWORD PTR [eax]
  00379	52		 push	 edx
  0037a	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0037f	83 c4 04	 add	 esp, 4
  00382	8b 00		 mov	 eax, DWORD PTR [eax]
  00384	89 45 f4	 mov	 DWORD PTR __Pnode$2[ebp], eax

; 1926 : 					}
; 1927 : 				else

  00387	e9 9c 00 00 00	 jmp	 $LN13@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  0038c	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  0038f	51		 push	 ecx
  00390	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  00395	83 c4 04	 add	 esp, 4
  00398	8b 10		 mov	 edx, DWORD PTR [eax]
  0039a	52		 push	 edx
  0039b	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  003a0	83 c4 04	 add	 esp, 4
  003a3	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  003a6	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003a8	75 1d		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  003aa	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  003ad	52		 push	 edx
  003ae	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  003b3	83 c4 04	 add	 esp, 4
  003b6	8b 00		 mov	 eax, DWORD PTR [eax]
  003b8	89 45 f4	 mov	 DWORD PTR __Pnode$2[ebp], eax

; 1932 : 						_Rrotate(_Pnode);

  003bb	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  003be	51		 push	 ecx
  003bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c2	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  003c7	8b 55 f4	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  003ca	52		 push	 edx
  003cb	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  003d0	83 c4 04	 add	 esp, 4
  003d3	8b 00		 mov	 eax, DWORD PTR [eax]
  003d5	50		 push	 eax
  003d6	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  003db	83 c4 04	 add	 esp, 4
  003de	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  003e1	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  003e4	51		 push	 ecx
  003e5	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  003ea	83 c4 04	 add	 esp, 4
  003ed	8b 10		 mov	 edx, DWORD PTR [eax]
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  003f5	83 c4 04	 add	 esp, 4
  003f8	8b 00		 mov	 eax, DWORD PTR [eax]
  003fa	50		 push	 eax
  003fb	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  00400	83 c4 04	 add	 esp, 4
  00403	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00406	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00409	51		 push	 ecx
  0040a	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0040f	83 c4 04	 add	 esp, 4
  00412	8b 10		 mov	 edx, DWORD PTR [eax]
  00414	52		 push	 edx
  00415	e8 00 00 00 00	 call	 ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Parent
  0041a	83 c4 04	 add	 esp, 4
  0041d	8b 00		 mov	 eax, DWORD PTR [eax]
  0041f	50		 push	 eax
  00420	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00423	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Lrotate
$LN13@Insert_at:

; 1939 : 					}
; 1940 : 				}

  00428	e9 10 fd ff ff	 jmp	 $LN4@Insert_at
$LN3@Insert_at:

; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0042d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Root
  00435	8b 08		 mov	 ecx, DWORD PTR [eax]
  00437	51		 push	 ecx
  00438	e8 00 00 00 00	 call	 ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Color
  0043d	83 c4 04	 add	 esp, 4
  00440	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));

  00443	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00446	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Get_data
  0044b	50		 push	 eax
  0044c	8b 55 f8	 mov	 edx, DWORD PTR __Newnode$[ebp]
  0044f	52		 push	 edx
  00450	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00453	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
  00458	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
  0045b	83 c8 01	 or	 eax, 1
  0045e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00461	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN20@Insert_at:

; 1944 : 		}

  00464	5e		 pop	 esi
  00465	83 c4 14	 add	 esp, 20			; 00000014H
  00468	3b ec		 cmp	 ebp, esp
  0046a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0046f	8b e5		 mov	 esp, ebp
  00471	5d		 pop	 ebp
  00472	c2 14 00	 ret	 20			; 00000014H
??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv289 = -228						; size = 4
tv310 = -224						; size = 4
tv309 = -217						; size = 1
tv308 = -216						; size = 4
tv307 = -212						; size = 4
tv306 = -208						; size = 4
tv285 = -204						; size = 4
tv305 = -200						; size = 4
tv304 = -193						; size = 1
tv283 = -192						; size = 4
tv303 = -188						; size = 4
tv302 = -184						; size = 4
tv276 = -180						; size = 4
tv301 = -176						; size = 4
tv300 = -172						; size = 4
tv156 = -168						; size = 4
tv299 = -164						; size = 4
tv298 = -157						; size = 1
tv297 = -156						; size = 4
tv296 = -152						; size = 4
tv130 = -148						; size = 4
tv295 = -141						; size = 1
tv159 = -140						; size = 4
tv206 = -136						; size = 4
tv249 = -132						; size = 4
tv267 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -117						; size = 1
$T4 = -116						; size = 12
$T5 = -101						; size = 1
$T6 = -100						; size = 12
$T7 = -85						; size = 1
$T8 = -84						; size = 12
$T9 = -69						; size = 1
$T10 = -68						; size = 12
$T11 = -53						; size = 1
__Where$12 = -48					; size = 12
__Addleft$13 = -29					; size = 1
__Wherenode$14 = -28					; size = 4
__Trynode$15 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00022	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00046	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1800 : 		_TRY_BEGIN

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1801 : 		_Nodeptr _Trynode = _Root();

  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Root
  0005c	89 45 80	 mov	 DWORD PTR tv267[ebp], eax
  0005f	8b 45 80	 mov	 eax, DWORD PTR tv267[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	89 4d e8	 mov	 DWORD PTR __Trynode$15[ebp], ecx

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();

  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Myhead
  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	89 55 e4	 mov	 DWORD PTR __Wherenode$14[ebp], edx

; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00074	c6 45 e3 01	 mov	 BYTE PTR __Addleft$13[ebp], 1
$LN2@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00078	8b 45 e8	 mov	 eax, DWORD PTR __Trynode$15[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Isnil
  00081	83 c4 04	 add	 esp, 4
  00084	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  0008a	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv249[ebp]
  00090	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00093	85 d2		 test	 edx, edx
  00095	0f 85 4f 01 00
	00		 jne	 $LN3@Insert_noh

; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;

  0009b	8b 45 e8	 mov	 eax, DWORD PTR __Trynode$15[ebp]
  0009e	89 45 e4	 mov	 DWORD PTR __Wherenode$14[ebp], eax

; 1808 : 			if (_Leftish)

  000a1	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Leftish$[ebp]
  000a5	85 c9		 test	 ecx, ecx
  000a7	0f 84 84 00 00
	00		 je	 $LN5@Insert_noh

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  000ad	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  000b0	52		 push	 edx
  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  000b9	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], eax
  000bf	8b 45 e8	 mov	 eax, DWORD PTR __Trynode$15[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  000cb	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv159[ebp], eax
  000d1	68 13 07 00 00	 push	 1811			; 00000713H
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000db	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv206[ebp]
  000e1	51		 push	 ecx
  000e2	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv159[ebp]
  000e8	52		 push	 edx
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  000f1	8a 00		 mov	 al, BYTE PTR [eax]
  000f3	0f b6 c8	 movzx	 ecx, al
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  000fc	83 c4 14	 add	 esp, 20			; 00000014H
  000ff	88 85 73 ff ff
	ff		 mov	 BYTE PTR tv295[ebp], al
  00105	0f b6 95 73 ff
	ff ff		 movzx	 edx, BYTE PTR tv295[ebp]
  0010c	85 d2		 test	 edx, edx
  0010e	75 0c		 jne	 SHORT $LN16@Insert_noh
  00110	c7 85 6c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv130[ebp], 1
  0011a	eb 0a		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  0011c	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN17@Insert_noh:
  00126	8a 85 6c ff ff
	ff		 mov	 al, BYTE PTR tv130[ebp]
  0012c	88 45 e3	 mov	 BYTE PTR __Addleft$13[ebp], al

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  0012f	eb 61		 jmp	 SHORT $LN6@Insert_noh
$LN5@Insert_noh:

; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  00131	8b 4d e8	 mov	 ecx, DWORD PTR __Trynode$15[ebp]
  00134	51		 push	 ecx
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  0013d	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv296[ebp], eax
  00143	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00146	52		 push	 edx
  00147	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  0014f	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv297[ebp], eax
  00155	68 17 07 00 00	 push	 1815			; 00000717H
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0015f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv296[ebp]
  00165	50		 push	 eax
  00166	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv297[ebp]
  0016c	51		 push	 ecx
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  00175	8a 10		 mov	 dl, BYTE PTR [eax]
  00177	0f b6 c2	 movzx	 eax, dl
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00180	83 c4 14	 add	 esp, 20			; 00000014H
  00183	88 85 63 ff ff
	ff		 mov	 BYTE PTR tv298[ebp], al
  00189	8a 8d 63 ff ff
	ff		 mov	 cl, BYTE PTR tv298[ebp]
  0018f	88 4d e3	 mov	 BYTE PTR __Addleft$13[ebp], cl
$LN6@Insert_noh:

; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  00192	0f b6 55 e3	 movzx	 edx, BYTE PTR __Addleft$13[ebp]
  00196	85 d2		 test	 edx, edx
  00198	74 22		 je	 SHORT $LN18@Insert_noh
  0019a	8b 45 e8	 mov	 eax, DWORD PTR __Trynode$15[ebp]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Left
  001a3	83 c4 04	 add	 esp, 4
  001a6	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv299[ebp], eax
  001ac	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv299[ebp]
  001b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b4	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv156[ebp], edx
  001ba	eb 20		 jmp	 SHORT $LN19@Insert_noh
$LN18@Insert_noh:
  001bc	8b 45 e8	 mov	 eax, DWORD PTR __Trynode$15[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Right
  001c5	83 c4 04	 add	 esp, 4
  001c8	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv300[ebp], eax
  001ce	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv300[ebp]
  001d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d6	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv156[ebp], edx
$LN19@Insert_noh:
  001dc	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  001e2	89 45 e8	 mov	 DWORD PTR __Trynode$15[ebp], eax

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}

  001e5	e9 8e fe ff ff	 jmp	 $LN2@Insert_noh
$LN3@Insert_noh:

; 1819 : 
; 1820 : 		if (this->_Multi)

  001ea	33 c9		 xor	 ecx, ecx
  001ec	74 75		 je	 SHORT $LN7@Insert_noh

; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  001ee	c6 45 cb 01	 mov	 BYTE PTR $T11[ebp], 1
  001f2	8b 55 14	 mov	 edx, DWORD PTR __Newnode$[ebp]
  001f5	52		 push	 edx
  001f6	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  001ff	83 c4 04	 add	 esp, 4
  00202	50		 push	 eax
  00203	8b 4d e4	 mov	 ecx, DWORD PTR __Wherenode$14[ebp]
  00206	51		 push	 ecx
  00207	0f b6 55 e3	 movzx	 edx, BYTE PTR __Addleft$13[ebp]
  0020b	52		 push	 edx
  0020c	8d 45 bc	 lea	 eax, DWORD PTR $T10[ebp]
  0020f	50		 push	 eax
  00210	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00218	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv301[ebp], eax
  0021e	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv301[ebp]
  00224	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv276[ebp], ecx
  0022a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0022e	8d 55 cb	 lea	 edx, DWORD PTR $T11[ebp]
  00231	52		 push	 edx
  00232	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv276[ebp]
  00238	50		 push	 eax
  00239	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0023c	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool,void>
  00241	8b 4d 84	 mov	 ecx, DWORD PTR $T2[ebp]
  00244	83 c9 01	 or	 ecx, 1
  00247	89 4d 84	 mov	 DWORD PTR $T2[ebp], ecx
  0024a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0024e	8d 4d bc	 lea	 ecx, DWORD PTR $T10[ebp]
  00251	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00256	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00259	e9 6a 02 00 00	 jmp	 $LN15@Insert_noh

; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else

  0025e	e9 38 02 00 00	 jmp	 $LN8@Insert_noh
$LN7@Insert_noh:

; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());

  00263	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00266	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Get_data
  0026b	50		 push	 eax
  0026c	8b 55 e4	 mov	 edx, DWORD PTR __Wherenode$14[ebp]
  0026f	52		 push	 edx
  00270	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00273	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
  00278	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv302[ebp], eax
  0027e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 1826 : 			if (!_Addleft)

  00282	0f b6 45 e3	 movzx	 eax, BYTE PTR __Addleft$13[ebp]
  00286	85 c0		 test	 eax, eax
  00288	75 05		 jne	 SHORT $LN9@Insert_noh
  0028a	e9 d7 00 00 00	 jmp	 $LN10@Insert_noh
$LN9@Insert_noh:

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  0028f	8d 4d ac	 lea	 ecx, DWORD PTR $T8[ebp]
  00292	51		 push	 ecx
  00293	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00296	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::begin
  0029b	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv303[ebp], eax
  002a1	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv303[ebp]
  002a7	89 95 40 ff ff
	ff		 mov	 DWORD PTR tv283[ebp], edx
  002ad	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  002b1	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv283[ebp]
  002b7	50		 push	 eax
  002b8	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  002bb	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator==
  002c0	88 85 3f ff ff
	ff		 mov	 BYTE PTR tv304[ebp], al
  002c6	8a 8d 3f ff ff
	ff		 mov	 cl, BYTE PTR tv304[ebp]
  002cc	88 4d bb	 mov	 BYTE PTR $T9[ebp], cl
  002cf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  002d3	8d 4d ac	 lea	 ecx, DWORD PTR $T8[ebp]
  002d6	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  002db	0f b6 55 bb	 movzx	 edx, BYTE PTR $T9[ebp]
  002df	85 d2		 test	 edx, edx
  002e1	74 7b		 je	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  002e3	c6 45 ab 01	 mov	 BYTE PTR $T7[ebp], 1
  002e7	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  002ea	50		 push	 eax
  002eb	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  002ee	51		 push	 ecx
  002ef	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  002f4	83 c4 04	 add	 esp, 4
  002f7	50		 push	 eax
  002f8	8b 55 e4	 mov	 edx, DWORD PTR __Wherenode$14[ebp]
  002fb	52		 push	 edx
  002fc	6a 01		 push	 1
  002fe	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  00301	50		 push	 eax
  00302	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00305	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  0030a	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv305[ebp], eax
  00310	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv305[ebp]
  00316	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv285[ebp], ecx
  0031c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00320	8d 55 ab	 lea	 edx, DWORD PTR $T7[ebp]
  00323	52		 push	 edx
  00324	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv285[ebp]
  0032a	50		 push	 eax
  0032b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0032e	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool,void>
  00333	8b 4d 84	 mov	 ecx, DWORD PTR $T2[ebp]
  00336	83 c9 01	 or	 ecx, 1
  00339	89 4d 84	 mov	 DWORD PTR $T2[ebp], ecx
  0033c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00340	8d 4d 9c	 lea	 ecx, DWORD PTR $T6[ebp]
  00343	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00348	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0034c	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  0034f	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00354	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00357	e9 6c 01 00 00	 jmp	 $LN15@Insert_noh

; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else

  0035c	eb 08		 jmp	 SHORT $LN10@Insert_noh
$LN11@Insert_noh:

; 1832 : 				--_Where;	// need to test if insert before is okay

  0035e	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00361	e8 00 00 00 00	 call	 ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
$LN10@Insert_noh:

; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  00366	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00369	52		 push	 edx
  0036a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0036d	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Kfn
  00372	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv306[ebp], eax
  00378	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  0037b	e8 00 00 00 00	 call	 ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,std::_Iterator_base12>::_Mynode
  00380	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv307[ebp], eax
  00386	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv307[ebp]
  0038c	50		 push	 eax
  0038d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00390	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Key
  00395	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv308[ebp], eax
  0039b	68 2c 07 00 00	 push	 1836			; 0000072cH
  003a0	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@BEABFJGP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  003a5	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv306[ebp]
  003ab	51		 push	 ecx
  003ac	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv308[ebp]
  003b2	52		 push	 edx
  003b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003b6	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getcomp
  003bb	8a 00		 mov	 al, BYTE PTR [eax]
  003bd	0f b6 c8	 movzx	 ecx, al
  003c0	51		 push	 ecx
  003c1	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@@std@@YA_NU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  003c6	83 c4 14	 add	 esp, 20			; 00000014H
  003c9	88 85 27 ff ff
	ff		 mov	 BYTE PTR tv309[ebp], al
  003cf	0f b6 95 27 ff
	ff ff		 movzx	 edx, BYTE PTR tv309[ebp]
  003d6	85 d2		 test	 edx, edx
  003d8	74 7b		 je	 SHORT $LN13@Insert_noh

; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  003da	c6 45 9b 01	 mov	 BYTE PTR $T5[ebp], 1
  003de	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  003e1	50		 push	 eax
  003e2	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  003e5	51		 push	 ecx
  003e6	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
  003eb	83 c4 04	 add	 esp, 4
  003ee	50		 push	 eax
  003ef	8b 55 e4	 mov	 edx, DWORD PTR __Wherenode$14[ebp]
  003f2	52		 push	 edx
  003f3	0f b6 45 e3	 movzx	 eax, BYTE PTR __Addleft$13[ebp]
  003f7	50		 push	 eax
  003f8	8d 4d 8c	 lea	 ecx, DWORD PTR $T4[ebp]
  003fb	51		 push	 ecx
  003fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003ff	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
  00404	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv310[ebp], eax
  0040a	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv310[ebp]
  00410	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv289[ebp], edx
  00416	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0041a	8d 45 9b	 lea	 eax, DWORD PTR $T5[ebp]
  0041d	50		 push	 eax
  0041e	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00424	51		 push	 ecx
  00425	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00428	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool,void>
  0042d	8b 55 84	 mov	 edx, DWORD PTR $T2[ebp]
  00430	83 ca 01	 or	 edx, 1
  00433	89 55 84	 mov	 DWORD PTR $T2[ebp], edx
  00436	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0043a	8d 4d 8c	 lea	 ecx, DWORD PTR $T4[ebp]
  0043d	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  00442	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00446	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00449	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  0044e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00451	eb 75		 jmp	 SHORT $LN15@Insert_noh

; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else

  00453	eb 3a		 jmp	 SHORT $LN14@Insert_noh
$LN13@Insert_noh:

; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);

  00455	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00458	50		 push	 eax
  00459	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0045c	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil

; 1842 : 				return (_Pairib(_Where, false));

  00461	c6 45 8b 00	 mov	 BYTE PTR $T3[ebp], 0
  00465	8d 4d 8b	 lea	 ecx, DWORD PTR $T3[ebp]
  00468	51		 push	 ecx
  00469	8d 55 d0	 lea	 edx, DWORD PTR __Where$12[ebp]
  0046c	52		 push	 edx
  0046d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00470	e8 00 00 00 00	 call	 ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &,bool,void>
  00475	8b 45 84	 mov	 eax, DWORD PTR $T2[ebp]
  00478	83 c8 01	 or	 eax, 1
  0047b	89 45 84	 mov	 DWORD PTR $T2[ebp], eax
  0047e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00482	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00485	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
  0048a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0048d	eb 39		 jmp	 SHORT $LN15@Insert_noh
$LN14@Insert_noh:

; 1843 : 				}
; 1844 : 			}

  0048f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00493	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00496	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
$LN8@Insert_noh:
  0049b	eb 1b		 jmp	 SHORT $LN20@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$0:

; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);

  0049d	8b 4d 14	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  004a0	51		 push	 ecx
  004a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  004a4	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Destroy_if_not_nil

; 1847 : 		_RERAISE;

  004a9	6a 00		 push	 0
  004ab	6a 00		 push	 0
  004ad	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1848 : 		_CATCH_END

  004b2	b8 00 00 00 00	 mov	 eax, $LN30@Insert_noh
  004b7	c3		 ret	 0
$LN20@Insert_noh:
  004b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  004bf	eb 07		 jmp	 SHORT $LN15@Insert_noh
$LN30@Insert_noh:
  004c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN15@Insert_noh:

; 1849 : 		}

  004c8	52		 push	 edx
  004c9	8b cd		 mov	 ecx, ebp
  004cb	50		 push	 eax
  004cc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN34@Insert_noh
  004d2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004d7	58		 pop	 eax
  004d8	5a		 pop	 edx
  004d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  004dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004e3	59		 pop	 ecx
  004e4	5f		 pop	 edi
  004e5	5e		 pop	 esi
  004e6	5b		 pop	 ebx
  004e7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  004ed	3b ec		 cmp	 ebp, esp
  004ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f4	8b e5		 mov	 esp, ebp
  004f6	5d		 pop	 ebp
  004f7	c2 10 00	 ret	 16			; 00000010H
  004fa	66 90		 npad	 2
$LN34@Insert_noh:
  004fc	01 00 00 00	 DD	 1
  00500	00 00 00 00	 DD	 $LN33@Insert_noh
$LN33@Insert_noh:
  00504	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00508	0c 00 00 00	 DD	 12			; 0000000cH
  0050c	00 00 00 00	 DD	 $LN31@Insert_noh
$LN31@Insert_noh:
  00510	5f		 DB	 95			; 0000005fH
  00511	57		 DB	 87			; 00000057H
  00512	68		 DB	 104			; 00000068H
  00513	65		 DB	 101			; 00000065H
  00514	72		 DB	 114			; 00000072H
  00515	65		 DB	 101			; 00000065H
  00516	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$2:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR $T10[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$4:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$5:
  00010	8d 4d ac	 lea	 ecx, DWORD PTR $T8[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$6:
  00018	8d 4d 9c	 lea	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z$7:
  00020	8d 4d 8c	 lea	 ecx, DWORD PTR $T4[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> *>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--, COMDAT
; _this$ = ecx

; 422  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 		--(*(_Mybase *)this);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--

; 424  : 		return (*this);

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 425  : 		}

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1211 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1212 : 		return (this->_Getal().max_size());

  00017	0f b6 45 fb	 movzx	 eax, BYTE PTR $T1[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size

; 1213 : 		}

  0002b	83 c4 08	 add	 esp, 8
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 929  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 930  : 		return (_Mytraits::max_size(*this));

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size
  00017	83 c4 04	 add	 esp, 4

; 931  : 		}

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 922  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>,1>::_Get_second
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>::_Get_first

; 924  : 		}

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 298  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  : 		return (*this);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 300  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size, COMDAT

; 784  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 785  : 		return (_Al.max_size());

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00006	e8 00 00 00 00	 call	 ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::max_size

; 786  : 		}

  0000b	3b ec		 cmp	 ebp, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::max_size, COMDAT
; _this$ = ecx

; 666  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  0000e	b8 24 49 92 04	 mov	 eax, 76695844		; 04924924H

; 668  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >

; 774  : 		}

  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00031	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >

; 774  : 		}

  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode_if_nil<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>, COMDAT
; _this$ = ecx

; 1657 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1658 : 		return (_Node);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1659 : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,Vector3f,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> >,0> >::_Buynode_if_nil<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8a 00		 mov	 al, BYTE PTR [eax]
  00034	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 146  : 		}

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8a 00		 mov	 al, BYTE PTR [eax]
  00034	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 146  : 		}

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv137 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	6a 20		 push	 32			; 00000020H
  00045	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0004a	83 c4 08	 add	 esp, 8
  0004d	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00057	83 7d e8 00	 cmp	 DWORD PTR $T4[ebp], 0
  0005b	74 47		 je	 SHORT $LN3@construct
  0005d	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00066	8b cc		 mov	 ecx, esp
  00068	89 65 e4	 mov	 DWORD PTR $T3[ebp], esp
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@ABV01@@Z ; std::tuple<>::tuple<>
  00071	8b 55 10	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  0007a	8b cc		 mov	 ecx, esp
  0007c	89 65 e0	 mov	 DWORD PTR $T2[ebp], esp
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00085	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  0008e	83 c4 04	 add	 esp, 4
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	0f b6 d1	 movzx	 edx, cl
  00096	52		 push	 edx
  00097	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  0009a	e8 00 00 00 00	 call	 ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0009f	89 45 dc	 mov	 DWORD PTR tv137[ebp], eax
  000a2	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  000a4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN4@construct:
  000ab	8b 45 dc	 mov	 eax, DWORD PTR tv137[ebp]
  000ae	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  000b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 656  : 		}

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	83 c4 24	 add	 esp, 36			; 00000024H
  000c6	3b ec		 cmp	 ebp, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv137 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	6a 28		 push	 40			; 00000028H
  00045	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0004a	83 c4 08	 add	 esp, 8
  0004d	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00057	83 7d e8 00	 cmp	 DWORD PTR $T4[ebp], 0
  0005b	74 47		 je	 SHORT $LN3@construct
  0005d	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00066	8b cc		 mov	 ecx, esp
  00068	89 65 e4	 mov	 DWORD PTR $T3[ebp], esp
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@ABV01@@Z ; std::tuple<>::tuple<>
  00071	8b 55 10	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
  0007a	8b cc		 mov	 ecx, esp
  0007c	89 65 e0	 mov	 DWORD PTR $T2[ebp], esp
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00085	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  0008e	83 c4 04	 add	 esp, 4
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	0f b6 d1	 movzx	 edx, cl
  00096	52		 push	 edx
  00097	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  0009a	e8 00 00 00 00	 call	 ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0009f	89 45 dc	 mov	 DWORD PTR tv137[ebp], eax
  000a2	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  000a4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN4@construct:
  000ab	8b 45 dc	 mov	 eax, DWORD PTR tv137[ebp]
  000ae	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  000b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 656  : 		}

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	83 c4 24	 add	 esp, 36			; 00000024H
  000c6	3b ec		 cmp	 ebp, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f> > > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 843  : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 840  : 		: pair(_Val1, _Val2,

  00017	0f b6 45 fb	 movzx	 eax, BYTE PTR $T2[ebp]
  0001b	50		 push	 eax
  0001c	0f b6 4d fa	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8d 55 10	 lea	 edx, DWORD PTR __Val2$[ebp]
  00024	52		 push	 edx
  00025	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>

; 844  : 		}

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 c4 08	 add	 esp, 8
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 843  : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 840  : 		: pair(_Val1, _Val2,

  00017	0f b6 45 fb	 movzx	 eax, BYTE PTR $T2[ebp]
  0001b	50		 push	 eax
  0001c	0f b6 4d fa	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8d 55 10	 lea	 edx, DWORD PTR __Val2$[ebp]
  00024	52		 push	 edx
  00025	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>

; 844  : 		}

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 c4 08	 add	 esp, 8
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 827  : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 828  : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 830  : 		}

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 827  : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>
  00036	83 c4 04	 add	 esp, 4
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 828  : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00052	51		 push	 ecx
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	51		 push	 ecx
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	51		 push	 ecx
  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00082	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f

; 830  : 		}

  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@VVector3f@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,Vector3f><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
END
