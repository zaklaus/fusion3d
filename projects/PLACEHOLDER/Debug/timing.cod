; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\core\timing.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__QueryPerformanceCounter@4:PROC
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
?g_timerInitialized@@3_NA DB 01H DUP (?)		; g_timerInitialized
_BSS	ENDS
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
$SG4294866194 DB 'QueryPerformanceCounter failed in get time!', 00H
	ORG $+3
$SG4294866195 DB 'QueryPerformanceFrequency failed in timer initializatio'
	DB	'n', 00H
	ORG $+3
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
	ORG $+1
$SG4294866152 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294866153 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294866148 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294866149 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294866146 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
$SG4294866147 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
PUBLIC	?HasElapsed@Time@@YAHH@Z			; Time::HasElapsed
PUBLIC	?GetTime@Time@@YANXZ				; Time::GetTime
?g_freq@@3NA DQ	01H DUP (?)				; g_freq
_BSS	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\timing.cpp
_TEXT	SEGMENT
tv140 = -40						; size = 8
_li$ = -28						; size = 8
_li$1 = -12						; size = 8
?GetTime@Time@@YANXZ PROC				; Time::GetTime

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000b	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 45   : 	#ifdef OS_WINDOWS
; 46   : 		if(!g_timerInitialized)

  00017	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_timerInitialized@@3_NA
  0001e	85 c0		 test	 eax, eax
  00020	75 5b		 jne	 SHORT $LN2@GetTime

; 47   : 		{
; 48   : 			LARGE_INTEGER li;
; 49   : 			if(!QueryPerformanceFrequency(&li))

  00022	8b f4		 mov	 esi, esp
  00024	8d 4d f4	 lea	 ecx, DWORD PTR _li$1[ebp]
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryPerformanceFrequency@4
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	75 2a		 jne	 SHORT $LN3@GetTime

; 50   : 				std::cerr << "QueryPerformanceFrequency failed in timer initialization"  << std::endl;

  00039	8b f4		 mov	 esi, esp
  0003b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00040	68 00 00 00 00	 push	 OFFSET $SG4294866195
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00051	83 c4 08	 add	 esp, 8
  00054	8b c8		 mov	 ecx, eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@GetTime:

; 51   : 			
; 52   : 			g_freq = double(li.QuadPart);

  00063	8b 55 f8	 mov	 edx, DWORD PTR _li$1[ebp+4]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR _li$1[ebp]
  00069	e8 00 00 00 00	 call	 __ltod3
  0006e	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?g_freq@@3NA, xmm0

; 53   : 			g_timerInitialized = true;

  00076	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_timerInitialized@@3_NA, 1
$LN2@GetTime:

; 54   : 		}
; 55   : 	
; 56   : 		LARGE_INTEGER li;
; 57   : 		if(!QueryPerformanceCounter(&li))

  0007d	8b f4		 mov	 esi, esp
  0007f	8d 45 e4	 lea	 eax, DWORD PTR _li$[ebp]
  00082	50		 push	 eax
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryPerformanceCounter@4
  00089	3b f4		 cmp	 esi, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	85 c0		 test	 eax, eax
  00092	75 2a		 jne	 SHORT $LN4@GetTime

; 58   : 			std::cerr << "QueryPerformanceCounter failed in get time!" << std::endl;

  00094	8b f4		 mov	 esi, esp
  00096	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0009b	68 00 00 00 00	 push	 OFFSET $SG4294866194
  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ac	83 c4 08	 add	 esp, 8
  000af	8b c8		 mov	 ecx, eax
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@GetTime:

; 59   : 		
; 60   : 		return double(li.QuadPart)/g_freq;

  000be	8b 55 e8	 mov	 edx, DWORD PTR _li$[ebp+4]
  000c1	8b 4d e4	 mov	 ecx, DWORD PTR _li$[ebp]
  000c4	e8 00 00 00 00	 call	 __ltod3
  000c9	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR ?g_freq@@3NA
  000d1	f2 0f 11 45 d8	 movsd	 QWORD PTR tv140[ebp], xmm0
  000d6	dd 45 d8	 fld	 QWORD PTR tv140[ebp]

; 61   : 	#endif
; 62   : 
; 63   : 	#ifdef OS_LINUX
; 64   : 		timespec ts;
; 65   : 		clock_gettime(CLOCK_REALTIME, &ts);
; 66   : 		return (double)(((long) ts.tv_sec * NANOSECONDS_PER_SECOND) + ts.tv_nsec)/((double)(NANOSECONDS_PER_SECOND));
; 67   : 	#endif
; 68   : 
; 69   : 	#ifdef OS_OTHER_CPP11
; 70   : 		return std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now() - m_epoch).count() / 1000000000.0;
; 71   : 	#endif
; 72   : 
; 73   : 	#ifdef OS_OTHER
; 74   : 		return (double)SDL_GetTicks()/1000.0;
; 75   : 	#endif
; 76   : }

  000d9	52		 push	 edx
  000da	8b cd		 mov	 ecx, ebp
  000dc	50		 push	 eax
  000dd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@GetTime
  000e3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e8	58		 pop	 eax
  000e9	5a		 pop	 edx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	83 c4 28	 add	 esp, 40			; 00000028H
  000ef	3b ec		 cmp	 ebp, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
  000fa	66 90		 npad	 2
$LN9@GetTime:
  000fc	02 00 00 00	 DD	 2
  00100	00 00 00 00	 DD	 $LN8@GetTime
$LN8@GetTime:
  00104	f4 ff ff ff	 DD	 -12			; fffffff4H
  00108	08 00 00 00	 DD	 8
  0010c	00 00 00 00	 DD	 $LN6@GetTime
  00110	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00114	08 00 00 00	 DD	 8
  00118	00 00 00 00	 DD	 $LN7@GetTime
$LN7@GetTime:
  0011c	6c		 DB	 108			; 0000006cH
  0011d	69		 DB	 105			; 00000069H
  0011e	00		 DB	 0
$LN6@GetTime:
  0011f	6c		 DB	 108			; 0000006cH
  00120	69		 DB	 105			; 00000069H
  00121	00		 DB	 0
?GetTime@Time@@YANXZ ENDP				; Time::GetTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\timing.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
?HasElapsed@Time@@YAHH@Z PROC				; Time::HasElapsed

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	return NULL;

  00003	33 c0		 xor	 eax, eax

; 82   : }

  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
?HasElapsed@Time@@YAHH@Z ENDP				; Time::HasElapsed
_TEXT	ENDS
END
