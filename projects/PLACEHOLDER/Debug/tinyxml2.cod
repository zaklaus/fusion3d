; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4XMLAttribute@tinyxml2@@6B@			; tinyxml2::XMLAttribute::`RTTI Complete Object Locator'
PUBLIC	??_R3XMLAttribute@tinyxml2@@8			; tinyxml2::XMLAttribute::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8		; tinyxml2::MemPoolT<48> `RTTI Type Descriptor'
PUBLIC	??_R0?AVXMLText@tinyxml2@@@8			; tinyxml2::XMLText `RTTI Type Descriptor'
PUBLIC	??_R3?$MemPoolT@$0CM@@tinyxml2@@8		; tinyxml2::MemPoolT<44>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVXMLVisitor@tinyxml2@@@8			; tinyxml2::XMLVisitor `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8	; tinyxml2::MemPoolT<44>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2XMLPrinter@tinyxml2@@8			; tinyxml2::XMLPrinter::`RTTI Base Class Array'
PUBLIC	??_R4XMLComment@tinyxml2@@6B@			; tinyxml2::XMLComment::`RTTI Complete Object Locator'
PUBLIC	??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<36>::`RTTI Complete Object Locator'
PUBLIC	??_7?$MemPoolT@$0DA@@tinyxml2@@6B@		; tinyxml2::MemPoolT<48>::`vftable'
PUBLIC	??_7XMLPrinter@tinyxml2@@6B@			; tinyxml2::XMLPrinter::`vftable'
PUBLIC	??_R1A@?0A@EA@XMLElement@tinyxml2@@8		; tinyxml2::XMLElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$MemPoolT@$0CM@@tinyxml2@@6B@		; tinyxml2::MemPoolT<44>::`vftable'
PUBLIC	??_7XMLComment@tinyxml2@@6B@			; tinyxml2::XMLComment::`vftable'
PUBLIC	??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8		; tinyxml2::XMLUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLDocument@tinyxml2@@6B@			; tinyxml2::XMLDocument::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8	; tinyxml2::MemPoolT<52>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2XMLVisitor@tinyxml2@@8			; tinyxml2::XMLVisitor::`RTTI Base Class Array'
PUBLIC	??_7?$MemPoolT@$0DE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<52>::`vftable'
PUBLIC	??_R4MemPool@tinyxml2@@6B@			; tinyxml2::MemPool::`RTTI Complete Object Locator'
PUBLIC	??_R2XMLText@tinyxml2@@8			; tinyxml2::XMLText::`RTTI Base Class Array'
PUBLIC	??_R3XMLVisitor@tinyxml2@@8			; tinyxml2::XMLVisitor::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7XMLText@tinyxml2@@6B@			; tinyxml2::XMLText::`vftable'
PUBLIC	??_7XMLVisitor@tinyxml2@@6B@			; tinyxml2::XMLVisitor::`vftable'
PUBLIC	??_R0?AVXMLPrinter@tinyxml2@@@8			; tinyxml2::XMLPrinter `RTTI Type Descriptor'
PUBLIC	??_R4XMLDeclaration@tinyxml2@@6B@		; tinyxml2::XMLDeclaration::`RTTI Complete Object Locator'
PUBLIC	??_7XMLElement@tinyxml2@@6B@			; tinyxml2::XMLElement::`vftable'
PUBLIC	??_R1A@?0A@EA@MemPool@tinyxml2@@8		; tinyxml2::MemPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7MemPool@tinyxml2@@6B@			; tinyxml2::MemPool::`vftable'
PUBLIC	??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8		; tinyxml2::MemPoolT<44> `RTTI Type Descriptor'
PUBLIC	??_R3XMLUnknown@tinyxml2@@8			; tinyxml2::XMLUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4XMLUnknown@tinyxml2@@6B@			; tinyxml2::XMLUnknown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLComment@tinyxml2@@@8			; tinyxml2::XMLComment `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@XMLDocument@tinyxml2@@8		; tinyxml2::XMLDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3XMLElement@tinyxml2@@8			; tinyxml2::XMLElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLComment@tinyxml2@@8			; tinyxml2::XMLComment::`RTTI Base Class Array'
PUBLIC	??_R0?AVXMLUnknown@tinyxml2@@@8			; tinyxml2::XMLUnknown `RTTI Type Descriptor'
PUBLIC	??_R0?AVXMLDeclaration@tinyxml2@@@8		; tinyxml2::XMLDeclaration `RTTI Type Descriptor'
PUBLIC	??_R3?$MemPoolT@$0CE@@tinyxml2@@8		; tinyxml2::MemPoolT<36>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLDeclaration@tinyxml2@@8			; tinyxml2::XMLDeclaration::`RTTI Base Class Array'
PUBLIC	??_R0?AVXMLNode@tinyxml2@@@8			; tinyxml2::XMLNode `RTTI Type Descriptor'
PUBLIC	??_7XMLAttribute@tinyxml2@@6B@			; tinyxml2::XMLAttribute::`vftable'
PUBLIC	??_R3XMLText@tinyxml2@@8			; tinyxml2::XMLText::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$MemPoolT@$0DE@@tinyxml2@@8		; tinyxml2::MemPoolT<52>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLComment@tinyxml2@@8		; tinyxml2::XMLComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$MemPoolT@$0DE@@tinyxml2@@8		; tinyxml2::MemPoolT<52>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<52>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLElement@tinyxml2@@@8			; tinyxml2::XMLElement `RTTI Type Descriptor'
PUBLIC	??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8		; tinyxml2::MemPoolT<52> `RTTI Type Descriptor'
PUBLIC	??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@		; tinyxml2::MemPoolT<44>::`RTTI Complete Object Locator'
PUBLIC	??_R2XMLUnknown@tinyxml2@@8			; tinyxml2::XMLUnknown::`RTTI Base Class Array'
PUBLIC	??_R4XMLElement@tinyxml2@@6B@			; tinyxml2::XMLElement::`RTTI Complete Object Locator'
PUBLIC	??_7XMLNode@tinyxml2@@6B@			; tinyxml2::XMLNode::`vftable'
PUBLIC	??_R2?$MemPoolT@$0CE@@tinyxml2@@8		; tinyxml2::MemPoolT<36>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLText@tinyxml2@@8		; tinyxml2::XMLText::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2XMLDocument@tinyxml2@@8			; tinyxml2::XMLDocument::`RTTI Base Class Array'
PUBLIC	??_R2?$MemPoolT@$0DA@@tinyxml2@@8		; tinyxml2::MemPoolT<48>::`RTTI Base Class Array'
PUBLIC	??_R2XMLAttribute@tinyxml2@@8			; tinyxml2::XMLAttribute::`RTTI Base Class Array'
PUBLIC	??_R4XMLText@tinyxml2@@6B@			; tinyxml2::XMLText::`RTTI Complete Object Locator'
PUBLIC	??_7XMLDeclaration@tinyxml2@@6B@		; tinyxml2::XMLDeclaration::`vftable'
PUBLIC	??_R3XMLDocument@tinyxml2@@8			; tinyxml2::XMLDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLElement@tinyxml2@@8			; tinyxml2::XMLElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8		; tinyxml2::XMLPrinter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8	; tinyxml2::MemPoolT<48>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8	; tinyxml2::MemPoolT<36>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3XMLNode@tinyxml2@@8			; tinyxml2::XMLNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@XMLNode@tinyxml2@@8		; tinyxml2::XMLNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$MemPoolT@$0CE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<36>::`vftable'
PUBLIC	??_R3XMLPrinter@tinyxml2@@8			; tinyxml2::XMLPrinter::`RTTI Class Hierarchy Descriptor'
PUBLIC	?_errorNames@XMLDocument@tinyxml2@@0PAPBDA	; tinyxml2::XMLDocument::_errorNames
PUBLIC	??_7XMLDocument@tinyxml2@@6B@			; tinyxml2::XMLDocument::`vftable'
PUBLIC	??_R0?AVMemPool@tinyxml2@@@8			; tinyxml2::MemPool `RTTI Type Descriptor'
PUBLIC	??_R0?AVXMLDocument@tinyxml2@@@8		; tinyxml2::XMLDocument `RTTI Type Descriptor'
PUBLIC	??_R4XMLNode@tinyxml2@@6B@			; tinyxml2::XMLNode::`RTTI Complete Object Locator'
PUBLIC	??_R2?$MemPoolT@$0CM@@tinyxml2@@8		; tinyxml2::MemPoolT<44>::`RTTI Base Class Array'
PUBLIC	??_R2MemPool@tinyxml2@@8			; tinyxml2::MemPool::`RTTI Base Class Array'
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8		; tinyxml2::XMLVisitor::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$MemPoolT@$0DA@@tinyxml2@@8		; tinyxml2::MemPoolT<48>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLNode@tinyxml2@@8			; tinyxml2::XMLNode::`RTTI Base Class Array'
PUBLIC	??_R3MemPool@tinyxml2@@8			; tinyxml2::MemPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVXMLAttribute@tinyxml2@@@8		; tinyxml2::XMLAttribute `RTTI Type Descriptor'
PUBLIC	??_R4XMLPrinter@tinyxml2@@6B@			; tinyxml2::XMLPrinter::`RTTI Complete Object Locator'
PUBLIC	??_7XMLUnknown@tinyxml2@@6B@			; tinyxml2::XMLUnknown::`vftable'
PUBLIC	??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8	; tinyxml2::XMLDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@		; tinyxml2::MemPoolT<48>::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8		; tinyxml2::XMLAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8		; tinyxml2::MemPoolT<36> `RTTI Type Descriptor'
PUBLIC	??_R3XMLDeclaration@tinyxml2@@8			; tinyxml2::XMLDeclaration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4XMLVisitor@tinyxml2@@6B@			; tinyxml2::XMLVisitor::`RTTI Complete Object Locator'
PUBLIC	??_R3XMLComment@tinyxml2@@8			; tinyxml2::XMLComment::`RTTI Class Hierarchy Descriptor'
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp__isspace:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__fopen_s:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp__isalpha:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ferror:PROC
EXTRN	__imp__ftell:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R3XMLComment@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLComment@tinyxml2@@8 DD 00H			; tinyxml2::XMLComment::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLComment@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4XMLVisitor@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLVisitor@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLVisitor::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLVisitor@tinyxml2@@@8
	DD	FLAT:??_R3XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLDeclaration@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLDeclaration@tinyxml2@@8 DD 00H			; tinyxml2::XMLDeclaration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLDeclaration@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<36> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0CE@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ?elementHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB
CONST	SEGMENT
?elementHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 01H ; `tinyxml2::XMLDocument::Identify'::`2'::elementHeaderLen
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8 DD FLAT:??_R0?AVXMLAttribute@tinyxml2@@@8 ; tinyxml2::XMLAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLAttribute@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?cdataHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB
CONST	SEGMENT
?cdataHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 09H ; `tinyxml2::XMLDocument::Identify'::`2'::cdataHeaderLen
CONST	ENDS
;	COMDAT ??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<48>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8 DD FLAT:??_R0?AVXMLDeclaration@tinyxml2@@@8 ; tinyxml2::XMLDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLDeclaration@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?LEN@?4??PrintError@XMLDocument@tinyxml2@@QBEXXZ@4HB
CONST	SEGMENT
?LEN@?4??PrintError@XMLDocument@tinyxml2@@QBEXXZ@4HB DD 014H ; `tinyxml2::XMLDocument::PrintError'::`5'::LEN
CONST	ENDS
;	COMDAT ??_7XMLUnknown@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLUnknown@tinyxml2@@6B@ DD FLAT:??_R4XMLUnknown@tinyxml2@@6B@ ; tinyxml2::XMLUnknown::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:??_EXMLUnknown@tinyxml2@@MAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLUnknown@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_R4XMLPrinter@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLPrinter@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLPrinter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLPrinter@tinyxml2@@@8
	DD	FLAT:??_R3XMLPrinter@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLAttribute@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLAttribute@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLAttribute `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLAttribute@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R3MemPool@tinyxml2@@8
rdata$r	SEGMENT
??_R3MemPool@tinyxml2@@8 DD 00H				; tinyxml2::MemPool::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLNode@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLNode@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8 ; tinyxml2::XMLNode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ?dtdHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB
CONST	SEGMENT
?dtdHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 02H ; `tinyxml2::XMLDocument::Identify'::`2'::dtdHeaderLen
CONST	ENDS
;	COMDAT ??_R3?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0DA@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<48>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8 DD FLAT:??_R0?AVXMLVisitor@tinyxml2@@@8 ; tinyxml2::XMLVisitor::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2MemPool@tinyxml2@@8
rdata$r	SEGMENT
??_R2MemPool@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8 ; tinyxml2::MemPool::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0CM@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8 ; tinyxml2::MemPoolT<44>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?dtdHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
_DATA	SEGMENT
?dtdHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:$SG4294882684 ; `tinyxml2::XMLDocument::Identify'::`2'::dtdHeader
_DATA	ENDS
;	COMDAT ??_R4XMLNode@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLNode@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLNode@tinyxml2@@@8
	DD	FLAT:??_R3XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?bom@?4??PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z@4QBEB
CONST	SEGMENT
?bom@?4??PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z@4QBEB DB 0efH ; `tinyxml2::XMLPrinter::PushHeader'::`5'::bom
	DB	0bbH
	DB	0bfH
	DB	00H
CONST	ENDS
;	COMDAT ??_R0?AVXMLDocument@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLDocument@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLDocument@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVMemPool@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVMemPool@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@	; tinyxml2::MemPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemPool@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_7XMLDocument@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLDocument@tinyxml2@@6B@ DD FLAT:??_R4XMLDocument@tinyxml2@@6B@ ; tinyxml2::XMLDocument::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z
	DD	FLAT:?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:??_EXMLDocument@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_R3XMLPrinter@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLPrinter@tinyxml2@@8 DD 00H			; tinyxml2::XMLPrinter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLPrinter@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7?$MemPoolT@$0CE@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0CE@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<36>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLNode@tinyxml2@@8 DD FLAT:??_R0?AVXMLNode@tinyxml2@@@8 ; tinyxml2::XMLNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLNode@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLNode@tinyxml2@@8 DD 00H				; tinyxml2::XMLNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?xmlHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB
CONST	SEGMENT
?xmlHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 02H ; `tinyxml2::XMLDocument::Identify'::`2'::xmlHeaderLen
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8 ; tinyxml2::MemPoolT<36>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8 ; tinyxml2::MemPoolT<48>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8 DD FLAT:??_R0?AVXMLPrinter@tinyxml2@@@8 ; tinyxml2::XMLPrinter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLPrinter@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLElement@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLElement@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLElement@tinyxml2@@8 ; tinyxml2::XMLElement::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLDocument@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLDocument@tinyxml2@@8 DD 00H			; tinyxml2::XMLDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLDocument@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7XMLDeclaration@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLDeclaration@tinyxml2@@6B@ DD FLAT:??_R4XMLDeclaration@tinyxml2@@6B@ ; tinyxml2::XMLDeclaration::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:??_EXMLDeclaration@tinyxml2@@MAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLDeclaration@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_R4XMLText@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLText@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLText::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLText@tinyxml2@@@8
	DD	FLAT:??_R3XMLText@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?xmlHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
_DATA	SEGMENT
?xmlHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:$SG4294882687 ; `tinyxml2::XMLDocument::Identify'::`2'::xmlHeader
_DATA	ENDS
;	COMDAT ??_R2XMLAttribute@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLAttribute@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8 ; tinyxml2::XMLAttribute::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0DA@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8 ; tinyxml2::MemPoolT<48>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLDocument@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLDocument@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLDocument@tinyxml2@@8 ; tinyxml2::XMLDocument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLText@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLText@tinyxml2@@8 DD FLAT:??_R0?AVXMLText@tinyxml2@@@8 ; tinyxml2::XMLText::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLText@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0CE@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8 ; tinyxml2::MemPoolT<36>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7XMLNode@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLNode@tinyxml2@@6B@ DD FLAT:??_R4XMLNode@tinyxml2@@6B@ ; tinyxml2::XMLNode::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXMLNode@tinyxml2@@MAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_R4XMLElement@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLElement@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLElement@tinyxml2@@@8
	DD	FLAT:??_R3XMLElement@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLUnknown@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLUnknown@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8 ; tinyxml2::XMLUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<44>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<52> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0DE@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVXMLElement@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLElement@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLElement@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ?commentHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB
CONST	SEGMENT
?commentHeaderLen@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 04H ; `tinyxml2::XMLDocument::Identify'::`2'::commentHeaderLen
CONST	ENDS
;	COMDAT ??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<52>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?SEMICOLON@?4??GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z@4DB
CONST	SEGMENT
?SEMICOLON@?4??GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z@4DB DB 03bH ; `tinyxml2::XMLUtil::GetCharacterRef'::`5'::SEMICOLON
CONST	ENDS
;	COMDAT ??_R3?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0DE@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<52>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLComment@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLComment@tinyxml2@@8 DD FLAT:??_R0?AVXMLComment@tinyxml2@@@8 ; tinyxml2::XMLComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLComment@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ?elementHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
_DATA	SEGMENT
?elementHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:$SG4294882683 ; `tinyxml2::XMLDocument::Identify'::`2'::elementHeader
_DATA	ENDS
;	COMDAT ??_R2?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0DE@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8 ; tinyxml2::MemPoolT<52>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLText@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLText@tinyxml2@@8 DD 00H				; tinyxml2::XMLText::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLText@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7XMLAttribute@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLAttribute@tinyxml2@@6B@ DD FLAT:??_R4XMLAttribute@tinyxml2@@6B@ ; tinyxml2::XMLAttribute::`vftable'
	DD	FLAT:??_EXMLAttribute@tinyxml2@@EAEPAXI@Z
CONST	ENDS
;	COMDAT ?commentHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
_DATA	SEGMENT
?commentHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:$SG4294882686 ; `tinyxml2::XMLDocument::Identify'::`2'::commentHeader
_DATA	ENDS
;	COMDAT ??_R0?AVXMLNode@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLNode@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@	; tinyxml2::XMLNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLNode@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R2XMLDeclaration@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLDeclaration@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8 ; tinyxml2::XMLDeclaration::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0CE@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<36>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLDeclaration@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLDeclaration@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLDeclaration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLDeclaration@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVXMLUnknown@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLUnknown@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLUnknown@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R2XMLComment@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLComment@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLComment@tinyxml2@@8 ; tinyxml2::XMLComment::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLElement@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLElement@tinyxml2@@8 DD 00H			; tinyxml2::XMLElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLElement@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLDocument@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLDocument@tinyxml2@@8 DD FLAT:??_R0?AVXMLDocument@tinyxml2@@@8 ; tinyxml2::XMLDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLDocument@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLComment@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLComment@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLComment `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLComment@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLUnknown@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLUnknown@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLUnknown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLUnknown@tinyxml2@@@8
	DD	FLAT:??_R3XMLUnknown@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLUnknown@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLUnknown@tinyxml2@@8 DD 00H			; tinyxml2::XMLUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLUnknown@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<44> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0CM@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_7MemPool@tinyxml2@@6B@
CONST	SEGMENT
??_7MemPool@tinyxml2@@6B@ DD FLAT:??_R4MemPool@tinyxml2@@6B@ ; tinyxml2::MemPool::`vftable'
	DD	FLAT:??_EMemPool@tinyxml2@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemPool@tinyxml2@@8 DD FLAT:??_R0?AVMemPool@tinyxml2@@@8 ; tinyxml2::MemPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7XMLElement@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLElement@tinyxml2@@6B@ DD FLAT:??_R4XMLElement@tinyxml2@@6B@ ; tinyxml2::XMLElement::`vftable'
	DD	FLAT:?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:??_EXMLElement@tinyxml2@@EAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLElement@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_R4XMLDeclaration@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLDeclaration@tinyxml2@@6B@ DD 00H		; tinyxml2::XMLDeclaration::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLDeclaration@tinyxml2@@@8
	DD	FLAT:??_R3XMLDeclaration@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLPrinter@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLPrinter@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLPrinter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLPrinter@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_7XMLVisitor@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLVisitor@tinyxml2@@6B@ DD FLAT:??_R4XMLVisitor@tinyxml2@@6B@ ; tinyxml2::XMLVisitor::`vftable'
	DD	FLAT:??_EXMLVisitor@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
	DD	FLAT:?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z
	DD	FLAT:?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
CONST	ENDS
;	COMDAT ??_7XMLText@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLText@tinyxml2@@6B@ DD FLAT:??_R4XMLText@tinyxml2@@6B@ ; tinyxml2::XMLText::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLText@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToText@XMLText@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:??_EXMLText@tinyxml2@@MAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLText@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_R3XMLVisitor@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLVisitor@tinyxml2@@8 DD 00H			; tinyxml2::XMLVisitor::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLText@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLText@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLText@tinyxml2@@8 ; tinyxml2::XMLText::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4MemPool@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4MemPool@tinyxml2@@6B@ DD 00H			; tinyxml2::MemPool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemPool@tinyxml2@@@8
	DD	FLAT:??_R3MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7?$MemPoolT@$0DE@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0DE@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<52>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R2XMLVisitor@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLVisitor@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8 ; tinyxml2::XMLVisitor::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8 ; tinyxml2::MemPoolT<52>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4XMLDocument@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLDocument@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLDocument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLDocument@tinyxml2@@@8
	DD	FLAT:??_R3XMLDocument@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8 DD FLAT:??_R0?AVXMLUnknown@tinyxml2@@@8 ; tinyxml2::XMLUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLUnknown@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7XMLComment@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLComment@tinyxml2@@6B@ DD FLAT:??_R4XMLComment@tinyxml2@@6B@ ; tinyxml2::XMLComment::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:??_EXMLComment@tinyxml2@@MAEPAXI@Z
	DD	FLAT:?ParseDeep@XMLComment@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
CONST	ENDS
;	COMDAT ??_7?$MemPoolT@$0CM@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0CM@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<44>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLElement@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLElement@tinyxml2@@8 DD FLAT:??_R0?AVXMLElement@tinyxml2@@@8 ; tinyxml2::XMLElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLElement@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_7XMLPrinter@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLPrinter@tinyxml2@@6B@ DD FLAT:??_R4XMLPrinter@tinyxml2@@6B@ ; tinyxml2::XMLPrinter::`vftable'
	DD	FLAT:??_EXMLPrinter@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
	DD	FLAT:?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z
	DD	FLAT:?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
	DD	FLAT:?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z
	DD	FLAT:?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z
	DD	FLAT:?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z
CONST	ENDS
;	COMDAT ?cdataHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
_DATA	SEGMENT
?cdataHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:$SG4294882685 ; `tinyxml2::XMLDocument::Identify'::`2'::cdataHeader
_DATA	ENDS
;	COMDAT ??_7?$MemPoolT@$0DA@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0DA@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<48>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<36>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4XMLComment@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLComment@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLComment::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLComment@tinyxml2@@@8
	DD	FLAT:??_R3XMLComment@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLPrinter@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLPrinter@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8 ; tinyxml2::XMLPrinter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8 ; tinyxml2::MemPoolT<44>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLVisitor@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLVisitor@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLVisitor `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLVisitor@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R3?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0CM@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<44>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLText@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLText@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@	; tinyxml2::XMLText `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLText@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<48> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0DA@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R3XMLAttribute@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLAttribute@tinyxml2@@8 DD 00H			; tinyxml2::XMLAttribute::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2XMLAttribute@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4XMLAttribute@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLAttribute@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLAttribute::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLAttribute@tinyxml2@@@8
	DD	FLAT:??_R3XMLAttribute@tinyxml2@@8
?_errorNames@XMLDocument@tinyxml2@@0PAPBDA DD FLAT:$SG4294882677 ; tinyxml2::XMLDocument::_errorNames
	DD	FLAT:$SG4294882676
	DD	FLAT:$SG4294882675
	DD	FLAT:$SG4294882674
	DD	FLAT:$SG4294882673
	DD	FLAT:$SG4294882672
	DD	FLAT:$SG4294882671
	DD	FLAT:$SG4294882670
	DD	FLAT:$SG4294882669
	DD	FLAT:$SG4294882668
	DD	FLAT:$SG4294882667
	DD	FLAT:$SG4294882666
	DD	FLAT:$SG4294882665
	DD	FLAT:$SG4294882664
	DD	FLAT:$SG4294882663
	DD	FLAT:$SG4294882662
	DD	FLAT:$SG4294882661
	DD	FLAT:$SG4294882660
	DD	FLAT:$SG4294882659
	DD	FLAT:$SG4294882658
	ORG $+3
$SG4294882702 DB 'amp', 00H
	ORG $+3
$SG4294882700 DB 'lt', 00H
	ORG $+1
$SG4294882703 DB 'quot', 00H
	ORG $+3
$SG4294882701 DB 'apos', 00H
	ORG $+3
$SG4294882698 DB '%d', 00H
	ORG $+1
$SG4294882699 DB 'gt', 00H
	ORG $+1
$SG4294882696 DB '%d', 00H
	ORG $+1
$SG4294882697 DB '%u', 00H
	ORG $+1
$SG4294882694 DB '%.17g', 00H
	ORG $+2
$SG4294882695 DB '%.8g', 00H
	ORG $+3
$SG4294882692 DB '%u', 00H
	ORG $+1
$SG4294882693 DB '%d', 00H
	ORG $+1
$SG4294882690 DB 'false', 00H
	ORG $+2
$SG4294882691 DB 'true', 00H
	ORG $+3
$SG4294882688 DB '%lf', 00H
$SG4294882689 DB '%f', 00H
	ORG $+1
$SG4294882686 DB '<!--', 00H
	ORG $+3
$SG4294882687 DB '<?', 00H
	ORG $+1
$SG4294882684 DB '<!', 00H
	ORG $+1
$SG4294882685 DB '<![CDATA[', 00H
	ORG $+2
$SG4294882682 DB ']]>', 00H
$SG4294882683 DB '<', 00H
	ORG $+2
$SG4294882680 DB '-->', 00H
$SG4294882681 DB '<', 00H
	ORG $+2
$SG4294882678 DB '>', 00H
	ORG $+2
$SG4294882679 DB '?>', 00H
	ORG $+1
$SG4294882676 DB 'XML_NO_ATTRIBUTE', 00H
	ORG $+3
$SG4294882677 DB 'XML_SUCCESS', 00H
$SG4294882674 DB 'XML_ERROR_FILE_NOT_FOUND', 00H
	ORG $+3
$SG4294882675 DB 'XML_WRONG_ATTRIBUTE_TYPE', 00H
	ORG $+3
$SG4294882672 DB 'XML_ERROR_FILE_READ_ERROR', 00H
	ORG $+2
$SG4294882673 DB 'XML_ERROR_FILE_COULD_NOT_BE_OPENED', 00H
	ORG $+1
$SG4294882670 DB 'XML_ERROR_PARSING_ELEMENT', 00H
	ORG $+2
$SG4294882671 DB 'XML_ERROR_ELEMENT_MISMATCH', 00H
	ORG $+1
$SG4294882668 DB 'XML_ERROR_IDENTIFYING_TAG', 00H
	ORG $+2
$SG4294882669 DB 'XML_ERROR_PARSING_ATTRIBUTE', 00H
$SG4294882666 DB 'XML_ERROR_PARSING_CDATA', 00H
$SG4294882667 DB 'XML_ERROR_PARSING_TEXT', 00H
	ORG $+1
$SG4294882664 DB 'XML_ERROR_PARSING_DECLARATION', 00H
	ORG $+2
$SG4294882665 DB 'XML_ERROR_PARSING_COMMENT', 00H
	ORG $+2
$SG4294882662 DB 'XML_ERROR_EMPTY_DOCUMENT', 00H
	ORG $+3
$SG4294882663 DB 'XML_ERROR_PARSING_UNKNOWN', 00H
	ORG $+2
$SG4294882660 DB 'XML_ERROR_PARSING', 00H
	ORG $+2
$SG4294882661 DB 'XML_ERROR_MISMATCHED_ELEMENT', 00H
	ORG $+3
$SG4294882658 DB 'XML_NO_TEXT_NODE', 00H
	ORG $+3
$SG4294882659 DB 'XML_CAN_NOT_CONVERT_TEXT', 00H
	ORG $+3
$SG4294882656 DB 'rb', 00H
	ORG $+1
$SG4294882657 DB 'xml version="1.0" encoding="UTF-8"', 00H
	ORG $+1
$SG4294882654 DB '%s', 00H
	ORG $+1
$SG4294882655 DB 'w', 00H
	ORG $+2
$SG4294882652 DB 'XMLDocument error id=%d ''%s'' str1=%s str2=%s', 0aH, 00H
	ORG $+2
$SG4294882653 DB '%s', 00H
	ORG $+1
$SG4294882650 DB '%.*s', 00H
	ORG $+3
$SG4294882651 DB '    ', 00H
	ORG $+3
$SG4294882648 DB '%s', 00H
	ORG $+1
$SG4294882649 DB '&%s;', 00H
	ORG $+3
$SG4294882646 DB 'xml version="1.0"', 00H
	ORG $+2
$SG4294882647 DB '%s', 00H
	ORG $+1
$SG4294882644 DB '<%s', 00H
$SG4294882645 DB 0aH, 00H
	ORG $+2
$SG4294882642 DB '"', 00H
	ORG $+2
$SG4294882643 DB ' %s="', 00H
	ORG $+2
$SG4294882640 DB 0aH, 00H
	ORG $+2
$SG4294882641 DB '/>', 00H
	ORG $+1
$SG4294882638 DB 0aH, 00H
	ORG $+2
$SG4294882639 DB '</%s>', 00H
	ORG $+2
$SG4294882636 DB '<![CDATA[%s]]>', 00H
	ORG $+1
$SG4294882637 DB '>', 00H
	ORG $+2
$SG4294882634 DB '<!--%s-->', 00H
	ORG $+2
$SG4294882635 DB 0aH, 00H
	ORG $+2
$SG4294882632 DB '<?%s?>', 00H
	ORG $+1
$SG4294882633 DB 0aH, 00H
	ORG $+2
$SG4294882630 DB '<!%s>', 00H
	ORG $+2
$SG4294882631 DB 0aH, 00H
	ORG $+2
?entities@tinyxml2@@3QBUEntity@1@B DD FLAT:$SG4294882703 ; tinyxml2::entities
	DD	04H
	DB	022H
	ORG $+3
	DD	FLAT:$SG4294882702
	DD	03H
	DB	026H
	ORG $+3
	DD	FLAT:$SG4294882701
	DD	04H
	DB	027H
	ORG $+3
	DD	FLAT:$SG4294882700
	DD	02H
	DB	03cH
	ORG $+3
	DD	FLAT:$SG4294882699
	DD	02H
	DB	03eH
	ORG $+3
PUBLIC	??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const *>
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty
PUBLIC	?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char const *,10>::EnsureCapacity
PUBLIC	?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char,20>::EnsureCapacity
PUBLIC	??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<52>::`scalar deleting destructor'
PUBLIC	??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<36>::`scalar deleting destructor'
PUBLIC	??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<48>::`scalar deleting destructor'
PUBLIC	??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<44>::`scalar deleting destructor'
PUBLIC	??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<52>::MemPoolT<52>
PUBLIC	??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<52>::~MemPoolT<52>
PUBLIC	?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<52>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<52>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<52>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<52>::Alloc
PUBLIC	?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<52>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<52>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<52>::Untracked
PUBLIC	??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<36>::MemPoolT<36>
PUBLIC	??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<36>::~MemPoolT<36>
PUBLIC	?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<36>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<36>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<36>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<36>::Alloc
PUBLIC	?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<36>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<36>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<36>::Untracked
PUBLIC	??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<48>::MemPoolT<48>
PUBLIC	??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<48>::~MemPoolT<48>
PUBLIC	?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<48>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<48>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<48>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<48>::Alloc
PUBLIC	?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<48>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<48>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<48>::Untracked
PUBLIC	??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<44>::MemPoolT<44>
PUBLIC	??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<44>::~MemPoolT<44>
PUBLIC	?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<44>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<44>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<44>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<44>::Alloc
PUBLIC	?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<44>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<44>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<44>::Untracked
PUBLIC	??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>
PUBLIC	??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
PUBLIC	?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z	; tinyxml2::DynArray<char const *,10>::Push
PUBLIC	?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ	; tinyxml2::DynArray<char const *,10>::Pop
PUBLIC	??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char,20>::DynArray<char,20>
PUBLIC	??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char,20>::~DynArray<char,20>
PUBLIC	?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z	; tinyxml2::DynArray<char,20>::Push
PUBLIC	?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z	; tinyxml2::DynArray<char,20>::PushArr
PUBLIC	??A?$DynArray@D$0BE@@tinyxml2@@QAEAADH@Z	; tinyxml2::DynArray<char,20>::operator[]
PUBLIC	?Size@?$DynArray@D$0BE@@tinyxml2@@QBEHXZ	; tinyxml2::DynArray<char,20>::Size
PUBLIC	?Fits@?$LongFitsIntoSizeTMinusOne@$00@tinyxml2@@SA_NK@Z ; tinyxml2::LongFitsIntoSizeTMinusOne<1>::Fits
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z ; tinyxml2::XMLPrinter::VisitExit
PUBLIC	?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ; tinyxml2::XMLPrinter::VisitEnter
PUBLIC	?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLPrinter::VisitEnter
PUBLIC	?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLPrinter::PushUnknown
PUBLIC	?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLPrinter::PushDeclaration
PUBLIC	?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLPrinter::PushComment
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXN@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXM@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXI@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXH@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLPrinter::PushText
PUBLIC	?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElementIfJustOpened
PUBLIC	?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z	; tinyxml2::XMLPrinter::CloseElement
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLPrinter::OpenElement
PUBLIC	?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z	; tinyxml2::XMLPrinter::PushHeader
PUBLIC	?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z	; tinyxml2::XMLPrinter::PrintString
PUBLIC	?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z	; tinyxml2::XMLPrinter::PrintSpace
PUBLIC	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ		; tinyxml2::XMLPrinter::Print
PUBLIC	??0XMLVisitor@tinyxml2@@QAE@XZ			; tinyxml2::XMLVisitor::XMLVisitor
PUBLIC	??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z	; tinyxml2::XMLPrinter::XMLPrinter
PUBLIC	?Parse@XMLDocument@tinyxml2@@AAEXXZ		; tinyxml2::XMLDocument::Parse
PUBLIC	?PrintError@XMLDocument@tinyxml2@@QBEXXZ	; tinyxml2::XMLDocument::PrintError
PUBLIC	?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLDocument::ErrorName
PUBLIC	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
PUBLIC	?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z ; tinyxml2::XMLDocument::Print
PUBLIC	?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z ; tinyxml2::XMLDocument::Parse
PUBLIC	?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z ; tinyxml2::XMLDocument::SaveFile
PUBLIC	?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z ; tinyxml2::XMLDocument::SaveFile
PUBLIC	?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z ; tinyxml2::XMLDocument::LoadFile
PUBLIC	?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z ; tinyxml2::XMLDocument::LoadFile
PUBLIC	?DeleteNode@XMLDocument@tinyxml2@@QAEXPAVXMLNode@2@@Z ; tinyxml2::XMLDocument::DeleteNode
PUBLIC	?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z ; tinyxml2::XMLDocument::NewUnknown
PUBLIC	?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z ; tinyxml2::XMLDocument::NewDeclaration
PUBLIC	?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ; tinyxml2::XMLDocument::NewText
PUBLIC	?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z ; tinyxml2::XMLDocument::NewComment
PUBLIC	?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z ; tinyxml2::XMLDocument::NewElement
PUBLIC	?Clear@XMLDocument@tinyxml2@@QAEXXZ		; tinyxml2::XMLDocument::Clear
PUBLIC	??1XMLDocument@tinyxml2@@UAE@XZ			; tinyxml2::XMLDocument::~XMLDocument
PUBLIC	??_GXMLDocument@tinyxml2@@UAEPAXI@Z		; tinyxml2::XMLDocument::`scalar deleting destructor'
PUBLIC	??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z ; tinyxml2::XMLDocument::XMLDocument
PUBLIC	?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLElement::Accept
PUBLIC	?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLElement::ShallowEqual
PUBLIC	?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLElement::ShallowClone
PUBLIC	?ParseDeep@XMLElement@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLElement::ParseDeep
PUBLIC	?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
PUBLIC	?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z ; tinyxml2::XMLElement::ParseAttributes
PUBLIC	?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::DeleteAttribute
PUBLIC	?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindOrCreateAttribute
PUBLIC	?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ; tinyxml2::XMLElement::QueryFloatText
PUBLIC	?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ; tinyxml2::XMLElement::QueryDoubleText
PUBLIC	?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ; tinyxml2::XMLElement::QueryBoolText
PUBLIC	?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ; tinyxml2::XMLElement::QueryUnsignedText
PUBLIC	?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ; tinyxml2::XMLElement::QueryIntText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXN@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXM@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEX_N@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXI@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXH@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindAttribute
PUBLIC	??1XMLElement@tinyxml2@@EAE@XZ			; tinyxml2::XMLElement::~XMLElement
PUBLIC	??_GXMLElement@tinyxml2@@EAEPAXI@Z		; tinyxml2::XMLElement::`scalar deleting destructor'
PUBLIC	??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLElement::XMLElement
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ; tinyxml2::XMLAttribute::QueryDoubleValue
PUBLIC	?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ; tinyxml2::XMLAttribute::QueryFloatValue
PUBLIC	?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ; tinyxml2::XMLAttribute::QueryBoolValue
PUBLIC	?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ; tinyxml2::XMLAttribute::QueryUnsignedValue
PUBLIC	?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ; tinyxml2::XMLAttribute::QueryIntValue
PUBLIC	?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z	; tinyxml2::XMLAttribute::SetName
PUBLIC	?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z	; tinyxml2::XMLAttribute::ParseDeep
PUBLIC	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLAttribute::Value
PUBLIC	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLAttribute::Name
PUBLIC	?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLUnknown::Accept
PUBLIC	?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLUnknown::ShallowEqual
PUBLIC	?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLUnknown::ShallowClone
PUBLIC	?ParseDeep@XMLUnknown@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLUnknown::ParseDeep
PUBLIC	??1XMLUnknown@tinyxml2@@MAE@XZ			; tinyxml2::XMLUnknown::~XMLUnknown
PUBLIC	??_GXMLUnknown@tinyxml2@@MAEPAXI@Z		; tinyxml2::XMLUnknown::`scalar deleting destructor'
PUBLIC	??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLUnknown::XMLUnknown
PUBLIC	?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLDeclaration::Accept
PUBLIC	?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLDeclaration::ShallowEqual
PUBLIC	?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLDeclaration::ShallowClone
PUBLIC	?ParseDeep@XMLDeclaration@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLDeclaration::ParseDeep
PUBLIC	??1XMLDeclaration@tinyxml2@@MAE@XZ		; tinyxml2::XMLDeclaration::~XMLDeclaration
PUBLIC	??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z		; tinyxml2::XMLDeclaration::`scalar deleting destructor'
PUBLIC	??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLDeclaration::XMLDeclaration
PUBLIC	?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLComment::Accept
PUBLIC	?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLComment::ShallowEqual
PUBLIC	?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLComment::ShallowClone
PUBLIC	?ParseDeep@XMLComment@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLComment::ParseDeep
PUBLIC	??1XMLComment@tinyxml2@@MAE@XZ			; tinyxml2::XMLComment::~XMLComment
PUBLIC	??_GXMLComment@tinyxml2@@MAEPAXI@Z		; tinyxml2::XMLComment::`scalar deleting destructor'
PUBLIC	??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLComment::XMLComment
PUBLIC	?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLText::Accept
PUBLIC	?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLText::ShallowEqual
PUBLIC	?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLText::ShallowClone
PUBLIC	?ParseDeep@XMLText@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLText::ParseDeep
PUBLIC	?InsertChildPreamble@XMLNode@tinyxml2@@ABEXPAV12@@Z ; tinyxml2::XMLNode::InsertChildPreamble
PUBLIC	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z	; tinyxml2::XMLNode::DeleteNode
PUBLIC	?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLNode::ParseDeep
PUBLIC	?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::PreviousSiblingElement
PUBLIC	?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::NextSiblingElement
PUBLIC	?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::LastChildElement
PUBLIC	?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::FirstChildElement
PUBLIC	?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z ; tinyxml2::XMLNode::InsertAfterChild
PUBLIC	?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertFirstChild
PUBLIC	?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertEndChild
PUBLIC	?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z	; tinyxml2::XMLNode::DeleteChild
PUBLIC	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z		; tinyxml2::XMLNode::Unlink
PUBLIC	?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ	; tinyxml2::XMLNode::DeleteChildren
PUBLIC	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z		; tinyxml2::XMLNode::SetValue
PUBLIC	?Value@XMLNode@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLNode::Value
PUBLIC	??1XMLNode@tinyxml2@@MAE@XZ			; tinyxml2::XMLNode::~XMLNode
PUBLIC	??_GXMLNode@tinyxml2@@MAEPAXI@Z			; tinyxml2::XMLNode::`scalar deleting destructor'
PUBLIC	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLNode::XMLNode
PUBLIC	?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLDocument::Accept
PUBLIC	?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z ; tinyxml2::XMLDocument::Identify
PUBLIC	?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z	; tinyxml2::XMLUtil::ToDouble
PUBLIC	?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z		; tinyxml2::XMLUtil::ToFloat
PUBLIC	?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z		; tinyxml2::XMLUtil::ToBool
PUBLIC	?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z	; tinyxml2::XMLUtil::ToUnsigned
PUBLIC	?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z		; tinyxml2::XMLUtil::ToInt
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z ; tinyxml2::XMLUtil::GetCharacterRef
PUBLIC	?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z ; tinyxml2::XMLUtil::ConvertUTF32ToUTF8
PUBLIC	?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z	; tinyxml2::XMLUtil::ReadBOM
PUBLIC	?GetStr@StrPair@tinyxml2@@QAEPBDXZ		; tinyxml2::StrPair::GetStr
PUBLIC	?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ	; tinyxml2::StrPair::CollapseWhitespace
PUBLIC	?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z	; tinyxml2::StrPair::ParseName
PUBLIC	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z	; tinyxml2::StrPair::ParseText
PUBLIC	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z		; tinyxml2::StrPair::SetStr
PUBLIC	?Reset@StrPair@tinyxml2@@AAEXXZ			; tinyxml2::StrPair::Reset
PUBLIC	?TransferTo@StrPair@tinyxml2@@QAEXPAV12@@Z	; tinyxml2::StrPair::TransferTo
PUBLIC	??1StrPair@tinyxml2@@QAE@XZ			; tinyxml2::StrPair::~StrPair
PUBLIC	??_GXMLPrinter@tinyxml2@@UAEPAXI@Z		; tinyxml2::XMLPrinter::`scalar deleting destructor'
PUBLIC	?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z ; tinyxml2::XMLPrinter::CompactMode
PUBLIC	?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLPrinter::VisitExit
PUBLIC	??1XMLPrinter@tinyxml2@@UAE@XZ			; tinyxml2::XMLPrinter::~XMLPrinter
PUBLIC	?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLDocument::ShallowEqual
PUBLIC	?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z ; tinyxml2::XMLDocument::ShallowClone
PUBLIC	?Error@XMLDocument@tinyxml2@@QBE_NXZ		; tinyxml2::XMLDocument::Error
PUBLIC	?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ		; tinyxml2::XMLDocument::HasBOM
PUBLIC	?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ ; tinyxml2::XMLDocument::WhitespaceMode
PUBLIC	?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ	; tinyxml2::XMLDocument::ProcessEntities
PUBLIC	?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLDocument::ToDocument
PUBLIC	?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLDocument::ToDocument
PUBLIC	?ClosingType@XMLElement@tinyxml2@@QBEHXZ	; tinyxml2::XMLElement::ClosingType
PUBLIC	?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
PUBLIC	?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z	; tinyxml2::XMLElement::SetAttribute
PUBLIC	?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLElement::ToElement
PUBLIC	?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLElement::ToElement
PUBLIC	?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLElement::SetName
PUBLIC	?Name@XMLElement@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLElement::Name
PUBLIC	??_GXMLAttribute@tinyxml2@@EAEPAXI@Z		; tinyxml2::XMLAttribute::`scalar deleting destructor'
PUBLIC	??1XMLAttribute@tinyxml2@@EAE@XZ		; tinyxml2::XMLAttribute::~XMLAttribute
PUBLIC	??0XMLAttribute@tinyxml2@@AAE@XZ		; tinyxml2::XMLAttribute::XMLAttribute
PUBLIC	?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLAttribute::Next
PUBLIC	?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLUnknown::ToUnknown
PUBLIC	?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLUnknown::ToUnknown
PUBLIC	?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ ; tinyxml2::XMLDeclaration::ToDeclaration
PUBLIC	?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ ; tinyxml2::XMLDeclaration::ToDeclaration
PUBLIC	?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLComment::ToComment
PUBLIC	?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLComment::ToComment
PUBLIC	??_GXMLText@tinyxml2@@MAEPAXI@Z			; tinyxml2::XMLText::`scalar deleting destructor'
PUBLIC	??1XMLText@tinyxml2@@MAE@XZ			; tinyxml2::XMLText::~XMLText
PUBLIC	??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLText::XMLText
PUBLIC	?CData@XMLText@tinyxml2@@QBE_NXZ		; tinyxml2::XMLText::CData
PUBLIC	?SetCData@XMLText@tinyxml2@@QAEX_N@Z		; tinyxml2::XMLText::SetCData
PUBLIC	?ToText@XMLText@tinyxml2@@UBEPBV12@XZ		; tinyxml2::XMLText::ToText
PUBLIC	?ToText@XMLText@tinyxml2@@UAEPAV12@XZ		; tinyxml2::XMLText::ToText
PUBLIC	?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLNode::NextSibling
PUBLIC	?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ	; tinyxml2::XMLNode::FirstChild
PUBLIC	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLNode::FirstChild
PUBLIC	?NoChildren@XMLNode@tinyxml2@@QBE_NXZ		; tinyxml2::XMLNode::NoChildren
PUBLIC	?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ		; tinyxml2::XMLNode::Parent
PUBLIC	?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ ; tinyxml2::XMLNode::ToUnknown
PUBLIC	?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ ; tinyxml2::XMLNode::ToDeclaration
PUBLIC	?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ ; tinyxml2::XMLNode::ToDocument
PUBLIC	?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ ; tinyxml2::XMLNode::ToComment
PUBLIC	?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ	; tinyxml2::XMLNode::ToText
PUBLIC	?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ ; tinyxml2::XMLNode::ToElement
PUBLIC	?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ ; tinyxml2::XMLNode::ToUnknown
PUBLIC	?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ ; tinyxml2::XMLNode::ToDeclaration
PUBLIC	?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ ; tinyxml2::XMLNode::ToDocument
PUBLIC	?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ ; tinyxml2::XMLNode::ToComment
PUBLIC	?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ	; tinyxml2::XMLNode::ToText
PUBLIC	?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ ; tinyxml2::XMLNode::ToElement
PUBLIC	?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ ; tinyxml2::XMLNode::GetDocument
PUBLIC	?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z	; tinyxml2::XMLUtil::IsUTF8Continuation
PUBLIC	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z	; tinyxml2::XMLUtil::StringEqual
PUBLIC	?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z		; tinyxml2::XMLUtil::IsNameChar
PUBLIC	?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z	; tinyxml2::XMLUtil::IsNameStartChar
PUBLIC	?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z		; tinyxml2::XMLUtil::IsWhiteSpace
PUBLIC	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z	; tinyxml2::XMLUtil::SkipWhiteSpace
PUBLIC	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z	; tinyxml2::XMLUtil::SkipWhiteSpace
PUBLIC	??_GXMLVisitor@tinyxml2@@UAEPAXI@Z		; tinyxml2::XMLVisitor::`scalar deleting destructor'
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z ; tinyxml2::XMLVisitor::VisitExit
PUBLIC	?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ; tinyxml2::XMLVisitor::VisitEnter
PUBLIC	?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLVisitor::VisitExit
PUBLIC	?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLVisitor::VisitEnter
PUBLIC	??1XMLVisitor@tinyxml2@@UAE@XZ			; tinyxml2::XMLVisitor::~XMLVisitor
PUBLIC	??_GMemPool@tinyxml2@@UAEPAXI@Z			; tinyxml2::MemPool::`scalar deleting destructor'
PUBLIC	??1MemPool@tinyxml2@@UAE@XZ			; tinyxml2::MemPool::~MemPool
PUBLIC	??0MemPool@tinyxml2@@QAE@XZ			; tinyxml2::MemPool::MemPool
PUBLIC	?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z	; tinyxml2::StrPair::SetInternedStr
PUBLIC	?Empty@StrPair@tinyxml2@@QBE_NXZ		; tinyxml2::StrPair::Empty
PUBLIC	?Set@StrPair@tinyxml2@@QAEXPAD0H@Z		; tinyxml2::StrPair::Set
PUBLIC	??0StrPair@tinyxml2@@QAE@XZ			; tinyxml2::StrPair::StrPair
PUBLIC	_sscanf_s
PUBLIC	_vsscanf_s
PUBLIC	__vsscanf_s_l
PUBLIC	__vscprintf
PUBLIC	__vscprintf_l
PUBLIC	_vsnprintf_s
PUBLIC	__vsnprintf_s_l
PUBLIC	_vfprintf
PUBLIC	___local_stdio_scanf_options
PUBLIC	?GetText@XMLElement@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLElement::GetText
PUBLIC	?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z	; tinyxml2::XMLElement::Attribute
EXTRN	??_EXMLAttribute@tinyxml2@@EAEPAXI@Z:PROC	; tinyxml2::XMLAttribute::`vector deleting destructor'
EXTRN	??_EXMLUnknown@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLUnknown::`vector deleting destructor'
EXTRN	??_EXMLPrinter@tinyxml2@@UAEPAXI@Z:PROC		; tinyxml2::XMLPrinter::`vector deleting destructor'
EXTRN	??_EXMLComment@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLComment::`vector deleting destructor'
EXTRN	??_EMemPool@tinyxml2@@UAEPAXI@Z:PROC		; tinyxml2::MemPool::`vector deleting destructor'
EXTRN	??_EXMLNode@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLNode::`vector deleting destructor'
EXTRN	??_EXMLDeclaration@tinyxml2@@MAEPAXI@Z:PROC	; tinyxml2::XMLDeclaration::`vector deleting destructor'
EXTRN	??_EXMLText@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLText::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<44>::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<52>::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<36>::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<48>::`vector deleting destructor'
EXTRN	??_EXMLElement@tinyxml2@@EAEPAXI@Z:PROC		; tinyxml2::XMLElement::`vector deleting destructor'
EXTRN	??_EXMLVisitor@tinyxml2@@UAEPAXI@Z:PROC		; tinyxml2::XMLVisitor::`vector deleting destructor'
EXTRN	??_EXMLDocument@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::XMLDocument::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0XMLAttribute@tinyxml2@@AAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0XMLAttribute@tinyxml2@@AAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0XMLAttribute@tinyxml2@@AAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0XMLAttribute@tinyxml2@@AAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ$0
__ehfuncinfo$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$2
__ehfuncinfo$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z$0
__ehfuncinfo$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z$0
__ehfuncinfo$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z$0
__ehfuncinfo$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z$0
__ehfuncinfo$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z$0
__ehfuncinfo$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z$0
__ehfuncinfo$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z$0
__ehfuncinfo$??1XMLDocument@tinyxml2@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$3
__ehfuncinfo$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z$0
__ehfuncinfo$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z$0
__ehfuncinfo$??1XMLElement@tinyxml2@@EAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z$0
__ehfuncinfo$??1XMLNode@tinyxml2@@MAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__ehfuncinfo$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$5
__ehfuncinfo$??1StrPair@tinyxml2@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_a$ = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z PROC	; tinyxml2::XMLElement::Attribute
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1404 :     const XMLAttribute* a = FindAttribute( name );

  00017	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindAttribute
  00023	89 45 f8	 mov	 DWORD PTR _a$[ebp], eax

; 1405 :     if ( !a ) {

  00026	83 7d f8 00	 cmp	 DWORD PTR _a$[ebp], 0
  0002a	75 04		 jne	 SHORT $LN2@Attribute

; 1406 :         return 0;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 33		 jmp	 SHORT $LN1@Attribute
$LN2@Attribute:

; 1407 :     }
; 1408 :     if ( !value || XMLUtil::StringEqual( a->Value(), value )) {

  00030	83 7d 0c 00	 cmp	 DWORD PTR _value$[ebp], 0
  00034	74 21		 je	 SHORT $LN4@Attribute
  00036	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  00042	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	0f b6 d0	 movzx	 edx, al
  00053	85 d2		 test	 edx, edx
  00055	74 0a		 je	 SHORT $LN3@Attribute
$LN4@Attribute:

; 1409 :         return a->Value();

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  0005a	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  0005f	eb 02		 jmp	 SHORT $LN1@Attribute
$LN3@Attribute:

; 1410 :     }
; 1411 :     return 0;

  00061	33 c0		 xor	 eax, eax
$LN1@Attribute:

; 1412 : }

  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z ENDP	; tinyxml2::XMLElement::Attribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?GetText@XMLElement@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLElement::GetText
; _this$ = ecx

; 1416 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1417 :     if ( FirstChild() && FirstChild()->ToText() ) {

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00020	85 c0		 test	 eax, eax
  00022	74 36		 je	 SHORT $LN2@GetText
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  0002c	89 45 f8	 mov	 DWORD PTR tv78[ebp], eax
  0002f	8b 45 f8	 mov	 eax, DWORD PTR tv78[ebp]
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b f4		 mov	 esi, esp
  00036	8b 4d f8	 mov	 ecx, DWORD PTR tv78[ebp]
  00039	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0003c	ff d0		 call	 eax
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	85 c0		 test	 eax, eax
  00047	74 11		 je	 SHORT $LN2@GetText

; 1418 :         return FirstChild()->Value();

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00058	eb 02		 jmp	 SHORT $LN1@GetText
$LN2@GetText:

; 1419 :     }
; 1420 :     return 0;

  0005a	33 c0		 xor	 eax, eax
$LN1@GetText:

; 1421 : }

  0005c	5e		 pop	 esi
  0005d	83 c4 08	 add	 esp, 8
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?GetText@XMLElement@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLElement::GetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 83   :     static unsigned __int64 _OptionsStorage;
; 84   :     return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 85   : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vfprintf PROC						; COMDAT

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 653  :     return _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00003	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __vfprintf_l
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 654  : }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_vfprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1580 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1581 :     int const _Result = __stdio_common_vsnprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	51		 push	 ecx
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00041	83 c4 20	 add	 esp, 32			; 00000020H
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1582 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1583 :         _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1584 : 
; 1585 :     return _Result < 0 ? -1 : _Result;

  0004e	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00052	7d 09		 jge	 SHORT $LN3@vsnprintf_
  00054	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0005b	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00060	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  00063	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1586 : }

  00066	5e		 pop	 esi
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
_vsnprintf_s PROC					; COMDAT

; 1629 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1630 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00003	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00010	52		 push	 edx
  00011	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 __vsnprintf_s_l
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1631 :     }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1655 :     int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	83 c9 02	 or	 ecx, 2
  00031	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1656 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1657 :         NULL, 0, _Format, _Locale, _ArgList);
; 1658 : 
; 1659 :     return _Result < 0 ? -1 : _Result;

  00049	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004d	7d 09		 jge	 SHORT $LN3@vscprintf_
  0004f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00056	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  0005e	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1660 : }

  00061	5e		 pop	 esi
  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1671 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1672 :     return _vscprintf_l(_Format, NULL, _ArgList);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 __vscprintf_l
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1673 : }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsscanf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_s_l PROC					; COMDAT

; 2197 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2198 :     return __stdio_common_vsscanf(

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	6a ff		 push	 -1
  00014	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	83 c9 01	 or	 ecx, 1
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	51		 push	 ecx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2199 :         _CRT_INTERNAL_LOCAL_SCANF_OPTIONS | _CRT_INTERNAL_SCANF_SECURECRT,
; 2200 :         _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2201 : }

  00037	5e		 pop	 esi
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
__vsscanf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsscanf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsscanf_s PROC						; COMDAT

; 2218 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2219 :         return _vsscanf_s_l(_Buffer, _Format, NULL, _ArgList);

  00003	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __vsscanf_s_l
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 2220 :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_vsscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sscanf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf_s PROC						; COMDAT

; 2300 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2301 :         int _Result;
; 2302 :         va_list _ArgList;
; 2303 :         __crt_va_start(_ArgList, _Format);

  00014	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00019	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2304 : 
; 2305 :         #pragma warning(push)
; 2306 :         #pragma warning(disable: 4996) // Deprecation
; 2307 :         _Result = vsscanf_s(_Buffer, _Format, _ArgList);

  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00026	52		 push	 edx
  00027	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _vsscanf_s
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2308 :         #pragma warning(pop)
; 2309 : 
; 2310 :         __crt_va_end(_ArgList);

  00036	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2311 :         return _Result;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2312 :     }

  00040	83 c4 08	 add	 esp, 8
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_sscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0StrPair@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0StrPair@tinyxml2@@QAE@XZ PROC			; tinyxml2::StrPair::StrPair, COMDAT
; _this$ = ecx

; 132  :     StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0StrPair@tinyxml2@@QAE@XZ ENDP			; tinyxml2::StrPair::StrPair
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Set@StrPair@tinyxml2@@QAEXPAD0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_flags$ = 16						; size = 4
?Set@StrPair@tinyxml2@@QAEXPAD0H@Z PROC			; tinyxml2::StrPair::Set, COMDAT
; _this$ = ecx

; 135  :     void Set( char* start, char* end, int flags ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  :         Reset();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Reset@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::Reset

; 137  :         _start  = start;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _start$[ebp]
  0001c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 138  :         _end    = end;

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 45 0c	 mov	 eax, DWORD PTR _end$[ebp]
  00025	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 139  :         _flags  = flags | NEEDS_FLUSH;

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  0002b	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	89 0a		 mov	 DWORD PTR [edx], ecx

; 140  :     }

  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 0c 00	 ret	 12			; 0000000cH
?Set@StrPair@tinyxml2@@QAEXPAD0H@Z ENDP			; tinyxml2::StrPair::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Empty@StrPair@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?Empty@StrPair@tinyxml2@@QBE_NXZ PROC			; tinyxml2::StrPair::Empty, COMDAT
; _this$ = ecx

; 144  :     bool Empty() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 145  :         return _start == _end;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00020	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00023	75 09		 jne	 SHORT $LN3@Empty
  00025	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN4@Empty
$LN3@Empty:
  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@Empty:
  00035	8a 45 f8	 mov	 al, BYTE PTR tv67[ebp]

; 146  :     }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Empty@StrPair@tinyxml2@@QBE_NXZ ENDP			; tinyxml2::StrPair::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::StrPair::SetInternedStr, COMDAT
; _this$ = ecx

; 148  :     void SetInternedStr( const char* str ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 149  :         Reset();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Reset@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::Reset

; 150  :         _start = const_cast<char*>(str);

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0001c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 151  :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::StrPair::SetInternedStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0MemPool@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MemPool@tinyxml2@@QAE@XZ PROC			; tinyxml2::MemPool::MemPool, COMDAT
; _this$ = ecx

; 300  :     MemPool() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7MemPool@tinyxml2@@6B@
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0MemPool@tinyxml2@@QAE@XZ ENDP			; tinyxml2::MemPool::MemPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1MemPool@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MemPool@tinyxml2@@UAE@XZ PROC			; tinyxml2::MemPool::~MemPool, COMDAT
; _this$ = ecx

; 301  :     virtual ~MemPool() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7MemPool@tinyxml2@@6B@
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1MemPool@tinyxml2@@UAE@XZ ENDP			; tinyxml2::MemPool::~MemPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GMemPool@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemPool@tinyxml2@@UAEPAXI@Z PROC			; tinyxml2::MemPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 04		 push	 4
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GMemPool@tinyxml2@@UAEPAXI@Z ENDP			; tinyxml2::MemPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1XMLVisitor@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLVisitor@tinyxml2@@UAE@XZ PROC			; tinyxml2::XMLVisitor::~XMLVisitor, COMDAT
; _this$ = ecx

; 447  :     virtual ~XMLVisitor() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLVisitor@tinyxml2@@6B@
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1XMLVisitor@tinyxml2@@UAE@XZ ENDP			; tinyxml2::XMLVisitor::~XMLVisitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLVisitor::VisitEnter, COMDAT
; _this$ = ecx

; 450  :     virtual bool VisitEnter( const XMLDocument& /*doc*/ )			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 451  :         return true;

  0000e	b0 01		 mov	 al, 1

; 452  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLVisitor::VisitExit, COMDAT
; _this$ = ecx

; 454  :     virtual bool VisitExit( const XMLDocument& /*doc*/ )			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 455  :         return true;

  0000e	b0 01		 mov	 al, 1

; 456  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z PROC ; tinyxml2::XMLVisitor::VisitEnter, COMDAT
; _this$ = ecx

; 459  :     virtual bool VisitEnter( const XMLElement& /*element*/, const XMLAttribute* /*firstAttribute*/ )	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 460  :         return true;

  0000e	b0 01		 mov	 al, 1

; 461  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z PROC ; tinyxml2::XMLVisitor::VisitExit, COMDAT
; _this$ = ecx

; 463  :     virtual bool VisitExit( const XMLElement& /*element*/ )			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 464  :         return true;

  0000e	b0 01		 mov	 al, 1

; 465  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z PROC ; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 468  :     virtual bool Visit( const XMLDeclaration& /*declaration*/ )		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 469  :         return true;

  0000e	b0 01		 mov	 al, 1

; 470  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ENDP ; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z PROC	; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 472  :     virtual bool Visit( const XMLText& /*text*/ )					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 473  :         return true;

  0000e	b0 01		 mov	 al, 1

; 474  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z ENDP	; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z PROC ; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 476  :     virtual bool Visit( const XMLComment& /*comment*/ )				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 477  :         return true;

  0000e	b0 01		 mov	 al, 1

; 478  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z ENDP ; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z PROC ; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 480  :     virtual bool Visit( const XMLUnknown& /*unknown*/ )				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  :         return true;

  0000e	b0 01		 mov	 al, 1

; 482  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ENDP ; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLVisitor@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLVisitor@tinyxml2@@UAEPAXI@Z PROC			; tinyxml2::XMLVisitor::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLVisitor@tinyxml2@@UAE@XZ ; tinyxml2::XMLVisitor::~XMLVisitor
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 04		 push	 4
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLVisitor@tinyxml2@@UAEPAXI@Z ENDP			; tinyxml2::XMLVisitor::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z PROC	; tinyxml2::XMLUtil::SkipWhiteSpace, COMDAT

; 519  :     static const char* SkipWhiteSpace( const char* p )	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  :         TIXMLASSERT( p );

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	75 01		 jne	 SHORT $LN2@SkipWhiteS
  00009	cc		 int	 3
$LN2@SkipWhiteS:

; 521  :         while( IsWhiteSpace(*p) ) {

  0000a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z ; tinyxml2::XMLUtil::IsWhiteSpace
  00016	83 c4 04	 add	 esp, 4
  00019	0f b6 d0	 movzx	 edx, al
  0001c	85 d2		 test	 edx, edx
  0001e	74 0b		 je	 SHORT $LN3@SkipWhiteS

; 522  :             ++p;

  00020	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 523  :         }

  00029	eb df		 jmp	 SHORT $LN2@SkipWhiteS
$LN3@SkipWhiteS:

; 524  :         TIXMLASSERT( p );

  0002b	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0002f	75 01		 jne	 SHORT $LN5@SkipWhiteS
  00031	cc		 int	 3
$LN5@SkipWhiteS:

; 525  :         return p;

  00032	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 526  :     }

  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z ENDP	; tinyxml2::XMLUtil::SkipWhiteSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z PROC	; tinyxml2::XMLUtil::SkipWhiteSpace, COMDAT

; 527  :     static char* SkipWhiteSpace( char* p )				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 528  :         return const_cast<char*>( SkipWhiteSpace( const_cast<const char*>(p) ) );

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  0000c	83 c4 04	 add	 esp, 4

; 529  :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ENDP	; tinyxml2::XMLUtil::SkipWhiteSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_p$ = 8							; size = 1
?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z PROC		; tinyxml2::XMLUtil::IsWhiteSpace, COMDAT

; 533  :     static bool IsWhiteSpace( char p )					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 534  :         return !IsUTF8Continuation(p) && isspace( static_cast<unsigned char>(p) );

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR _p$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z ; tinyxml2::XMLUtil::IsUTF8Continuation
  00016	83 c4 04	 add	 esp, 4
  00019	0f b6 c8	 movzx	 ecx, al
  0001c	85 c9		 test	 ecx, ecx
  0001e	75 24		 jne	 SHORT $LN3@IsWhiteSpa
  00020	0f b6 55 08	 movzx	 edx, BYTE PTR _p$[ebp]
  00024	8b f4		 mov	 esi, esp
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isspace
  0002d	83 c4 04	 add	 esp, 4
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	74 09		 je	 SHORT $LN3@IsWhiteSpa
  0003b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00042	eb 07		 jmp	 SHORT $LN4@IsWhiteSpa
$LN3@IsWhiteSpa:
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN4@IsWhiteSpa:
  0004b	8a 45 fc	 mov	 al, BYTE PTR tv72[ebp]

; 535  :     }

  0004e	5e		 pop	 esi
  0004f	83 c4 04	 add	 esp, 4
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z ENDP		; tinyxml2::XMLUtil::IsWhiteSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z
_TEXT	SEGMENT
tv74 = -4						; size = 4
_ch$ = 8						; size = 1
?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z PROC		; tinyxml2::XMLUtil::IsNameStartChar, COMDAT

; 537  :     inline static bool IsNameStartChar( unsigned char ch ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 538  :         if ( ch >= 128 ) {

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR _ch$[ebp]
  00010	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00015	7c 04		 jl	 SHORT $LN2@IsNameStar

; 539  :             // This is a heuristic guess in attempt to not implement Unicode-aware isalpha()
; 540  :             return true;

  00017	b0 01		 mov	 al, 1
  00019	eb 44		 jmp	 SHORT $LN1@IsNameStar
$LN2@IsNameStar:

; 541  :         }
; 542  :         if ( isalpha( ch ) ) {

  0001b	0f b6 4d 08	 movzx	 ecx, BYTE PTR _ch$[ebp]
  0001f	8b f4		 mov	 esi, esp
  00021	51		 push	 ecx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isalpha
  00028	83 c4 04	 add	 esp, 4
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	85 c0		 test	 eax, eax
  00034	74 04		 je	 SHORT $LN3@IsNameStar

; 543  :             return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 25		 jmp	 SHORT $LN1@IsNameStar
$LN3@IsNameStar:

; 544  :         }
; 545  :         return ch == ':' || ch == '_';

  0003a	0f b6 55 08	 movzx	 edx, BYTE PTR _ch$[ebp]
  0003e	83 fa 3a	 cmp	 edx, 58			; 0000003aH
  00041	74 12		 je	 SHORT $LN5@IsNameStar
  00043	0f b6 45 08	 movzx	 eax, BYTE PTR _ch$[ebp]
  00047	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  0004a	74 09		 je	 SHORT $LN5@IsNameStar
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
  00053	eb 07		 jmp	 SHORT $LN6@IsNameStar
$LN5@IsNameStar:
  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
$LN6@IsNameStar:
  0005c	8a 45 fc	 mov	 al, BYTE PTR tv74[ebp]
$LN1@IsNameStar:

; 546  :     }

  0005f	5e		 pop	 esi
  00060	83 c4 04	 add	 esp, 4
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ENDP		; tinyxml2::XMLUtil::IsNameStartChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z
_TEXT	SEGMENT
tv76 = -4						; size = 4
_ch$ = 8						; size = 1
?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z PROC		; tinyxml2::XMLUtil::IsNameChar, COMDAT

; 548  :     inline static bool IsNameChar( unsigned char ch ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 549  :         return IsNameStartChar( ch )

  0000c	0f b6 45 08	 movzx	 eax, BYTE PTR _ch$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameStartChar
  00016	83 c4 04	 add	 esp, 4
  00019	0f b6 c8	 movzx	 ecx, al
  0001c	85 c9		 test	 ecx, ecx
  0001e	75 36		 jne	 SHORT $LN3@IsNameChar
  00020	0f b6 55 08	 movzx	 edx, BYTE PTR _ch$[ebp]
  00024	8b f4		 mov	 esi, esp
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__isdigit
  0002d	83 c4 04	 add	 esp, 4
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	85 c0		 test	 eax, eax
  00039	75 1b		 jne	 SHORT $LN3@IsNameChar
  0003b	0f b6 45 08	 movzx	 eax, BYTE PTR _ch$[ebp]
  0003f	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00042	74 12		 je	 SHORT $LN3@IsNameChar
  00044	0f b6 4d 08	 movzx	 ecx, BYTE PTR _ch$[ebp]
  00048	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  0004b	74 09		 je	 SHORT $LN3@IsNameChar
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
  00054	eb 07		 jmp	 SHORT $LN4@IsNameChar
$LN3@IsNameChar:
  00056	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
$LN4@IsNameChar:
  0005d	8a 45 fc	 mov	 al, BYTE PTR tv76[ebp]

; 550  :                || isdigit( ch )
; 551  :                || ch == '.'
; 552  :                || ch == '-';
; 553  :     }

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z ENDP		; tinyxml2::XMLUtil::IsNameChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z
_TEXT	SEGMENT
tv70 = -4						; size = 4
_p$ = 8							; size = 4
_q$ = 12						; size = 4
_nChar$ = 16						; size = 4
?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z PROC		; tinyxml2::XMLUtil::StringEqual, COMDAT

; 555  :     inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 556  :         if ( p == q ) {

  0000c	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000f	3b 45 0c	 cmp	 eax, DWORD PTR _q$[ebp]
  00012	75 04		 jne	 SHORT $LN2@StringEqua

; 557  :             return true;

  00014	b0 01		 mov	 al, 1
  00016	eb 35		 jmp	 SHORT $LN1@StringEqua
$LN2@StringEqua:

; 558  :         }
; 559  :         return strncmp( p, q, nChar ) == 0;

  00018	8b f4		 mov	 esi, esp
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _nChar$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 55 0c	 mov	 edx, DWORD PTR _q$[ebp]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	3b f4		 cmp	 esi, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	85 c0		 test	 eax, eax
  00038	75 09		 jne	 SHORT $LN4@StringEqua
  0003a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00041	eb 07		 jmp	 SHORT $LN5@StringEqua
$LN4@StringEqua:
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN5@StringEqua:
  0004a	8a 45 fc	 mov	 al, BYTE PTR tv70[ebp]
$LN1@StringEqua:

; 560  :     }

  0004d	5e		 pop	 esi
  0004e	83 c4 04	 add	 esp, 4
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ENDP		; tinyxml2::XMLUtil::StringEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_p$ = 8							; size = 1
?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z PROC	; tinyxml2::XMLUtil::IsUTF8Continuation, COMDAT

; 562  :     inline static bool IsUTF8Continuation( char p ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 563  :         return ( p & 0x80 ) != 0;

  0000b	0f be 45 08	 movsx	 eax, BYTE PTR _p$[ebp]
  0000f	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00014	74 09		 je	 SHORT $LN3@IsUTF8Cont
  00016	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001d	eb 07		 jmp	 SHORT $LN4@IsUTF8Cont
$LN3@IsUTF8Cont:
  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@IsUTF8Cont:
  00026	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 564  :     }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z ENDP	; tinyxml2::XMLUtil::IsUTF8Continuation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ PROC ; tinyxml2::XMLNode::GetDocument, COMDAT
; _this$ = ecx

; 625  :     XMLDocument* GetDocument()				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 626  :         TIXMLASSERT( _document );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	75 01		 jne	 SHORT $LN2@GetDocumen
  00017	cc		 int	 3
$LN2@GetDocumen:

; 627  :         return _document;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 628  :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ ENDP ; tinyxml2::XMLNode::GetDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ PROC	; tinyxml2::XMLNode::ToElement, COMDAT
; _this$ = ecx

; 631  :     virtual XMLElement*		ToElement()		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 632  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 633  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ ENDP	; tinyxml2::XMLNode::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ PROC	; tinyxml2::XMLNode::ToText, COMDAT
; _this$ = ecx

; 635  :     virtual XMLText*		ToText()		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 636  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 637  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ ENDP	; tinyxml2::XMLNode::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ PROC	; tinyxml2::XMLNode::ToComment, COMDAT
; _this$ = ecx

; 639  :     virtual XMLComment*		ToComment()		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 640  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 641  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ ENDP	; tinyxml2::XMLNode::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ PROC ; tinyxml2::XMLNode::ToDocument, COMDAT
; _this$ = ecx

; 643  :     virtual XMLDocument*	ToDocument()	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 644  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 645  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ ENDP ; tinyxml2::XMLNode::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ PROC ; tinyxml2::XMLNode::ToDeclaration, COMDAT
; _this$ = ecx

; 647  :     virtual XMLDeclaration*	ToDeclaration()	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 648  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 649  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ ENDP ; tinyxml2::XMLNode::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ PROC	; tinyxml2::XMLNode::ToUnknown, COMDAT
; _this$ = ecx

; 651  :     virtual XMLUnknown*		ToUnknown()		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 653  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ ENDP	; tinyxml2::XMLNode::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ PROC	; tinyxml2::XMLNode::ToElement, COMDAT
; _this$ = ecx

; 655  :     virtual const XMLElement*		ToElement() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 656  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 657  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ ENDP	; tinyxml2::XMLNode::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ PROC	; tinyxml2::XMLNode::ToText, COMDAT
; _this$ = ecx

; 658  :     virtual const XMLText*			ToText() const			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 659  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 660  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ ENDP	; tinyxml2::XMLNode::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ PROC	; tinyxml2::XMLNode::ToComment, COMDAT
; _this$ = ecx

; 661  :     virtual const XMLComment*		ToComment() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 662  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 663  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ ENDP	; tinyxml2::XMLNode::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ PROC ; tinyxml2::XMLNode::ToDocument, COMDAT
; _this$ = ecx

; 664  :     virtual const XMLDocument*		ToDocument() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 665  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 666  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ ENDP ; tinyxml2::XMLNode::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ PROC ; tinyxml2::XMLNode::ToDeclaration, COMDAT
; _this$ = ecx

; 667  :     virtual const XMLDeclaration*	ToDeclaration() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 668  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 669  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ ENDP ; tinyxml2::XMLNode::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ PROC	; tinyxml2::XMLNode::ToUnknown, COMDAT
; _this$ = ecx

; 670  :     virtual const XMLUnknown*		ToUnknown() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 671  :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 672  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ ENDP	; tinyxml2::XMLNode::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLNode::Parent, COMDAT
; _this$ = ecx

; 691  :     const XMLNode*	Parent() const			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 692  :         return _parent;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 693  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLNode::Parent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?NoChildren@XMLNode@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?NoChildren@XMLNode@tinyxml2@@QBE_NXZ PROC		; tinyxml2::XMLNode::NoChildren, COMDAT
; _this$ = ecx

; 700  :     bool NoChildren() const					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         return !_firstChild;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0001e	75 09		 jne	 SHORT $LN3@NoChildren
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@NoChildren
$LN3@NoChildren:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@NoChildren:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 702  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?NoChildren@XMLNode@tinyxml2@@QBE_NXZ ENDP		; tinyxml2::XMLNode::NoChildren
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLNode::FirstChild, COMDAT
; _this$ = ecx

; 705  :     const XMLNode*  FirstChild() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 706  :         return _firstChild;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 707  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLNode::FirstChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ PROC		; tinyxml2::XMLNode::FirstChild, COMDAT
; _this$ = ecx

; 709  :     XMLNode*		FirstChild()			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 710  :         return _firstChild;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 711  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ENDP		; tinyxml2::XMLNode::FirstChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLNode::NextSibling, COMDAT
; _this$ = ecx

; 757  :     const XMLNode*	NextSibling() const						{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 758  :         return _next;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 24	 mov	 eax, DWORD PTR [eax+36]

; 759  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLNode::NextSibling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToText@XMLText@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@XMLText@tinyxml2@@UAEPAV12@XZ PROC		; tinyxml2::XMLText::ToText, COMDAT
; _this$ = ecx

; 901  :     virtual XMLText* ToText()			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 902  :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 903  :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToText@XMLText@tinyxml2@@UAEPAV12@XZ ENDP		; tinyxml2::XMLText::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToText@XMLText@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToText@XMLText@tinyxml2@@UBEPBV12@XZ PROC		; tinyxml2::XMLText::ToText, COMDAT
; _this$ = ecx

; 904  :     virtual const XMLText* ToText() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 905  :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 906  :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToText@XMLText@tinyxml2@@UBEPBV12@XZ ENDP		; tinyxml2::XMLText::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetCData@XMLText@tinyxml2@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_isCData$ = 8						; size = 1
?SetCData@XMLText@tinyxml2@@QAEX_N@Z PROC		; tinyxml2::XMLText::SetCData, COMDAT
; _this$ = ecx

; 909  :     void SetCData( bool isCData )			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 910  :         _isCData = isCData;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 4d 08	 mov	 cl, BYTE PTR _isCData$[ebp]
  00014	88 48 2c	 mov	 BYTE PTR [eax+44], cl

; 911  :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?SetCData@XMLText@tinyxml2@@QAEX_N@Z ENDP		; tinyxml2::XMLText::SetCData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?CData@XMLText@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CData@XMLText@tinyxml2@@QBE_NXZ PROC			; tinyxml2::XMLText::CData, COMDAT
; _this$ = ecx

; 913  :     bool CData() const						{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 914  :         return _isCData;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 2c	 mov	 al, BYTE PTR [eax+44]

; 915  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?CData@XMLText@tinyxml2@@QBE_NXZ ENDP			; tinyxml2::XMLText::CData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLText::XMLText, COMDAT
; _this$ = ecx

; 921  :     XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7XMLText@tinyxml2@@6B@
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c6 42 2c 00	 mov	 BYTE PTR [edx+44], 0
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLText::XMLText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1XMLText@tinyxml2@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLText@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLText::~XMLText, COMDAT
; _this$ = ecx

; 922  :     virtual ~XMLText()												{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLText@tinyxml2@@6B@
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1XMLText@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLText::~XMLText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLText@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLText@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLText::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLText@tinyxml2@@MAE@XZ ; tinyxml2::XMLText::~XMLText
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 30		 push	 48			; 00000030H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLText@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLText::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLComment::ToComment, COMDAT
; _this$ = ecx

; 939  :     virtual XMLComment*	ToComment()					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 940  :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 941  :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLComment::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLComment::ToComment, COMDAT
; _this$ = ecx

; 942  :     virtual const XMLComment* ToComment() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 943  :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 944  :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLComment::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ PROC ; tinyxml2::XMLDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 978  :     virtual XMLDeclaration*	ToDeclaration()					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 979  :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 980  :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ ENDP ; tinyxml2::XMLDeclaration::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ PROC ; tinyxml2::XMLDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 981  :     virtual const XMLDeclaration* ToDeclaration() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 982  :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 983  :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ ENDP ; tinyxml2::XMLDeclaration::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1013 :     virtual XMLUnknown*	ToUnknown()					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1014 :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1015 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLUnknown::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1016 :     virtual const XMLUnknown* ToUnknown() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1017 :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1018 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLUnknown::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLAttribute::Next, COMDAT
; _this$ = ecx

; 1055 :     const XMLAttribute* Next() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1056 :         return _next;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 1057 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLAttribute::Next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0XMLAttribute@tinyxml2@@AAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0XMLAttribute@tinyxml2@@AAE@XZ PROC			; tinyxml2::XMLAttribute::XMLAttribute, COMDAT
; _this$ = ecx

; 1123 :     XMLAttribute() : _next( 0 ), _memPool( 0 ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0XMLAttribute@tinyxml2@@AAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLAttribute@tinyxml2@@6B@
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	e8 00 00 00 00	 call	 ??0StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::StrPair
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 10	 add	 ecx, 16			; 00000010H
  0004e	e8 00 00 00 00	 call	 ??0StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::StrPair
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	83 c4 10	 add	 esp, 16			; 00000010H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0XMLAttribute@tinyxml2@@AAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
__ehhandler$??0XMLAttribute@tinyxml2@@AAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0XMLAttribute@tinyxml2@@AAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0XMLAttribute@tinyxml2@@AAE@XZ ENDP			; tinyxml2::XMLAttribute::XMLAttribute
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1XMLAttribute@tinyxml2@@EAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLAttribute@tinyxml2@@EAE@XZ PROC			; tinyxml2::XMLAttribute::~XMLAttribute, COMDAT
; _this$ = ecx

; 1124 :     virtual ~XMLAttribute()	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLAttribute@tinyxml2@@6B@
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 10	 add	 ecx, 16			; 00000010H
  0001d	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 c1 04	 add	 ecx, 4
  00028	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??1XMLAttribute@tinyxml2@@EAE@XZ ENDP			; tinyxml2::XMLAttribute::~XMLAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLAttribute@tinyxml2@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLAttribute@tinyxml2@@EAEPAXI@Z PROC		; tinyxml2::XMLAttribute::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLAttribute@tinyxml2@@EAE@XZ ; tinyxml2::XMLAttribute::~XMLAttribute
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 24		 push	 36			; 00000024H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLAttribute@tinyxml2@@EAEPAXI@Z ENDP		; tinyxml2::XMLAttribute::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Name@XMLElement@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@XMLElement@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLElement::Name, COMDAT
; _this$ = ecx

; 1149 :     const char* Name() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1150 :         return Value();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value

; 1151 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Name@XMLElement@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLElement::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_staticMem$ = 12					; size = 1
?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z PROC		; tinyxml2::XMLElement::SetName, COMDAT
; _this$ = ecx

; 1153 :     void SetName( const char* str, bool staticMem=false )	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1154 :         SetValue( str, staticMem );

  0000e	0f b6 45 0c	 movzx	 eax, BYTE PTR _staticMem$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00016	51		 push	 ecx
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLNode::SetValue

; 1155 :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z ENDP		; tinyxml2::XMLElement::SetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLElement::ToElement, COMDAT
; _this$ = ecx

; 1157 :     virtual XMLElement* ToElement()				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1158 :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1159 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLElement::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLElement::ToElement, COMDAT
; _this$ = ecx

; 1160 :     virtual const XMLElement* ToElement() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1161 :         return this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1162 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLElement::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z
_TEXT	SEGMENT
_a$ = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z PROC	; tinyxml2::XMLElement::SetAttribute, COMDAT
; _this$ = ecx

; 1317 :     void SetAttribute( const char* name, const char* value )	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1318 :         XMLAttribute* a = FindOrCreateAttribute( name );

  00017	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindOrCreateAttribute
  00023	89 45 f8	 mov	 DWORD PTR _a$[ebp], eax

; 1319 :         a->SetAttribute( value );

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00029	51		 push	 ecx
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLAttribute::SetAttribute

; 1320 :     }

  00032	83 c4 08	 add	 esp, 8
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z ENDP	; tinyxml2::XMLElement::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ PROC ; tinyxml2::XMLElement::FirstAttribute, COMDAT
; _this$ = ecx

; 1353 :     const XMLAttribute* FirstAttribute() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1354 :         return _rootAttribute;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 30	 mov	 eax, DWORD PTR [eax+48]

; 1355 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ENDP ; tinyxml2::XMLElement::FirstAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ClosingType@XMLElement@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClosingType@XMLElement@tinyxml2@@QBEHXZ PROC		; tinyxml2::XMLElement::ClosingType, COMDAT
; _this$ = ecx

; 1477 :     int ClosingType() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1478 :         return _closingType;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]

; 1479 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?ClosingType@XMLElement@tinyxml2@@QBEHXZ ENDP		; tinyxml2::XMLElement::ClosingType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLDocument::ToDocument, COMDAT
; _this$ = ecx

; 1528 :     virtual XMLDocument* ToDocument()				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1529 :         TIXMLASSERT( this == _document );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00017	74 01		 je	 SHORT $LN2@ToDocument
  00019	cc		 int	 3
$LN2@ToDocument:

; 1530 :         return this;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1531 :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLDocument::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLDocument::ToDocument, COMDAT
; _this$ = ecx

; 1532 :     virtual const XMLDocument* ToDocument() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 :         TIXMLASSERT( this == _document );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00017	74 01		 je	 SHORT $LN2@ToDocument
  00019	cc		 int	 3
$LN2@ToDocument:

; 1534 :         return this;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1535 :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLDocument::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ PROC	; tinyxml2::XMLDocument::ProcessEntities, COMDAT
; _this$ = ecx

; 1585 :     bool ProcessEntities() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         return _processEntities;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 2d	 mov	 al, BYTE PTR [eax+45]

; 1587 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ENDP	; tinyxml2::XMLDocument::ProcessEntities
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ PROC ; tinyxml2::XMLDocument::WhitespaceMode, COMDAT
; _this$ = ecx

; 1588 :     Whitespace WhitespaceMode() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1589 :         return _whitespace;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 34	 mov	 eax, DWORD PTR [eax+52]

; 1590 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ ENDP ; tinyxml2::XMLDocument::WhitespaceMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ PROC		; tinyxml2::XMLDocument::HasBOM, COMDAT
; _this$ = ecx

; 1595 :     bool HasBOM() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1596 :         return _writeBOM;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 2c	 mov	 al, BYTE PTR [eax+44]

; 1597 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ ENDP		; tinyxml2::XMLDocument::HasBOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Error@XMLDocument@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Error@XMLDocument@tinyxml2@@QBE_NXZ PROC		; tinyxml2::XMLDocument::Error, COMDAT
; _this$ = ecx

; 1677 :     bool Error() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1678 :         return _errorID != XML_NO_ERROR;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	74 09		 je	 SHORT $LN3@Error
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Error
$LN3@Error:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Error:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 1679 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Error@XMLDocument@tinyxml2@@QBE_NXZ ENDP		; tinyxml2::XMLDocument::Error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z PROC ; tinyxml2::XMLDocument::ShallowClone, COMDAT
; _this$ = ecx

; 1703 :     virtual XMLNode* ShallowClone( XMLDocument* /*document*/ ) const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1704 :         return 0;

  0000e	33 c0		 xor	 eax, eax

; 1705 :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z ENDP ; tinyxml2::XMLDocument::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLDocument::ShallowEqual, COMDAT
; _this$ = ecx

; 1706 :     virtual bool ShallowEqual( const XMLNode* /*compare*/ ) const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1707 :         return false;

  0000e	32 c0		 xor	 al, al

; 1708 :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLDocument::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1XMLPrinter@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLPrinter@tinyxml2@@UAE@XZ PROC			; tinyxml2::XMLPrinter::~XMLPrinter, COMDAT
; _this$ = ecx

; 1989 :     virtual ~XMLPrinter()	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLPrinter@tinyxml2@@6B@
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  00020	e8 00 00 00 00	 call	 ??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<char,20>::~DynArray<char,20>
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 08	 add	 ecx, 8
  0002b	e8 00 00 00 00	 call	 ??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??1XMLVisitor@tinyxml2@@UAE@XZ ; tinyxml2::XMLVisitor::~XMLVisitor
  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1XMLPrinter@tinyxml2@@UAE@XZ ENDP			; tinyxml2::XMLPrinter::~XMLPrinter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLPrinter::VisitExit, COMDAT
; _this$ = ecx

; 2026 :     virtual bool VisitExit( const XMLDocument& /*doc*/ )			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2027 :         return true;

  0000e	b0 01		 mov	 al, 1

; 2028 :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z PROC ; tinyxml2::XMLPrinter::CompactMode, COMDAT
; _this$ = ecx

; 2063 : 	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 4d	 mov	 al, BYTE PTR [eax+77]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z ENDP ; tinyxml2::XMLPrinter::CompactMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLPrinter@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLPrinter@tinyxml2@@UAEPAXI@Z PROC			; tinyxml2::XMLPrinter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLPrinter@tinyxml2@@UAE@XZ ; tinyxml2::XMLPrinter::~XMLPrinter
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 11		 je	 SHORT $LN2@scalar
  0001e	68 f0 00 00 00	 push	 240			; 000000f0H
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_GXMLPrinter@tinyxml2@@UAEPAXI@Z ENDP			; tinyxml2::XMLPrinter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_result$ = -8						; size = 4
_va$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_format$ = 16						; size = 4
?TIXML_SNPRINTF@@YAHPADIPBDZZ PROC			; TIXML_SNPRINTF

; 45   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 46   : 		va_list va;
; 47   : 		va_start( va, format );

  00014	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const *>
  00019	8d 45 14	 lea	 eax, DWORD PTR _format$[ebp+4]
  0001c	89 45 fc	 mov	 DWORD PTR _va$[ebp], eax

; 48   : 		int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _va$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _format$[ebp]
  00026	52		 push	 edx
  00027	6a ff		 push	 -1
  00029	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _vsnprintf_s
  00036	83 c4 14	 add	 esp, 20			; 00000014H
  00039	89 45 f8	 mov	 DWORD PTR _result$[ebp], eax

; 49   : 		va_end( va );

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 50   : 		return result;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]

; 51   : 	}

  00046	83 c4 08	 add	 esp, 8
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?TIXML_SNPRINTF@@YAHPADIPBDZZ ENDP			; TIXML_SNPRINTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_result$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_format$ = 16						; size = 4
_va$ = 20						; size = 4
?TIXML_VSNPRINTF@@YAHPADIPBD0@Z PROC			; TIXML_VSNPRINTF

; 54   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 55   : 		int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );

  0000b	8b 45 14	 mov	 eax, DWORD PTR _va$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _format$[ebp]
  00012	51		 push	 ecx
  00013	6a ff		 push	 -1
  00015	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _vsnprintf_s
  00022	83 c4 14	 add	 esp, 20			; 00000014H
  00025	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 56   : 		return result;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 57   : 	}

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?TIXML_VSNPRINTF@@YAHPADIPBD0@Z ENDP			; TIXML_VSNPRINTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1StrPair@tinyxml2@@QAE@XZ PROC			; tinyxml2::StrPair::~StrPair
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1StrPair@tinyxml2@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 140  :     Reset();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?Reset@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::Reset

; 141  : }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1StrPair@tinyxml2@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1StrPair@tinyxml2@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1StrPair@tinyxml2@@QAE@XZ ENDP			; tinyxml2::StrPair::~StrPair
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?TransferTo@StrPair@tinyxml2@@QAEXPAV12@@Z PROC		; tinyxml2::StrPair::TransferTo
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  :     if ( this == other ) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	3b 45 08	 cmp	 eax, DWORD PTR _other$[ebp]
  00014	75 02		 jne	 SHORT $LN2@TransferTo

; 147  :         return;

  00016	eb 64		 jmp	 SHORT $LN1@TransferTo
$LN2@TransferTo:

; 148  :     }
; 149  :     // This in effect implements the assignment operator by "moving"
; 150  :     // ownership (as in auto_ptr).
; 151  : 
; 152  :     TIXMLASSERT( other->_flags == 0 );

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  0001b	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0001e	74 01		 je	 SHORT $LN3@TransferTo
  00020	cc		 int	 3
$LN3@TransferTo:

; 153  :     TIXMLASSERT( other->_start == 0 );

  00021	8b 55 08	 mov	 edx, DWORD PTR _other$[ebp]
  00024	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00028	74 01		 je	 SHORT $LN4@TransferTo
  0002a	cc		 int	 3
$LN4@TransferTo:

; 154  :     TIXMLASSERT( other->_end == 0 );

  0002b	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  0002e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00032	74 01		 je	 SHORT $LN5@TransferTo
  00034	cc		 int	 3
$LN5@TransferTo:

; 155  : 
; 156  :     other->Reset();

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00038	e8 00 00 00 00	 call	 ?Reset@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::Reset

; 157  : 
; 158  :     other->_flags = _flags;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	89 01		 mov	 DWORD PTR [ecx], eax

; 159  :     other->_start = _start;

  00047	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00050	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 160  :     other->_end = _end;

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 161  : 
; 162  :     _flags = 0;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 163  :     _start = 0;

  00068	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 164  :     _end = 0;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@TransferTo:

; 165  : }

  0007c	83 c4 04	 add	 esp, 4
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?TransferTo@StrPair@tinyxml2@@QAEXPAV12@@Z ENDP		; tinyxml2::StrPair::TransferTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Reset@StrPair@tinyxml2@@AAEXXZ PROC			; tinyxml2::StrPair::Reset
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  :     if ( _flags & NEEDS_DELETE ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00022	74 15		 je	 SHORT $LN2@Reset

; 170  :         delete [] _start;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00036	83 c4 04	 add	 esp, 4
$LN2@Reset:

; 171  :     }
; 172  :     _flags = 0;

  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 173  :     _start = 0;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 174  :     _end = 0;

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 175  : }

  00056	83 c4 08	 add	 esp, 8
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?Reset@StrPair@tinyxml2@@AAEXXZ ENDP			; tinyxml2::StrPair::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_flags$ = 12						; size = 4
?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z PROC		; tinyxml2::StrPair::SetStr
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 180  :     Reset();

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?Reset@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::Reset

; 181  :     size_t len = strlen( str );

  00027	8b f4		 mov	 esi, esp
  00029	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strlen
  00033	83 c4 04	 add	 esp, 4
  00036	3b f4		 cmp	 esi, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax

; 182  :     TIXMLASSERT( _start == 0 );

  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00047	74 01		 je	 SHORT $LN2@SetStr
  00049	cc		 int	 3
$LN2@SetStr:

; 183  :     _start = new char[ len+1 ];

  0004a	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00056	83 c4 04	 add	 esp, 4
  00059	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00062	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 184  :     memcpy( _start, str, len+1 );

  00065	8b 55 f8	 mov	 edx, DWORD PTR _len$[ebp]
  00068	83 c2 01	 add	 edx, 1
  0006b	8b f4		 mov	 esi, esp
  0006d	52		 push	 edx
  0006e	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00071	50		 push	 eax
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00078	52		 push	 edx
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 185  :     _end = _start + len;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008f	03 4d f8	 add	 ecx, DWORD PTR _len$[ebp]
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 186  :     _flags = flags | NEEDS_DELETE;

  00098	8b 45 0c	 mov	 eax, DWORD PTR _flags$[ebp]
  0009b	0d 00 02 00 00	 or	 eax, 512		; 00000200H
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	89 01		 mov	 DWORD PTR [ecx], eax

; 187  : }

  000a5	5e		 pop	 esi
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ENDP		; tinyxml2::StrPair::SetStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv67 = -20						; size = 4
_length$ = -16						; size = 4
_endChar$ = -9						; size = 1
_start$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_endTag$ = 12						; size = 4
_strFlags$ = 16						; size = 4
?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z PROC	; tinyxml2::StrPair::ParseText
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  :     TIXMLASSERT( endTag && *endTag );

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _endTag$[ebp], 0
  00022	74 13		 je	 SHORT $LN7@ParseText
  00024	8b 45 0c	 mov	 eax, DWORD PTR _endTag$[ebp]
  00027	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0002a	85 c9		 test	 ecx, ecx
  0002c	74 09		 je	 SHORT $LN7@ParseText
  0002e	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00035	eb 07		 jmp	 SHORT $LN8@ParseText
$LN7@ParseText:
  00037	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN8@ParseText:
  0003e	83 7d ec 00	 cmp	 DWORD PTR tv67[ebp], 0
  00042	75 01		 jne	 SHORT $LN4@ParseText
  00044	cc		 int	 3
$LN4@ParseText:

; 193  : 
; 194  :     char* start = p;

  00045	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00048	89 55 f8	 mov	 DWORD PTR _start$[ebp], edx

; 195  :     char  endChar = *endTag;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _endTag$[ebp]
  0004e	8a 08		 mov	 cl, BYTE PTR [eax]
  00050	88 4d f7	 mov	 BYTE PTR _endChar$[ebp], cl

; 196  :     size_t length = strlen( endTag );

  00053	8b f4		 mov	 esi, esp
  00055	8b 55 0c	 mov	 edx, DWORD PTR _endTag$[ebp]
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strlen
  0005f	83 c4 04	 add	 esp, 4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	89 45 f0	 mov	 DWORD PTR _length$[ebp], eax
$LN2@ParseText:

; 197  : 
; 198  :     // Inner loop of text parsing.
; 199  :     while ( *p ) {

  0006c	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0006f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00072	85 c9		 test	 ecx, ecx
  00074	74 57		 je	 SHORT $LN3@ParseText

; 200  :         if ( *p == endChar && strncmp( p, endTag, length ) == 0 ) {

  00076	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00079	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0007c	0f be 4d f7	 movsx	 ecx, BYTE PTR _endChar$[ebp]
  00080	3b c1		 cmp	 eax, ecx
  00082	75 3e		 jne	 SHORT $LN5@ParseText
  00084	8b f4		 mov	 esi, esp
  00086	8b 55 f0	 mov	 edx, DWORD PTR _length$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 0c	 mov	 eax, DWORD PTR _endTag$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00091	51		 push	 ecx
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	85 c0		 test	 eax, eax
  000a4	75 1c		 jne	 SHORT $LN5@ParseText

; 201  :             Set( start, p, strFlags );

  000a6	8b 55 10	 mov	 edx, DWORD PTR _strFlags$[ebp]
  000a9	52		 push	 edx
  000aa	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _start$[ebp]
  000b1	51		 push	 ecx
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	e8 00 00 00 00	 call	 ?Set@StrPair@tinyxml2@@QAEXPAD0H@Z ; tinyxml2::StrPair::Set

; 202  :             return p + length;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000bd	03 45 f0	 add	 eax, DWORD PTR _length$[ebp]
  000c0	eb 0d		 jmp	 SHORT $LN1@ParseText
$LN5@ParseText:

; 203  :         }
; 204  :         ++p;

  000c2	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000c5	83 c2 01	 add	 edx, 1
  000c8	89 55 08	 mov	 DWORD PTR _p$[ebp], edx

; 205  :     }

  000cb	eb 9f		 jmp	 SHORT $LN2@ParseText
$LN3@ParseText:

; 206  :     return 0;

  000cd	33 c0		 xor	 eax, eax
$LN1@ParseText:

; 207  : }

  000cf	5e		 pop	 esi
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ENDP	; tinyxml2::StrPair::ParseText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_start$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z PROC		; tinyxml2::StrPair::ParseName
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  :     if ( !p || !(*p) ) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0001b	74 0a		 je	 SHORT $LN5@ParseName
  0001d	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00020	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00023	85 c9		 test	 ecx, ecx
  00025	75 04		 jne	 SHORT $LN4@ParseName
$LN5@ParseName:

; 213  :         return 0;

  00027	33 c0		 xor	 eax, eax
  00029	eb 69		 jmp	 SHORT $LN1@ParseName
$LN4@ParseName:

; 214  :     }
; 215  :     if ( !XMLUtil::IsNameStartChar( *p ) ) {

  0002b	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0002e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameStartChar
  00037	83 c4 04	 add	 esp, 4
  0003a	0f b6 c8	 movzx	 ecx, al
  0003d	85 c9		 test	 ecx, ecx
  0003f	75 04		 jne	 SHORT $LN6@ParseName

; 216  :         return 0;

  00041	33 c0		 xor	 eax, eax
  00043	eb 4f		 jmp	 SHORT $LN1@ParseName
$LN6@ParseName:

; 217  :     }
; 218  : 
; 219  :     char* const start = p;

  00045	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00048	89 55 f8	 mov	 DWORD PTR _start$[ebp], edx

; 220  :     ++p;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0004e	83 c0 01	 add	 eax, 1
  00051	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
$LN2@ParseName:

; 221  :     while ( *p && XMLUtil::IsNameChar( *p ) ) {

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00057	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0005a	85 d2		 test	 edx, edx
  0005c	74 21		 je	 SHORT $LN3@ParseName
  0005e	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00061	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameChar
  0006a	83 c4 04	 add	 esp, 4
  0006d	0f b6 d0	 movzx	 edx, al
  00070	85 d2		 test	 edx, edx
  00072	74 0b		 je	 SHORT $LN3@ParseName

; 222  :         ++p;

  00074	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00077	83 c0 01	 add	 eax, 1
  0007a	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 223  :     }

  0007d	eb d5		 jmp	 SHORT $LN2@ParseName
$LN3@ParseName:

; 224  : 
; 225  :     Set( start, p, 0 );

  0007f	6a 00		 push	 0
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 f8	 mov	 edx, DWORD PTR _start$[ebp]
  00088	52		 push	 edx
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?Set@StrPair@tinyxml2@@QAEXPAD0H@Z ; tinyxml2::StrPair::Set

; 226  :     return p;

  00091	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
$LN1@ParseName:

; 227  : }

  00094	83 c4 08	 add	 esp, 8
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z ENDP		; tinyxml2::StrPair::ParseName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_q$1 = -12						; size = 4
_p$2 = -8						; size = 4
_this$ = -4						; size = 4
?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ PROC	; tinyxml2::StrPair::CollapseWhitespace
; _this$ = ecx

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 232  :     // Adjusting _start would cause undefined behavior on delete[]
; 233  :     TIXMLASSERT( ( _flags & NEEDS_DELETE ) == 0 );

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  00029	74 01		 je	 SHORT $LN4@CollapseWh
  0002b	cc		 int	 3
$LN4@CollapseWh:

; 234  :     // Trim leading space.
; 235  :     _start = XMLUtil::SkipWhiteSpace( _start );

  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  00038	83 c4 04	 add	 esp, 4
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 236  : 
; 237  :     if ( *_start ) {

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00047	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0004a	85 c9		 test	 ecx, ecx
  0004c	0f 84 80 00 00
	00		 je	 $LN1@CollapseWh

; 238  :         char* p = _start;	// the read pointer

  00052	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00055	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00058	89 45 f8	 mov	 DWORD PTR _p$2[ebp], eax

; 239  :         char* q = _start;	// the write pointer

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00061	89 55 f4	 mov	 DWORD PTR _q$1[ebp], edx
$LN2@CollapseWh:

; 240  : 
; 241  :         while( *p ) {

  00064	8b 45 f8	 mov	 eax, DWORD PTR _p$2[ebp]
  00067	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0006a	85 c9		 test	 ecx, ecx
  0006c	74 5e		 je	 SHORT $LN3@CollapseWh

; 242  :             if ( XMLUtil::IsWhiteSpace( *p )) {

  0006e	8b 55 f8	 mov	 edx, DWORD PTR _p$2[ebp]
  00071	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z ; tinyxml2::XMLUtil::IsWhiteSpace
  0007a	83 c4 04	 add	 esp, 4
  0007d	0f b6 c8	 movzx	 ecx, al
  00080	85 c9		 test	 ecx, ecx
  00082	74 2a		 je	 SHORT $LN6@CollapseWh

; 243  :                 p = XMLUtil::SkipWhiteSpace( p );

  00084	8b 55 f8	 mov	 edx, DWORD PTR _p$2[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  0008d	83 c4 04	 add	 esp, 4
  00090	89 45 f8	 mov	 DWORD PTR _p$2[ebp], eax

; 244  :                 if ( *p == 0 ) {

  00093	8b 45 f8	 mov	 eax, DWORD PTR _p$2[ebp]
  00096	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00099	85 c9		 test	 ecx, ecx
  0009b	75 02		 jne	 SHORT $LN7@CollapseWh

; 245  :                     break;    // don't write to q; this trims the trailing space.

  0009d	eb 2d		 jmp	 SHORT $LN3@CollapseWh
$LN7@CollapseWh:

; 246  :                 }
; 247  :                 *q = ' ';

  0009f	8b 55 f4	 mov	 edx, DWORD PTR _q$1[ebp]
  000a2	c6 02 20	 mov	 BYTE PTR [edx], 32	; 00000020H

; 248  :                 ++q;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _q$1[ebp]
  000a8	83 c0 01	 add	 eax, 1
  000ab	89 45 f4	 mov	 DWORD PTR _q$1[ebp], eax
$LN6@CollapseWh:

; 249  :             }
; 250  :             *q = *p;

  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _q$1[ebp]
  000b1	8b 55 f8	 mov	 edx, DWORD PTR _p$2[ebp]
  000b4	8a 02		 mov	 al, BYTE PTR [edx]
  000b6	88 01		 mov	 BYTE PTR [ecx], al

; 251  :             ++q;

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR _q$1[ebp]
  000bb	83 c1 01	 add	 ecx, 1
  000be	89 4d f4	 mov	 DWORD PTR _q$1[ebp], ecx

; 252  :             ++p;

  000c1	8b 55 f8	 mov	 edx, DWORD PTR _p$2[ebp]
  000c4	83 c2 01	 add	 edx, 1
  000c7	89 55 f8	 mov	 DWORD PTR _p$2[ebp], edx

; 253  :         }

  000ca	eb 98		 jmp	 SHORT $LN2@CollapseWh
$LN3@CollapseWh:

; 254  :         *q = 0;

  000cc	8b 45 f4	 mov	 eax, DWORD PTR _q$1[ebp]
  000cf	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN1@CollapseWh:

; 255  :     }
; 256  : }

  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ ENDP	; tinyxml2::StrPair::CollapseWhitespace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv156 = -72						; size = 4
_entity$1 = -68						; size = 4
_i$2 = -64						; size = 4
_entityFound$3 = -57					; size = 1
_adjusted$4 = -56					; size = 4
_len$5 = -48						; size = 4
_buf$6 = -36						; size = 10
_buflen$7 = -20						; size = 4
_q$8 = -16						; size = 4
_p$9 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetStr@StrPair@tinyxml2@@QAEPBDXZ PROC			; tinyxml2::StrPair::GetStr
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000c	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 261  :     TIXMLASSERT( _start );

  00026	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0002d	75 01		 jne	 SHORT $LN7@GetStr
  0002f	cc		 int	 3
$LN7@GetStr:

; 262  :     TIXMLASSERT( _end );

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00037	75 01		 jne	 SHORT $LN8@GetStr
  00039	cc		 int	 3
$LN8@GetStr:

; 263  :     if ( _flags & NEEDS_FLUSH ) {

  0003a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 02		 mov	 eax, DWORD PTR [edx]
  0003f	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00044	0f 84 b8 02 00
	00		 je	 $LN9@GetStr

; 264  :         *_end = 0;

  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00050	c6 02 00	 mov	 BYTE PTR [edx], 0

; 265  :         _flags ^= NEEDS_FLUSH;

  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	81 f1 00 01 00
	00		 xor	 ecx, 256		; 00000100H
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	89 0a		 mov	 DWORD PTR [edx], ecx

; 266  : 
; 267  :         if ( _flags ) {

  00063	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00066	83 38 00	 cmp	 DWORD PTR [eax], 0
  00069	0f 84 71 02 00
	00		 je	 $LN10@GetStr

; 268  :             char* p = _start;	// the read pointer

  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00075	89 55 f4	 mov	 DWORD PTR _p$9[ebp], edx

; 269  :             char* q = _start;	// the write pointer

  00078	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007e	89 4d f0	 mov	 DWORD PTR _q$8[ebp], ecx
$LN2@GetStr:

; 270  : 
; 271  :             while( p < _end ) {

  00081	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00084	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  00087	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0008a	0f 83 4a 02 00
	00		 jae	 $LN3@GetStr

; 272  :                 if ( (_flags & NEEDS_NEWLINE_NORMALIZATION) && *p == CR ) {

  00090	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	83 e2 02	 and	 edx, 2
  00098	74 3f		 je	 SHORT $LN11@GetStr
  0009a	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  0009d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000a0	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000a3	75 34		 jne	 SHORT $LN11@GetStr

; 273  :                     // CR-LF pair becomes LF
; 274  :                     // CR alone becomes LF
; 275  :                     // LF-CR becomes LF
; 276  :                     if ( *(p+1) == LF ) {

  000a5	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  000a8	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  000ac	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000af	75 0b		 jne	 SHORT $LN13@GetStr

; 277  :                         p += 2;

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR _p$9[ebp]
  000b4	83 c1 02	 add	 ecx, 2
  000b7	89 4d f4	 mov	 DWORD PTR _p$9[ebp], ecx

; 278  :                     }
; 279  :                     else {

  000ba	eb 09		 jmp	 SHORT $LN14@GetStr
$LN13@GetStr:

; 280  :                         ++p;

  000bc	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  000bf	83 c2 01	 add	 edx, 1
  000c2	89 55 f4	 mov	 DWORD PTR _p$9[ebp], edx
$LN14@GetStr:

; 281  :                     }
; 282  :                     *q++ = LF;

  000c5	8b 45 f0	 mov	 eax, DWORD PTR _q$8[ebp]
  000c8	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR _q$8[ebp]
  000ce	83 c1 01	 add	 ecx, 1
  000d1	89 4d f0	 mov	 DWORD PTR _q$8[ebp], ecx
  000d4	e9 fc 01 00 00	 jmp	 $LN12@GetStr
$LN11@GetStr:

; 283  :                 }
; 284  :                 else if ( (_flags & NEEDS_NEWLINE_NORMALIZATION) && *p == LF ) {

  000d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	8b 02		 mov	 eax, DWORD PTR [edx]
  000de	83 e0 02	 and	 eax, 2
  000e1	74 3f		 je	 SHORT $LN15@GetStr
  000e3	8b 4d f4	 mov	 ecx, DWORD PTR _p$9[ebp]
  000e6	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000e9	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000ec	75 34		 jne	 SHORT $LN15@GetStr

; 285  :                     if ( *(p+1) == CR ) {

  000ee	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  000f1	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  000f5	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000f8	75 0b		 jne	 SHORT $LN17@GetStr

; 286  :                         p += 2;

  000fa	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  000fd	83 c2 02	 add	 edx, 2
  00100	89 55 f4	 mov	 DWORD PTR _p$9[ebp], edx

; 287  :                     }
; 288  :                     else {

  00103	eb 09		 jmp	 SHORT $LN18@GetStr
$LN17@GetStr:

; 289  :                         ++p;

  00105	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  00108	83 c0 01	 add	 eax, 1
  0010b	89 45 f4	 mov	 DWORD PTR _p$9[ebp], eax
$LN18@GetStr:

; 290  :                     }
; 291  :                     *q++ = LF;

  0010e	8b 4d f0	 mov	 ecx, DWORD PTR _q$8[ebp]
  00111	c6 01 0a	 mov	 BYTE PTR [ecx], 10	; 0000000aH
  00114	8b 55 f0	 mov	 edx, DWORD PTR _q$8[ebp]
  00117	83 c2 01	 add	 edx, 1
  0011a	89 55 f0	 mov	 DWORD PTR _q$8[ebp], edx
  0011d	e9 b3 01 00 00	 jmp	 $LN12@GetStr
$LN15@GetStr:

; 292  :                 }
; 293  :                 else if ( (_flags & NEEDS_ENTITY_PROCESSING) && *p == '&' ) {

  00122	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00125	8b 08		 mov	 ecx, DWORD PTR [eax]
  00127	83 e1 01	 and	 ecx, 1
  0012a	0f 84 89 01 00
	00		 je	 $LN19@GetStr
  00130	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  00133	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00136	83 f8 26	 cmp	 eax, 38			; 00000026H
  00139	0f 85 7a 01 00
	00		 jne	 $LN19@GetStr

; 294  :                     // Entities handled by tinyXML2:
; 295  :                     // - special entities in the entity table [in/out]
; 296  :                     // - numeric character reference [in]
; 297  :                     //   &#20013; or &#x4e2d;
; 298  : 
; 299  :                     if ( *(p+1) == '#' ) {

  0013f	8b 4d f4	 mov	 ecx, DWORD PTR _p$9[ebp]
  00142	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00146	83 fa 23	 cmp	 edx, 35			; 00000023H
  00149	0f 85 b9 00 00
	00		 jne	 $LN21@GetStr

; 300  :                         const int buflen = 10;

  0014f	c7 45 ec 0a 00
	00 00		 mov	 DWORD PTR _buflen$7[ebp], 10 ; 0000000aH

; 301  :                         char buf[buflen] = { 0 };

  00156	c6 45 dc 00	 mov	 BYTE PTR _buf$6[ebp], 0
  0015a	33 c0		 xor	 eax, eax
  0015c	89 45 dd	 mov	 DWORD PTR _buf$6[ebp+1], eax
  0015f	89 45 e1	 mov	 DWORD PTR _buf$6[ebp+5], eax
  00162	88 45 e5	 mov	 BYTE PTR _buf$6[ebp+9], al

; 302  :                         int len = 0;

  00165	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _len$5[ebp], 0

; 303  :                         char* adjusted = const_cast<char*>( XMLUtil::GetCharacterRef( p, buf, &len ) );

  0016c	8d 4d d0	 lea	 ecx, DWORD PTR _len$5[ebp]
  0016f	51		 push	 ecx
  00170	8d 55 dc	 lea	 edx, DWORD PTR _buf$6[ebp]
  00173	52		 push	 edx
  00174	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z ; tinyxml2::XMLUtil::GetCharacterRef
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00180	89 45 c8	 mov	 DWORD PTR _adjusted$4[ebp], eax

; 304  :                         if ( adjusted == 0 ) {

  00183	83 7d c8 00	 cmp	 DWORD PTR _adjusted$4[ebp], 0
  00187	75 1e		 jne	 SHORT $LN23@GetStr

; 305  :                             *q = *p;

  00189	8b 4d f0	 mov	 ecx, DWORD PTR _q$8[ebp]
  0018c	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  0018f	8a 02		 mov	 al, BYTE PTR [edx]
  00191	88 01		 mov	 BYTE PTR [ecx], al

; 306  :                             ++p;

  00193	8b 4d f4	 mov	 ecx, DWORD PTR _p$9[ebp]
  00196	83 c1 01	 add	 ecx, 1
  00199	89 4d f4	 mov	 DWORD PTR _p$9[ebp], ecx

; 307  :                             ++q;

  0019c	8b 55 f0	 mov	 edx, DWORD PTR _q$8[ebp]
  0019f	83 c2 01	 add	 edx, 1
  001a2	89 55 f0	 mov	 DWORD PTR _q$8[ebp], edx

; 308  :                         }
; 309  :                         else {

  001a5	eb 5c		 jmp	 SHORT $LN24@GetStr
$LN23@GetStr:

; 310  :                             TIXMLASSERT( 0 <= len && len <= buflen );

  001a7	83 7d d0 00	 cmp	 DWORD PTR _len$5[ebp], 0
  001ab	7c 0f		 jl	 SHORT $LN32@GetStr
  001ad	83 7d d0 0a	 cmp	 DWORD PTR _len$5[ebp], 10 ; 0000000aH
  001b1	7f 09		 jg	 SHORT $LN32@GetStr
  001b3	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv156[ebp], 1
  001ba	eb 07		 jmp	 SHORT $LN33@GetStr
$LN32@GetStr:
  001bc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], 0
$LN33@GetStr:
  001c3	83 7d b8 00	 cmp	 DWORD PTR tv156[ebp], 0
  001c7	75 01		 jne	 SHORT $LN25@GetStr
  001c9	cc		 int	 3
$LN25@GetStr:

; 311  :                             TIXMLASSERT( q + len <= adjusted );

  001ca	8b 45 f0	 mov	 eax, DWORD PTR _q$8[ebp]
  001cd	03 45 d0	 add	 eax, DWORD PTR _len$5[ebp]
  001d0	3b 45 c8	 cmp	 eax, DWORD PTR _adjusted$4[ebp]
  001d3	76 01		 jbe	 SHORT $LN26@GetStr
  001d5	cc		 int	 3
$LN26@GetStr:

; 312  :                             p = adjusted;

  001d6	8b 4d c8	 mov	 ecx, DWORD PTR _adjusted$4[ebp]
  001d9	89 4d f4	 mov	 DWORD PTR _p$9[ebp], ecx

; 313  :                             memcpy( q, buf, len );

  001dc	8b f4		 mov	 esi, esp
  001de	8b 55 d0	 mov	 edx, DWORD PTR _len$5[ebp]
  001e1	52		 push	 edx
  001e2	8d 45 dc	 lea	 eax, DWORD PTR _buf$6[ebp]
  001e5	50		 push	 eax
  001e6	8b 4d f0	 mov	 ecx, DWORD PTR _q$8[ebp]
  001e9	51		 push	 ecx
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f3	3b f4		 cmp	 esi, esp
  001f5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 314  :                             q += len;

  001fa	8b 55 f0	 mov	 edx, DWORD PTR _q$8[ebp]
  001fd	03 55 d0	 add	 edx, DWORD PTR _len$5[ebp]
  00200	89 55 f0	 mov	 DWORD PTR _q$8[ebp], edx
$LN24@GetStr:

; 315  :                         }
; 316  :                     }
; 317  :                     else {

  00203	e9 af 00 00 00	 jmp	 $LN22@GetStr
$LN21@GetStr:

; 318  :                         bool entityFound = false;

  00208	c6 45 c7 00	 mov	 BYTE PTR _entityFound$3[ebp], 0

; 319  :                         for( int i = 0; i < NUM_ENTITIES; ++i ) {

  0020c	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00213	eb 09		 jmp	 SHORT $LN6@GetStr
$LN4@GetStr:
  00215	8b 45 c0	 mov	 eax, DWORD PTR _i$2[ebp]
  00218	83 c0 01	 add	 eax, 1
  0021b	89 45 c0	 mov	 DWORD PTR _i$2[ebp], eax
$LN6@GetStr:
  0021e	83 7d c0 05	 cmp	 DWORD PTR _i$2[ebp], 5
  00222	7d 79		 jge	 SHORT $LN5@GetStr

; 320  :                             const Entity& entity = entities[i];

  00224	6b 4d c0 0c	 imul	 ecx, DWORD PTR _i$2[ebp], 12
  00228	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?entities@tinyxml2@@3QBUEntity@1@B
  0022e	89 4d bc	 mov	 DWORD PTR _entity$1[ebp], ecx

; 321  :                             if ( strncmp( p + 1, entity.pattern, entity.length ) == 0
; 322  :                                     && *( p + entity.length + 1 ) == ';' ) {

  00231	8b f4		 mov	 esi, esp
  00233	8b 55 bc	 mov	 edx, DWORD PTR _entity$1[ebp]
  00236	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00239	50		 push	 eax
  0023a	8b 4d bc	 mov	 ecx, DWORD PTR _entity$1[ebp]
  0023d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023f	52		 push	 edx
  00240	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  00243	83 c0 01	 add	 eax, 1
  00246	50		 push	 eax
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  0024d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00250	3b f4		 cmp	 esi, esp
  00252	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00257	85 c0		 test	 eax, eax
  00259	75 3d		 jne	 SHORT $LN27@GetStr
  0025b	8b 4d bc	 mov	 ecx, DWORD PTR _entity$1[ebp]
  0025e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00261	8b 45 f4	 mov	 eax, DWORD PTR _p$9[ebp]
  00264	0f be 4c 10 01	 movsx	 ecx, BYTE PTR [eax+edx+1]
  00269	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0026c	75 2a		 jne	 SHORT $LN27@GetStr

; 323  :                                 // Found an entity - convert.
; 324  :                                 *q = entity.value;

  0026e	8b 55 f0	 mov	 edx, DWORD PTR _q$8[ebp]
  00271	8b 45 bc	 mov	 eax, DWORD PTR _entity$1[ebp]
  00274	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  00277	88 0a		 mov	 BYTE PTR [edx], cl

; 325  :                                 ++q;

  00279	8b 55 f0	 mov	 edx, DWORD PTR _q$8[ebp]
  0027c	83 c2 01	 add	 edx, 1
  0027f	89 55 f0	 mov	 DWORD PTR _q$8[ebp], edx

; 326  :                                 p += entity.length + 2;

  00282	8b 45 bc	 mov	 eax, DWORD PTR _entity$1[ebp]
  00285	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00288	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  0028b	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  0028f	89 45 f4	 mov	 DWORD PTR _p$9[ebp], eax

; 327  :                                 entityFound = true;

  00292	c6 45 c7 01	 mov	 BYTE PTR _entityFound$3[ebp], 1

; 328  :                                 break;

  00296	eb 05		 jmp	 SHORT $LN5@GetStr
$LN27@GetStr:

; 329  :                             }
; 330  :                         }

  00298	e9 78 ff ff ff	 jmp	 $LN4@GetStr
$LN5@GetStr:

; 331  :                         if ( !entityFound ) {

  0029d	0f b6 4d c7	 movzx	 ecx, BYTE PTR _entityFound$3[ebp]
  002a1	85 c9		 test	 ecx, ecx
  002a3	75 12		 jne	 SHORT $LN22@GetStr

; 332  :                             // fixme: treat as error?
; 333  :                             ++p;

  002a5	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  002a8	83 c2 01	 add	 edx, 1
  002ab	89 55 f4	 mov	 DWORD PTR _p$9[ebp], edx

; 334  :                             ++q;

  002ae	8b 45 f0	 mov	 eax, DWORD PTR _q$8[ebp]
  002b1	83 c0 01	 add	 eax, 1
  002b4	89 45 f0	 mov	 DWORD PTR _q$8[ebp], eax
$LN22@GetStr:

; 335  :                         }
; 336  :                     }
; 337  :                 }
; 338  :                 else {

  002b7	eb 1c		 jmp	 SHORT $LN12@GetStr
$LN19@GetStr:

; 339  :                     *q = *p;

  002b9	8b 4d f0	 mov	 ecx, DWORD PTR _q$8[ebp]
  002bc	8b 55 f4	 mov	 edx, DWORD PTR _p$9[ebp]
  002bf	8a 02		 mov	 al, BYTE PTR [edx]
  002c1	88 01		 mov	 BYTE PTR [ecx], al

; 340  :                     ++p;

  002c3	8b 4d f4	 mov	 ecx, DWORD PTR _p$9[ebp]
  002c6	83 c1 01	 add	 ecx, 1
  002c9	89 4d f4	 mov	 DWORD PTR _p$9[ebp], ecx

; 341  :                     ++q;

  002cc	8b 55 f0	 mov	 edx, DWORD PTR _q$8[ebp]
  002cf	83 c2 01	 add	 edx, 1
  002d2	89 55 f0	 mov	 DWORD PTR _q$8[ebp], edx
$LN12@GetStr:

; 342  :                 }
; 343  :             }

  002d5	e9 a7 fd ff ff	 jmp	 $LN2@GetStr
$LN3@GetStr:

; 344  :             *q = 0;

  002da	8b 45 f0	 mov	 eax, DWORD PTR _q$8[ebp]
  002dd	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN10@GetStr:

; 345  :         }
; 346  :         // The loop below has plenty going on, and this
; 347  :         // is a less useful mode. Break it out.
; 348  :         if ( _flags & NEEDS_WHITESPACE_COLLAPSING ) {

  002e0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e5	83 e2 04	 and	 edx, 4
  002e8	74 08		 je	 SHORT $LN29@GetStr

; 349  :             CollapseWhitespace();

  002ea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ed	e8 00 00 00 00	 call	 ?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::CollapseWhitespace
$LN29@GetStr:

; 350  :         }
; 351  :         _flags = (_flags & NEEDS_DELETE);

  002f2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f7	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  002fd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00300	89 0a		 mov	 DWORD PTR [edx], ecx
$LN9@GetStr:

; 352  :     }
; 353  :     TIXMLASSERT( _start );

  00302	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00305	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00309	75 01		 jne	 SHORT $LN30@GetStr
  0030b	cc		 int	 3
$LN30@GetStr:

; 354  :     return _start;

  0030c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0030f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 355  : }

  00312	52		 push	 edx
  00313	8b cd		 mov	 ecx, ebp
  00315	50		 push	 eax
  00316	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN37@GetStr
  0031c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00321	58		 pop	 eax
  00322	5a		 pop	 edx
  00323	5f		 pop	 edi
  00324	5e		 pop	 esi
  00325	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00328	33 cd		 xor	 ecx, ebp
  0032a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032f	83 c4 48	 add	 esp, 72			; 00000048H
  00332	3b ec		 cmp	 ebp, esp
  00334	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00339	8b e5		 mov	 esp, ebp
  0033b	5d		 pop	 ebp
  0033c	c3		 ret	 0
  0033d	0f 1f 00	 npad	 3
$LN37@GetStr:
  00340	02 00 00 00	 DD	 2
  00344	00 00 00 00	 DD	 $LN36@GetStr
$LN36@GetStr:
  00348	dc ff ff ff	 DD	 -36			; ffffffdcH
  0034c	0a 00 00 00	 DD	 10			; 0000000aH
  00350	00 00 00 00	 DD	 $LN34@GetStr
  00354	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00358	04 00 00 00	 DD	 4
  0035c	00 00 00 00	 DD	 $LN35@GetStr
$LN35@GetStr:
  00360	6c		 DB	 108			; 0000006cH
  00361	65		 DB	 101			; 00000065H
  00362	6e		 DB	 110			; 0000006eH
  00363	00		 DB	 0
$LN34@GetStr:
  00364	62		 DB	 98			; 00000062H
  00365	75		 DB	 117			; 00000075H
  00366	66		 DB	 102			; 00000066H
  00367	00		 DB	 0
?GetStr@StrPair@tinyxml2@@QAEPBDXZ ENDP			; tinyxml2::StrPair::GetStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_pu$ = -4						; size = 4
_p$ = 8							; size = 4
_bom$ = 12						; size = 4
?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z PROC		; tinyxml2::XMLUtil::ReadBOM

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 364  :     TIXMLASSERT( p );

  0000b	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0000f	75 01		 jne	 SHORT $LN2@ReadBOM
  00011	cc		 int	 3
$LN2@ReadBOM:

; 365  :     TIXMLASSERT( bom );

  00012	83 7d 0c 00	 cmp	 DWORD PTR _bom$[ebp], 0
  00016	75 01		 jne	 SHORT $LN3@ReadBOM
  00018	cc		 int	 3
$LN3@ReadBOM:

; 366  :     *bom = false;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _bom$[ebp]
  0001c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 367  :     const unsigned char* pu = reinterpret_cast<const unsigned char*>(p);

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00022	89 4d fc	 mov	 DWORD PTR _pu$[ebp], ecx

; 368  :     // Check for BOM:
; 369  :     if (    *(pu+0) == TIXML_UTF_LEAD_0
; 370  :             && *(pu+1) == TIXML_UTF_LEAD_1
; 371  :             && *(pu+2) == TIXML_UTF_LEAD_2 ) {

  00025	8b 55 fc	 mov	 edx, DWORD PTR _pu$[ebp]
  00028	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002b	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  00030	75 2d		 jne	 SHORT $LN4@ReadBOM
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _pu$[ebp]
  00035	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00039	81 fa bb 00 00
	00		 cmp	 edx, 187		; 000000bbH
  0003f	75 1e		 jne	 SHORT $LN4@ReadBOM
  00041	8b 45 fc	 mov	 eax, DWORD PTR _pu$[ebp]
  00044	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00048	81 f9 bf 00 00
	00		 cmp	 ecx, 191		; 000000bfH
  0004e	75 0f		 jne	 SHORT $LN4@ReadBOM

; 372  :         *bom = true;

  00050	8b 55 0c	 mov	 edx, DWORD PTR _bom$[ebp]
  00053	c6 02 01	 mov	 BYTE PTR [edx], 1

; 373  :         p += 3;

  00056	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00059	83 c0 03	 add	 eax, 3
  0005c	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
$LN4@ReadBOM:

; 374  :     }
; 375  :     TIXMLASSERT( p );

  0005f	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00063	75 01		 jne	 SHORT $LN5@ReadBOM
  00065	cc		 int	 3
$LN5@ReadBOM:

; 376  :     return p;

  00066	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 377  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z ENDP		; tinyxml2::XMLUtil::ReadBOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv69 = -52						; size = 4
_FIRST_BYTE_MARK$ = -44					; size = 28
_BYTE_MARK$ = -12					; size = 4
_BYTE_MASK$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 4
_output$ = 12						; size = 4
_length$ = 16						; size = 4
?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z PROC	; tinyxml2::XMLUtil::ConvertUTF32ToUTF8

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 382  :     const unsigned long BYTE_MASK = 0xBF;

  00020	c7 45 f8 bf 00
	00 00		 mov	 DWORD PTR _BYTE_MASK$[ebp], 191 ; 000000bfH

; 383  :     const unsigned long BYTE_MARK = 0x80;

  00027	c7 45 f4 80 00
	00 00		 mov	 DWORD PTR _BYTE_MARK$[ebp], 128 ; 00000080H

; 384  :     const unsigned long FIRST_BYTE_MARK[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

  0002e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp], 0
  00035	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp+4], 0
  0003c	c7 45 dc c0 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp+8], 192 ; 000000c0H
  00043	c7 45 e0 e0 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp+12], 224 ; 000000e0H
  0004a	c7 45 e4 f0 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp+16], 240 ; 000000f0H
  00051	c7 45 e8 f8 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp+20], 248 ; 000000f8H
  00058	c7 45 ec fc 00
	00 00		 mov	 DWORD PTR _FIRST_BYTE_MARK$[ebp+24], 252 ; 000000fcH

; 385  : 
; 386  :     if (input < 0x80) {

  0005f	81 7d 08 80 00
	00 00		 cmp	 DWORD PTR _input$[ebp], 128 ; 00000080H
  00066	73 0b		 jae	 SHORT $LN4@ConvertUTF

; 387  :         *length = 1;

  00068	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  0006b	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00071	eb 4a		 jmp	 SHORT $LN5@ConvertUTF
$LN4@ConvertUTF:

; 388  :     }
; 389  :     else if ( input < 0x800 ) {

  00073	81 7d 08 00 08
	00 00		 cmp	 DWORD PTR _input$[ebp], 2048 ; 00000800H
  0007a	73 0b		 jae	 SHORT $LN6@ConvertUTF

; 390  :         *length = 2;

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _length$[ebp]
  0007f	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
  00085	eb 36		 jmp	 SHORT $LN5@ConvertUTF
$LN6@ConvertUTF:

; 391  :     }
; 392  :     else if ( input < 0x10000 ) {

  00087	81 7d 08 00 00
	01 00		 cmp	 DWORD PTR _input$[ebp], 65536 ; 00010000H
  0008e	73 0b		 jae	 SHORT $LN8@ConvertUTF

; 393  :         *length = 3;

  00090	8b 55 10	 mov	 edx, DWORD PTR _length$[ebp]
  00093	c7 02 03 00 00
	00		 mov	 DWORD PTR [edx], 3
  00099	eb 22		 jmp	 SHORT $LN5@ConvertUTF
$LN8@ConvertUTF:

; 394  :     }
; 395  :     else if ( input < 0x200000 ) {

  0009b	81 7d 08 00 00
	20 00		 cmp	 DWORD PTR _input$[ebp], 2097152 ; 00200000H
  000a2	73 0b		 jae	 SHORT $LN10@ConvertUTF

; 396  :         *length = 4;

  000a4	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  000a7	c7 00 04 00 00
	00		 mov	 DWORD PTR [eax], 4

; 397  :     }
; 398  :     else {

  000ad	eb 0e		 jmp	 SHORT $LN5@ConvertUTF
$LN10@ConvertUTF:

; 399  :         *length = 0;    // This code won't convert this correctly anyway.

  000af	8b 4d 10	 mov	 ecx, DWORD PTR _length$[ebp]
  000b2	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 400  :         return;

  000b8	e9 c1 00 00 00	 jmp	 $LN1@ConvertUTF
$LN5@ConvertUTF:

; 401  :     }
; 402  : 
; 403  :     output += *length;

  000bd	8b 55 10	 mov	 edx, DWORD PTR _length$[ebp]
  000c0	8b 45 0c	 mov	 eax, DWORD PTR _output$[ebp]
  000c3	03 02		 add	 eax, DWORD PTR [edx]
  000c5	89 45 0c	 mov	 DWORD PTR _output$[ebp], eax

; 404  : 
; 405  :     // Scary scary fall throughs.
; 406  :     switch (*length) {

  000c8	8b 4d 10	 mov	 ecx, DWORD PTR _length$[ebp]
  000cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cd	89 55 cc	 mov	 DWORD PTR tv69[ebp], edx
  000d0	8b 45 cc	 mov	 eax, DWORD PTR tv69[ebp]
  000d3	83 e8 01	 sub	 eax, 1
  000d6	89 45 cc	 mov	 DWORD PTR tv69[ebp], eax
  000d9	83 7d cc 03	 cmp	 DWORD PTR tv69[ebp], 3
  000dd	0f 87 96 00 00
	00		 ja	 $LN16@ConvertUTF
  000e3	8b 4d cc	 mov	 ecx, DWORD PTR tv69[ebp]
  000e6	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN22@ConvertUTF[ecx*4]
$LN12@ConvertUTF:

; 407  :         case 4:
; 408  :             --output;

  000ed	8b 55 0c	 mov	 edx, DWORD PTR _output$[ebp]
  000f0	83 ea 01	 sub	 edx, 1
  000f3	89 55 0c	 mov	 DWORD PTR _output$[ebp], edx

; 409  :             *output = (char)((input | BYTE_MARK) & BYTE_MASK);

  000f6	8b 45 08	 mov	 eax, DWORD PTR _input$[ebp]
  000f9	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  000fe	25 bf 00 00 00	 and	 eax, 191		; 000000bfH
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _output$[ebp]
  00106	88 01		 mov	 BYTE PTR [ecx], al

; 410  :             input >>= 6;

  00108	8b 55 08	 mov	 edx, DWORD PTR _input$[ebp]
  0010b	c1 ea 06	 shr	 edx, 6
  0010e	89 55 08	 mov	 DWORD PTR _input$[ebp], edx
$LN13@ConvertUTF:

; 411  :         case 3:
; 412  :             --output;

  00111	8b 45 0c	 mov	 eax, DWORD PTR _output$[ebp]
  00114	83 e8 01	 sub	 eax, 1
  00117	89 45 0c	 mov	 DWORD PTR _output$[ebp], eax

; 413  :             *output = (char)((input | BYTE_MARK) & BYTE_MASK);

  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  0011d	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
  00123	81 e1 bf 00 00
	00		 and	 ecx, 191		; 000000bfH
  00129	8b 55 0c	 mov	 edx, DWORD PTR _output$[ebp]
  0012c	88 0a		 mov	 BYTE PTR [edx], cl

; 414  :             input >>= 6;

  0012e	8b 45 08	 mov	 eax, DWORD PTR _input$[ebp]
  00131	c1 e8 06	 shr	 eax, 6
  00134	89 45 08	 mov	 DWORD PTR _input$[ebp], eax
$LN14@ConvertUTF:

; 415  :         case 2:
; 416  :             --output;

  00137	8b 4d 0c	 mov	 ecx, DWORD PTR _output$[ebp]
  0013a	83 e9 01	 sub	 ecx, 1
  0013d	89 4d 0c	 mov	 DWORD PTR _output$[ebp], ecx

; 417  :             *output = (char)((input | BYTE_MARK) & BYTE_MASK);

  00140	8b 55 08	 mov	 edx, DWORD PTR _input$[ebp]
  00143	81 ca 80 00 00
	00		 or	 edx, 128		; 00000080H
  00149	81 e2 bf 00 00
	00		 and	 edx, 191		; 000000bfH
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _output$[ebp]
  00152	88 10		 mov	 BYTE PTR [eax], dl

; 418  :             input >>= 6;

  00154	8b 4d 08	 mov	 ecx, DWORD PTR _input$[ebp]
  00157	c1 e9 06	 shr	 ecx, 6
  0015a	89 4d 08	 mov	 DWORD PTR _input$[ebp], ecx
$LN15@ConvertUTF:

; 419  :         case 1:
; 420  :             --output;

  0015d	8b 55 0c	 mov	 edx, DWORD PTR _output$[ebp]
  00160	83 ea 01	 sub	 edx, 1
  00163	89 55 0c	 mov	 DWORD PTR _output$[ebp], edx

; 421  :             *output = (char)(input | FIRST_BYTE_MARK[*length]);

  00166	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  00169	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016b	8b 55 08	 mov	 edx, DWORD PTR _input$[ebp]
  0016e	0b 54 8d d4	 or	 edx, DWORD PTR _FIRST_BYTE_MARK$[ebp+ecx*4]
  00172	8b 45 0c	 mov	 eax, DWORD PTR _output$[ebp]
  00175	88 10		 mov	 BYTE PTR [eax], dl

; 422  :             break;

  00177	eb 05		 jmp	 SHORT $LN1@ConvertUTF
$LN16@ConvertUTF:

; 423  :         default:
; 424  :             TIXMLASSERT( false );

  00179	33 c9		 xor	 ecx, ecx
  0017b	75 01		 jne	 SHORT $LN1@ConvertUTF
  0017d	cc		 int	 3
$LN1@ConvertUTF:

; 425  :     }
; 426  : }

  0017e	52		 push	 edx
  0017f	8b cd		 mov	 ecx, ebp
  00181	50		 push	 eax
  00182	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@ConvertUTF
  00188	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0018d	58		 pop	 eax
  0018e	5a		 pop	 edx
  0018f	5f		 pop	 edi
  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	33 cd		 xor	 ecx, ebp
  00195	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
  0019e	66 90		 npad	 2
$LN21@ConvertUTF:
  001a0	01 00 00 00	 DD	 1
  001a4	00 00 00 00	 DD	 $LN20@ConvertUTF
$LN20@ConvertUTF:
  001a8	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001ac	1c 00 00 00	 DD	 28			; 0000001cH
  001b0	00 00 00 00	 DD	 $LN19@ConvertUTF
$LN19@ConvertUTF:
  001b4	46		 DB	 70			; 00000046H
  001b5	49		 DB	 73			; 00000049H
  001b6	52		 DB	 82			; 00000052H
  001b7	53		 DB	 83			; 00000053H
  001b8	54		 DB	 84			; 00000054H
  001b9	5f		 DB	 95			; 0000005fH
  001ba	42		 DB	 66			; 00000042H
  001bb	59		 DB	 89			; 00000059H
  001bc	54		 DB	 84			; 00000054H
  001bd	45		 DB	 69			; 00000045H
  001be	5f		 DB	 95			; 0000005fH
  001bf	4d		 DB	 77			; 0000004dH
  001c0	41		 DB	 65			; 00000041H
  001c1	52		 DB	 82			; 00000052H
  001c2	4b		 DB	 75			; 0000004bH
  001c3	00		 DB	 0
$LN22@ConvertUTF:
  001c4	00 00 00 00	 DD	 $LN15@ConvertUTF
  001c8	00 00 00 00	 DD	 $LN14@ConvertUTF
  001cc	00 00 00 00	 DD	 $LN13@ConvertUTF
  001d0	00 00 00 00	 DD	 $LN12@ConvertUTF
?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z ENDP	; tinyxml2::XMLUtil::ConvertUTF32ToUTF8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv181 = -52						; size = 4
tv176 = -48						; size = 4
tv146 = -44						; size = 4
tv141 = -40						; size = 4
_digitScaled$1 = -36					; size = 4
_digit$2 = -32						; size = 4
_q$3 = -28						; size = 4
_digitScaled$4 = -24					; size = 4
_digit$5 = -20						; size = 4
_q$6 = -16						; size = 4
_mult$7 = -12						; size = 4
_delta$8 = -8						; size = 4
_ucs$9 = -4						; size = 4
_p$ = 8							; size = 4
_value$ = 12						; size = 4
_length$ = 16						; size = 4
?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z PROC ; tinyxml2::XMLUtil::GetCharacterRef

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 431  :     // Presume an entity, and pull it out.
; 432  :     *length = 0;

  00017	8b 45 10	 mov	 eax, DWORD PTR _length$[ebp]
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 433  : 
; 434  :     if ( *(p+1) == '#' && *(p+2) ) {

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00023	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00027	83 fa 23	 cmp	 edx, 35			; 00000023H
  0002a	0f 85 f5 02 00
	00		 jne	 $LN6@GetCharact
  00030	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00033	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  00037	85 c9		 test	 ecx, ecx
  00039	0f 84 e6 02 00
	00		 je	 $LN6@GetCharact

; 435  :         unsigned long ucs = 0;

  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ucs$9[ebp], 0

; 436  :         TIXMLASSERT( sizeof( ucs ) >= 4 );

  00046	ba 01 00 00 00	 mov	 edx, 1
  0004b	85 d2		 test	 edx, edx
  0004d	75 01		 jne	 SHORT $LN7@GetCharact
  0004f	cc		 int	 3
$LN7@GetCharact:

; 437  :         ptrdiff_t delta = 0;

  00050	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _delta$8[ebp], 0

; 438  :         unsigned mult = 1;

  00057	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _mult$7[ebp], 1

; 439  :         static const char SEMICOLON = ';';
; 440  : 
; 441  :         if ( *(p+2) == 'x' ) {

  0005e	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00061	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  00065	83 f9 78	 cmp	 ecx, 120		; 00000078H
  00068	0f 85 7b 01 00
	00		 jne	 $LN8@GetCharact

; 442  :             // Hexadecimal.
; 443  :             const char* q = p+3;

  0006e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00071	83 c2 03	 add	 edx, 3
  00074	89 55 f0	 mov	 DWORD PTR _q$6[ebp], edx

; 444  :             if ( !(*q) ) {

  00077	8b 45 f0	 mov	 eax, DWORD PTR _q$6[ebp]
  0007a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0007d	85 c9		 test	 ecx, ecx
  0007f	75 07		 jne	 SHORT $LN10@GetCharact

; 445  :                 return 0;

  00081	33 c0		 xor	 eax, eax
  00083	e9 a3 02 00 00	 jmp	 $LN1@GetCharact
$LN10@GetCharact:

; 446  :             }
; 447  : 
; 448  :             q = strchr( q, SEMICOLON );

  00088	8b f4		 mov	 esi, esp
  0008a	6a 3b		 push	 59			; 0000003bH
  0008c	8b 55 f0	 mov	 edx, DWORD PTR _q$6[ebp]
  0008f	52		 push	 edx
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00096	83 c4 08	 add	 esp, 8
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	89 45 f0	 mov	 DWORD PTR _q$6[ebp], eax

; 449  : 
; 450  :             if ( !q ) {

  000a3	83 7d f0 00	 cmp	 DWORD PTR _q$6[ebp], 0
  000a7	75 07		 jne	 SHORT $LN11@GetCharact

; 451  :                 return 0;

  000a9	33 c0		 xor	 eax, eax
  000ab	e9 7b 02 00 00	 jmp	 $LN1@GetCharact
$LN11@GetCharact:

; 452  :             }
; 453  :             TIXMLASSERT( *q == SEMICOLON );

  000b0	8b 45 f0	 mov	 eax, DWORD PTR _q$6[ebp]
  000b3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000b6	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  000b9	74 01		 je	 SHORT $LN12@GetCharact
  000bb	cc		 int	 3
$LN12@GetCharact:

; 454  : 
; 455  :             delta = q-p;

  000bc	8b 55 f0	 mov	 edx, DWORD PTR _q$6[ebp]
  000bf	2b 55 08	 sub	 edx, DWORD PTR _p$[ebp]
  000c2	89 55 f8	 mov	 DWORD PTR _delta$8[ebp], edx

; 456  :             --q;

  000c5	8b 45 f0	 mov	 eax, DWORD PTR _q$6[ebp]
  000c8	83 e8 01	 sub	 eax, 1
  000cb	89 45 f0	 mov	 DWORD PTR _q$6[ebp], eax
$LN2@GetCharact:

; 457  : 
; 458  :             while ( *q != 'x' ) {

  000ce	8b 4d f0	 mov	 ecx, DWORD PTR _q$6[ebp]
  000d1	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000d4	83 fa 78	 cmp	 edx, 120		; 00000078H
  000d7	0f 84 07 01 00
	00		 je	 $LN3@GetCharact

; 459  :                 unsigned int digit = 0;

  000dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _digit$5[ebp], 0

; 460  : 
; 461  :                 if ( *q >= '0' && *q <= '9' ) {

  000e4	8b 45 f0	 mov	 eax, DWORD PTR _q$6[ebp]
  000e7	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000ea	83 f9 30	 cmp	 ecx, 48			; 00000030H
  000ed	7c 19		 jl	 SHORT $LN13@GetCharact
  000ef	8b 55 f0	 mov	 edx, DWORD PTR _q$6[ebp]
  000f2	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000f5	83 f8 39	 cmp	 eax, 57			; 00000039H
  000f8	7f 0e		 jg	 SHORT $LN13@GetCharact

; 462  :                     digit = *q - '0';

  000fa	8b 4d f0	 mov	 ecx, DWORD PTR _q$6[ebp]
  000fd	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00100	83 ea 30	 sub	 edx, 48			; 00000030H
  00103	89 55 ec	 mov	 DWORD PTR _digit$5[ebp], edx
  00106	eb 4f		 jmp	 SHORT $LN14@GetCharact
$LN13@GetCharact:

; 463  :                 }
; 464  :                 else if ( *q >= 'a' && *q <= 'f' ) {

  00108	8b 45 f0	 mov	 eax, DWORD PTR _q$6[ebp]
  0010b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0010e	83 f9 61	 cmp	 ecx, 97			; 00000061H
  00111	7c 19		 jl	 SHORT $LN15@GetCharact
  00113	8b 55 f0	 mov	 edx, DWORD PTR _q$6[ebp]
  00116	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00119	83 f8 66	 cmp	 eax, 102		; 00000066H
  0011c	7f 0e		 jg	 SHORT $LN15@GetCharact

; 465  :                     digit = *q - 'a' + 10;

  0011e	8b 4d f0	 mov	 ecx, DWORD PTR _q$6[ebp]
  00121	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00124	83 ea 57	 sub	 edx, 87			; 00000057H
  00127	89 55 ec	 mov	 DWORD PTR _digit$5[ebp], edx
  0012a	eb 2b		 jmp	 SHORT $LN14@GetCharact
$LN15@GetCharact:

; 466  :                 }
; 467  :                 else if ( *q >= 'A' && *q <= 'F' ) {

  0012c	8b 45 f0	 mov	 eax, DWORD PTR _q$6[ebp]
  0012f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00132	83 f9 41	 cmp	 ecx, 65			; 00000041H
  00135	7c 19		 jl	 SHORT $LN17@GetCharact
  00137	8b 55 f0	 mov	 edx, DWORD PTR _q$6[ebp]
  0013a	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0013d	83 f8 46	 cmp	 eax, 70			; 00000046H
  00140	7f 0e		 jg	 SHORT $LN17@GetCharact

; 468  :                     digit = *q - 'A' + 10;

  00142	8b 4d f0	 mov	 ecx, DWORD PTR _q$6[ebp]
  00145	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00148	83 ea 37	 sub	 edx, 55			; 00000037H
  0014b	89 55 ec	 mov	 DWORD PTR _digit$5[ebp], edx

; 469  :                 }
; 470  :                 else {

  0014e	eb 07		 jmp	 SHORT $LN14@GetCharact
$LN17@GetCharact:

; 471  :                     return 0;

  00150	33 c0		 xor	 eax, eax
  00152	e9 d4 01 00 00	 jmp	 $LN1@GetCharact
$LN14@GetCharact:

; 472  :                 }
; 473  :                 TIXMLASSERT( digit >= 0 && digit < 16);

  00157	83 7d ec 00	 cmp	 DWORD PTR _digit$5[ebp], 0
  0015b	72 0f		 jb	 SHORT $LN33@GetCharact
  0015d	83 7d ec 10	 cmp	 DWORD PTR _digit$5[ebp], 16 ; 00000010H
  00161	73 09		 jae	 SHORT $LN33@GetCharact
  00163	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv141[ebp], 1
  0016a	eb 07		 jmp	 SHORT $LN34@GetCharact
$LN33@GetCharact:
  0016c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$LN34@GetCharact:
  00173	83 7d d8 00	 cmp	 DWORD PTR tv141[ebp], 0
  00177	75 01		 jne	 SHORT $LN19@GetCharact
  00179	cc		 int	 3
$LN19@GetCharact:

; 474  :                 TIXMLASSERT( digit == 0 || mult <= UINT_MAX / digit );

  0017a	83 7d ec 00	 cmp	 DWORD PTR _digit$5[ebp], 0
  0017e	74 16		 je	 SHORT $LN35@GetCharact
  00180	83 c8 ff	 or	 eax, -1
  00183	33 d2		 xor	 edx, edx
  00185	f7 75 ec	 div	 DWORD PTR _digit$5[ebp]
  00188	39 45 f4	 cmp	 DWORD PTR _mult$7[ebp], eax
  0018b	76 09		 jbe	 SHORT $LN35@GetCharact
  0018d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
  00194	eb 07		 jmp	 SHORT $LN36@GetCharact
$LN35@GetCharact:
  00196	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv146[ebp], 1
$LN36@GetCharact:
  0019d	83 7d d4 00	 cmp	 DWORD PTR tv146[ebp], 0
  001a1	75 01		 jne	 SHORT $LN20@GetCharact
  001a3	cc		 int	 3
$LN20@GetCharact:

; 475  :                 const unsigned int digitScaled = mult * digit;

  001a4	8b 45 f4	 mov	 eax, DWORD PTR _mult$7[ebp]
  001a7	0f af 45 ec	 imul	 eax, DWORD PTR _digit$5[ebp]
  001ab	89 45 e8	 mov	 DWORD PTR _digitScaled$4[ebp], eax

; 476  :                 TIXMLASSERT( ucs <= ULONG_MAX - digitScaled );

  001ae	83 c9 ff	 or	 ecx, -1
  001b1	2b 4d e8	 sub	 ecx, DWORD PTR _digitScaled$4[ebp]
  001b4	39 4d fc	 cmp	 DWORD PTR _ucs$9[ebp], ecx
  001b7	76 01		 jbe	 SHORT $LN21@GetCharact
  001b9	cc		 int	 3
$LN21@GetCharact:

; 477  :                 ucs += digitScaled;

  001ba	8b 55 fc	 mov	 edx, DWORD PTR _ucs$9[ebp]
  001bd	03 55 e8	 add	 edx, DWORD PTR _digitScaled$4[ebp]
  001c0	89 55 fc	 mov	 DWORD PTR _ucs$9[ebp], edx

; 478  :                 TIXMLASSERT( mult <= UINT_MAX / 16 );

  001c3	81 7d f4 ff ff
	ff 0f		 cmp	 DWORD PTR _mult$7[ebp], 268435455 ; 0fffffffH
  001ca	76 01		 jbe	 SHORT $LN22@GetCharact
  001cc	cc		 int	 3
$LN22@GetCharact:

; 479  :                 mult *= 16;

  001cd	8b 45 f4	 mov	 eax, DWORD PTR _mult$7[ebp]
  001d0	c1 e0 04	 shl	 eax, 4
  001d3	89 45 f4	 mov	 DWORD PTR _mult$7[ebp], eax

; 480  :                 --q;

  001d6	8b 4d f0	 mov	 ecx, DWORD PTR _q$6[ebp]
  001d9	83 e9 01	 sub	 ecx, 1
  001dc	89 4d f0	 mov	 DWORD PTR _q$6[ebp], ecx

; 481  :             }

  001df	e9 ea fe ff ff	 jmp	 $LN2@GetCharact
$LN3@GetCharact:

; 482  :         }
; 483  :         else {

  001e4	e9 1c 01 00 00	 jmp	 $LN9@GetCharact
$LN8@GetCharact:

; 484  :             // Decimal.
; 485  :             const char* q = p+2;

  001e9	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  001ec	83 c2 02	 add	 edx, 2
  001ef	89 55 e4	 mov	 DWORD PTR _q$3[ebp], edx

; 486  :             if ( !(*q) ) {

  001f2	8b 45 e4	 mov	 eax, DWORD PTR _q$3[ebp]
  001f5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001f8	85 c9		 test	 ecx, ecx
  001fa	75 07		 jne	 SHORT $LN23@GetCharact

; 487  :                 return 0;

  001fc	33 c0		 xor	 eax, eax
  001fe	e9 28 01 00 00	 jmp	 $LN1@GetCharact
$LN23@GetCharact:

; 488  :             }
; 489  : 
; 490  :             q = strchr( q, SEMICOLON );

  00203	8b f4		 mov	 esi, esp
  00205	6a 3b		 push	 59			; 0000003bH
  00207	8b 55 e4	 mov	 edx, DWORD PTR _q$3[ebp]
  0020a	52		 push	 edx
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00211	83 c4 08	 add	 esp, 8
  00214	3b f4		 cmp	 esi, esp
  00216	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021b	89 45 e4	 mov	 DWORD PTR _q$3[ebp], eax

; 491  : 
; 492  :             if ( !q ) {

  0021e	83 7d e4 00	 cmp	 DWORD PTR _q$3[ebp], 0
  00222	75 07		 jne	 SHORT $LN24@GetCharact

; 493  :                 return 0;

  00224	33 c0		 xor	 eax, eax
  00226	e9 00 01 00 00	 jmp	 $LN1@GetCharact
$LN24@GetCharact:

; 494  :             }
; 495  :             TIXMLASSERT( *q == SEMICOLON );

  0022b	8b 45 e4	 mov	 eax, DWORD PTR _q$3[ebp]
  0022e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00231	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  00234	74 01		 je	 SHORT $LN25@GetCharact
  00236	cc		 int	 3
$LN25@GetCharact:

; 496  : 
; 497  :             delta = q-p;

  00237	8b 55 e4	 mov	 edx, DWORD PTR _q$3[ebp]
  0023a	2b 55 08	 sub	 edx, DWORD PTR _p$[ebp]
  0023d	89 55 f8	 mov	 DWORD PTR _delta$8[ebp], edx

; 498  :             --q;

  00240	8b 45 e4	 mov	 eax, DWORD PTR _q$3[ebp]
  00243	83 e8 01	 sub	 eax, 1
  00246	89 45 e4	 mov	 DWORD PTR _q$3[ebp], eax
$LN4@GetCharact:

; 499  : 
; 500  :             while ( *q != '#' ) {

  00249	8b 4d e4	 mov	 ecx, DWORD PTR _q$3[ebp]
  0024c	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0024f	83 fa 23	 cmp	 edx, 35			; 00000023H
  00252	0f 84 ad 00 00
	00		 je	 $LN9@GetCharact

; 501  :                 if ( *q >= '0' && *q <= '9' ) {

  00258	8b 45 e4	 mov	 eax, DWORD PTR _q$3[ebp]
  0025b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0025e	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00261	7c 7f		 jl	 SHORT $LN26@GetCharact
  00263	8b 55 e4	 mov	 edx, DWORD PTR _q$3[ebp]
  00266	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00269	83 f8 39	 cmp	 eax, 57			; 00000039H
  0026c	7f 74		 jg	 SHORT $LN26@GetCharact

; 502  :                     const unsigned int digit = *q - '0';

  0026e	8b 4d e4	 mov	 ecx, DWORD PTR _q$3[ebp]
  00271	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00274	83 ea 30	 sub	 edx, 48			; 00000030H
  00277	89 55 e0	 mov	 DWORD PTR _digit$2[ebp], edx

; 503  :                     TIXMLASSERT( digit >= 0 && digit < 10);

  0027a	83 7d e0 0a	 cmp	 DWORD PTR _digit$2[ebp], 10 ; 0000000aH
  0027e	73 09		 jae	 SHORT $LN37@GetCharact
  00280	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv176[ebp], 1
  00287	eb 07		 jmp	 SHORT $LN38@GetCharact
$LN37@GetCharact:
  00289	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
$LN38@GetCharact:
  00290	83 7d d0 00	 cmp	 DWORD PTR tv176[ebp], 0
  00294	75 01		 jne	 SHORT $LN28@GetCharact
  00296	cc		 int	 3
$LN28@GetCharact:

; 504  :                     TIXMLASSERT( digit == 0 || mult <= UINT_MAX / digit );

  00297	83 7d e0 00	 cmp	 DWORD PTR _digit$2[ebp], 0
  0029b	74 16		 je	 SHORT $LN39@GetCharact
  0029d	83 c8 ff	 or	 eax, -1
  002a0	33 d2		 xor	 edx, edx
  002a2	f7 75 e0	 div	 DWORD PTR _digit$2[ebp]
  002a5	39 45 f4	 cmp	 DWORD PTR _mult$7[ebp], eax
  002a8	76 09		 jbe	 SHORT $LN39@GetCharact
  002aa	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], 0
  002b1	eb 07		 jmp	 SHORT $LN40@GetCharact
$LN39@GetCharact:
  002b3	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv181[ebp], 1
$LN40@GetCharact:
  002ba	83 7d cc 00	 cmp	 DWORD PTR tv181[ebp], 0
  002be	75 01		 jne	 SHORT $LN29@GetCharact
  002c0	cc		 int	 3
$LN29@GetCharact:

; 505  :                     const unsigned int digitScaled = mult * digit;

  002c1	8b 45 f4	 mov	 eax, DWORD PTR _mult$7[ebp]
  002c4	0f af 45 e0	 imul	 eax, DWORD PTR _digit$2[ebp]
  002c8	89 45 dc	 mov	 DWORD PTR _digitScaled$1[ebp], eax

; 506  :                     TIXMLASSERT( ucs <= ULONG_MAX - digitScaled );

  002cb	83 c9 ff	 or	 ecx, -1
  002ce	2b 4d dc	 sub	 ecx, DWORD PTR _digitScaled$1[ebp]
  002d1	39 4d fc	 cmp	 DWORD PTR _ucs$9[ebp], ecx
  002d4	76 01		 jbe	 SHORT $LN30@GetCharact
  002d6	cc		 int	 3
$LN30@GetCharact:

; 507  :                     ucs += digitScaled;

  002d7	8b 55 fc	 mov	 edx, DWORD PTR _ucs$9[ebp]
  002da	03 55 dc	 add	 edx, DWORD PTR _digitScaled$1[ebp]
  002dd	89 55 fc	 mov	 DWORD PTR _ucs$9[ebp], edx

; 508  :                 }
; 509  :                 else {

  002e0	eb 04		 jmp	 SHORT $LN27@GetCharact
$LN26@GetCharact:

; 510  :                     return 0;

  002e2	33 c0		 xor	 eax, eax
  002e4	eb 45		 jmp	 SHORT $LN1@GetCharact
$LN27@GetCharact:

; 511  :                 }
; 512  :                 TIXMLASSERT( mult <= UINT_MAX / 10 );

  002e6	81 7d f4 99 99
	99 19		 cmp	 DWORD PTR _mult$7[ebp], 429496729 ; 19999999H
  002ed	76 01		 jbe	 SHORT $LN31@GetCharact
  002ef	cc		 int	 3
$LN31@GetCharact:

; 513  :                 mult *= 10;

  002f0	6b 45 f4 0a	 imul	 eax, DWORD PTR _mult$7[ebp], 10
  002f4	89 45 f4	 mov	 DWORD PTR _mult$7[ebp], eax

; 514  :                 --q;

  002f7	8b 4d e4	 mov	 ecx, DWORD PTR _q$3[ebp]
  002fa	83 e9 01	 sub	 ecx, 1
  002fd	89 4d e4	 mov	 DWORD PTR _q$3[ebp], ecx

; 515  :             }

  00300	e9 44 ff ff ff	 jmp	 $LN4@GetCharact
$LN9@GetCharact:

; 516  :         }
; 517  :         // convert the UCS to UTF-8
; 518  :         ConvertUTF32ToUTF8( ucs, value, length );

  00305	8b 55 10	 mov	 edx, DWORD PTR _length$[ebp]
  00308	52		 push	 edx
  00309	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0030c	50		 push	 eax
  0030d	8b 4d fc	 mov	 ecx, DWORD PTR _ucs$9[ebp]
  00310	51		 push	 ecx
  00311	e8 00 00 00 00	 call	 ?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z ; tinyxml2::XMLUtil::ConvertUTF32ToUTF8
  00316	83 c4 0c	 add	 esp, 12			; 0000000cH

; 519  :         return p + delta + 1;

  00319	8b 55 f8	 mov	 edx, DWORD PTR _delta$8[ebp]
  0031c	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0031f	8d 44 10 01	 lea	 eax, DWORD PTR [eax+edx+1]
  00323	eb 06		 jmp	 SHORT $LN1@GetCharact
$LN6@GetCharact:

; 520  :     }
; 521  :     return p+1;

  00325	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00328	83 c0 01	 add	 eax, 1
$LN1@GetCharact:

; 522  : }

  0032b	5f		 pop	 edi
  0032c	5e		 pop	 esi
  0032d	83 c4 34	 add	 esp, 52			; 00000034H
  00330	3b ec		 cmp	 ebp, esp
  00332	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00337	8b e5		 mov	 esp, ebp
  00339	5d		 pop	 ebp
  0033a	c3		 ret	 0
?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z ENDP ; tinyxml2::XMLUtil::GetCharacterRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z PROC		; tinyxml2::XMLUtil::ToStr

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  :     TIXML_SNPRINTF( buffer, bufferSize, "%d", v );

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET $SG4294882698
  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _bufferSize$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 528  : }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z PROC		; tinyxml2::XMLUtil::ToStr

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  :     TIXML_SNPRINTF( buffer, bufferSize, "%u", v );

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET $SG4294882697
  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _bufferSize$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 534  : }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv67 = -4						; size = 4
_v$ = 8							; size = 1
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z PROC		; tinyxml2::XMLUtil::ToStr

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 539  :     TIXML_SNPRINTF( buffer, bufferSize, "%d", v ? 1 : 0 );

  0000b	0f b6 45 08	 movzx	 eax, BYTE PTR _v$[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN3@ToStr
  00013	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001a	eb 07		 jmp	 SHORT $LN4@ToStr
$LN3@ToStr:
  0001c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@ToStr:
  00023	8b 4d fc	 mov	 ecx, DWORD PTR tv67[ebp]
  00026	51		 push	 ecx
  00027	68 00 00 00 00	 push	 OFFSET $SG4294882696
  0002c	8b 55 10	 mov	 edx, DWORD PTR _bufferSize$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 540  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z PROC		; tinyxml2::XMLUtil::ToStr

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 548  :     TIXML_SNPRINTF( buffer, bufferSize, "%.8g", v );

  00003	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00010	68 00 00 00 00	 push	 OFFSET $SG4294882695
  00015	8b 45 10	 mov	 eax, DWORD PTR _bufferSize$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  00022	83 c4 14	 add	 esp, 20			; 00000014H

; 549  : }

  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_v$ = 8							; size = 8
_buffer$ = 16						; size = 4
_bufferSize$ = 20					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z PROC		; tinyxml2::XMLUtil::ToStr

; 553  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  :     TIXML_SNPRINTF( buffer, bufferSize, "%.17g", v );

  00003	83 ec 08	 sub	 esp, 8
  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _v$[ebp]
  0000b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00010	68 00 00 00 00	 push	 OFFSET $SG4294882694
  00015	8b 45 14	 mov	 eax, DWORD PTR _bufferSize$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 10	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  00022	83 c4 14	 add	 esp, 20			; 00000014H

; 555  : }

  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z PROC		; tinyxml2::XMLUtil::ToInt

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 560  :     if ( TIXML_SSCANF( str, "%d", value ) == 1 ) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET $SG4294882693
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _sscanf_s
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	83 f8 01	 cmp	 eax, 1
  0001b	75 04		 jne	 SHORT $LN2@ToInt

; 561  :         return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb 02		 jmp	 SHORT $LN1@ToInt
$LN2@ToInt:

; 562  :     }
; 563  :     return false;

  00021	32 c0		 xor	 al, al
$LN1@ToInt:

; 564  : }

  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z ENDP		; tinyxml2::XMLUtil::ToInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z PROC		; tinyxml2::XMLUtil::ToUnsigned

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 568  :     if ( TIXML_SSCANF( str, "%u", value ) == 1 ) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET $SG4294882692
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _sscanf_s
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	83 f8 01	 cmp	 eax, 1
  0001b	75 04		 jne	 SHORT $LN2@ToUnsigned

; 569  :         return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb 02		 jmp	 SHORT $LN1@ToUnsigned
$LN2@ToUnsigned:

; 570  :     }
; 571  :     return false;

  00021	32 c0		 xor	 al, al
$LN1@ToUnsigned:

; 572  : }

  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z ENDP		; tinyxml2::XMLUtil::ToUnsigned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv70 = -13						; size = 1
_ival$ = -8						; size = 4
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z PROC		; tinyxml2::XMLUtil::ToBool

; 575  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 576  :     int ival = 0;

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ival$[ebp], 0

; 577  :     if ( ToInt( str, &ival )) {

  0001e	8d 45 f8	 lea	 eax, DWORD PTR _ival$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z ; tinyxml2::XMLUtil::ToInt
  0002b	83 c4 08	 add	 esp, 8
  0002e	0f b6 d0	 movzx	 edx, al
  00031	85 d2		 test	 edx, edx
  00033	74 1c		 je	 SHORT $LN2@ToBool

; 578  :         *value = (ival==0) ? false : true;

  00035	83 7d f8 00	 cmp	 DWORD PTR _ival$[ebp], 0
  00039	75 06		 jne	 SHORT $LN7@ToBool
  0003b	c6 45 f3 00	 mov	 BYTE PTR tv70[ebp], 0
  0003f	eb 04		 jmp	 SHORT $LN8@ToBool
$LN7@ToBool:
  00041	c6 45 f3 01	 mov	 BYTE PTR tv70[ebp], 1
$LN8@ToBool:
  00045	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00048	8a 4d f3	 mov	 cl, BYTE PTR tv70[ebp]
  0004b	88 08		 mov	 BYTE PTR [eax], cl

; 579  :         return true;

  0004d	b0 01		 mov	 al, 1
  0004f	eb 52		 jmp	 SHORT $LN1@ToBool
$LN2@ToBool:

; 580  :     }
; 581  :     if ( StringEqual( str, "true" ) ) {

  00051	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00056	68 00 00 00 00	 push	 OFFSET $SG4294882691
  0005b	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
  00067	0f b6 c0	 movzx	 eax, al
  0006a	85 c0		 test	 eax, eax
  0006c	74 0c		 je	 SHORT $LN3@ToBool

; 582  :         *value = true;

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00071	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 583  :         return true;

  00074	b0 01		 mov	 al, 1
  00076	eb 2b		 jmp	 SHORT $LN1@ToBool
  00078	eb 27		 jmp	 SHORT $LN4@ToBool
$LN3@ToBool:

; 584  :     }
; 585  :     else if ( StringEqual( str, "false" ) ) {

  0007a	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0007f	68 00 00 00 00	 push	 OFFSET $SG4294882690
  00084	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	0f b6 c0	 movzx	 eax, al
  00093	85 c0		 test	 eax, eax
  00095	74 0a		 je	 SHORT $LN4@ToBool

; 586  :         *value = false;

  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  0009a	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 587  :         return true;

  0009d	b0 01		 mov	 al, 1
  0009f	eb 02		 jmp	 SHORT $LN1@ToBool
$LN4@ToBool:

; 588  :     }
; 589  :     return false;

  000a1	32 c0		 xor	 al, al
$LN1@ToBool:

; 590  : }

  000a3	52		 push	 edx
  000a4	8b cd		 mov	 ecx, ebp
  000a6	50		 push	 eax
  000a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@ToBool
  000ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b2	58		 pop	 eax
  000b3	5a		 pop	 edx
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
  000c2	66 90		 npad	 2
$LN11@ToBool:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN10@ToBool
$LN10@ToBool:
  000cc	f8 ff ff ff	 DD	 -8			; fffffff8H
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN9@ToBool
$LN9@ToBool:
  000d8	69		 DB	 105			; 00000069H
  000d9	76		 DB	 118			; 00000076H
  000da	61		 DB	 97			; 00000061H
  000db	6c		 DB	 108			; 0000006cH
  000dc	00		 DB	 0
?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z ENDP		; tinyxml2::XMLUtil::ToBool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z PROC		; tinyxml2::XMLUtil::ToFloat

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 595  :     if ( TIXML_SSCANF( str, "%f", value ) == 1 ) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET $SG4294882689
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _sscanf_s
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	83 f8 01	 cmp	 eax, 1
  0001b	75 04		 jne	 SHORT $LN2@ToFloat

; 596  :         return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb 02		 jmp	 SHORT $LN1@ToFloat
$LN2@ToFloat:

; 597  :     }
; 598  :     return false;

  00021	32 c0		 xor	 al, al
$LN1@ToFloat:

; 599  : }

  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z ENDP		; tinyxml2::XMLUtil::ToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z PROC		; tinyxml2::XMLUtil::ToDouble

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  :     if ( TIXML_SSCANF( str, "%lf", value ) == 1 ) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET $SG4294882688
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _sscanf_s
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	83 f8 01	 cmp	 eax, 1
  0001b	75 04		 jne	 SHORT $LN2@ToDouble

; 604  :         return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb 02		 jmp	 SHORT $LN1@ToDouble
$LN2@ToDouble:

; 605  :     }
; 606  :     return false;

  00021	32 c0		 xor	 al, al
$LN1@ToDouble:

; 607  : }

  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z ENDP		; tinyxml2::XMLUtil::ToDouble
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv399 = -124						; size = 4
tv354 = -120						; size = 4
tv303 = -116						; size = 4
tv247 = -112						; size = 4
tv199 = -108						; size = 4
tv148 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
$T8 = -76						; size = 4
$T9 = -72						; size = 4
$T10 = -68						; size = 4
$T11 = -64						; size = 4
$T12 = -60						; size = 4
$T13 = -56						; size = 4
$T14 = -52						; size = 4
$T15 = -48						; size = 4
$T16 = -44						; size = 4
$T17 = -40						; size = 4
$T18 = -36						; size = 4
$T19 = -32						; size = 4
_text$20 = -28						; size = 4
_returnNode$ = -24					; size = 4
_start$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_node$ = 12						; size = 4
?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z PROC ; tinyxml2::XMLDocument::Identify
; _this$ = ecx

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  0001a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 612  :     TIXMLASSERT( node );

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _node$[ebp], 0
  0003f	75 01		 jne	 SHORT $LN2@Identify
  00041	cc		 int	 3
$LN2@Identify:

; 613  :     TIXMLASSERT( p );

  00042	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00046	75 01		 jne	 SHORT $LN3@Identify
  00048	cc		 int	 3
$LN3@Identify:

; 614  :     char* const start = p;

  00049	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0004c	89 45 ec	 mov	 DWORD PTR _start$[ebp], eax

; 615  :     p = XMLUtil::SkipWhiteSpace( p );

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  00058	83 c4 04	 add	 esp, 4
  0005b	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 616  :     if( !*p ) {

  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00064	85 c0		 test	 eax, eax
  00066	75 18		 jne	 SHORT $LN4@Identify

; 617  :         *node = 0;

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _node$[ebp]
  0006b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 618  :         TIXMLASSERT( p );

  00071	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00075	75 01		 jne	 SHORT $LN5@Identify
  00077	cc		 int	 3
$LN5@Identify:

; 619  :         return p;

  00078	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0007b	e9 e5 04 00 00	 jmp	 $LN1@Identify
$LN4@Identify:

; 620  :     }
; 621  : 
; 622  :     // These strings define the matching patterns:
; 623  :     static const char* xmlHeader		= { "<?" };
; 624  :     static const char* commentHeader	= { "<!--" };
; 625  :     static const char* cdataHeader		= { "<![CDATA[" };
; 626  :     static const char* dtdHeader		= { "<!" };
; 627  :     static const char* elementHeader	= { "<" };	// and a header for everything else; check last.
; 628  : 
; 629  :     static const int xmlHeaderLen		= 2;
; 630  :     static const int commentHeaderLen	= 4;
; 631  :     static const int cdataHeaderLen		= 9;
; 632  :     static const int dtdHeaderLen		= 2;
; 633  :     static const int elementHeaderLen	= 1;
; 634  : 
; 635  :     TIXMLASSERT( sizeof( XMLComment ) == sizeof( XMLUnknown ) );		// use same memory pool

  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	85 d2		 test	 edx, edx
  00087	75 01		 jne	 SHORT $LN6@Identify
  00089	cc		 int	 3
$LN6@Identify:

; 636  :     TIXMLASSERT( sizeof( XMLComment ) == sizeof( XMLDeclaration ) );	// use same memory pool

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	75 01		 jne	 SHORT $LN7@Identify
  00093	cc		 int	 3
$LN7@Identify:

; 637  :     XMLNode* returnNode = 0;

  00094	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _returnNode$[ebp], 0

; 638  :     if ( XMLUtil::StringEqual( p, xmlHeader, xmlHeaderLen ) ) {

  0009b	6a 02		 push	 2
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?xmlHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
  000a3	51		 push	 ecx
  000a4	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 af 00 00
	00		 je	 $LN8@Identify

; 639  :         TIXMLASSERT( sizeof( XMLDeclaration ) == _commentPool.ItemSize() );

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  000cd	8b f4		 mov	 esi, esp
  000cf	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000d2	ff d2		 call	 edx
  000d4	3b f4		 cmp	 esi, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  000de	74 01		 je	 SHORT $LN10@Identify
  000e0	cc		 int	 3
$LN10@Identify:

; 640  :         returnNode = new (_commentPool.Alloc()) XMLDeclaration( this );

  000e1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000ea	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  000f3	8b f4		 mov	 esi, esp
  000f5	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f8	ff d0		 call	 eax
  000fa	3b f4		 cmp	 esi, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	89 45 d8	 mov	 DWORD PTR $T17[ebp], eax
  00104	8b 4d d8	 mov	 ecx, DWORD PTR $T17[ebp]
  00107	51		 push	 ecx
  00108	6a 2c		 push	 44			; 0000002cH
  0010a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0010f	83 c4 08	 add	 esp, 8
  00112	89 45 dc	 mov	 DWORD PTR $T18[ebp], eax
  00115	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0011c	83 7d dc 00	 cmp	 DWORD PTR $T18[ebp], 0
  00120	74 11		 je	 SHORT $LN27@Identify
  00122	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00125	52		 push	 edx
  00126	8b 4d dc	 mov	 ecx, DWORD PTR $T18[ebp]
  00129	e8 00 00 00 00	 call	 ??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLDeclaration::XMLDeclaration
  0012e	89 45 98	 mov	 DWORD PTR tv148[ebp], eax
  00131	eb 07		 jmp	 SHORT $LN28@Identify
$LN27@Identify:
  00133	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$LN28@Identify:
  0013a	8b 45 98	 mov	 eax, DWORD PTR tv148[ebp]
  0013d	89 45 e0	 mov	 DWORD PTR $T19[ebp], eax
  00140	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00147	8b 4d e0	 mov	 ecx, DWORD PTR $T19[ebp]
  0014a	89 4d e8	 mov	 DWORD PTR _returnNode$[ebp], ecx

; 641  :         returnNode->_memPool = &_commentPool;

  0014d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00150	81 c2 28 01 00
	00		 add	 edx, 296		; 00000128H
  00156	8b 45 e8	 mov	 eax, DWORD PTR _returnNode$[ebp]
  00159	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 642  :         p += xmlHeaderLen;

  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0015f	83 c1 02	 add	 ecx, 2
  00162	89 4d 08	 mov	 DWORD PTR _p$[ebp], ecx
  00165	e9 e2 03 00 00	 jmp	 $LN9@Identify
$LN8@Identify:

; 643  :     }
; 644  :     else if ( XMLUtil::StringEqual( p, commentHeader, commentHeaderLen ) ) {

  0016a	6a 04		 push	 4
  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?commentHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
  00172	52		 push	 edx
  00173	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017f	0f b6 c8	 movzx	 ecx, al
  00182	85 c9		 test	 ecx, ecx
  00184	0f 84 af 00 00
	00		 je	 $LN11@Identify

; 645  :         TIXMLASSERT( sizeof( XMLComment ) == _commentPool.ItemSize() );

  0018a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00193	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00196	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  0019c	8b f4		 mov	 esi, esp
  0019e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001a1	ff d2		 call	 edx
  001a3	3b f4		 cmp	 esi, esp
  001a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001aa	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  001ad	74 01		 je	 SHORT $LN13@Identify
  001af	cc		 int	 3
$LN13@Identify:

; 646  :         returnNode = new (_commentPool.Alloc()) XMLComment( this );

  001b0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b3	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  001b9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  001c2	8b f4		 mov	 esi, esp
  001c4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c7	ff d0		 call	 eax
  001c9	3b f4		 cmp	 esi, esp
  001cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d0	89 45 cc	 mov	 DWORD PTR $T14[ebp], eax
  001d3	8b 4d cc	 mov	 ecx, DWORD PTR $T14[ebp]
  001d6	51		 push	 ecx
  001d7	6a 2c		 push	 44			; 0000002cH
  001d9	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  001de	83 c4 08	 add	 esp, 8
  001e1	89 45 d0	 mov	 DWORD PTR $T15[ebp], eax
  001e4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001eb	83 7d d0 00	 cmp	 DWORD PTR $T15[ebp], 0
  001ef	74 11		 je	 SHORT $LN29@Identify
  001f1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001f4	52		 push	 edx
  001f5	8b 4d d0	 mov	 ecx, DWORD PTR $T15[ebp]
  001f8	e8 00 00 00 00	 call	 ??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLComment::XMLComment
  001fd	89 45 94	 mov	 DWORD PTR tv199[ebp], eax
  00200	eb 07		 jmp	 SHORT $LN30@Identify
$LN29@Identify:
  00202	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN30@Identify:
  00209	8b 45 94	 mov	 eax, DWORD PTR tv199[ebp]
  0020c	89 45 d4	 mov	 DWORD PTR $T16[ebp], eax
  0020f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00216	8b 4d d4	 mov	 ecx, DWORD PTR $T16[ebp]
  00219	89 4d e8	 mov	 DWORD PTR _returnNode$[ebp], ecx

; 647  :         returnNode->_memPool = &_commentPool;

  0021c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0021f	81 c2 28 01 00
	00		 add	 edx, 296		; 00000128H
  00225	8b 45 e8	 mov	 eax, DWORD PTR _returnNode$[ebp]
  00228	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 648  :         p += commentHeaderLen;

  0022b	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0022e	83 c1 04	 add	 ecx, 4
  00231	89 4d 08	 mov	 DWORD PTR _p$[ebp], ecx
  00234	e9 13 03 00 00	 jmp	 $LN9@Identify
$LN11@Identify:

; 649  :     }
; 650  :     else if ( XMLUtil::StringEqual( p, cdataHeader, cdataHeaderLen ) ) {

  00239	6a 09		 push	 9
  0023b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?cdataHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
  00241	52		 push	 edx
  00242	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  0024b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024e	0f b6 c8	 movzx	 ecx, al
  00251	85 c9		 test	 ecx, ecx
  00253	0f 84 be 00 00
	00		 je	 $LN14@Identify

; 651  :         TIXMLASSERT( sizeof( XMLText ) == _textPool.ItemSize() );

  00259	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0025c	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  00262	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00265	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  0026b	8b f4		 mov	 esi, esp
  0026d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00270	ff d2		 call	 edx
  00272	3b f4		 cmp	 esi, esp
  00274	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00279	83 f8 30	 cmp	 eax, 48			; 00000030H
  0027c	74 01		 je	 SHORT $LN16@Identify
  0027e	cc		 int	 3
$LN16@Identify:

; 652  :         XMLText* text = new (_textPool.Alloc()) XMLText( this );

  0027f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00282	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  00288	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0028b	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  00291	8b f4		 mov	 esi, esp
  00293	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00296	ff d0		 call	 eax
  00298	3b f4		 cmp	 esi, esp
  0029a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029f	89 45 c0	 mov	 DWORD PTR $T11[ebp], eax
  002a2	8b 4d c0	 mov	 ecx, DWORD PTR $T11[ebp]
  002a5	51		 push	 ecx
  002a6	6a 30		 push	 48			; 00000030H
  002a8	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  002ad	83 c4 08	 add	 esp, 8
  002b0	89 45 c4	 mov	 DWORD PTR $T12[ebp], eax
  002b3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  002ba	83 7d c4 00	 cmp	 DWORD PTR $T12[ebp], 0
  002be	74 11		 je	 SHORT $LN31@Identify
  002c0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002c3	52		 push	 edx
  002c4	8b 4d c4	 mov	 ecx, DWORD PTR $T12[ebp]
  002c7	e8 00 00 00 00	 call	 ??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLText::XMLText
  002cc	89 45 90	 mov	 DWORD PTR tv247[ebp], eax
  002cf	eb 07		 jmp	 SHORT $LN32@Identify
$LN31@Identify:
  002d1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv247[ebp], 0
$LN32@Identify:
  002d8	8b 45 90	 mov	 eax, DWORD PTR tv247[ebp]
  002db	89 45 c8	 mov	 DWORD PTR $T13[ebp], eax
  002de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002e5	8b 4d c8	 mov	 ecx, DWORD PTR $T13[ebp]
  002e8	89 4d e4	 mov	 DWORD PTR _text$20[ebp], ecx

; 653  :         returnNode = text;

  002eb	8b 55 e4	 mov	 edx, DWORD PTR _text$20[ebp]
  002ee	89 55 e8	 mov	 DWORD PTR _returnNode$[ebp], edx

; 654  :         returnNode->_memPool = &_textPool;

  002f1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002f4	05 dc 00 00 00	 add	 eax, 220		; 000000dcH
  002f9	8b 4d e8	 mov	 ecx, DWORD PTR _returnNode$[ebp]
  002fc	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 655  :         p += cdataHeaderLen;

  002ff	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00302	83 c2 09	 add	 edx, 9
  00305	89 55 08	 mov	 DWORD PTR _p$[ebp], edx

; 656  :         text->SetCData( true );

  00308	6a 01		 push	 1
  0030a	8b 4d e4	 mov	 ecx, DWORD PTR _text$20[ebp]
  0030d	e8 00 00 00 00	 call	 ?SetCData@XMLText@tinyxml2@@QAEX_N@Z ; tinyxml2::XMLText::SetCData
  00312	e9 35 02 00 00	 jmp	 $LN9@Identify
$LN14@Identify:

; 657  :     }
; 658  :     else if ( XMLUtil::StringEqual( p, dtdHeader, dtdHeaderLen ) ) {

  00317	6a 02		 push	 2
  00319	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dtdHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
  0031e	50		 push	 eax
  0031f	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00322	51		 push	 ecx
  00323	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00328	83 c4 0c	 add	 esp, 12			; 0000000cH
  0032b	0f b6 d0	 movzx	 edx, al
  0032e	85 d2		 test	 edx, edx
  00330	0f 84 af 00 00
	00		 je	 $LN17@Identify

; 659  :         TIXMLASSERT( sizeof( XMLUnknown ) == _commentPool.ItemSize() );

  00336	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00339	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0033f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00342	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  00348	8b f4		 mov	 esi, esp
  0034a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0034d	ff d0		 call	 eax
  0034f	3b f4		 cmp	 esi, esp
  00351	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00356	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00359	74 01		 je	 SHORT $LN19@Identify
  0035b	cc		 int	 3
$LN19@Identify:

; 660  :         returnNode = new (_commentPool.Alloc()) XMLUnknown( this );

  0035c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0035f	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00365	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00368	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  0036e	8b f4		 mov	 esi, esp
  00370	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00373	ff d2		 call	 edx
  00375	3b f4		 cmp	 esi, esp
  00377	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037c	89 45 b4	 mov	 DWORD PTR $T8[ebp], eax
  0037f	8b 45 b4	 mov	 eax, DWORD PTR $T8[ebp]
  00382	50		 push	 eax
  00383	6a 2c		 push	 44			; 0000002cH
  00385	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0038a	83 c4 08	 add	 esp, 8
  0038d	89 45 b8	 mov	 DWORD PTR $T9[ebp], eax
  00390	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00397	83 7d b8 00	 cmp	 DWORD PTR $T9[ebp], 0
  0039b	74 11		 je	 SHORT $LN33@Identify
  0039d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003a0	51		 push	 ecx
  003a1	8b 4d b8	 mov	 ecx, DWORD PTR $T9[ebp]
  003a4	e8 00 00 00 00	 call	 ??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLUnknown::XMLUnknown
  003a9	89 45 8c	 mov	 DWORD PTR tv303[ebp], eax
  003ac	eb 07		 jmp	 SHORT $LN34@Identify
$LN33@Identify:
  003ae	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv303[ebp], 0
$LN34@Identify:
  003b5	8b 55 8c	 mov	 edx, DWORD PTR tv303[ebp]
  003b8	89 55 bc	 mov	 DWORD PTR $T10[ebp], edx
  003bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c2	8b 45 bc	 mov	 eax, DWORD PTR $T10[ebp]
  003c5	89 45 e8	 mov	 DWORD PTR _returnNode$[ebp], eax

; 661  :         returnNode->_memPool = &_commentPool;

  003c8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003cb	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  003d1	8b 55 e8	 mov	 edx, DWORD PTR _returnNode$[ebp]
  003d4	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 662  :         p += dtdHeaderLen;

  003d7	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  003da	83 c0 02	 add	 eax, 2
  003dd	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
  003e0	e9 67 01 00 00	 jmp	 $LN9@Identify
$LN17@Identify:

; 663  :     }
; 664  :     else if ( XMLUtil::StringEqual( p, elementHeader, elementHeaderLen ) ) {

  003e5	6a 01		 push	 1
  003e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?elementHeader@?1??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
  003ed	51		 push	 ecx
  003ee	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  003f1	52		 push	 edx
  003f2	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  003f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  003fa	0f b6 c0	 movzx	 eax, al
  003fd	85 c0		 test	 eax, eax
  003ff	0f 84 a0 00 00
	00		 je	 $LN20@Identify

; 665  :         TIXMLASSERT( sizeof( XMLElement ) == _elementPool.ItemSize() );

  00405	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00408	83 c1 44	 add	 ecx, 68			; 00000044H
  0040b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0040e	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00411	8b f4		 mov	 esi, esp
  00413	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00416	ff d2		 call	 edx
  00418	3b f4		 cmp	 esi, esp
  0041a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0041f	83 f8 34	 cmp	 eax, 52			; 00000034H
  00422	74 01		 je	 SHORT $LN22@Identify
  00424	cc		 int	 3
$LN22@Identify:

; 666  :         returnNode = new (_elementPool.Alloc()) XMLElement( this );

  00425	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00428	83 c1 44	 add	 ecx, 68			; 00000044H
  0042b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0042e	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  00431	8b f4		 mov	 esi, esp
  00433	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00436	ff d0		 call	 eax
  00438	3b f4		 cmp	 esi, esp
  0043a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0043f	89 45 a8	 mov	 DWORD PTR $T5[ebp], eax
  00442	8b 4d a8	 mov	 ecx, DWORD PTR $T5[ebp]
  00445	51		 push	 ecx
  00446	6a 34		 push	 52			; 00000034H
  00448	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0044d	83 c4 08	 add	 esp, 8
  00450	89 45 ac	 mov	 DWORD PTR $T6[ebp], eax
  00453	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  0045a	83 7d ac 00	 cmp	 DWORD PTR $T6[ebp], 0
  0045e	74 11		 je	 SHORT $LN35@Identify
  00460	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00463	52		 push	 edx
  00464	8b 4d ac	 mov	 ecx, DWORD PTR $T6[ebp]
  00467	e8 00 00 00 00	 call	 ??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLElement::XMLElement
  0046c	89 45 88	 mov	 DWORD PTR tv354[ebp], eax
  0046f	eb 07		 jmp	 SHORT $LN36@Identify
$LN35@Identify:
  00471	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv354[ebp], 0
$LN36@Identify:
  00478	8b 45 88	 mov	 eax, DWORD PTR tv354[ebp]
  0047b	89 45 b0	 mov	 DWORD PTR $T7[ebp], eax
  0047e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00485	8b 4d b0	 mov	 ecx, DWORD PTR $T7[ebp]
  00488	89 4d e8	 mov	 DWORD PTR _returnNode$[ebp], ecx

; 667  :         returnNode->_memPool = &_elementPool;

  0048b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0048e	83 c2 44	 add	 edx, 68			; 00000044H
  00491	8b 45 e8	 mov	 eax, DWORD PTR _returnNode$[ebp]
  00494	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 668  :         p += elementHeaderLen;

  00497	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0049a	83 c1 01	 add	 ecx, 1
  0049d	89 4d 08	 mov	 DWORD PTR _p$[ebp], ecx

; 669  :     }
; 670  :     else {

  004a0	e9 a7 00 00 00	 jmp	 $LN9@Identify
$LN20@Identify:

; 671  :         TIXMLASSERT( sizeof( XMLText ) == _textPool.ItemSize() );

  004a5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  004a8	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  004ae	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004b1	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  004b7	8b f4		 mov	 esi, esp
  004b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004bc	ff d2		 call	 edx
  004be	3b f4		 cmp	 esi, esp
  004c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004c5	83 f8 30	 cmp	 eax, 48			; 00000030H
  004c8	74 01		 je	 SHORT $LN23@Identify
  004ca	cc		 int	 3
$LN23@Identify:

; 672  :         returnNode = new (_textPool.Alloc()) XMLText( this );

  004cb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  004ce	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  004d4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004d7	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  004dd	8b f4		 mov	 esi, esp
  004df	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004e2	ff d0		 call	 eax
  004e4	3b f4		 cmp	 esi, esp
  004e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004eb	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  004ee	8b 4d 9c	 mov	 ecx, DWORD PTR $T2[ebp]
  004f1	51		 push	 ecx
  004f2	6a 30		 push	 48			; 00000030H
  004f4	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  004f9	83 c4 08	 add	 esp, 8
  004fc	89 45 a0	 mov	 DWORD PTR $T3[ebp], eax
  004ff	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00506	83 7d a0 00	 cmp	 DWORD PTR $T3[ebp], 0
  0050a	74 11		 je	 SHORT $LN37@Identify
  0050c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0050f	52		 push	 edx
  00510	8b 4d a0	 mov	 ecx, DWORD PTR $T3[ebp]
  00513	e8 00 00 00 00	 call	 ??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLText::XMLText
  00518	89 45 84	 mov	 DWORD PTR tv399[ebp], eax
  0051b	eb 07		 jmp	 SHORT $LN38@Identify
$LN37@Identify:
  0051d	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv399[ebp], 0
$LN38@Identify:
  00524	8b 45 84	 mov	 eax, DWORD PTR tv399[ebp]
  00527	89 45 a4	 mov	 DWORD PTR $T4[ebp], eax
  0052a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00531	8b 4d a4	 mov	 ecx, DWORD PTR $T4[ebp]
  00534	89 4d e8	 mov	 DWORD PTR _returnNode$[ebp], ecx

; 673  :         returnNode->_memPool = &_textPool;

  00537	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0053a	81 c2 dc 00 00
	00		 add	 edx, 220		; 000000dcH
  00540	8b 45 e8	 mov	 eax, DWORD PTR _returnNode$[ebp]
  00543	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 674  :         p = start;	// Back it up, all the text counts.

  00546	8b 4d ec	 mov	 ecx, DWORD PTR _start$[ebp]
  00549	89 4d 08	 mov	 DWORD PTR _p$[ebp], ecx
$LN9@Identify:

; 675  :     }
; 676  : 
; 677  :     TIXMLASSERT( returnNode );

  0054c	83 7d e8 00	 cmp	 DWORD PTR _returnNode$[ebp], 0
  00550	75 01		 jne	 SHORT $LN24@Identify
  00552	cc		 int	 3
$LN24@Identify:

; 678  :     TIXMLASSERT( p );

  00553	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00557	75 01		 jne	 SHORT $LN25@Identify
  00559	cc		 int	 3
$LN25@Identify:

; 679  :     *node = returnNode;

  0055a	8b 55 0c	 mov	 edx, DWORD PTR _node$[ebp]
  0055d	8b 45 e8	 mov	 eax, DWORD PTR _returnNode$[ebp]
  00560	89 02		 mov	 DWORD PTR [edx], eax

; 680  :     return p;

  00562	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
$LN1@Identify:

; 681  : }

  00565	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00568	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0056f	59		 pop	 ecx
  00570	5f		 pop	 edi
  00571	5e		 pop	 esi
  00572	83 c4 7c	 add	 esp, 124		; 0000007cH
  00575	3b ec		 cmp	 ebp, esp
  00577	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0057c	8b e5		 mov	 esp, ebp
  0057e	5d		 pop	 ebp
  0057f	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$0:
  00000	8b 45 d8	 mov	 eax, DWORD PTR $T17[ebp]
  00003	50		 push	 eax
  00004	8b 45 dc	 mov	 eax, DWORD PTR $T18[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$1:
  00011	8b 45 cc	 mov	 eax, DWORD PTR $T14[ebp]
  00014	50		 push	 eax
  00015	8b 45 d0	 mov	 eax, DWORD PTR $T15[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	c3		 ret	 0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$2:
  00022	8b 45 c0	 mov	 eax, DWORD PTR $T11[ebp]
  00025	50		 push	 eax
  00026	8b 45 c4	 mov	 eax, DWORD PTR $T12[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
  00032	c3		 ret	 0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$3:
  00033	8b 45 b4	 mov	 eax, DWORD PTR $T8[ebp]
  00036	50		 push	 eax
  00037	8b 45 b8	 mov	 eax, DWORD PTR $T9[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00040	83 c4 08	 add	 esp, 8
  00043	c3		 ret	 0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$4:
  00044	8b 45 a8	 mov	 eax, DWORD PTR $T5[ebp]
  00047	50		 push	 eax
  00048	8b 45 ac	 mov	 eax, DWORD PTR $T6[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00051	83 c4 08	 add	 esp, 8
  00054	c3		 ret	 0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$5:
  00055	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]
  00058	50		 push	 eax
  00059	8b 45 a0	 mov	 eax, DWORD PTR $T3[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00062	83 c4 08	 add	 esp, 8
  00065	c3		 ret	 0
__ehhandler$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z:
  00066	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0006d	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00070	33 c8		 xor	 ecx, eax
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
  0007c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z ENDP ; tinyxml2::XMLDocument::Identify
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_node$1 = -8						; size = 4
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLDocument::Accept
; _this$ = ecx

; 685  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 686  :     TIXMLASSERT( visitor );

  00018	83 7d 08 00	 cmp	 DWORD PTR _visitor$[ebp], 0
  0001c	75 01		 jne	 SHORT $LN5@Accept
  0001e	cc		 int	 3
$LN5@Accept:

; 687  :     if ( visitor->VisitEnter( *this ) ) {

  0001f	8b f4		 mov	 esi, esp
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  0002d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00030	ff d0		 call	 eax
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	0f b6 c8	 movzx	 ecx, al
  0003c	85 c9		 test	 ecx, ecx
  0003e	74 43		 je	 SHORT $LN6@Accept

; 688  :         for ( const XMLNode* node=FirstChild(); node; node=node->NextSibling() ) {

  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00048	89 45 f8	 mov	 DWORD PTR _node$1[ebp], eax
  0004b	eb 0b		 jmp	 SHORT $LN4@Accept
$LN2@Accept:
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _node$1[ebp]
  00050	e8 00 00 00 00	 call	 ?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::NextSibling
  00055	89 45 f8	 mov	 DWORD PTR _node$1[ebp], eax
$LN4@Accept:
  00058	83 7d f8 00	 cmp	 DWORD PTR _node$1[ebp], 0
  0005c	74 25		 je	 SHORT $LN6@Accept

; 689  :             if ( !node->Accept( visitor ) ) {

  0005e	8b f4		 mov	 esi, esp
  00060	8b 55 08	 mov	 edx, DWORD PTR _visitor$[ebp]
  00063	52		 push	 edx
  00064	8b 45 f8	 mov	 eax, DWORD PTR _node$1[ebp]
  00067	8b 10		 mov	 edx, DWORD PTR [eax]
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _node$1[ebp]
  0006c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0006f	ff d0		 call	 eax
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c8	 movzx	 ecx, al
  0007b	85 c9		 test	 ecx, ecx
  0007d	75 02		 jne	 SHORT $LN7@Accept

; 690  :                 break;

  0007f	eb 02		 jmp	 SHORT $LN6@Accept
$LN7@Accept:

; 691  :             }
; 692  :         }

  00081	eb ca		 jmp	 SHORT $LN2@Accept
$LN6@Accept:

; 693  :     }
; 694  :     return visitor->VisitExit( *this );

  00083	8b f4		 mov	 esi, esp
  00085	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00088	52		 push	 edx
  00089	8b 45 08	 mov	 eax, DWORD PTR _visitor$[ebp]
  0008c	8b 10		 mov	 edx, DWORD PTR [eax]
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00091	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00094	ff d0		 call	 eax
  00096	3b f4		 cmp	 esi, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 695  : }

  0009d	5e		 pop	 esi
  0009e	83 c4 08	 add	 esp, 8
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLDocument::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLNode::XMLNode
; _this$ = ecx

; 706  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLNode@tinyxml2@@6B@

; 701  :     _document( doc ),

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 55 08	 mov	 edx, DWORD PTR _doc$[ebp]
  0001d	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 702  :     _parent( 0 ),

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 706  : {

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00030	e8 00 00 00 00	 call	 ??0StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::StrPair

; 703  :     _firstChild( 0 ), _lastChild( 0 ),

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 704  :     _prev( 0 ), _next( 0 ),

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 705  :     _memPool( 0 )

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 707  : }

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	83 c4 04	 add	 esp, 4
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLNode::XMLNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLNode@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLNode@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 2c		 push	 44			; 0000002cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLNode@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLNode@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLNode::~XMLNode
; _this$ = ecx

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1XMLNode@tinyxml2@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLNode@tinyxml2@@6B@

; 712  :     DeleteChildren();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ; tinyxml2::XMLNode::DeleteChildren

; 713  :     if ( _parent ) {

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00045	74 0f		 je	 SHORT $LN1@XMLNode

; 714  :         _parent->Unlink( this );

  00047	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	52		 push	 edx
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00051	e8 00 00 00 00	 call	 ?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z ; tinyxml2::XMLNode::Unlink
$LN1@XMLNode:

; 715  :     }
; 716  : }

  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005c	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1XMLNode@tinyxml2@@MAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1XMLNode@tinyxml2@@MAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1XMLNode@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLNode::~XMLNode
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Value@XMLNode@tinyxml2@@QBEPBDXZ PROC			; tinyxml2::XMLNode::Value
; _this$ = ecx

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 720  :     // Catch an edge case: XMLDocuments don't have a a Value. Carefully return nullptr.
; 721  :     if ( this->ToDocument() )

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	8b f4		 mov	 esi, esp
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001c	ff d0		 call	 eax
  0001e	3b f4		 cmp	 esi, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	85 c0		 test	 eax, eax
  00027	74 04		 je	 SHORT $LN2@Value

; 722  :         return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 0b		 jmp	 SHORT $LN1@Value
$LN2@Value:

; 723  :     return _value.GetStr();

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00033	e8 00 00 00 00	 call	 ?GetStr@StrPair@tinyxml2@@QAEPBDXZ ; tinyxml2::StrPair::GetStr
$LN1@Value:

; 724  : }

  00038	5e		 pop	 esi
  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?Value@XMLNode@tinyxml2@@QBEPBDXZ ENDP			; tinyxml2::XMLNode::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_staticMem$ = 12					; size = 1
?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z PROC		; tinyxml2::XMLNode::SetValue
; _this$ = ecx

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 728  :     if ( staticMem ) {

  0000e	0f b6 45 0c	 movzx	 eax, BYTE PTR _staticMem$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 11		 je	 SHORT $LN2@SetValue

; 729  :         _value.SetInternedStr( str );

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00019	51		 push	 ecx
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00020	e8 00 00 00 00	 call	 ?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z ; tinyxml2::StrPair::SetInternedStr

; 730  :     }
; 731  :     else {

  00025	eb 11		 jmp	 SHORT $LN1@SetValue
$LN2@SetValue:

; 732  :         _value.SetStr( str );

  00027	6a 00		 push	 0
  00029	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0002c	52		 push	 edx
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00033	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr
$LN1@SetValue:

; 733  :     }
; 734  : }

  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ENDP		; tinyxml2::XMLNode::SetValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_node$1 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ PROC		; tinyxml2::XMLNode::DeleteChildren
; _this$ = ecx

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@DeleteChil:

; 739  :     while( _firstChild ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0001e	74 3f		 je	 SHORT $LN3@DeleteChil

; 740  :         TIXMLASSERT( _lastChild );

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00027	75 01		 jne	 SHORT $LN4@DeleteChil
  00029	cc		 int	 3
$LN4@DeleteChil:

; 741  :         TIXMLASSERT( _firstChild->_document == _document );

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00039	74 01		 je	 SHORT $LN5@DeleteChil
  0003b	cc		 int	 3
$LN5@DeleteChil:

; 742  :         XMLNode* node = _firstChild;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00042	89 4d f8	 mov	 DWORD PTR _node$1[ebp], ecx

; 743  :         Unlink( node );

  00045	8b 55 f8	 mov	 edx, DWORD PTR _node$1[ebp]
  00048	52		 push	 edx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z ; tinyxml2::XMLNode::Unlink

; 744  : 
; 745  :         DeleteNode( node );

  00051	8b 45 f8	 mov	 eax, DWORD PTR _node$1[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  0005a	83 c4 04	 add	 esp, 4

; 746  :     }

  0005d	eb b8		 jmp	 SHORT $LN2@DeleteChil
$LN3@DeleteChil:

; 747  :     _firstChild = _lastChild = 0;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0

; 748  : }

  00073	83 c4 08	 add	 esp, 8
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ENDP		; tinyxml2::XMLNode::DeleteChildren
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_child$ = 8						; size = 4
?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z PROC		; tinyxml2::XMLNode::Unlink
; _this$ = ecx

; 752  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 753  :     TIXMLASSERT( child );

  0000e	83 7d 08 00	 cmp	 DWORD PTR _child$[ebp], 0
  00012	75 01		 jne	 SHORT $LN2@Unlink
  00014	cc		 int	 3
$LN2@Unlink:

; 754  :     TIXMLASSERT( child->_document == _document );

  00015	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	74 01		 je	 SHORT $LN3@Unlink
  00023	cc		 int	 3
$LN3@Unlink:

; 755  :     TIXMLASSERT( child->_parent == this );

  00024	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00027	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002a	3b 4d fc	 cmp	 ecx, DWORD PTR _this$[ebp]
  0002d	74 01		 je	 SHORT $LN4@Unlink
  0002f	cc		 int	 3
$LN4@Unlink:

; 756  :     if ( child == _firstChild ) {

  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00036	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  00039	75 0f		 jne	 SHORT $LN5@Unlink

; 757  :         _firstChild = _firstChild->_next;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  00047	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN5@Unlink:

; 758  :     }
; 759  :     if ( child == _lastChild ) {

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00050	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  00053	75 0f		 jne	 SHORT $LN6@Unlink

; 760  :         _lastChild = _lastChild->_prev;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00061	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN6@Unlink:

; 761  :     }
; 762  : 
; 763  :     if ( child->_prev ) {

  00064	8b 55 08	 mov	 edx, DWORD PTR _child$[ebp]
  00067	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0006b	74 0f		 je	 SHORT $LN7@Unlink

; 764  :         child->_prev->_next = child->_next;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00070	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00073	8b 55 08	 mov	 edx, DWORD PTR _child$[ebp]
  00076	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00079	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN7@Unlink:

; 765  :     }
; 766  :     if ( child->_next ) {

  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _child$[ebp]
  0007f	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00083	74 0f		 je	 SHORT $LN8@Unlink

; 767  :         child->_next->_prev = child->_prev;

  00085	8b 55 08	 mov	 edx, DWORD PTR _child$[ebp]
  00088	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _child$[ebp]
  0008e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00091	89 50 20	 mov	 DWORD PTR [eax+32], edx
$LN8@Unlink:

; 768  :     }
; 769  : 	child->_parent = 0;

  00094	8b 45 08	 mov	 eax, DWORD PTR _child$[ebp]
  00097	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 770  : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z ENDP		; tinyxml2::XMLNode::Unlink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node$ = 8						; size = 4
?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z PROC	; tinyxml2::XMLNode::DeleteChild
; _this$ = ecx

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 775  :     TIXMLASSERT( node );

  0000e	83 7d 08 00	 cmp	 DWORD PTR _node$[ebp], 0
  00012	75 01		 jne	 SHORT $LN2@DeleteChil
  00014	cc		 int	 3
$LN2@DeleteChil:

; 776  :     TIXMLASSERT( node->_document == _document );

  00015	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	74 01		 je	 SHORT $LN3@DeleteChil
  00023	cc		 int	 3
$LN3@DeleteChil:

; 777  :     TIXMLASSERT( node->_parent == this );

  00024	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00027	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002a	3b 4d fc	 cmp	 ecx, DWORD PTR _this$[ebp]
  0002d	74 01		 je	 SHORT $LN4@DeleteChil
  0002f	cc		 int	 3
$LN4@DeleteChil:

; 778  :     DeleteNode( node );

  00030	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  00039	83 c4 04	 add	 esp, 4

; 779  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z ENDP	; tinyxml2::XMLNode::DeleteChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_addThis$ = 8						; size = 4
?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z PROC ; tinyxml2::XMLNode::InsertEndChild
; _this$ = ecx

; 783  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 784  :     TIXMLASSERT( addThis );

  0000e	83 7d 08 00	 cmp	 DWORD PTR _addThis$[ebp], 0
  00012	75 01		 jne	 SHORT $LN2@InsertEndC
  00014	cc		 int	 3
$LN2@InsertEndC:

; 785  :     if ( addThis->_document != _document ) {

  00015	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	74 0c		 je	 SHORT $LN3@InsertEndC

; 786  :         TIXMLASSERT( false );

  00023	33 c0		 xor	 eax, eax
  00025	75 01		 jne	 SHORT $LN4@InsertEndC
  00027	cc		 int	 3
$LN4@InsertEndC:

; 787  :         return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 95 00 00 00	 jmp	 $LN1@InsertEndC
$LN3@InsertEndC:

; 788  :     }
; 789  :     InsertChildPreamble( addThis );

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  00032	51		 push	 ecx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?InsertChildPreamble@XMLNode@tinyxml2@@ABEXPAV12@@Z ; tinyxml2::XMLNode::InsertChildPreamble

; 790  : 
; 791  :     if ( _lastChild ) {

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  00042	74 44		 je	 SHORT $LN5@InsertEndC

; 792  :         TIXMLASSERT( _firstChild );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0004b	75 01		 jne	 SHORT $LN7@InsertEndC
  0004d	cc		 int	 3
$LN7@InsertEndC:

; 793  :         TIXMLASSERT( _lastChild->_next == 0 );

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00054	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  00058	74 01		 je	 SHORT $LN8@InsertEndC
  0005a	cc		 int	 3
$LN8@InsertEndC:

; 794  :         _lastChild->_next = addThis;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00061	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  00064	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 795  :         addThis->_prev = _lastChild;

  00067	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00070	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 796  :         _lastChild = addThis;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  00079	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 797  : 
; 798  :         addThis->_next = 0;

  0007c	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  0007f	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0

; 799  :     }
; 800  :     else {

  00086	eb 30		 jmp	 SHORT $LN6@InsertEndC
$LN5@InsertEndC:

; 801  :         TIXMLASSERT( _firstChild == 0 );

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0008f	74 01		 je	 SHORT $LN9@InsertEndC
  00091	cc		 int	 3
$LN9@InsertEndC:

; 802  :         _firstChild = _lastChild = addThis;

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  00098	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  000a1	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 803  : 
; 804  :         addThis->_prev = 0;

  000a4	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  000a7	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 805  :         addThis->_next = 0;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
  000b1	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$LN6@InsertEndC:

; 806  :     }
; 807  :     addThis->_parent = this;

  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  000bb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000be	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 808  :     return addThis;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
$LN1@InsertEndC:

; 809  : }

  000c4	83 c4 04	 add	 esp, 4
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ENDP ; tinyxml2::XMLNode::InsertEndChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_addThis$ = 8						; size = 4
?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z PROC ; tinyxml2::XMLNode::InsertFirstChild
; _this$ = ecx

; 813  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 814  :     TIXMLASSERT( addThis );

  0000e	83 7d 08 00	 cmp	 DWORD PTR _addThis$[ebp], 0
  00012	75 01		 jne	 SHORT $LN2@InsertFirs
  00014	cc		 int	 3
$LN2@InsertFirs:

; 815  :     if ( addThis->_document != _document ) {

  00015	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	74 0c		 je	 SHORT $LN3@InsertFirs

; 816  :         TIXMLASSERT( false );

  00023	33 c0		 xor	 eax, eax
  00025	75 01		 jne	 SHORT $LN4@InsertFirs
  00027	cc		 int	 3
$LN4@InsertFirs:

; 817  :         return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 95 00 00 00	 jmp	 $LN1@InsertFirs
$LN3@InsertFirs:

; 818  :     }
; 819  :     InsertChildPreamble( addThis );

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  00032	51		 push	 ecx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?InsertChildPreamble@XMLNode@tinyxml2@@ABEXPAV12@@Z ; tinyxml2::XMLNode::InsertChildPreamble

; 820  : 
; 821  :     if ( _firstChild ) {

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  00042	74 44		 je	 SHORT $LN5@InsertFirs

; 822  :         TIXMLASSERT( _lastChild );

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0004b	75 01		 jne	 SHORT $LN7@InsertFirs
  0004d	cc		 int	 3
$LN7@InsertFirs:

; 823  :         TIXMLASSERT( _firstChild->_prev == 0 );

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00054	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00058	74 01		 je	 SHORT $LN8@InsertFirs
  0005a	cc		 int	 3
$LN8@InsertFirs:

; 824  : 
; 825  :         _firstChild->_prev = addThis;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00061	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  00064	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 826  :         addThis->_next = _firstChild;

  00067	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00070	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 827  :         _firstChild = addThis;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  00079	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 828  : 
; 829  :         addThis->_prev = 0;

  0007c	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  0007f	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 830  :     }
; 831  :     else {

  00086	eb 30		 jmp	 SHORT $LN6@InsertFirs
$LN5@InsertFirs:

; 832  :         TIXMLASSERT( _lastChild == 0 );

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0008f	74 01		 je	 SHORT $LN9@InsertFirs
  00091	cc		 int	 3
$LN9@InsertFirs:

; 833  :         _firstChild = _lastChild = addThis;

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  00098	89 51 1c	 mov	 DWORD PTR [ecx+28], edx
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  000a1	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 834  : 
; 835  :         addThis->_prev = 0;

  000a4	8b 55 08	 mov	 edx, DWORD PTR _addThis$[ebp]
  000a7	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 836  :         addThis->_next = 0;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
  000b1	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$LN6@InsertFirs:

; 837  :     }
; 838  :     addThis->_parent = this;

  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _addThis$[ebp]
  000bb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000be	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 839  :     return addThis;

  000c1	8b 45 08	 mov	 eax, DWORD PTR _addThis$[ebp]
$LN1@InsertFirs:

; 840  : }

  000c4	83 c4 04	 add	 esp, 4
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ENDP ; tinyxml2::XMLNode::InsertFirstChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_afterThis$ = 8						; size = 4
_addThis$ = 12						; size = 4
?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z PROC ; tinyxml2::XMLNode::InsertAfterChild
; _this$ = ecx

; 844  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 845  :     TIXMLASSERT( addThis );

  0000e	83 7d 0c 00	 cmp	 DWORD PTR _addThis$[ebp], 0
  00012	75 01		 jne	 SHORT $LN2@InsertAfte
  00014	cc		 int	 3
$LN2@InsertAfte:

; 846  :     if ( addThis->_document != _document ) {

  00015	8b 45 0c	 mov	 eax, DWORD PTR _addThis$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00021	74 09		 je	 SHORT $LN3@InsertAfte

; 847  :         TIXMLASSERT( false );

  00023	33 c0		 xor	 eax, eax
  00025	75 01		 jne	 SHORT $LN4@InsertAfte
  00027	cc		 int	 3
$LN4@InsertAfte:

; 848  :         return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 74		 jmp	 SHORT $LN1@InsertAfte
$LN3@InsertAfte:

; 849  :     }
; 850  : 
; 851  :     TIXMLASSERT( afterThis );

  0002c	83 7d 08 00	 cmp	 DWORD PTR _afterThis$[ebp], 0
  00030	75 01		 jne	 SHORT $LN5@InsertAfte
  00032	cc		 int	 3
$LN5@InsertAfte:

; 852  : 
; 853  :     if ( afterThis->_parent != this ) {

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _afterThis$[ebp]
  00036	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00039	3b 55 fc	 cmp	 edx, DWORD PTR _this$[ebp]
  0003c	74 09		 je	 SHORT $LN6@InsertAfte

; 854  :         TIXMLASSERT( false );

  0003e	33 c0		 xor	 eax, eax
  00040	75 01		 jne	 SHORT $LN7@InsertAfte
  00042	cc		 int	 3
$LN7@InsertAfte:

; 855  :         return 0;

  00043	33 c0		 xor	 eax, eax
  00045	eb 59		 jmp	 SHORT $LN1@InsertAfte
$LN6@InsertAfte:

; 856  :     }
; 857  : 
; 858  :     if ( afterThis->_next == 0 ) {

  00047	8b 4d 08	 mov	 ecx, DWORD PTR _afterThis$[ebp]
  0004a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0004e	75 0e		 jne	 SHORT $LN8@InsertAfte

; 859  :         // The last node or the only node.
; 860  :         return InsertEndChild( addThis );

  00050	8b 55 0c	 mov	 edx, DWORD PTR _addThis$[ebp]
  00053	52		 push	 edx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertEndChild
  0005c	eb 42		 jmp	 SHORT $LN1@InsertAfte
$LN8@InsertAfte:

; 861  :     }
; 862  :     InsertChildPreamble( addThis );

  0005e	8b 45 0c	 mov	 eax, DWORD PTR _addThis$[ebp]
  00061	50		 push	 eax
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?InsertChildPreamble@XMLNode@tinyxml2@@ABEXPAV12@@Z ; tinyxml2::XMLNode::InsertChildPreamble

; 863  :     addThis->_prev = afterThis;

  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _addThis$[ebp]
  0006d	8b 55 08	 mov	 edx, DWORD PTR _afterThis$[ebp]
  00070	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 864  :     addThis->_next = afterThis->_next;

  00073	8b 45 0c	 mov	 eax, DWORD PTR _addThis$[ebp]
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _afterThis$[ebp]
  00079	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0007c	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 865  :     afterThis->_next->_prev = addThis;

  0007f	8b 45 08	 mov	 eax, DWORD PTR _afterThis$[ebp]
  00082	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00085	8b 55 0c	 mov	 edx, DWORD PTR _addThis$[ebp]
  00088	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 866  :     afterThis->_next = addThis;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _afterThis$[ebp]
  0008e	8b 4d 0c	 mov	 ecx, DWORD PTR _addThis$[ebp]
  00091	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 867  :     addThis->_parent = this;

  00094	8b 55 0c	 mov	 edx, DWORD PTR _addThis$[ebp]
  00097	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 868  :     return addThis;

  0009d	8b 45 0c	 mov	 eax, DWORD PTR _addThis$[ebp]
$LN1@InsertAfte:

; 869  : }

  000a0	83 c4 04	 add	 esp, 4
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z ENDP ; tinyxml2::XMLNode::InsertAfterChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_element$1 = -12					; size = 4
_node$2 = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::FirstChildElement
; _this$ = ecx

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 876  :     for( const XMLNode* node = _firstChild; node; node = node->_next ) {

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00025	89 4d f8	 mov	 DWORD PTR _node$2[ebp], ecx
  00028	eb 09		 jmp	 SHORT $LN4@FirstChild
$LN2@FirstChild:
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _node$2[ebp]
  0002d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00030	89 45 f8	 mov	 DWORD PTR _node$2[ebp], eax
$LN4@FirstChild:
  00033	83 7d f8 00	 cmp	 DWORD PTR _node$2[ebp], 0
  00037	74 4c		 je	 SHORT $LN3@FirstChild

; 877  :         const XMLElement* element = node->ToElement();

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b f4		 mov	 esi, esp
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	ff d0		 call	 eax
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	89 45 f4	 mov	 DWORD PTR _element$1[ebp], eax

; 878  :         if ( element ) {

  00051	83 7d f4 00	 cmp	 DWORD PTR _element$1[ebp], 0
  00055	74 2c		 je	 SHORT $LN5@FirstChild

; 879  :             if ( !name || XMLUtil::StringEqual( element->Name(), name ) ) {

  00057	83 7d 08 00	 cmp	 DWORD PTR _name$[ebp], 0
  0005b	74 21		 je	 SHORT $LN7@FirstChild
  0005d	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00065	51		 push	 ecx
  00066	8b 4d f4	 mov	 ecx, DWORD PTR _element$1[ebp]
  00069	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	0f b6 d0	 movzx	 edx, al
  0007a	85 d2		 test	 edx, edx
  0007c	74 05		 je	 SHORT $LN5@FirstChild
$LN7@FirstChild:

; 880  :                 return element;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _element$1[ebp]
  00081	eb 04		 jmp	 SHORT $LN1@FirstChild
$LN5@FirstChild:

; 881  :             }
; 882  :         }
; 883  :     }

  00083	eb a5		 jmp	 SHORT $LN2@FirstChild
$LN3@FirstChild:

; 884  :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN1@FirstChild:

; 885  : }

  00087	5e		 pop	 esi
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::FirstChildElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_element$1 = -12					; size = 4
_node$2 = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::LastChildElement
; _this$ = ecx

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 890  :     for( const XMLNode* node = _lastChild; node; node = node->_prev ) {

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00025	89 4d f8	 mov	 DWORD PTR _node$2[ebp], ecx
  00028	eb 09		 jmp	 SHORT $LN4@LastChildE
$LN2@LastChildE:
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _node$2[ebp]
  0002d	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00030	89 45 f8	 mov	 DWORD PTR _node$2[ebp], eax
$LN4@LastChildE:
  00033	83 7d f8 00	 cmp	 DWORD PTR _node$2[ebp], 0
  00037	74 4c		 je	 SHORT $LN3@LastChildE

; 891  :         const XMLElement* element = node->ToElement();

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b f4		 mov	 esi, esp
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	ff d0		 call	 eax
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	89 45 f4	 mov	 DWORD PTR _element$1[ebp], eax

; 892  :         if ( element ) {

  00051	83 7d f4 00	 cmp	 DWORD PTR _element$1[ebp], 0
  00055	74 2c		 je	 SHORT $LN5@LastChildE

; 893  :             if ( !name || XMLUtil::StringEqual( element->Name(), name ) ) {

  00057	83 7d 08 00	 cmp	 DWORD PTR _name$[ebp], 0
  0005b	74 21		 je	 SHORT $LN7@LastChildE
  0005d	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00065	51		 push	 ecx
  00066	8b 4d f4	 mov	 ecx, DWORD PTR _element$1[ebp]
  00069	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	0f b6 d0	 movzx	 edx, al
  0007a	85 d2		 test	 edx, edx
  0007c	74 05		 je	 SHORT $LN5@LastChildE
$LN7@LastChildE:

; 894  :                 return element;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _element$1[ebp]
  00081	eb 04		 jmp	 SHORT $LN1@LastChildE
$LN5@LastChildE:

; 895  :             }
; 896  :         }
; 897  :     }

  00083	eb a5		 jmp	 SHORT $LN2@LastChildE
$LN3@LastChildE:

; 898  :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN1@LastChildE:

; 899  : }

  00087	5e		 pop	 esi
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::LastChildElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_element$1 = -12					; size = 4
_node$2 = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::NextSiblingElement
; _this$ = ecx

; 903  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 904  :     for( const XMLNode* node = _next; node; node = node->_next ) {

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00025	89 4d f8	 mov	 DWORD PTR _node$2[ebp], ecx
  00028	eb 09		 jmp	 SHORT $LN4@NextSiblin
$LN2@NextSiblin:
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _node$2[ebp]
  0002d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00030	89 45 f8	 mov	 DWORD PTR _node$2[ebp], eax
$LN4@NextSiblin:
  00033	83 7d f8 00	 cmp	 DWORD PTR _node$2[ebp], 0
  00037	74 4c		 je	 SHORT $LN3@NextSiblin

; 905  :         const XMLElement* element = node->ToElement();

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b f4		 mov	 esi, esp
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	ff d0		 call	 eax
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	89 45 f4	 mov	 DWORD PTR _element$1[ebp], eax

; 906  :         if ( element
; 907  :                 && (!name || XMLUtil::StringEqual( name, element->Name() ))) {

  00051	83 7d f4 00	 cmp	 DWORD PTR _element$1[ebp], 0
  00055	74 2c		 je	 SHORT $LN5@NextSiblin
  00057	83 7d 08 00	 cmp	 DWORD PTR _name$[ebp], 0
  0005b	74 21		 je	 SHORT $LN6@NextSiblin
  0005d	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _element$1[ebp]
  00065	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0006a	50		 push	 eax
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	0f b6 d0	 movzx	 edx, al
  0007a	85 d2		 test	 edx, edx
  0007c	74 05		 je	 SHORT $LN5@NextSiblin
$LN6@NextSiblin:

; 908  :             return element;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _element$1[ebp]
  00081	eb 04		 jmp	 SHORT $LN1@NextSiblin
$LN5@NextSiblin:

; 909  :         }
; 910  :     }

  00083	eb a5		 jmp	 SHORT $LN2@NextSiblin
$LN3@NextSiblin:

; 911  :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN1@NextSiblin:

; 912  : }

  00087	5e		 pop	 esi
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::NextSiblingElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_element$1 = -12					; size = 4
_node$2 = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::PreviousSiblingElement
; _this$ = ecx

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  :     for( const XMLNode* node = _prev; node; node = node->_prev ) {

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00025	89 4d f8	 mov	 DWORD PTR _node$2[ebp], ecx
  00028	eb 09		 jmp	 SHORT $LN4@PreviousSi
$LN2@PreviousSi:
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _node$2[ebp]
  0002d	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00030	89 45 f8	 mov	 DWORD PTR _node$2[ebp], eax
$LN4@PreviousSi:
  00033	83 7d f8 00	 cmp	 DWORD PTR _node$2[ebp], 0
  00037	74 4c		 je	 SHORT $LN3@PreviousSi

; 918  :         const XMLElement* element = node->ToElement();

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b f4		 mov	 esi, esp
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _node$2[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	ff d0		 call	 eax
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	89 45 f4	 mov	 DWORD PTR _element$1[ebp], eax

; 919  :         if ( element
; 920  :                 && (!name || XMLUtil::StringEqual( name, element->Name() ))) {

  00051	83 7d f4 00	 cmp	 DWORD PTR _element$1[ebp], 0
  00055	74 2c		 je	 SHORT $LN5@PreviousSi
  00057	83 7d 08 00	 cmp	 DWORD PTR _name$[ebp], 0
  0005b	74 21		 je	 SHORT $LN6@PreviousSi
  0005d	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _element$1[ebp]
  00065	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0006a	50		 push	 eax
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	0f b6 d0	 movzx	 edx, al
  0007a	85 d2		 test	 edx, edx
  0007c	74 05		 je	 SHORT $LN5@PreviousSi
$LN6@PreviousSi:

; 921  :             return element;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _element$1[ebp]
  00081	eb 04		 jmp	 SHORT $LN1@PreviousSi
$LN5@PreviousSi:

; 922  :         }
; 923  :     }

  00083	eb a5		 jmp	 SHORT $LN2@PreviousSi
$LN3@PreviousSi:

; 924  :     return 0;

  00085	33 c0		 xor	 eax, eax
$LN1@PreviousSi:

; 925  : }

  00087	5e		 pop	 esi
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::PreviousSiblingElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 4
_mismatch$3 = -57					; size = 1
_ele$4 = -56						; size = 4
_decl$5 = -52						; size = 4
_endTag$6 = -44						; size = 12
_node$7 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_parentEnd$ = 12					; size = 4
?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLNode::ParseDeep
; _this$ = ecx

; 929  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@ParseDeep:

; 930  :     // This is a recursive method, but thinking about it "at the current level"
; 931  :     // it is a pretty simple flat list:
; 932  :     //		<foo/>
; 933  :     //		<!-- comment -->
; 934  :     //
; 935  :     // With a special case:
; 936  :     //		<foo>
; 937  :     //		</foo>
; 938  :     //		<!-- comment -->
; 939  :     //
; 940  :     // Where the closing element (/foo) *must* be the next thing after the opening
; 941  :     // element, and the names must match. BUT the tricky bit is that the closing
; 942  :     // element will be read by the child.
; 943  :     //
; 944  :     // 'endTag' is the end tag for this node, it is returned by a call to a child.
; 945  :     // 'parentEnd' is the end tag for the parent, which is filled in and returned.
; 946  : 
; 947  :     while( p && *p ) {

  0003b	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0003f	0f 84 60 02 00
	00		 je	 $LN3@ParseDeep
  00045	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00048	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0004b	85 c9		 test	 ecx, ecx
  0004d	0f 84 52 02 00
	00		 je	 $LN3@ParseDeep

; 948  :         XMLNode* node = 0;

  00053	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _node$7[ebp], 0

; 949  : 
; 950  :         p = _document->Identify( p, &node );

  0005a	8d 55 e8	 lea	 edx, DWORD PTR _node$7[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00061	50		 push	 eax
  00062	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00068	e8 00 00 00 00	 call	 ?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z ; tinyxml2::XMLDocument::Identify
  0006d	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 951  :         if ( node == 0 ) {

  00070	83 7d e8 00	 cmp	 DWORD PTR _node$7[ebp], 0
  00074	75 05		 jne	 SHORT $LN4@ParseDeep

; 952  :             break;

  00076	e9 2a 02 00 00	 jmp	 $LN3@ParseDeep
$LN4@ParseDeep:

; 953  :         }
; 954  : 
; 955  :         StrPair endTag;

  0007b	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  0007e	e8 00 00 00 00	 call	 ??0StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::StrPair
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 956  :         p = node->ParseDeep( p, &endTag );

  0008a	8b f4		 mov	 esi, esp
  0008c	8d 55 d4	 lea	 edx, DWORD PTR _endTag$6[ebp]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00093	50		 push	 eax
  00094	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  0009c	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0009f	ff d0		 call	 eax
  000a1	3b f4		 cmp	 esi, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 957  :         if ( !p ) {

  000ab	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  000af	75 43		 jne	 SHORT $LN5@ParseDeep

; 958  :             DeleteNode( node );

  000b1	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  000ba	83 c4 04	 add	 esp, 4

; 959  :             if ( !_document->Error() ) {

  000bd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000c3	e8 00 00 00 00	 call	 ?Error@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::Error
  000c8	0f b6 c0	 movzx	 eax, al
  000cb	85 c0		 test	 eax, eax
  000cd	75 11		 jne	 SHORT $LN6@ParseDeep

; 960  :                 _document->SetError( XML_ERROR_PARSING, 0, 0 );

  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	6a 11		 push	 17			; 00000011H
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000db	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN6@ParseDeep:

; 961  :             }
; 962  :             break;

  000e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e7	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  000ea	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  000ef	e9 b1 01 00 00	 jmp	 $LN3@ParseDeep
$LN5@ParseDeep:

; 963  :         }
; 964  : 
; 965  :         XMLDeclaration* decl = node->ToDeclaration();

  000f4	8b 55 e8	 mov	 edx, DWORD PTR _node$7[ebp]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	8b f4		 mov	 esi, esp
  000fb	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  000fe	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00101	ff d2		 call	 edx
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	89 45 cc	 mov	 DWORD PTR _decl$5[ebp], eax

; 966  :         if ( decl ) {

  0010d	83 7d cc 00	 cmp	 DWORD PTR _decl$5[ebp], 0
  00111	74 4a		 je	 SHORT $LN7@ParseDeep

; 967  :                 // A declaration can only be the first child of a document.
; 968  :                 // Set error, if document already has children.
; 969  :                 if ( !_document->NoChildren() ) {

  00113	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00116	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00119	e8 00 00 00 00	 call	 ?NoChildren@XMLNode@tinyxml2@@QBE_NXZ ; tinyxml2::XMLNode::NoChildren
  0011e	0f b6 c8	 movzx	 ecx, al
  00121	85 c9		 test	 ecx, ecx
  00123	75 38		 jne	 SHORT $LN7@ParseDeep

; 970  :                         _document->SetError( XML_ERROR_PARSING_DECLARATION, decl->Value(), 0);

  00125	6a 00		 push	 0
  00127	8b 4d cc	 mov	 ecx, DWORD PTR _decl$5[ebp]
  0012a	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0012f	50		 push	 eax
  00130	6a 0d		 push	 13			; 0000000dH
  00132	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00135	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00138	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 971  :                         DeleteNode( decl );

  0013d	8b 45 cc	 mov	 eax, DWORD PTR _decl$5[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  00146	83 c4 04	 add	 esp, 4

; 972  :                         break;

  00149	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00150	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  00153	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  00158	e9 48 01 00 00	 jmp	 $LN3@ParseDeep
$LN7@ParseDeep:

; 973  :                 }
; 974  :         }
; 975  : 
; 976  :         XMLElement* ele = node->ToElement();

  0015d	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  00160	8b 11		 mov	 edx, DWORD PTR [ecx]
  00162	8b f4		 mov	 esi, esp
  00164	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  00167	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0016a	ff d0		 call	 eax
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	89 45 c8	 mov	 DWORD PTR _ele$4[ebp], eax

; 977  :         if ( ele ) {

  00176	83 7d c8 00	 cmp	 DWORD PTR _ele$4[ebp], 0
  0017a	0f 84 05 01 00
	00		 je	 $LN9@ParseDeep

; 978  :             // We read the end tag. Return it to the parent.
; 979  :             if ( ele->ClosingType() == XMLElement::CLOSING ) {

  00180	8b 4d c8	 mov	 ecx, DWORD PTR _ele$4[ebp]
  00183	e8 00 00 00 00	 call	 ?ClosingType@XMLElement@tinyxml2@@QBEHXZ ; tinyxml2::XMLElement::ClosingType
  00188	83 f8 02	 cmp	 eax, 2
  0018b	75 5a		 jne	 SHORT $LN10@ParseDeep

; 980  :                 if ( parentEnd ) {

  0018d	83 7d 0c 00	 cmp	 DWORD PTR _parentEnd$[ebp], 0
  00191	74 0f		 je	 SHORT $LN11@ParseDeep

; 981  :                     ele->_value.TransferTo( parentEnd );

  00193	8b 4d 0c	 mov	 ecx, DWORD PTR _parentEnd$[ebp]
  00196	51		 push	 ecx
  00197	8b 4d c8	 mov	 ecx, DWORD PTR _ele$4[ebp]
  0019a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0019d	e8 00 00 00 00	 call	 ?TransferTo@StrPair@tinyxml2@@QAEXPAV12@@Z ; tinyxml2::StrPair::TransferTo
$LN11@ParseDeep:

; 982  :                 }
; 983  :                 node->_memPool->SetTracked();   // created and then immediately deleted.

  001a2	8b 55 e8	 mov	 edx, DWORD PTR _node$7[ebp]
  001a5	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  001a8	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  001ab	8b 10		 mov	 edx, DWORD PTR [eax]
  001ad	8b f4		 mov	 esi, esp
  001af	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  001b2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001b5	ff d0		 call	 eax
  001b7	3b f4		 cmp	 esi, esp
  001b9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  :                 DeleteNode( node );

  001be	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  001c1	51		 push	 ecx
  001c2	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  001c7	83 c4 04	 add	 esp, 4

; 985  :                 return p;

  001ca	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  001cd	89 55 c0	 mov	 DWORD PTR $T2[ebp], edx
  001d0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d7	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  001da	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  001df	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
  001e2	e9 c0 00 00 00	 jmp	 $LN1@ParseDeep
$LN10@ParseDeep:

; 986  :             }
; 987  : 
; 988  :             // Handle an end tag returned to this level.
; 989  :             // And handle a bunch of annoying errors.
; 990  :             bool mismatch = false;

  001e7	c6 45 c7 00	 mov	 BYTE PTR _mismatch$3[ebp], 0

; 991  :             if ( endTag.Empty() ) {

  001eb	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  001ee	e8 00 00 00 00	 call	 ?Empty@StrPair@tinyxml2@@QBE_NXZ ; tinyxml2::StrPair::Empty
  001f3	0f b6 c0	 movzx	 eax, al
  001f6	85 c0		 test	 eax, eax
  001f8	74 12		 je	 SHORT $LN12@ParseDeep

; 992  :                 if ( ele->ClosingType() == XMLElement::OPEN ) {

  001fa	8b 4d c8	 mov	 ecx, DWORD PTR _ele$4[ebp]
  001fd	e8 00 00 00 00	 call	 ?ClosingType@XMLElement@tinyxml2@@QBEHXZ ; tinyxml2::XMLElement::ClosingType
  00202	85 c0		 test	 eax, eax
  00204	75 04		 jne	 SHORT $LN14@ParseDeep

; 993  :                     mismatch = true;

  00206	c6 45 c7 01	 mov	 BYTE PTR _mismatch$3[ebp], 1
$LN14@ParseDeep:

; 994  :                 }
; 995  :             }
; 996  :             else {

  0020a	eb 3c		 jmp	 SHORT $LN13@ParseDeep
$LN12@ParseDeep:

; 997  :                 if ( ele->ClosingType() != XMLElement::OPEN ) {

  0020c	8b 4d c8	 mov	 ecx, DWORD PTR _ele$4[ebp]
  0020f	e8 00 00 00 00	 call	 ?ClosingType@XMLElement@tinyxml2@@QBEHXZ ; tinyxml2::XMLElement::ClosingType
  00214	85 c0		 test	 eax, eax
  00216	74 06		 je	 SHORT $LN15@ParseDeep

; 998  :                     mismatch = true;

  00218	c6 45 c7 01	 mov	 BYTE PTR _mismatch$3[ebp], 1
  0021c	eb 2a		 jmp	 SHORT $LN13@ParseDeep
$LN15@ParseDeep:

; 999  :                 }
; 1000 :                 else if ( !XMLUtil::StringEqual( endTag.GetStr(), ele->Name() ) ) {

  0021e	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00223	8b 4d c8	 mov	 ecx, DWORD PTR _ele$4[ebp]
  00226	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0022b	50		 push	 eax
  0022c	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  0022f	e8 00 00 00 00	 call	 ?GetStr@StrPair@tinyxml2@@QAEPBDXZ ; tinyxml2::StrPair::GetStr
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023d	0f b6 c8	 movzx	 ecx, al
  00240	85 c9		 test	 ecx, ecx
  00242	75 04		 jne	 SHORT $LN13@ParseDeep

; 1001 :                     mismatch = true;

  00244	c6 45 c7 01	 mov	 BYTE PTR _mismatch$3[ebp], 1
$LN13@ParseDeep:

; 1002 :                 }
; 1003 :             }
; 1004 :             if ( mismatch ) {

  00248	0f b6 55 c7	 movzx	 edx, BYTE PTR _mismatch$3[ebp]
  0024c	85 d2		 test	 edx, edx
  0024e	74 35		 je	 SHORT $LN9@ParseDeep

; 1005 :                 _document->SetError( XML_ERROR_MISMATCHED_ELEMENT, ele->Name(), 0 );

  00250	6a 00		 push	 0
  00252	8b 4d c8	 mov	 ecx, DWORD PTR _ele$4[ebp]
  00255	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0025a	50		 push	 eax
  0025b	6a 10		 push	 16			; 00000010H
  0025d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00260	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00263	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1006 :                 DeleteNode( node );

  00268	8b 4d e8	 mov	 ecx, DWORD PTR _node$7[ebp]
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  00271	83 c4 04	 add	 esp, 4

; 1007 :                 break;

  00274	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0027b	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  0027e	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  00283	eb 20		 jmp	 SHORT $LN3@ParseDeep
$LN9@ParseDeep:

; 1008 :             }
; 1009 :         }
; 1010 :         InsertEndChild( node );

  00285	8b 55 e8	 mov	 edx, DWORD PTR _node$7[ebp]
  00288	52		 push	 edx
  00289	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0028c	e8 00 00 00 00	 call	 ?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertEndChild

; 1011 :     }

  00291	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00298	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  0029b	e8 00 00 00 00	 call	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
  002a0	e9 96 fd ff ff	 jmp	 $LN2@ParseDeep
$LN3@ParseDeep:

; 1012 :     return 0;

  002a5	33 c0		 xor	 eax, eax
$LN1@ParseDeep:

; 1013 : }

  002a7	52		 push	 edx
  002a8	8b cd		 mov	 ecx, ebp
  002aa	50		 push	 eax
  002ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@ParseDeep
  002b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002b6	58		 pop	 eax
  002b7	5a		 pop	 edx
  002b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002c2	59		 pop	 ecx
  002c3	5f		 pop	 edi
  002c4	5e		 pop	 esi
  002c5	83 c4 40	 add	 esp, 64			; 00000040H
  002c8	3b ec		 cmp	 ebp, esp
  002ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002cf	8b e5		 mov	 esp, ebp
  002d1	5d		 pop	 ebp
  002d2	c2 08 00	 ret	 8
  002d5	0f 1f 00	 npad	 3
$LN25@ParseDeep:
  002d8	02 00 00 00	 DD	 2
  002dc	00 00 00 00	 DD	 $LN24@ParseDeep
$LN24@ParseDeep:
  002e0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  002e4	04 00 00 00	 DD	 4
  002e8	00 00 00 00	 DD	 $LN21@ParseDeep
  002ec	d4 ff ff ff	 DD	 -44			; ffffffd4H
  002f0	0c 00 00 00	 DD	 12			; 0000000cH
  002f4	00 00 00 00	 DD	 $LN22@ParseDeep
$LN22@ParseDeep:
  002f8	65		 DB	 101			; 00000065H
  002f9	6e		 DB	 110			; 0000006eH
  002fa	64		 DB	 100			; 00000064H
  002fb	54		 DB	 84			; 00000054H
  002fc	61		 DB	 97			; 00000061H
  002fd	67		 DB	 103			; 00000067H
  002fe	00		 DB	 0
$LN21@ParseDeep:
  002ff	6e		 DB	 110			; 0000006eH
  00300	6f		 DB	 111			; 0000006fH
  00301	64		 DB	 100			; 00000064H
  00302	65		 DB	 101			; 00000065H
  00303	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _endTag$6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1StrPair@tinyxml2@@QAE@XZ ; tinyxml2::StrPair::~StrPair
__ehhandler$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLNode::ParseDeep
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_pool$ = -4						; size = 4
_node$ = 8						; size = 4
?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z PROC		; tinyxml2::XMLNode::DeleteNode

; 1016 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1017 :     if ( node == 0 ) {

  0000c	83 7d 08 00	 cmp	 DWORD PTR _node$[ebp], 0
  00010	75 02		 jne	 SHORT $LN2@DeleteNode

; 1018 :         return;

  00012	eb 3b		 jmp	 SHORT $LN1@DeleteNode
$LN2@DeleteNode:

; 1019 :     }
; 1020 :     MemPool* pool = node->_memPool;

  00014	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00017	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0001a	89 4d fc	 mov	 DWORD PTR _pool$[ebp], ecx

; 1021 :     node->~XMLNode();

  0001d	8b f4		 mov	 esi, esp
  0001f	6a 00		 push	 0
  00021	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  00024	8b 02		 mov	 eax, DWORD PTR [edx]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00029	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  0002c	ff d2		 call	 edx
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1022 :     pool->Free( node );

  00035	8b f4		 mov	 esi, esp
  00037	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _pool$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _pool$[ebp]
  00043	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00046	ff d0		 call	 eax
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@DeleteNode:

; 1023 : }

  0004f	5e		 pop	 esi
  00050	83 c4 04	 add	 esp, 4
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ENDP		; tinyxml2::XMLNode::DeleteNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_insertThis$ = 8					; size = 4
?InsertChildPreamble@XMLNode@tinyxml2@@ABEXPAV12@@Z PROC ; tinyxml2::XMLNode::InsertChildPreamble
; _this$ = ecx

; 1026 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1027 :     TIXMLASSERT( insertThis );

  0000f	83 7d 08 00	 cmp	 DWORD PTR _insertThis$[ebp], 0
  00013	75 01		 jne	 SHORT $LN2@InsertChil
  00015	cc		 int	 3
$LN2@InsertChil:

; 1028 :     TIXMLASSERT( insertThis->_document == _document );

  00016	8b 45 08	 mov	 eax, DWORD PTR _insertThis$[ebp]
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001f	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00022	74 01		 je	 SHORT $LN3@InsertChil
  00024	cc		 int	 3
$LN3@InsertChil:

; 1029 : 
; 1030 :     if ( insertThis->_parent )

  00025	8b 45 08	 mov	 eax, DWORD PTR _insertThis$[ebp]
  00028	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0002c	74 11		 je	 SHORT $LN4@InsertChil

; 1031 :         insertThis->_parent->Unlink( insertThis );

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _insertThis$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 08	 mov	 edx, DWORD PTR _insertThis$[ebp]
  00035	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00038	e8 00 00 00 00	 call	 ?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z ; tinyxml2::XMLNode::Unlink

; 1032 :     else

  0003d	eb 1c		 jmp	 SHORT $LN1@InsertChil
$LN4@InsertChil:

; 1033 :         insertThis->_memPool->SetTracked();

  0003f	8b 45 08	 mov	 eax, DWORD PTR _insertThis$[ebp]
  00042	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00045	8b 55 08	 mov	 edx, DWORD PTR _insertThis$[ebp]
  00048	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004a	8b f4		 mov	 esi, esp
  0004c	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  0004f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00052	ff d2		 call	 edx
  00054	3b f4		 cmp	 esi, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@InsertChil:

; 1034 : }

  0005b	5e		 pop	 esi
  0005c	83 c4 04	 add	 esp, 4
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?InsertChildPreamble@XMLNode@tinyxml2@@ABEXPAV12@@Z ENDP ; tinyxml2::XMLNode::InsertChildPreamble
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv129 = -16						; size = 4
_flags$1 = -12						; size = 4
_start$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLText@tinyxml2@@MAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLText::ParseDeep
; _this$ = ecx

; 1038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 :     const char* start = p;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax

; 1040 :     if ( this->CData() ) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?CData@XMLText@tinyxml2@@QBE_NXZ ; tinyxml2::XMLText::CData
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 3f		 je	 SHORT $LN2@ParseDeep

; 1041 :         p = _value.ParseText( p, "]]>", StrPair::NEEDS_NEWLINE_NORMALIZATION );

  0002f	6a 02		 push	 2
  00031	68 00 00 00 00	 push	 OFFSET $SG4294882682
  00036	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00039	52		 push	 edx
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00040	e8 00 00 00 00	 call	 ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
  00045	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1042 :         if ( !p ) {

  00048	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0004c	75 13		 jne	 SHORT $LN4@ParseDeep

; 1043 :             _document->SetError( XML_ERROR_PARSING_CDATA, start, 0 );

  0004e	6a 00		 push	 0
  00050	8b 45 f8	 mov	 eax, DWORD PTR _start$[ebp]
  00053	50		 push	 eax
  00054	6a 0b		 push	 11			; 0000000bH
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0005c	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN4@ParseDeep:

; 1044 :         }
; 1045 :         return p;

  00061	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00064	e9 94 00 00 00	 jmp	 $LN1@ParseDeep

; 1046 :     }
; 1047 :     else {

  00069	e9 8d 00 00 00	 jmp	 $LN3@ParseDeep
$LN2@ParseDeep:

; 1048 :         int flags = _document->ProcessEntities() ? StrPair::TEXT_ELEMENT : StrPair::TEXT_ELEMENT_LEAVE_ENTITIES;

  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00074	e8 00 00 00 00	 call	 ?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::ProcessEntities
  00079	0f b6 c0	 movzx	 eax, al
  0007c	85 c0		 test	 eax, eax
  0007e	74 09		 je	 SHORT $LN9@ParseDeep
  00080	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR tv129[ebp], 3
  00087	eb 07		 jmp	 SHORT $LN10@ParseDeep
$LN9@ParseDeep:
  00089	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR tv129[ebp], 2
$LN10@ParseDeep:
  00090	8b 4d f0	 mov	 ecx, DWORD PTR tv129[ebp]
  00093	89 4d f4	 mov	 DWORD PTR _flags$1[ebp], ecx

; 1049 :         if ( _document->WhitespaceMode() == COLLAPSE_WHITESPACE ) {

  00096	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0009c	e8 00 00 00 00	 call	 ?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ ; tinyxml2::XMLDocument::WhitespaceMode
  000a1	83 f8 01	 cmp	 eax, 1
  000a4	75 09		 jne	 SHORT $LN5@ParseDeep

; 1050 :             flags |= StrPair::NEEDS_WHITESPACE_COLLAPSING;

  000a6	8b 45 f4	 mov	 eax, DWORD PTR _flags$1[ebp]
  000a9	83 c8 04	 or	 eax, 4
  000ac	89 45 f4	 mov	 DWORD PTR _flags$1[ebp], eax
$LN5@ParseDeep:

; 1051 :         }
; 1052 : 
; 1053 :         p = _value.ParseText( p, "<", flags );

  000af	8b 4d f4	 mov	 ecx, DWORD PTR _flags$1[ebp]
  000b2	51		 push	 ecx
  000b3	68 00 00 00 00	 push	 OFFSET $SG4294882681
  000b8	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000bb	52		 push	 edx
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000c2	e8 00 00 00 00	 call	 ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
  000c7	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1054 :         if ( p && *p ) {

  000ca	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  000ce	74 12		 je	 SHORT $LN6@ParseDeep
  000d0	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000d3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000d6	85 c9		 test	 ecx, ecx
  000d8	74 08		 je	 SHORT $LN6@ParseDeep

; 1055 :             return p-1;

  000da	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000dd	83 e8 01	 sub	 eax, 1
  000e0	eb 1b		 jmp	 SHORT $LN1@ParseDeep
$LN6@ParseDeep:

; 1056 :         }
; 1057 :         if ( !p ) {

  000e2	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  000e6	75 13		 jne	 SHORT $LN3@ParseDeep

; 1058 :             _document->SetError( XML_ERROR_PARSING_TEXT, start, 0 );

  000e8	6a 00		 push	 0
  000ea	8b 55 f8	 mov	 edx, DWORD PTR _start$[ebp]
  000ed	52		 push	 edx
  000ee	6a 0a		 push	 10			; 0000000aH
  000f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN3@ParseDeep:

; 1059 :         }
; 1060 :     }
; 1061 :     return 0;

  000fb	33 c0		 xor	 eax, eax
$LN1@ParseDeep:

; 1062 : }

  000fd	83 c4 10	 add	 esp, 16			; 00000010H
  00100	3b ec		 cmp	 ebp, esp
  00102	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 08 00	 ret	 8
?ParseDeep@XMLText@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLText::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_text$ = -8						; size = 4
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLText::ShallowClone
; _this$ = ecx

; 1066 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1067 :     if ( !doc ) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _doc$[ebp], 0
  0001b	75 09		 jne	 SHORT $LN2@ShallowClo

; 1068 :         doc = _document;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	89 4d 08	 mov	 DWORD PTR _doc$[ebp], ecx
$LN2@ShallowClo:

; 1069 :     }
; 1070 :     XMLText* text = doc->NewText( Value() );	// fixme: this will always allocate memory. Intern?

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00032	e8 00 00 00 00	 call	 ?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ; tinyxml2::XMLDocument::NewText
  00037	89 45 f8	 mov	 DWORD PTR _text$[ebp], eax

; 1071 :     text->SetCData( this->CData() );

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?CData@XMLText@tinyxml2@@QBE_NXZ ; tinyxml2::XMLText::CData
  00042	0f b6 d0	 movzx	 edx, al
  00045	52		 push	 edx
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _text$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetCData@XMLText@tinyxml2@@QAEX_N@Z ; tinyxml2::XMLText::SetCData

; 1072 :     return text;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _text$[ebp]

; 1073 : }

  00051	83 c4 08	 add	 esp, 8
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLText::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv87 = -12						; size = 4
_text$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLText::ShallowEqual
; _this$ = ecx

; 1077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1078 :     const XMLText* text = compare->ToText();

  0001f	8b 45 08	 mov	 eax, DWORD PTR _compare$[ebp]
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	8b f4		 mov	 esi, esp
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _compare$[ebp]
  00029	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002c	ff d0		 call	 eax
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	89 45 f8	 mov	 DWORD PTR _text$[ebp], eax

; 1079 :     return ( text && XMLUtil::StringEqual( text->Value(), Value() ) );

  00038	83 7d f8 00	 cmp	 DWORD PTR _text$[ebp], 0
  0003c	74 2f		 je	 SHORT $LN3@ShallowEqu
  0003e	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _text$[ebp]
  0004f	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	85 c9		 test	 ecx, ecx
  00062	74 09		 je	 SHORT $LN3@ShallowEqu
  00064	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  0006b	eb 07		 jmp	 SHORT $LN4@ShallowEqu
$LN3@ShallowEqu:
  0006d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN4@ShallowEqu:
  00074	8a 45 f4	 mov	 al, BYTE PTR tv87[ebp]

; 1080 : }

  00077	5e		 pop	 esi
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLText::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC	; tinyxml2::XMLText::Accept
; _this$ = ecx

; 1084 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1085 :     TIXMLASSERT( visitor );

  0000f	83 7d 08 00	 cmp	 DWORD PTR _visitor$[ebp], 0
  00013	75 01		 jne	 SHORT $LN2@Accept
  00015	cc		 int	 3
$LN2@Accept:

; 1086 :     return visitor->Visit( *this );

  00016	8b f4		 mov	 esi, esp
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00024	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00027	ff d0		 call	 eax
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1087 : }

  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP	; tinyxml2::XMLText::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLComment::XMLComment
; _this$ = ecx

; 1093 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1092 : XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )

  0000e	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode

; 1093 : {

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7XMLComment@tinyxml2@@6B@

; 1094 : }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLComment::XMLComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLComment@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLComment@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLComment::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLComment@tinyxml2@@MAE@XZ ; tinyxml2::XMLComment::~XMLComment
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 2c		 push	 44			; 0000002cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLComment@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLComment::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLComment@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLComment::~XMLComment
; _this$ = ecx

; 1098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLComment@tinyxml2@@6B@

; 1099 : }

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1XMLComment@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLComment::~XMLComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_start$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLComment@tinyxml2@@MAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLComment::ParseDeep
; _this$ = ecx

; 1103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1104 :     // Comment parses as text.
; 1105 :     const char* start = p;

  00017	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax

; 1106 :     p = _value.ParseText( p, "-->", StrPair::COMMENT );

  0001d	6a 02		 push	 2
  0001f	68 00 00 00 00	 push	 OFFSET $SG4294882680
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002e	e8 00 00 00 00	 call	 ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
  00033	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1107 :     if ( p == 0 ) {

  00036	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0003a	75 13		 jne	 SHORT $LN2@ParseDeep

; 1108 :         _document->SetError( XML_ERROR_PARSING_COMMENT, start, 0 );

  0003c	6a 00		 push	 0
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _start$[ebp]
  00041	52		 push	 edx
  00042	6a 0c		 push	 12			; 0000000cH
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN2@ParseDeep:

; 1109 :     }
; 1110 :     return p;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 1111 : }

  00052	83 c4 08	 add	 esp, 8
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?ParseDeep@XMLComment@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLComment::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_comment$ = -8						; size = 4
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLComment::ShallowClone
; _this$ = ecx

; 1115 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1116 :     if ( !doc ) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _doc$[ebp], 0
  0001b	75 09		 jne	 SHORT $LN2@ShallowClo

; 1117 :         doc = _document;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	89 4d 08	 mov	 DWORD PTR _doc$[ebp], ecx
$LN2@ShallowClo:

; 1118 :     }
; 1119 :     XMLComment* comment = doc->NewComment( Value() );	// fixme: this will always allocate memory. Intern?

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00032	e8 00 00 00 00	 call	 ?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z ; tinyxml2::XMLDocument::NewComment
  00037	89 45 f8	 mov	 DWORD PTR _comment$[ebp], eax

; 1120 :     return comment;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _comment$[ebp]

; 1121 : }

  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLComment::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv88 = -12						; size = 4
_comment$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLComment::ShallowEqual
; _this$ = ecx

; 1125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1126 :     TIXMLASSERT( compare );

  0001f	83 7d 08 00	 cmp	 DWORD PTR _compare$[ebp], 0
  00023	75 01		 jne	 SHORT $LN2@ShallowEqu
  00025	cc		 int	 3
$LN2@ShallowEqu:

; 1127 :     const XMLComment* comment = compare->ToComment();

  00026	8b 45 08	 mov	 eax, DWORD PTR _compare$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	8b f4		 mov	 esi, esp
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _compare$[ebp]
  00030	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00033	ff d0		 call	 eax
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _comment$[ebp], eax

; 1128 :     return ( comment && XMLUtil::StringEqual( comment->Value(), Value() ));

  0003f	83 7d f8 00	 cmp	 DWORD PTR _comment$[ebp], 0
  00043	74 2f		 je	 SHORT $LN4@ShallowEqu
  00045	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00052	50		 push	 eax
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _comment$[ebp]
  00056	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	74 09		 je	 SHORT $LN4@ShallowEqu
  0006b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00072	eb 07		 jmp	 SHORT $LN5@ShallowEqu
$LN4@ShallowEqu:
  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN5@ShallowEqu:
  0007b	8a 45 f4	 mov	 al, BYTE PTR tv88[ebp]

; 1129 : }

  0007e	5e		 pop	 esi
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLComment::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLComment::Accept
; _this$ = ecx

; 1133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1134 :     TIXMLASSERT( visitor );

  0000f	83 7d 08 00	 cmp	 DWORD PTR _visitor$[ebp], 0
  00013	75 01		 jne	 SHORT $LN2@Accept
  00015	cc		 int	 3
$LN2@Accept:

; 1135 :     return visitor->Visit( *this );

  00016	8b f4		 mov	 esi, esp
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00024	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00027	ff d0		 call	 eax
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1136 : }

  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLComment::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC ; tinyxml2::XMLDeclaration::XMLDeclaration
; _this$ = ecx

; 1142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1141 : XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )

  0000e	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode

; 1142 : {

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7XMLDeclaration@tinyxml2@@6B@

; 1143 : }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP ; tinyxml2::XMLDeclaration::XMLDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z PROC		; tinyxml2::XMLDeclaration::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLDeclaration@tinyxml2@@MAE@XZ ; tinyxml2::XMLDeclaration::~XMLDeclaration
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 2c		 push	 44			; 0000002cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z ENDP		; tinyxml2::XMLDeclaration::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLDeclaration@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLDeclaration::~XMLDeclaration
; _this$ = ecx

; 1147 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLDeclaration@tinyxml2@@6B@

; 1148 :     //printf( "~XMLDeclaration\n" );
; 1149 : }

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1XMLDeclaration@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLDeclaration::~XMLDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_start$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLDeclaration@tinyxml2@@MAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLDeclaration::ParseDeep
; _this$ = ecx

; 1153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1154 :     // Declaration parses as text.
; 1155 :     const char* start = p;

  00017	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax

; 1156 :     p = _value.ParseText( p, "?>", StrPair::NEEDS_NEWLINE_NORMALIZATION );

  0001d	6a 02		 push	 2
  0001f	68 00 00 00 00	 push	 OFFSET $SG4294882679
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002e	e8 00 00 00 00	 call	 ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
  00033	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1157 :     if ( p == 0 ) {

  00036	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0003a	75 13		 jne	 SHORT $LN2@ParseDeep

; 1158 :         _document->SetError( XML_ERROR_PARSING_DECLARATION, start, 0 );

  0003c	6a 00		 push	 0
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _start$[ebp]
  00041	52		 push	 edx
  00042	6a 0d		 push	 13			; 0000000dH
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN2@ParseDeep:

; 1159 :     }
; 1160 :     return p;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 1161 : }

  00052	83 c4 08	 add	 esp, 8
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?ParseDeep@XMLDeclaration@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLDeclaration::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_dec$ = -8						; size = 4
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLDeclaration::ShallowClone
; _this$ = ecx

; 1165 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1166 :     if ( !doc ) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _doc$[ebp], 0
  0001b	75 09		 jne	 SHORT $LN2@ShallowClo

; 1167 :         doc = _document;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	89 4d 08	 mov	 DWORD PTR _doc$[ebp], ecx
$LN2@ShallowClo:

; 1168 :     }
; 1169 :     XMLDeclaration* dec = doc->NewDeclaration( Value() );	// fixme: this will always allocate memory. Intern?

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00032	e8 00 00 00 00	 call	 ?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z ; tinyxml2::XMLDocument::NewDeclaration
  00037	89 45 f8	 mov	 DWORD PTR _dec$[ebp], eax

; 1170 :     return dec;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _dec$[ebp]

; 1171 : }

  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLDeclaration::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv88 = -12						; size = 4
_declaration$ = -8					; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLDeclaration::ShallowEqual
; _this$ = ecx

; 1175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1176 :     TIXMLASSERT( compare );

  0001f	83 7d 08 00	 cmp	 DWORD PTR _compare$[ebp], 0
  00023	75 01		 jne	 SHORT $LN2@ShallowEqu
  00025	cc		 int	 3
$LN2@ShallowEqu:

; 1177 :     const XMLDeclaration* declaration = compare->ToDeclaration();

  00026	8b 45 08	 mov	 eax, DWORD PTR _compare$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	8b f4		 mov	 esi, esp
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _compare$[ebp]
  00030	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00033	ff d0		 call	 eax
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _declaration$[ebp], eax

; 1178 :     return ( declaration && XMLUtil::StringEqual( declaration->Value(), Value() ));

  0003f	83 7d f8 00	 cmp	 DWORD PTR _declaration$[ebp], 0
  00043	74 2f		 je	 SHORT $LN4@ShallowEqu
  00045	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00052	50		 push	 eax
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _declaration$[ebp]
  00056	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	74 09		 je	 SHORT $LN4@ShallowEqu
  0006b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00072	eb 07		 jmp	 SHORT $LN5@ShallowEqu
$LN4@ShallowEqu:
  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN5@ShallowEqu:
  0007b	8a 45 f4	 mov	 al, BYTE PTR tv88[ebp]

; 1179 : }

  0007e	5e		 pop	 esi
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLDeclaration::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLDeclaration::Accept
; _this$ = ecx

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1185 :     TIXMLASSERT( visitor );

  0000f	83 7d 08 00	 cmp	 DWORD PTR _visitor$[ebp], 0
  00013	75 01		 jne	 SHORT $LN2@Accept
  00015	cc		 int	 3
$LN2@Accept:

; 1186 :     return visitor->Visit( *this );

  00016	8b f4		 mov	 esi, esp
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00024	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00027	ff d0		 call	 eax
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1187 : }

  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLDeclaration::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLUnknown::XMLUnknown
; _this$ = ecx

; 1192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1191 : XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )

  0000e	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode

; 1192 : {

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7XMLUnknown@tinyxml2@@6B@

; 1193 : }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLUnknown::XMLUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLUnknown@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLUnknown@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLUnknown::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLUnknown@tinyxml2@@MAE@XZ ; tinyxml2::XMLUnknown::~XMLUnknown
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 2c		 push	 44			; 0000002cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLUnknown@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLUnknown::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1XMLUnknown@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLUnknown::~XMLUnknown
; _this$ = ecx

; 1197 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLUnknown@tinyxml2@@6B@

; 1198 : }

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1XMLUnknown@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLUnknown::~XMLUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_start$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLUnknown@tinyxml2@@MAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLUnknown::ParseDeep
; _this$ = ecx

; 1202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1203 :     // Unknown parses as text.
; 1204 :     const char* start = p;

  00017	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _start$[ebp], eax

; 1205 : 
; 1206 :     p = _value.ParseText( p, ">", StrPair::NEEDS_NEWLINE_NORMALIZATION );

  0001d	6a 02		 push	 2
  0001f	68 00 00 00 00	 push	 OFFSET $SG4294882678
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002e	e8 00 00 00 00	 call	 ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
  00033	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1207 :     if ( !p ) {

  00036	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0003a	75 13		 jne	 SHORT $LN2@ParseDeep

; 1208 :         _document->SetError( XML_ERROR_PARSING_UNKNOWN, start, 0 );

  0003c	6a 00		 push	 0
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _start$[ebp]
  00041	52		 push	 edx
  00042	6a 0e		 push	 14			; 0000000eH
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN2@ParseDeep:

; 1209 :     }
; 1210 :     return p;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 1211 : }

  00052	83 c4 08	 add	 esp, 8
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?ParseDeep@XMLUnknown@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLUnknown::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_text$ = -8						; size = 4
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLUnknown::ShallowClone
; _this$ = ecx

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1216 :     if ( !doc ) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _doc$[ebp], 0
  0001b	75 09		 jne	 SHORT $LN2@ShallowClo

; 1217 :         doc = _document;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	89 4d 08	 mov	 DWORD PTR _doc$[ebp], ecx
$LN2@ShallowClo:

; 1218 :     }
; 1219 :     XMLUnknown* text = doc->NewUnknown( Value() );	// fixme: this will always allocate memory. Intern?

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00032	e8 00 00 00 00	 call	 ?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z ; tinyxml2::XMLDocument::NewUnknown
  00037	89 45 f8	 mov	 DWORD PTR _text$[ebp], eax

; 1220 :     return text;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _text$[ebp]

; 1221 : }

  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLUnknown::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv88 = -12						; size = 4
_unknown$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLUnknown::ShallowEqual
; _this$ = ecx

; 1225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1226 :     TIXMLASSERT( compare );

  0001f	83 7d 08 00	 cmp	 DWORD PTR _compare$[ebp], 0
  00023	75 01		 jne	 SHORT $LN2@ShallowEqu
  00025	cc		 int	 3
$LN2@ShallowEqu:

; 1227 :     const XMLUnknown* unknown = compare->ToUnknown();

  00026	8b 45 08	 mov	 eax, DWORD PTR _compare$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	8b f4		 mov	 esi, esp
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _compare$[ebp]
  00030	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00033	ff d0		 call	 eax
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _unknown$[ebp], eax

; 1228 :     return ( unknown && XMLUtil::StringEqual( unknown->Value(), Value() ));

  0003f	83 7d f8 00	 cmp	 DWORD PTR _unknown$[ebp], 0
  00043	74 2f		 je	 SHORT $LN4@ShallowEqu
  00045	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00052	50		 push	 eax
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _unknown$[ebp]
  00056	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	74 09		 je	 SHORT $LN4@ShallowEqu
  0006b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00072	eb 07		 jmp	 SHORT $LN5@ShallowEqu
$LN4@ShallowEqu:
  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN5@ShallowEqu:
  0007b	8a 45 f4	 mov	 al, BYTE PTR tv88[ebp]

; 1229 : }

  0007e	5e		 pop	 esi
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLUnknown::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLUnknown::Accept
; _this$ = ecx

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1234 :     TIXMLASSERT( visitor );

  0000f	83 7d 08 00	 cmp	 DWORD PTR _visitor$[ebp], 0
  00013	75 01		 jne	 SHORT $LN2@Accept
  00015	cc		 int	 3
$LN2@Accept:

; 1235 :     return visitor->Visit( *this );

  00016	8b f4		 mov	 esi, esp
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00024	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00027	ff d0		 call	 eax
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1236 : }

  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLUnknown::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@XMLAttribute@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLAttribute::Name
; _this$ = ecx

; 1241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1242 :     return _name.GetStr();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ?GetStr@StrPair@tinyxml2@@QAEPBDXZ ; tinyxml2::StrPair::GetStr

; 1243 : }

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLAttribute::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Value@XMLAttribute@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLAttribute::Value
; _this$ = ecx

; 1246 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1247 :     return _value.GetStr();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 10	 add	 ecx, 16			; 00000010H
  00014	e8 00 00 00 00	 call	 ?GetStr@StrPair@tinyxml2@@QAEPBDXZ ; tinyxml2::StrPair::GetStr

; 1248 : }

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLAttribute::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv88 = -20						; size = 4
_endTag$ = -12						; size = 2
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_processEntities$ = 12					; size = 1
?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z PROC	; tinyxml2::XMLAttribute::ParseDeep
; _this$ = ecx

; 1251 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1252 :     // Parse using the name rules: bug fix, was using ParseText before
; 1253 :     p = _name.ParseName( p );

  0001d	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 04	 add	 ecx, 4
  00027	e8 00 00 00 00	 call	 ?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z ; tinyxml2::StrPair::ParseName
  0002c	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1254 :     if ( !p || !*p ) {

  0002f	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00033	74 0a		 je	 SHORT $LN3@ParseDeep
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00038	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0003b	85 d2		 test	 edx, edx
  0003d	75 07		 jne	 SHORT $LN2@ParseDeep
$LN3@ParseDeep:

; 1255 :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 9a 00 00 00	 jmp	 $LN1@ParseDeep
$LN2@ParseDeep:

; 1256 :     }
; 1257 : 
; 1258 :     // Skip white space before =
; 1259 :     p = XMLUtil::SkipWhiteSpace( p );

  00046	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  0004f	83 c4 04	 add	 esp, 4
  00052	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1260 :     if ( *p != '=' ) {

  00055	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00058	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0005b	83 fa 3d	 cmp	 edx, 61			; 0000003dH
  0005e	74 04		 je	 SHORT $LN4@ParseDeep

; 1261 :         return 0;

  00060	33 c0		 xor	 eax, eax
  00062	eb 7c		 jmp	 SHORT $LN1@ParseDeep
$LN4@ParseDeep:

; 1262 :     }
; 1263 : 
; 1264 :     ++p;	// move up to opening quote

  00064	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1265 :     p = XMLUtil::SkipWhiteSpace( p );

  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  00076	83 c4 04	 add	 esp, 4
  00079	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1266 :     if ( *p != '\"' && *p != '\'' ) {

  0007c	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0007f	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00082	83 f8 22	 cmp	 eax, 34			; 00000022H
  00085	74 0f		 je	 SHORT $LN5@ParseDeep
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0008a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0008d	83 fa 27	 cmp	 edx, 39			; 00000027H
  00090	74 04		 je	 SHORT $LN5@ParseDeep

; 1267 :         return 0;

  00092	33 c0		 xor	 eax, eax
  00094	eb 4a		 jmp	 SHORT $LN1@ParseDeep
$LN5@ParseDeep:

; 1268 :     }
; 1269 : 
; 1270 :     char endTag[2] = { *p, 0 };

  00096	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00099	8a 08		 mov	 cl, BYTE PTR [eax]
  0009b	88 4d f4	 mov	 BYTE PTR _endTag$[ebp], cl
  0009e	c6 45 f5 00	 mov	 BYTE PTR _endTag$[ebp+1], 0

; 1271 :     ++p;	// move past opening quote

  000a2	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  000a5	83 c2 01	 add	 edx, 1
  000a8	89 55 08	 mov	 DWORD PTR _p$[ebp], edx

; 1272 : 
; 1273 :     p = _value.ParseText( p, endTag, processEntities ? StrPair::ATTRIBUTE_VALUE : StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES );

  000ab	0f b6 45 0c	 movzx	 eax, BYTE PTR _processEntities$[ebp]
  000af	85 c0		 test	 eax, eax
  000b1	74 09		 je	 SHORT $LN7@ParseDeep
  000b3	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR tv88[ebp], 3
  000ba	eb 07		 jmp	 SHORT $LN8@ParseDeep
$LN7@ParseDeep:
  000bc	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR tv88[ebp], 2
$LN8@ParseDeep:
  000c3	8b 4d ec	 mov	 ecx, DWORD PTR tv88[ebp]
  000c6	51		 push	 ecx
  000c7	8d 55 f4	 lea	 edx, DWORD PTR _endTag$[ebp]
  000ca	52		 push	 edx
  000cb	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	83 c1 10	 add	 ecx, 16			; 00000010H
  000d5	e8 00 00 00 00	 call	 ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
  000da	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1274 :     return p;

  000dd	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
$LN1@ParseDeep:

; 1275 : }

  000e0	52		 push	 edx
  000e1	8b cd		 mov	 ecx, ebp
  000e3	50		 push	 eax
  000e4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@ParseDeep
  000ea	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ef	58		 pop	 eax
  000f0	5a		 pop	 edx
  000f1	83 c4 14	 add	 esp, 20			; 00000014H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 08 00	 ret	 8
  00101	0f 1f 00	 npad	 3
$LN11@ParseDeep:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN10@ParseDeep
$LN10@ParseDeep:
  0010c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00110	02 00 00 00	 DD	 2
  00114	00 00 00 00	 DD	 $LN9@ParseDeep
$LN9@ParseDeep:
  00118	65		 DB	 101			; 00000065H
  00119	6e		 DB	 110			; 0000006eH
  0011a	64		 DB	 100			; 00000064H
  0011b	54		 DB	 84			; 00000054H
  0011c	61		 DB	 97			; 00000061H
  0011d	67		 DB	 103			; 00000067H
  0011e	00		 DB	 0
?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z ENDP	; tinyxml2::XMLAttribute::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z PROC		; tinyxml2::XMLAttribute::SetName
; _this$ = ecx

; 1279 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1280 :     _name.SetStr( n );

  0000e	6a 00		 push	 0
  00010	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 04	 add	 ecx, 4
  0001a	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1281 : }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z ENDP		; tinyxml2::XMLAttribute::SetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z PROC ; tinyxml2::XMLAttribute::QueryIntValue
; _this$ = ecx

; 1285 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1286 :     if ( XMLUtil::ToInt( Value(), value )) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z ; tinyxml2::XMLUtil::ToInt
  00020	83 c4 08	 add	 esp, 8
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	74 04		 je	 SHORT $LN2@QueryIntVa

; 1287 :         return XML_NO_ERROR;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 05		 jmp	 SHORT $LN1@QueryIntVa
$LN2@QueryIntVa:

; 1288 :     }
; 1289 :     return XML_WRONG_ATTRIBUTE_TYPE;

  0002e	b8 02 00 00 00	 mov	 eax, 2
$LN1@QueryIntVa:

; 1290 : }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ENDP ; tinyxml2::XMLAttribute::QueryIntValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z PROC ; tinyxml2::XMLAttribute::QueryUnsignedValue
; _this$ = ecx

; 1294 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1295 :     if ( XMLUtil::ToUnsigned( Value(), value )) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z ; tinyxml2::XMLUtil::ToUnsigned
  00020	83 c4 08	 add	 esp, 8
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	74 04		 je	 SHORT $LN2@QueryUnsig

; 1296 :         return XML_NO_ERROR;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 05		 jmp	 SHORT $LN1@QueryUnsig
$LN2@QueryUnsig:

; 1297 :     }
; 1298 :     return XML_WRONG_ATTRIBUTE_TYPE;

  0002e	b8 02 00 00 00	 mov	 eax, 2
$LN1@QueryUnsig:

; 1299 : }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ENDP ; tinyxml2::XMLAttribute::QueryUnsignedValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z PROC ; tinyxml2::XMLAttribute::QueryBoolValue
; _this$ = ecx

; 1303 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1304 :     if ( XMLUtil::ToBool( Value(), value )) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z ; tinyxml2::XMLUtil::ToBool
  00020	83 c4 08	 add	 esp, 8
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	74 04		 je	 SHORT $LN2@QueryBoolV

; 1305 :         return XML_NO_ERROR;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 05		 jmp	 SHORT $LN1@QueryBoolV
$LN2@QueryBoolV:

; 1306 :     }
; 1307 :     return XML_WRONG_ATTRIBUTE_TYPE;

  0002e	b8 02 00 00 00	 mov	 eax, 2
$LN1@QueryBoolV:

; 1308 : }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ENDP ; tinyxml2::XMLAttribute::QueryBoolValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z PROC ; tinyxml2::XMLAttribute::QueryFloatValue
; _this$ = ecx

; 1312 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1313 :     if ( XMLUtil::ToFloat( Value(), value )) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z ; tinyxml2::XMLUtil::ToFloat
  00020	83 c4 08	 add	 esp, 8
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	74 04		 je	 SHORT $LN2@QueryFloat

; 1314 :         return XML_NO_ERROR;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 05		 jmp	 SHORT $LN1@QueryFloat
$LN2@QueryFloat:

; 1315 :     }
; 1316 :     return XML_WRONG_ATTRIBUTE_TYPE;

  0002e	b8 02 00 00 00	 mov	 eax, 2
$LN1@QueryFloat:

; 1317 : }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ENDP ; tinyxml2::XMLAttribute::QueryFloatValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z PROC ; tinyxml2::XMLAttribute::QueryDoubleValue
; _this$ = ecx

; 1321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1322 :     if ( XMLUtil::ToDouble( Value(), value )) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z ; tinyxml2::XMLUtil::ToDouble
  00020	83 c4 08	 add	 esp, 8
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	74 04		 je	 SHORT $LN2@QueryDoubl

; 1323 :         return XML_NO_ERROR;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 05		 jmp	 SHORT $LN1@QueryDoubl
$LN2@QueryDoubl:

; 1324 :     }
; 1325 :     return XML_WRONG_ATTRIBUTE_TYPE;

  0002e	b8 02 00 00 00	 mov	 eax, 2
$LN1@QueryDoubl:

; 1326 : }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ENDP ; tinyxml2::XMLAttribute::QueryDoubleValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLAttribute::SetAttribute
; _this$ = ecx

; 1330 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1331 :     _value.SetStr( v );

  0000e	6a 00		 push	 0
  00010	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 10	 add	 ecx, 16			; 00000010H
  0001a	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1332 : }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z PROC	; tinyxml2::XMLAttribute::SetAttribute
; _this$ = ecx

; 1336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1337 :     char buf[BUF_SIZE];
; 1338 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1339 :     _value.SetStr( buf );

  00043	6a 00		 push	 0
  00045	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004b	52		 push	 edx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 10	 add	 ecx, 16			; 00000010H
  00052	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1340 : }

  00057	52		 push	 edx
  00058	8b cd		 mov	 ecx, ebp
  0005a	50		 push	 eax
  0005b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetAttribu
  00061	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00066	58		 pop	 eax
  00067	5a		 pop	 edx
  00068	5f		 pop	 edi
  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	33 cd		 xor	 ecx, ebp
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
  00086	66 90		 npad	 2
$LN5@SetAttribu:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@SetAttribu
$LN4@SetAttribu:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@SetAttribu
$LN3@SetAttribu:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z PROC	; tinyxml2::XMLAttribute::SetAttribute
; _this$ = ecx

; 1344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1345 :     char buf[BUF_SIZE];
; 1346 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1347 :     _value.SetStr( buf );

  00043	6a 00		 push	 0
  00045	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004b	52		 push	 edx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 10	 add	 ecx, 16			; 00000010H
  00052	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1348 : }

  00057	52		 push	 edx
  00058	8b cd		 mov	 ecx, ebp
  0005a	50		 push	 eax
  0005b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetAttribu
  00061	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00066	58		 pop	 eax
  00067	5a		 pop	 edx
  00068	5f		 pop	 edi
  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	33 cd		 xor	 ecx, ebp
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
  00086	66 90		 npad	 2
$LN5@SetAttribu:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@SetAttribu
$LN4@SetAttribu:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@SetAttribu
$LN3@SetAttribu:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 1
?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z PROC	; tinyxml2::XMLAttribute::SetAttribute
; _this$ = ecx

; 1352 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1353 :     char buf[BUF_SIZE];
; 1354 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _v$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z ; tinyxml2::XMLUtil::ToStr
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1355 :     _value.SetStr( buf );

  00044	6a 00		 push	 0
  00046	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004c	52		 push	 edx
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1356 : }

  00058	52		 push	 edx
  00059	8b cd		 mov	 ecx, ebp
  0005b	50		 push	 eax
  0005c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetAttribu
  00062	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00067	58		 pop	 eax
  00068	5a		 pop	 edx
  00069	5f		 pop	 edi
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
  00087	90		 npad	 1
$LN5@SetAttribu:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@SetAttribu
$LN4@SetAttribu:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@SetAttribu
$LN3@SetAttribu:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 8
?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z PROC	; tinyxml2::XMLAttribute::SetAttribute
; _this$ = ecx

; 1359 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1360 :     char buf[BUF_SIZE];
; 1361 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	83 ec 08	 sub	 esp, 8
  0003a	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _v$[ebp]
  0003f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z ; tinyxml2::XMLUtil::ToStr
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 1362 :     _value.SetStr( buf );

  0004c	6a 00		 push	 0
  0004e	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 10	 add	 ecx, 16			; 00000010H
  0005b	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1363 : }

  00060	52		 push	 edx
  00061	8b cd		 mov	 ecx, ebp
  00063	50		 push	 eax
  00064	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetAttribu
  0006a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006f	58		 pop	 eax
  00070	5a		 pop	 edx
  00071	5f		 pop	 edi
  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
  0008f	90		 npad	 1
$LN5@SetAttribu:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@SetAttribu
$LN4@SetAttribu:
  00098	2c ff ff ff	 DD	 -212			; ffffff2cH
  0009c	c8 00 00 00	 DD	 200			; 000000c8H
  000a0	00 00 00 00	 DD	 $LN3@SetAttribu
$LN3@SetAttribu:
  000a4	62		 DB	 98			; 00000062H
  000a5	75		 DB	 117			; 00000075H
  000a6	66		 DB	 102			; 00000066H
  000a7	00		 DB	 0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z PROC	; tinyxml2::XMLAttribute::SetAttribute
; _this$ = ecx

; 1366 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1367 :     char buf[BUF_SIZE];
; 1368 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	51		 push	 ecx
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _v$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z ; tinyxml2::XMLUtil::ToStr
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1369 :     _value.SetStr( buf );

  0004a	6a 00		 push	 0
  0004c	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00052	51		 push	 ecx
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 10	 add	 ecx, 16			; 00000010H
  00059	e8 00 00 00 00	 call	 ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ; tinyxml2::StrPair::SetStr

; 1370 : }

  0005e	52		 push	 edx
  0005f	8b cd		 mov	 ecx, ebp
  00061	50		 push	 eax
  00062	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetAttribu
  00068	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006d	58		 pop	 eax
  0006e	5a		 pop	 edx
  0006f	5f		 pop	 edi
  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
  0008d	0f 1f 00	 npad	 3
$LN5@SetAttribu:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@SetAttribu
$LN4@SetAttribu:
  00098	2c ff ff ff	 DD	 -212			; ffffff2cH
  0009c	c8 00 00 00	 DD	 200			; 000000c8H
  000a0	00 00 00 00	 DD	 $LN3@SetAttribu
$LN3@SetAttribu:
  000a4	62		 DB	 98			; 00000062H
  000a5	75		 DB	 117			; 00000075H
  000a6	66		 DB	 102			; 00000066H
  000a7	00		 DB	 0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLElement::XMLElement
; _this$ = ecx

; 1377 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1374 : XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),

  0000e	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode

; 1377 : {

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7XMLElement@tinyxml2@@6B@

; 1375 :     _closingType( 0 ),

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 1376 :     _rootAttribute( 0 )

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 1378 : }

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLElement::XMLElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLElement@tinyxml2@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLElement@tinyxml2@@EAEPAXI@Z PROC			; tinyxml2::XMLElement::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLElement@tinyxml2@@EAE@XZ ; tinyxml2::XMLElement::~XMLElement
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 34		 push	 52			; 00000034H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GXMLElement@tinyxml2@@EAEPAXI@Z ENDP			; tinyxml2::XMLElement::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_next$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLElement@tinyxml2@@EAE@XZ PROC			; tinyxml2::XMLElement::~XMLElement
; _this$ = ecx

; 1382 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1XMLElement@tinyxml2@@EAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLElement@tinyxml2@@6B@
$LN2@XMLElement:

; 1383 :     while( _rootAttribute ) {

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  00046	74 26		 je	 SHORT $LN1@XMLElement

; 1384 :         XMLAttribute* next = _rootAttribute->_next;

  00048	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0004e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00051	89 4d ec	 mov	 DWORD PTR _next$2[ebp], ecx

; 1385 :         DeleteAttribute( _rootAttribute );

  00054	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
  00060	83 c4 04	 add	 esp, 4

; 1386 :         _rootAttribute = next;

  00063	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 55 ec	 mov	 edx, DWORD PTR _next$2[ebp]
  00069	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 1387 :     }

  0006c	eb d1		 jmp	 SHORT $LN2@XMLElement
$LN1@XMLElement:

; 1388 : }

  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	83 c4 14	 add	 esp, 20			; 00000014H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1XMLElement@tinyxml2@@EAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1XMLElement@tinyxml2@@EAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1XMLElement@tinyxml2@@EAE@XZ ENDP			; tinyxml2::XMLElement::~XMLElement
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_a$1 = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z PROC ; tinyxml2::XMLElement::FindAttribute
; _this$ = ecx

; 1392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1393 :     for( XMLAttribute* a = _rootAttribute; a; a = a->_next ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0001d	89 4d f8	 mov	 DWORD PTR _a$1[ebp], ecx
  00020	eb 09		 jmp	 SHORT $LN4@FindAttrib
$LN2@FindAttrib:
  00022	8b 55 f8	 mov	 edx, DWORD PTR _a$1[ebp]
  00025	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00028	89 45 f8	 mov	 DWORD PTR _a$1[ebp], eax
$LN4@FindAttrib:
  0002b	83 7d f8 00	 cmp	 DWORD PTR _a$1[ebp], 0
  0002f	74 28		 je	 SHORT $LN3@FindAttrib

; 1394 :         if ( XMLUtil::StringEqual( a->Name(), name ) ) {

  00031	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00039	51		 push	 ecx
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _a$1[ebp]
  0003d	e8 00 00 00 00	 call	 ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Name
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	0f b6 d0	 movzx	 edx, al
  0004e	85 d2		 test	 edx, edx
  00050	74 05		 je	 SHORT $LN5@FindAttrib

; 1395 :             return a;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _a$1[ebp]
  00055	eb 04		 jmp	 SHORT $LN1@FindAttrib
$LN5@FindAttrib:

; 1396 :         }
; 1397 :     }

  00057	eb c9		 jmp	 SHORT $LN2@FindAttrib
$LN3@FindAttrib:

; 1398 :     return 0;

  00059	33 c0		 xor	 eax, eax
$LN1@FindAttrib:

; 1399 : }

  0005b	83 c4 08	 add	 esp, 8
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z ENDP ; tinyxml2::XMLElement::FindAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_theText$1 = -8						; size = 4
_this$ = -4						; size = 4
_inText$ = 8						; size = 4
?SetText@XMLElement@tinyxml2@@QAEXPBD@Z PROC		; tinyxml2::XMLElement::SetText
; _this$ = ecx

; 1425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1426 : 	if ( FirstChild() && FirstChild()->ToText() )

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ; tinyxml2::XMLNode::FirstChild
  00027	85 c0		 test	 eax, eax
  00029	74 3c		 je	 SHORT $LN2@SetText
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ; tinyxml2::XMLNode::FirstChild
  00033	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv78[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR tv78[ebp]
  00040	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00043	ff d0		 call	 eax
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 17		 je	 SHORT $LN2@SetText

; 1427 : 		FirstChild()->SetValue( inText );

  00050	6a 00		 push	 0
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _inText$[ebp]
  00055	51		 push	 ecx
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ; tinyxml2::XMLNode::FirstChild
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLNode::SetValue

; 1428 : 	else {

  00065	eb 22		 jmp	 SHORT $LN1@SetText
$LN2@SetText:

; 1429 : 		XMLText*	theText = GetDocument()->NewText( inText );

  00067	8b 55 08	 mov	 edx, DWORD PTR _inText$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ ; tinyxml2::XMLNode::GetDocument
  00073	8b c8		 mov	 ecx, eax
  00075	e8 00 00 00 00	 call	 ?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ; tinyxml2::XMLDocument::NewText
  0007a	89 45 f8	 mov	 DWORD PTR _theText$1[ebp], eax

; 1430 : 		InsertFirstChild( theText );

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _theText$1[ebp]
  00080	50		 push	 eax
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertFirstChild
$LN1@SetText:

; 1431 : 	}
; 1432 : }

  00089	5e		 pop	 esi
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetText@XMLElement@tinyxml2@@QAEXH@Z PROC		; tinyxml2::XMLElement::SetText
; _this$ = ecx

; 1436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1437 :     char buf[BUF_SIZE];
; 1438 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1439 :     SetText( buf );

  00043	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00049	52		 push	 edx
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLElement::SetText

; 1440 : }

  00052	52		 push	 edx
  00053	8b cd		 mov	 ecx, ebp
  00055	50		 push	 eax
  00056	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetText
  0005c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00061	58		 pop	 eax
  00062	5a		 pop	 edx
  00063	5f		 pop	 edi
  00064	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00067	33 cd		 xor	 ecx, ebp
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
  00081	0f 1f 00	 npad	 3
$LN5@SetText:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@SetText
$LN4@SetText:
  0008c	2c ff ff ff	 DD	 -212			; ffffff2cH
  00090	c8 00 00 00	 DD	 200			; 000000c8H
  00094	00 00 00 00	 DD	 $LN3@SetText
$LN3@SetText:
  00098	62		 DB	 98			; 00000062H
  00099	75		 DB	 117			; 00000075H
  0009a	66		 DB	 102			; 00000066H
  0009b	00		 DB	 0
?SetText@XMLElement@tinyxml2@@QAEXH@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetText@XMLElement@tinyxml2@@QAEXI@Z PROC		; tinyxml2::XMLElement::SetText
; _this$ = ecx

; 1444 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1445 :     char buf[BUF_SIZE];
; 1446 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1447 :     SetText( buf );

  00043	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00049	52		 push	 edx
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLElement::SetText

; 1448 : }

  00052	52		 push	 edx
  00053	8b cd		 mov	 ecx, ebp
  00055	50		 push	 eax
  00056	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetText
  0005c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00061	58		 pop	 eax
  00062	5a		 pop	 edx
  00063	5f		 pop	 edi
  00064	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00067	33 cd		 xor	 ecx, ebp
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
  00081	0f 1f 00	 npad	 3
$LN5@SetText:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@SetText
$LN4@SetText:
  0008c	2c ff ff ff	 DD	 -212			; ffffff2cH
  00090	c8 00 00 00	 DD	 200			; 000000c8H
  00094	00 00 00 00	 DD	 $LN3@SetText
$LN3@SetText:
  00098	62		 DB	 98			; 00000062H
  00099	75		 DB	 117			; 00000075H
  0009a	66		 DB	 102			; 00000066H
  0009b	00		 DB	 0
?SetText@XMLElement@tinyxml2@@QAEXI@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 1
?SetText@XMLElement@tinyxml2@@QAEX_N@Z PROC		; tinyxml2::XMLElement::SetText
; _this$ = ecx

; 1452 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1453 :     char buf[BUF_SIZE];
; 1454 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _v$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z ; tinyxml2::XMLUtil::ToStr
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1455 :     SetText( buf );

  00044	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004a	52		 push	 edx
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLElement::SetText

; 1456 : }

  00053	52		 push	 edx
  00054	8b cd		 mov	 ecx, ebp
  00056	50		 push	 eax
  00057	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetText
  0005d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00062	58		 pop	 eax
  00063	5a		 pop	 edx
  00064	5f		 pop	 edi
  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
  00082	66 90		 npad	 2
$LN5@SetText:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@SetText
$LN4@SetText:
  0008c	2c ff ff ff	 DD	 -212			; ffffff2cH
  00090	c8 00 00 00	 DD	 200			; 000000c8H
  00094	00 00 00 00	 DD	 $LN3@SetText
$LN3@SetText:
  00098	62		 DB	 98			; 00000062H
  00099	75		 DB	 117			; 00000075H
  0009a	66		 DB	 102			; 00000066H
  0009b	00		 DB	 0
?SetText@XMLElement@tinyxml2@@QAEX_N@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetText@XMLElement@tinyxml2@@QAEXM@Z PROC		; tinyxml2::XMLElement::SetText
; _this$ = ecx

; 1460 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1461 :     char buf[BUF_SIZE];
; 1462 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	51		 push	 ecx
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _v$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z ; tinyxml2::XMLUtil::ToStr
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1463 :     SetText( buf );

  0004a	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00050	51		 push	 ecx
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLElement::SetText

; 1464 : }

  00059	52		 push	 edx
  0005a	8b cd		 mov	 ecx, ebp
  0005c	50		 push	 eax
  0005d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetText
  00063	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00068	58		 pop	 eax
  00069	5a		 pop	 edx
  0006a	5f		 pop	 edi
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
$LN5@SetText:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@SetText
$LN4@SetText:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@SetText
$LN3@SetText:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?SetText@XMLElement@tinyxml2@@QAEXM@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 8
?SetText@XMLElement@tinyxml2@@QAEXN@Z PROC		; tinyxml2::XMLElement::SetText
; _this$ = ecx

; 1468 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1469 :     char buf[BUF_SIZE];
; 1470 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	83 ec 08	 sub	 esp, 8
  0003a	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _v$[ebp]
  0003f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z ; tinyxml2::XMLUtil::ToStr
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 1471 :     SetText( buf );

  0004c	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00052	51		 push	 ecx
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLElement::SetText

; 1472 : }

  0005b	52		 push	 edx
  0005c	8b cd		 mov	 ecx, ebp
  0005e	50		 push	 eax
  0005f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetText
  00065	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006a	58		 pop	 eax
  0006b	5a		 pop	 edx
  0006c	5f		 pop	 edi
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
  0008a	66 90		 npad	 2
$LN5@SetText:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@SetText
$LN4@SetText:
  00094	2c ff ff ff	 DD	 -212			; ffffff2cH
  00098	c8 00 00 00	 DD	 200			; 000000c8H
  0009c	00 00 00 00	 DD	 $LN3@SetText
$LN3@SetText:
  000a0	62		 DB	 98			; 00000062H
  000a1	75		 DB	 117			; 00000075H
  000a2	66		 DB	 102			; 00000066H
  000a3	00		 DB	 0
?SetText@XMLElement@tinyxml2@@QAEXN@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_t$1 = -8						; size = 4
_this$ = -4						; size = 4
_ival$ = 8						; size = 4
?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z PROC ; tinyxml2::XMLElement::QueryIntText
; _this$ = ecx

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1477 :     if ( FirstChild() && FirstChild()->ToText() ) {

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00027	85 c0		 test	 eax, eax
  00029	74 59		 je	 SHORT $LN2@QueryIntTe
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00033	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv78[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR tv78[ebp]
  00040	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00043	ff d0		 call	 eax
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 34		 je	 SHORT $LN2@QueryIntTe

; 1478 :         const char* t = FirstChild()->Value();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005f	89 45 f8	 mov	 DWORD PTR _t$1[ebp], eax

; 1479 :         if ( XMLUtil::ToInt( t, ival ) ) {

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _ival$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _t$1[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z ; tinyxml2::XMLUtil::ToInt
  0006f	83 c4 08	 add	 esp, 8
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN3@QueryIntTe

; 1480 :             return XML_SUCCESS;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 0c		 jmp	 SHORT $LN1@QueryIntTe
$LN3@QueryIntTe:

; 1481 :         }
; 1482 :         return XML_CAN_NOT_CONVERT_TEXT;

  0007d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00082	eb 05		 jmp	 SHORT $LN1@QueryIntTe
$LN2@QueryIntTe:

; 1483 :     }
; 1484 :     return XML_NO_TEXT_NODE;

  00084	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
$LN1@QueryIntTe:

; 1485 : }

  00089	5e		 pop	 esi
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ENDP ; tinyxml2::XMLElement::QueryIntText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_t$1 = -8						; size = 4
_this$ = -4						; size = 4
_uval$ = 8						; size = 4
?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z PROC ; tinyxml2::XMLElement::QueryUnsignedText
; _this$ = ecx

; 1489 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1490 :     if ( FirstChild() && FirstChild()->ToText() ) {

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00027	85 c0		 test	 eax, eax
  00029	74 59		 je	 SHORT $LN2@QueryUnsig
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00033	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv78[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR tv78[ebp]
  00040	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00043	ff d0		 call	 eax
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 34		 je	 SHORT $LN2@QueryUnsig

; 1491 :         const char* t = FirstChild()->Value();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005f	89 45 f8	 mov	 DWORD PTR _t$1[ebp], eax

; 1492 :         if ( XMLUtil::ToUnsigned( t, uval ) ) {

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _uval$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _t$1[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z ; tinyxml2::XMLUtil::ToUnsigned
  0006f	83 c4 08	 add	 esp, 8
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN3@QueryUnsig

; 1493 :             return XML_SUCCESS;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 0c		 jmp	 SHORT $LN1@QueryUnsig
$LN3@QueryUnsig:

; 1494 :         }
; 1495 :         return XML_CAN_NOT_CONVERT_TEXT;

  0007d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00082	eb 05		 jmp	 SHORT $LN1@QueryUnsig
$LN2@QueryUnsig:

; 1496 :     }
; 1497 :     return XML_NO_TEXT_NODE;

  00084	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
$LN1@QueryUnsig:

; 1498 : }

  00089	5e		 pop	 esi
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ENDP ; tinyxml2::XMLElement::QueryUnsignedText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_t$1 = -8						; size = 4
_this$ = -4						; size = 4
_bval$ = 8						; size = 4
?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z PROC ; tinyxml2::XMLElement::QueryBoolText
; _this$ = ecx

; 1502 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1503 :     if ( FirstChild() && FirstChild()->ToText() ) {

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00027	85 c0		 test	 eax, eax
  00029	74 59		 je	 SHORT $LN2@QueryBoolT
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00033	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv78[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR tv78[ebp]
  00040	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00043	ff d0		 call	 eax
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 34		 je	 SHORT $LN2@QueryBoolT

; 1504 :         const char* t = FirstChild()->Value();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005f	89 45 f8	 mov	 DWORD PTR _t$1[ebp], eax

; 1505 :         if ( XMLUtil::ToBool( t, bval ) ) {

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _bval$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _t$1[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z ; tinyxml2::XMLUtil::ToBool
  0006f	83 c4 08	 add	 esp, 8
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN3@QueryBoolT

; 1506 :             return XML_SUCCESS;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 0c		 jmp	 SHORT $LN1@QueryBoolT
$LN3@QueryBoolT:

; 1507 :         }
; 1508 :         return XML_CAN_NOT_CONVERT_TEXT;

  0007d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00082	eb 05		 jmp	 SHORT $LN1@QueryBoolT
$LN2@QueryBoolT:

; 1509 :     }
; 1510 :     return XML_NO_TEXT_NODE;

  00084	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
$LN1@QueryBoolT:

; 1511 : }

  00089	5e		 pop	 esi
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ENDP ; tinyxml2::XMLElement::QueryBoolText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_t$1 = -8						; size = 4
_this$ = -4						; size = 4
_dval$ = 8						; size = 4
?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z PROC ; tinyxml2::XMLElement::QueryDoubleText
; _this$ = ecx

; 1515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1516 :     if ( FirstChild() && FirstChild()->ToText() ) {

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00027	85 c0		 test	 eax, eax
  00029	74 59		 je	 SHORT $LN2@QueryDoubl
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00033	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv78[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR tv78[ebp]
  00040	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00043	ff d0		 call	 eax
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 34		 je	 SHORT $LN2@QueryDoubl

; 1517 :         const char* t = FirstChild()->Value();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005f	89 45 f8	 mov	 DWORD PTR _t$1[ebp], eax

; 1518 :         if ( XMLUtil::ToDouble( t, dval ) ) {

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _dval$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _t$1[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z ; tinyxml2::XMLUtil::ToDouble
  0006f	83 c4 08	 add	 esp, 8
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN3@QueryDoubl

; 1519 :             return XML_SUCCESS;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 0c		 jmp	 SHORT $LN1@QueryDoubl
$LN3@QueryDoubl:

; 1520 :         }
; 1521 :         return XML_CAN_NOT_CONVERT_TEXT;

  0007d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00082	eb 05		 jmp	 SHORT $LN1@QueryDoubl
$LN2@QueryDoubl:

; 1522 :     }
; 1523 :     return XML_NO_TEXT_NODE;

  00084	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
$LN1@QueryDoubl:

; 1524 : }

  00089	5e		 pop	 esi
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ENDP ; tinyxml2::XMLElement::QueryDoubleText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_t$1 = -8						; size = 4
_this$ = -4						; size = 4
_fval$ = 8						; size = 4
?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z PROC ; tinyxml2::XMLElement::QueryFloatText
; _this$ = ecx

; 1528 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1529 :     if ( FirstChild() && FirstChild()->ToText() ) {

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00027	85 c0		 test	 eax, eax
  00029	74 59		 je	 SHORT $LN2@QueryFloat
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00033	89 45 f4	 mov	 DWORD PTR tv78[ebp], eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv78[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR tv78[ebp]
  00040	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00043	ff d0		 call	 eax
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 34		 je	 SHORT $LN2@QueryFloat

; 1530 :         const char* t = FirstChild()->Value();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  0005f	89 45 f8	 mov	 DWORD PTR _t$1[ebp], eax

; 1531 :         if ( XMLUtil::ToFloat( t, fval ) ) {

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _fval$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _t$1[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z ; tinyxml2::XMLUtil::ToFloat
  0006f	83 c4 08	 add	 esp, 8
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 04		 je	 SHORT $LN3@QueryFloat

; 1532 :             return XML_SUCCESS;

  00079	33 c0		 xor	 eax, eax
  0007b	eb 0c		 jmp	 SHORT $LN1@QueryFloat
$LN3@QueryFloat:

; 1533 :         }
; 1534 :         return XML_CAN_NOT_CONVERT_TEXT;

  0007d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00082	eb 05		 jmp	 SHORT $LN1@QueryFloat
$LN2@QueryFloat:

; 1535 :     }
; 1536 :     return XML_NO_TEXT_NODE;

  00084	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
$LN1@QueryFloat:

; 1537 : }

  00089	5e		 pop	 esi
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ENDP ; tinyxml2::XMLElement::QueryFloatText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv153 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
_attrib$ = -24						; size = 4
_last$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z PROC ; tinyxml2::XMLElement::FindOrCreateAttribute
; _this$ = ecx

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001d	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00020	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00023	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00026	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00029	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1543 :     XMLAttribute* last = 0;

  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _last$[ebp], 0

; 1544 :     XMLAttribute* attrib = 0;

  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _attrib$[ebp], 0

; 1545 :     for( attrib = _rootAttribute;

  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00057	89 4d e8	 mov	 DWORD PTR _attrib$[ebp], ecx
  0005a	eb 0f		 jmp	 SHORT $LN4@FindOrCrea
$LN2@FindOrCrea:

; 1547 :             last = attrib, attrib = attrib->_next ) {

  0005c	8b 55 e8	 mov	 edx, DWORD PTR _attrib$[ebp]
  0005f	89 55 ec	 mov	 DWORD PTR _last$[ebp], edx
  00062	8b 45 e8	 mov	 eax, DWORD PTR _attrib$[ebp]
  00065	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00068	89 4d e8	 mov	 DWORD PTR _attrib$[ebp], ecx
$LN4@FindOrCrea:

; 1546 :             attrib;

  0006b	83 7d e8 00	 cmp	 DWORD PTR _attrib$[ebp], 0
  0006f	74 25		 je	 SHORT $LN3@FindOrCrea

; 1548 :         if ( XMLUtil::StringEqual( attrib->Name(), name ) ) {

  00071	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00076	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00079	52		 push	 edx
  0007a	8b 4d e8	 mov	 ecx, DWORD PTR _attrib$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Name
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	0f b6 c0	 movzx	 eax, al
  0008e	85 c0		 test	 eax, eax
  00090	74 02		 je	 SHORT $LN5@FindOrCrea

; 1549 :             break;

  00092	eb 02		 jmp	 SHORT $LN3@FindOrCrea
$LN5@FindOrCrea:

; 1550 :         }
; 1551 :     }

  00094	eb c6		 jmp	 SHORT $LN2@FindOrCrea
$LN3@FindOrCrea:

; 1552 :     if ( !attrib ) {

  00096	83 7d e8 00	 cmp	 DWORD PTR _attrib$[ebp], 0
  0009a	0f 85 ee 00 00
	00		 jne	 $LN6@FindOrCrea

; 1553 :         TIXMLASSERT( sizeof( XMLAttribute ) == _document->_attributePool.ItemSize() );

  000a0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ac	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000b2	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [edx+144]
  000b8	8b f4		 mov	 esi, esp
  000ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bd	ff d0		 call	 eax
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	83 f8 24	 cmp	 eax, 36			; 00000024H
  000c9	74 01		 je	 SHORT $LN7@FindOrCrea
  000cb	cc		 int	 3
$LN7@FindOrCrea:

; 1554 :         attrib = new (_document->_attributePool.Alloc() ) XMLAttribute();

  000cc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d8	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000de	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [edx+144]
  000e4	8b f4		 mov	 esi, esp
  000e6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e9	ff d0		 call	 eax
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  000f5	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  000f8	51		 push	 ecx
  000f9	6a 24		 push	 36			; 00000024H
  000fb	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00100	83 c4 08	 add	 esp, 8
  00103	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
  00106	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0010d	83 7d e0 00	 cmp	 DWORD PTR $T3[ebp], 0
  00111	74 0d		 je	 SHORT $LN11@FindOrCrea
  00113	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  00116	e8 00 00 00 00	 call	 ??0XMLAttribute@tinyxml2@@AAE@XZ ; tinyxml2::XMLAttribute::XMLAttribute
  0011b	89 45 d8	 mov	 DWORD PTR tv153[ebp], eax
  0011e	eb 07		 jmp	 SHORT $LN12@FindOrCrea
$LN11@FindOrCrea:
  00120	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN12@FindOrCrea:
  00127	8b 55 d8	 mov	 edx, DWORD PTR tv153[ebp]
  0012a	89 55 e4	 mov	 DWORD PTR $T4[ebp], edx
  0012d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00134	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00137	89 45 e8	 mov	 DWORD PTR _attrib$[ebp], eax

; 1555 :         attrib->_memPool = &_document->_attributePool;

  0013a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00140	81 c2 90 00 00
	00		 add	 edx, 144		; 00000090H
  00146	8b 45 e8	 mov	 eax, DWORD PTR _attrib$[ebp]
  00149	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 1556 :         if ( last ) {

  0014c	83 7d ec 00	 cmp	 DWORD PTR _last$[ebp], 0
  00150	74 0b		 je	 SHORT $LN8@FindOrCrea

; 1557 :             last->_next = attrib;

  00152	8b 4d ec	 mov	 ecx, DWORD PTR _last$[ebp]
  00155	8b 55 e8	 mov	 edx, DWORD PTR _attrib$[ebp]
  00158	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 1558 :         }
; 1559 :         else {

  0015b	eb 09		 jmp	 SHORT $LN9@FindOrCrea
$LN8@FindOrCrea:

; 1560 :             _rootAttribute = attrib;

  0015d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00160	8b 4d e8	 mov	 ecx, DWORD PTR _attrib$[ebp]
  00163	89 48 30	 mov	 DWORD PTR [eax+48], ecx
$LN9@FindOrCrea:

; 1561 :         }
; 1562 :         attrib->SetName( name );

  00166	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00169	52		 push	 edx
  0016a	8b 4d e8	 mov	 ecx, DWORD PTR _attrib$[ebp]
  0016d	e8 00 00 00 00	 call	 ?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z ; tinyxml2::XMLAttribute::SetName

; 1563 :         attrib->_memPool->SetTracked(); // always created and linked.

  00172	8b 45 e8	 mov	 eax, DWORD PTR _attrib$[ebp]
  00175	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00178	8b 55 e8	 mov	 edx, DWORD PTR _attrib$[ebp]
  0017b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017d	8b f4		 mov	 esi, esp
  0017f	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00182	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00185	ff d2		 call	 edx
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@FindOrCrea:

; 1564 :     }
; 1565 :     return attrib;

  0018e	8b 45 e8	 mov	 eax, DWORD PTR _attrib$[ebp]

; 1566 : }

  00191	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00194	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019b	59		 pop	 ecx
  0019c	5e		 pop	 esi
  0019d	83 c4 28	 add	 esp, 40			; 00000028H
  001a0	3b ec		 cmp	 ebp, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z$0:
  00000	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ENDP ; tinyxml2::XMLElement::FindOrCreateAttribute
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_a$1 = -12						; size = 4
_prev$ = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLElement::DeleteAttribute
; _this$ = ecx

; 1570 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1571 :     XMLAttribute* prev = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _prev$[ebp], 0

; 1572 :     for( XMLAttribute* a=_rootAttribute; a; a=a->_next ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0002b	89 4d f4	 mov	 DWORD PTR _a$1[ebp], ecx
  0002e	eb 09		 jmp	 SHORT $LN4@DeleteAttr
$LN2@DeleteAttr:
  00030	8b 55 f4	 mov	 edx, DWORD PTR _a$1[ebp]
  00033	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00036	89 45 f4	 mov	 DWORD PTR _a$1[ebp], eax
$LN4@DeleteAttr:
  00039	83 7d f4 00	 cmp	 DWORD PTR _a$1[ebp], 0
  0003d	74 57		 je	 SHORT $LN1@DeleteAttr

; 1573 :         if ( XMLUtil::StringEqual( name, a->Name() ) ) {

  0003f	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00044	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  00047	e8 00 00 00 00	 call	 ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Name
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	0f b6 d0	 movzx	 edx, al
  0005c	85 d2		 test	 edx, edx
  0005e	74 2e		 je	 SHORT $LN5@DeleteAttr

; 1574 :             if ( prev ) {

  00060	83 7d f8 00	 cmp	 DWORD PTR _prev$[ebp], 0
  00064	74 0e		 je	 SHORT $LN6@DeleteAttr

; 1575 :                 prev->_next = a->_next;

  00066	8b 45 f8	 mov	 eax, DWORD PTR _prev$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  0006c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0006f	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1576 :             }
; 1577 :             else {

  00072	eb 0c		 jmp	 SHORT $LN7@DeleteAttr
$LN6@DeleteAttr:

; 1578 :                 _rootAttribute = a->_next;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  0007a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0007d	89 50 30	 mov	 DWORD PTR [eax+48], edx
$LN7@DeleteAttr:

; 1579 :             }
; 1580 :             DeleteAttribute( a );

  00080	8b 45 f4	 mov	 eax, DWORD PTR _a$1[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
  00089	83 c4 04	 add	 esp, 4

; 1581 :             break;

  0008c	eb 08		 jmp	 SHORT $LN1@DeleteAttr
$LN5@DeleteAttr:

; 1582 :         }
; 1583 :         prev = a;

  0008e	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  00091	89 4d f8	 mov	 DWORD PTR _prev$[ebp], ecx

; 1584 :     }

  00094	eb 9a		 jmp	 SHORT $LN2@DeleteAttr
$LN1@DeleteAttr:

; 1585 : }

  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLElement::DeleteAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv161 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
_attrib$5 = -28						; size = 4
_prevAttribute$ = -24					; size = 4
_start$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z PROC	; tinyxml2::XMLElement::ParseAttributes
; _this$ = ecx

; 1589 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :     const char* start = p;

  00046	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00049	89 45 ec	 mov	 DWORD PTR _start$[ebp], eax

; 1591 :     XMLAttribute* prevAttribute = 0;

  0004c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _prevAttribute$[ebp], 0
$LN2@ParseAttri:

; 1592 : 
; 1593 :     // Read the attributes.
; 1594 :     while( p ) {

  00053	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00057	0f 84 03 02 00
	00		 je	 $LN3@ParseAttri

; 1595 :         p = XMLUtil::SkipWhiteSpace( p );

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  00066	83 c4 04	 add	 esp, 4
  00069	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1596 :         if ( !(*p) ) {

  0006c	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006f	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00072	85 c0		 test	 eax, eax
  00074	75 21		 jne	 SHORT $LN4@ParseAttri

; 1597 :             _document->SetError( XML_ERROR_PARSING_ELEMENT, start, Name() );

  00076	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0007e	50		 push	 eax
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _start$[ebp]
  00082	51		 push	 ecx
  00083	6a 07		 push	 7
  00085	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0008b	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1598 :             return 0;

  00090	33 c0		 xor	 eax, eax
  00092	e9 cc 01 00 00	 jmp	 $LN1@ParseAttri
$LN4@ParseAttri:

; 1599 :         }
; 1600 : 
; 1601 :         // attribute.
; 1602 :         if (XMLUtil::IsNameStartChar( *p ) ) {

  00097	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0009a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameStartChar
  000a3	83 c4 04	 add	 esp, 4
  000a6	0f b6 d0	 movzx	 edx, al
  000a9	85 d2		 test	 edx, edx
  000ab	0f 84 4e 01 00
	00		 je	 $LN5@ParseAttri

; 1603 :             TIXMLASSERT( sizeof( XMLAttribute ) == _document->_attributePool.ItemSize() );

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bd	05 90 00 00 00	 add	 eax, 144		; 00000090H
  000c2	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000c8	8b f4		 mov	 esi, esp
  000ca	8b c8		 mov	 ecx, eax
  000cc	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000cf	ff d0		 call	 eax
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	83 f8 24	 cmp	 eax, 36			; 00000024H
  000db	74 01		 je	 SHORT $LN7@ParseAttri
  000dd	cc		 int	 3
$LN7@ParseAttri:

; 1604 :             XMLAttribute* attrib = new (_document->_attributePool.Alloc() ) XMLAttribute();

  000de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ea	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000f0	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [edx+144]
  000f6	8b f4		 mov	 esi, esp
  000f8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000fb	ff d0		 call	 eax
  000fd	3b f4		 cmp	 esi, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00107	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
  0010a	51		 push	 ecx
  0010b	6a 24		 push	 36			; 00000024H
  0010d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00112	83 c4 08	 add	 esp, 8
  00115	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
  00118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0011f	83 7d dc 00	 cmp	 DWORD PTR $T3[ebp], 0
  00123	74 0d		 je	 SHORT $LN17@ParseAttri
  00125	8b 4d dc	 mov	 ecx, DWORD PTR $T3[ebp]
  00128	e8 00 00 00 00	 call	 ??0XMLAttribute@tinyxml2@@AAE@XZ ; tinyxml2::XMLAttribute::XMLAttribute
  0012d	89 45 d4	 mov	 DWORD PTR tv161[ebp], eax
  00130	eb 07		 jmp	 SHORT $LN18@ParseAttri
$LN17@ParseAttri:
  00132	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN18@ParseAttri:
  00139	8b 55 d4	 mov	 edx, DWORD PTR tv161[ebp]
  0013c	89 55 e0	 mov	 DWORD PTR $T4[ebp], edx
  0013f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00146	8b 45 e0	 mov	 eax, DWORD PTR $T4[ebp]
  00149	89 45 e4	 mov	 DWORD PTR _attrib$5[ebp], eax

; 1605 :             attrib->_memPool = &_document->_attributePool;

  0014c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00152	81 c2 90 00 00
	00		 add	 edx, 144		; 00000090H
  00158	8b 45 e4	 mov	 eax, DWORD PTR _attrib$5[ebp]
  0015b	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 1606 : 			attrib->_memPool->SetTracked();

  0015e	8b 4d e4	 mov	 ecx, DWORD PTR _attrib$5[ebp]
  00161	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00164	8b 45 e4	 mov	 eax, DWORD PTR _attrib$5[ebp]
  00167	8b 12		 mov	 edx, DWORD PTR [edx]
  00169	8b f4		 mov	 esi, esp
  0016b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0016e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00171	ff d0		 call	 eax
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1607 : 
; 1608 :             p = attrib->ParseDeep( p, _document->ProcessEntities() );

  0017a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00180	e8 00 00 00 00	 call	 ?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::ProcessEntities
  00185	0f b6 d0	 movzx	 edx, al
  00188	52		 push	 edx
  00189	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0018c	50		 push	 eax
  0018d	8b 4d e4	 mov	 ecx, DWORD PTR _attrib$5[ebp]
  00190	e8 00 00 00 00	 call	 ?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z ; tinyxml2::XMLAttribute::ParseDeep
  00195	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1609 :             if ( !p || Attribute( attrib->Name() ) ) {

  00198	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0019c	74 17		 je	 SHORT $LN9@ParseAttri
  0019e	6a 00		 push	 0
  001a0	8b 4d e4	 mov	 ecx, DWORD PTR _attrib$5[ebp]
  001a3	e8 00 00 00 00	 call	 ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Name
  001a8	50		 push	 eax
  001a9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	e8 00 00 00 00	 call	 ?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z ; tinyxml2::XMLElement::Attribute
  001b1	85 c0		 test	 eax, eax
  001b3	74 28		 je	 SHORT $LN8@ParseAttri
$LN9@ParseAttri:

; 1610 :                 DeleteAttribute( attrib );

  001b5	8b 4d e4	 mov	 ecx, DWORD PTR _attrib$5[ebp]
  001b8	51		 push	 ecx
  001b9	e8 00 00 00 00	 call	 ?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
  001be	83 c4 04	 add	 esp, 4

; 1611 :                 _document->SetError( XML_ERROR_PARSING_ATTRIBUTE, start, p );

  001c1	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  001c4	52		 push	 edx
  001c5	8b 45 ec	 mov	 eax, DWORD PTR _start$[ebp]
  001c8	50		 push	 eax
  001c9	6a 08		 push	 8
  001cb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  001d1	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1612 :                 return 0;

  001d6	33 c0		 xor	 eax, eax
  001d8	e9 86 00 00 00	 jmp	 $LN1@ParseAttri
$LN8@ParseAttri:

; 1613 :             }
; 1614 :             // There is a minor bug here: if the attribute in the source xml
; 1615 :             // document is duplicated, it will not be detected and the
; 1616 :             // attribute will be doubly added. However, tracking the 'prevAttribute'
; 1617 :             // avoids re-scanning the attribute list. Preferring performance for
; 1618 :             // now, may reconsider in the future.
; 1619 :             if ( prevAttribute ) {

  001dd	83 7d e8 00	 cmp	 DWORD PTR _prevAttribute$[ebp], 0
  001e1	74 0b		 je	 SHORT $LN10@ParseAttri

; 1620 :                 prevAttribute->_next = attrib;

  001e3	8b 55 e8	 mov	 edx, DWORD PTR _prevAttribute$[ebp]
  001e6	8b 45 e4	 mov	 eax, DWORD PTR _attrib$5[ebp]
  001e9	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1621 :             }
; 1622 :             else {

  001ec	eb 09		 jmp	 SHORT $LN11@ParseAttri
$LN10@ParseAttri:

; 1623 :                 _rootAttribute = attrib;

  001ee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f1	8b 55 e4	 mov	 edx, DWORD PTR _attrib$5[ebp]
  001f4	89 51 30	 mov	 DWORD PTR [ecx+48], edx
$LN11@ParseAttri:

; 1624 :             }
; 1625 :             prevAttribute = attrib;

  001f7	8b 45 e4	 mov	 eax, DWORD PTR _attrib$5[ebp]
  001fa	89 45 e8	 mov	 DWORD PTR _prevAttribute$[ebp], eax
  001fd	eb 5c		 jmp	 SHORT $LN6@ParseAttri
$LN5@ParseAttri:

; 1626 :         }
; 1627 :         // end of the tag
; 1628 :         else if ( *p == '>' ) {

  001ff	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00202	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00205	83 fa 3e	 cmp	 edx, 62			; 0000003eH
  00208	75 0d		 jne	 SHORT $LN12@ParseAttri

; 1629 :             ++p;

  0020a	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0020d	83 c0 01	 add	 eax, 1
  00210	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1630 :             break;

  00213	eb 4b		 jmp	 SHORT $LN3@ParseAttri
  00215	eb 44		 jmp	 SHORT $LN6@ParseAttri
$LN12@ParseAttri:

; 1631 :         }
; 1632 :         // end of the tag
; 1633 :         else if ( *p == '/' && *(p+1) == '>' ) {

  00217	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0021a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0021d	83 fa 2f	 cmp	 edx, 47			; 0000002fH
  00220	75 20		 jne	 SHORT $LN14@ParseAttri
  00222	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00225	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00229	83 f9 3e	 cmp	 ecx, 62			; 0000003eH
  0022c	75 14		 jne	 SHORT $LN14@ParseAttri

; 1634 :             _closingType = CLOSED;

  0022e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00231	c7 42 2c 01 00
	00 00		 mov	 DWORD PTR [edx+44], 1

; 1635 :             return p+2;	// done; sealed element.

  00238	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0023b	83 c0 02	 add	 eax, 2
  0023e	eb 23		 jmp	 SHORT $LN1@ParseAttri

; 1636 :         }
; 1637 :         else {

  00240	eb 19		 jmp	 SHORT $LN6@ParseAttri
$LN14@ParseAttri:

; 1638 :             _document->SetError( XML_ERROR_PARSING_ELEMENT, start, p );

  00242	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00245	50		 push	 eax
  00246	8b 4d ec	 mov	 ecx, DWORD PTR _start$[ebp]
  00249	51		 push	 ecx
  0024a	6a 07		 push	 7
  0024c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0024f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00252	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1639 :             return 0;

  00257	33 c0		 xor	 eax, eax
  00259	eb 08		 jmp	 SHORT $LN1@ParseAttri
$LN6@ParseAttri:

; 1640 :         }
; 1641 :     }

  0025b	e9 f3 fd ff ff	 jmp	 $LN2@ParseAttri
$LN3@ParseAttri:

; 1642 :     return p;

  00260	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
$LN1@ParseAttri:

; 1643 : }

  00263	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00266	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026d	59		 pop	 ecx
  0026e	5e		 pop	 esi
  0026f	83 c4 2c	 add	 esp, 44			; 0000002cH
  00272	3b ec		 cmp	 ebp, esp
  00274	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z$0:
  00000	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z ENDP	; tinyxml2::XMLElement::ParseAttributes
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_pool$ = -4						; size = 4
_attribute$ = 8						; size = 4
?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z PROC ; tinyxml2::XMLElement::DeleteAttribute

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1647 :     if ( attribute == 0 ) {

  0000c	83 7d 08 00	 cmp	 DWORD PTR _attribute$[ebp], 0
  00010	75 02		 jne	 SHORT $LN2@DeleteAttr

; 1648 :         return;

  00012	eb 3a		 jmp	 SHORT $LN1@DeleteAttr
$LN2@DeleteAttr:

; 1649 :     }
; 1650 :     MemPool* pool = attribute->_memPool;

  00014	8b 45 08	 mov	 eax, DWORD PTR _attribute$[ebp]
  00017	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001a	89 4d fc	 mov	 DWORD PTR _pool$[ebp], ecx

; 1651 :     attribute->~XMLAttribute();

  0001d	8b f4		 mov	 esi, esp
  0001f	6a 00		 push	 0
  00021	8b 55 08	 mov	 edx, DWORD PTR _attribute$[ebp]
  00024	8b 02		 mov	 eax, DWORD PTR [edx]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _attribute$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	ff d2		 call	 edx
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1652 :     pool->Free( attribute );

  00034	8b f4		 mov	 esi, esp
  00036	8b 45 08	 mov	 eax, DWORD PTR _attribute$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _pool$[ebp]
  0003d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _pool$[ebp]
  00042	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00045	ff d0		 call	 eax
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@DeleteAttr:

; 1653 : }

  0004e	5e		 pop	 esi
  0004f	83 c4 04	 add	 esp, 4
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ENDP ; tinyxml2::XMLElement::DeleteAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_strPair$ = 12						; size = 4
?ParseDeep@XMLElement@tinyxml2@@MAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLElement::ParseDeep
; _this$ = ecx

; 1660 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1661 :     // Read the element name.
; 1662 :     p = XMLUtil::SkipWhiteSpace( p );

  0000e	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  00017	83 c4 04	 add	 esp, 4
  0001a	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1663 : 
; 1664 :     // The closing element is the </element> form. It is
; 1665 :     // parsed just like a regular element then deleted from
; 1666 :     // the DOM.
; 1667 :     if ( *p == '/' ) {

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00020	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00023	83 fa 2f	 cmp	 edx, 47			; 0000002fH
  00026	75 13		 jne	 SHORT $LN2@ParseDeep

; 1668 :         _closingType = CLOSING;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 2c 02 00
	00 00		 mov	 DWORD PTR [eax+44], 2

; 1669 :         ++p;

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00035	83 c1 01	 add	 ecx, 1
  00038	89 4d 08	 mov	 DWORD PTR _p$[ebp], ecx
$LN2@ParseDeep:

; 1670 :     }
; 1671 : 
; 1672 :     p = _value.ParseName( p );

  0003b	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0003e	52		 push	 edx
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00045	e8 00 00 00 00	 call	 ?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z ; tinyxml2::StrPair::ParseName
  0004a	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1673 :     if ( _value.Empty() ) {

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 ?Empty@StrPair@tinyxml2@@QBE_NXZ ; tinyxml2::StrPair::Empty
  00058	0f b6 c0	 movzx	 eax, al
  0005b	85 c0		 test	 eax, eax
  0005d	74 04		 je	 SHORT $LN3@ParseDeep

; 1674 :         return 0;

  0005f	33 c0		 xor	 eax, eax
  00061	eb 43		 jmp	 SHORT $LN1@ParseDeep
$LN3@ParseDeep:

; 1675 :     }
; 1676 : 
; 1677 :     p = ParseAttributes( p );

  00063	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00066	51		 push	 ecx
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z ; tinyxml2::XMLElement::ParseAttributes
  0006f	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1678 :     if ( !p || !*p || _closingType ) {

  00072	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00076	74 13		 je	 SHORT $LN5@ParseDeep
  00078	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0007b	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0007e	85 c0		 test	 eax, eax
  00080	74 09		 je	 SHORT $LN5@ParseDeep
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00089	74 05		 je	 SHORT $LN4@ParseDeep
$LN5@ParseDeep:

; 1679 :         return p;

  0008b	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0008e	eb 16		 jmp	 SHORT $LN1@ParseDeep
$LN4@ParseDeep:

; 1680 :     }
; 1681 : 
; 1682 :     p = XMLNode::ParseDeep( p, strPair );

  00090	8b 55 0c	 mov	 edx, DWORD PTR _strPair$[ebp]
  00093	52		 push	 edx
  00094	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00097	50		 push	 eax
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?ParseDeep@XMLNode@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLNode::ParseDeep
  000a0	89 45 08	 mov	 DWORD PTR _p$[ebp], eax

; 1683 :     return p;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
$LN1@ParseDeep:

; 1684 : }

  000a6	83 c4 04	 add	 esp, 4
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
?ParseDeep@XMLElement@tinyxml2@@MAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLElement::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_a$1 = -12						; size = 4
_element$ = -8						; size = 4
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLElement::ShallowClone
; _this$ = ecx

; 1689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1690 :     if ( !doc ) {

  0001e	83 7d 08 00	 cmp	 DWORD PTR _doc$[ebp], 0
  00022	75 09		 jne	 SHORT $LN5@ShallowClo

; 1691 :         doc = _document;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	89 4d 08	 mov	 DWORD PTR _doc$[ebp], ecx
$LN5@ShallowClo:

; 1692 :     }
; 1693 :     XMLElement* element = doc->NewElement( Value() );					// fixme: this will always allocate memory. Intern?

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00039	e8 00 00 00 00	 call	 ?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z ; tinyxml2::XMLDocument::NewElement
  0003e	89 45 f8	 mov	 DWORD PTR _element$[ebp], eax

; 1694 :     for( const XMLAttribute* a=FirstAttribute(); a; a=a->Next() ) {

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
  00049	89 45 f4	 mov	 DWORD PTR _a$1[ebp], eax
  0004c	eb 0b		 jmp	 SHORT $LN4@ShallowClo
$LN2@ShallowClo:
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  00051	e8 00 00 00 00	 call	 ?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
  00056	89 45 f4	 mov	 DWORD PTR _a$1[ebp], eax
$LN4@ShallowClo:
  00059	83 7d f4 00	 cmp	 DWORD PTR _a$1[ebp], 0
  0005d	74 1c		 je	 SHORT $LN3@ShallowClo

; 1695 :         element->SetAttribute( a->Name(), a->Value() );					// fixme: this will always allocate memory. Intern?

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  00062	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  00067	50		 push	 eax
  00068	8b 4d f4	 mov	 ecx, DWORD PTR _a$1[ebp]
  0006b	e8 00 00 00 00	 call	 ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Name
  00070	50		 push	 eax
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _element$[ebp]
  00074	e8 00 00 00 00	 call	 ?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLElement::SetAttribute

; 1696 :     }

  00079	eb d3		 jmp	 SHORT $LN2@ShallowClo
$LN3@ShallowClo:

; 1697 :     return element;

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _element$[ebp]

; 1698 : }

  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLElement::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_b$1 = -16						; size = 4
_a$2 = -12						; size = 4
_other$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLElement::ShallowEqual
; _this$ = ecx

; 1702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1703 :     TIXMLASSERT( compare );

  0001b	83 7d 08 00	 cmp	 DWORD PTR _compare$[ebp], 0
  0001f	75 01		 jne	 SHORT $LN4@ShallowEqu
  00021	cc		 int	 3
$LN4@ShallowEqu:

; 1704 :     const XMLElement* other = compare->ToElement();

  00022	8b 45 08	 mov	 eax, DWORD PTR _compare$[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b f4		 mov	 esi, esp
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _compare$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	ff d0		 call	 eax
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	89 45 f8	 mov	 DWORD PTR _other$[ebp], eax

; 1705 :     if ( other && XMLUtil::StringEqual( other->Name(), Name() )) {

  0003a	83 7d f8 00	 cmp	 DWORD PTR _other$[ebp], 0
  0003e	0f 84 9e 00 00
	00		 je	 $LN5@ShallowEqu
  00044	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  00051	50		 push	 eax
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _other$[ebp]
  00055	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	0f b6 c8	 movzx	 ecx, al
  00066	85 c9		 test	 ecx, ecx
  00068	74 78		 je	 SHORT $LN5@ShallowEqu

; 1706 : 
; 1707 :         const XMLAttribute* a=FirstAttribute();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
  00072	89 45 f4	 mov	 DWORD PTR _a$2[ebp], eax

; 1708 :         const XMLAttribute* b=other->FirstAttribute();

  00075	8b 4d f8	 mov	 ecx, DWORD PTR _other$[ebp]
  00078	e8 00 00 00 00	 call	 ?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
  0007d	89 45 f0	 mov	 DWORD PTR _b$1[ebp], eax
$LN2@ShallowEqu:

; 1709 : 
; 1710 :         while ( a && b ) {

  00080	83 7d f4 00	 cmp	 DWORD PTR _a$2[ebp], 0
  00084	74 48		 je	 SHORT $LN3@ShallowEqu
  00086	83 7d f0 00	 cmp	 DWORD PTR _b$1[ebp], 0
  0008a	74 42		 je	 SHORT $LN3@ShallowEqu

; 1711 :             if ( !XMLUtil::StringEqual( a->Value(), b->Value() ) ) {

  0008c	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00091	8b 4d f0	 mov	 ecx, DWORD PTR _b$1[ebp]
  00094	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  00099	50		 push	 eax
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR _a$2[ebp]
  0009d	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ab	0f b6 d0	 movzx	 edx, al
  000ae	85 d2		 test	 edx, edx
  000b0	75 04		 jne	 SHORT $LN6@ShallowEqu

; 1712 :                 return false;

  000b2	32 c0		 xor	 al, al
  000b4	eb 2e		 jmp	 SHORT $LN1@ShallowEqu
$LN6@ShallowEqu:

; 1713 :             }
; 1714 :             a = a->Next();

  000b6	8b 4d f4	 mov	 ecx, DWORD PTR _a$2[ebp]
  000b9	e8 00 00 00 00	 call	 ?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
  000be	89 45 f4	 mov	 DWORD PTR _a$2[ebp], eax

; 1715 :             b = b->Next();

  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _b$1[ebp]
  000c4	e8 00 00 00 00	 call	 ?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
  000c9	89 45 f0	 mov	 DWORD PTR _b$1[ebp], eax

; 1716 :         }

  000cc	eb b2		 jmp	 SHORT $LN2@ShallowEqu
$LN3@ShallowEqu:

; 1717 :         if ( a || b ) {

  000ce	83 7d f4 00	 cmp	 DWORD PTR _a$2[ebp], 0
  000d2	75 06		 jne	 SHORT $LN8@ShallowEqu
  000d4	83 7d f0 00	 cmp	 DWORD PTR _b$1[ebp], 0
  000d8	74 04		 je	 SHORT $LN7@ShallowEqu
$LN8@ShallowEqu:

; 1718 :             // different count
; 1719 :             return false;

  000da	32 c0		 xor	 al, al
  000dc	eb 06		 jmp	 SHORT $LN1@ShallowEqu
$LN7@ShallowEqu:

; 1720 :         }
; 1721 :         return true;

  000de	b0 01		 mov	 al, 1
  000e0	eb 02		 jmp	 SHORT $LN1@ShallowEqu
$LN5@ShallowEqu:

; 1722 :     }
; 1723 :     return false;

  000e2	32 c0		 xor	 al, al
$LN1@ShallowEqu:

; 1724 : }

  000e4	5e		 pop	 esi
  000e5	83 c4 10	 add	 esp, 16			; 00000010H
  000e8	3b ec		 cmp	 ebp, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLElement::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_node$1 = -8						; size = 4
_this$ = -4						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLElement::Accept
; _this$ = ecx

; 1728 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1729 :     TIXMLASSERT( visitor );

  00018	83 7d 08 00	 cmp	 DWORD PTR _visitor$[ebp], 0
  0001c	75 01		 jne	 SHORT $LN5@Accept
  0001e	cc		 int	 3
$LN5@Accept:

; 1730 :     if ( visitor->VisitEnter( *this, _rootAttribute ) ) {

  0001f	8b f4		 mov	 esi, esp
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00027	51		 push	 ecx
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _visitor$[ebp]
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	ff d0		 call	 eax
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	0f b6 c8	 movzx	 ecx, al
  00043	85 c9		 test	 ecx, ecx
  00045	74 43		 je	 SHORT $LN6@Accept

; 1731 :         for ( const XMLNode* node=FirstChild(); node; node=node->NextSibling() ) {

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
  0004f	89 45 f8	 mov	 DWORD PTR _node$1[ebp], eax
  00052	eb 0b		 jmp	 SHORT $LN4@Accept
$LN2@Accept:
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _node$1[ebp]
  00057	e8 00 00 00 00	 call	 ?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::NextSibling
  0005c	89 45 f8	 mov	 DWORD PTR _node$1[ebp], eax
$LN4@Accept:
  0005f	83 7d f8 00	 cmp	 DWORD PTR _node$1[ebp], 0
  00063	74 25		 je	 SHORT $LN6@Accept

; 1732 :             if ( !node->Accept( visitor ) ) {

  00065	8b f4		 mov	 esi, esp
  00067	8b 55 08	 mov	 edx, DWORD PTR _visitor$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _node$1[ebp]
  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _node$1[ebp]
  00073	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00076	ff d0		 call	 eax
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	0f b6 c8	 movzx	 ecx, al
  00082	85 c9		 test	 ecx, ecx
  00084	75 02		 jne	 SHORT $LN7@Accept

; 1733 :                 break;

  00086	eb 02		 jmp	 SHORT $LN6@Accept
$LN7@Accept:

; 1734 :             }
; 1735 :         }

  00088	eb ca		 jmp	 SHORT $LN2@Accept
$LN6@Accept:

; 1736 :     }
; 1737 :     return visitor->VisitExit( *this );

  0008a	8b f4		 mov	 esi, esp
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR _visitor$[ebp]
  00093	8b 10		 mov	 edx, DWORD PTR [eax]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _visitor$[ebp]
  00098	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0009b	ff d0		 call	 eax
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1738 : }

  000a4	5e		 pop	 esi
  000a5	83 c4 08	 add	 esp, 8
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLElement::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_processEntities$ = 8					; size = 1
_whitespace$ = 12					; size = 4
??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z PROC	; tinyxml2::XMLDocument::XMLDocument
; _this$ = ecx

; 1777 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1769 :     XMLNode( 0 ),

  0002d	6a 00		 push	 0
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1777 : {

  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLDocument@tinyxml2@@6B@

; 1770 :     _writeBOM( false ),

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	c6 41 2c 00	 mov	 BYTE PTR [ecx+44], 0

; 1771 :     _processEntities( processEntities ),

  0004e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8a 45 08	 mov	 al, BYTE PTR _processEntities$[ebp]
  00054	88 42 2d	 mov	 BYTE PTR [edx+45], al

; 1772 :     _errorID( XML_NO_ERROR ),

  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 1773 :     _whitespace( whitespace ),

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 0c	 mov	 eax, DWORD PTR _whitespace$[ebp]
  00067	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 1774 :     _errorStr1( 0 ),

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 1775 :     _errorStr2( 0 ),

  00074	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00077	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0

; 1776 :     _charBuffer( 0 )

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 1777 : {

  00088	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 c1 44	 add	 ecx, 68			; 00000044H
  0008e	e8 00 00 00 00	 call	 ??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ ; tinyxml2::MemPoolT<52>::MemPoolT<52>
  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000a0	e8 00 00 00 00	 call	 ??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ ; tinyxml2::MemPoolT<36>::MemPoolT<36>
  000a5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  000b2	e8 00 00 00 00	 call	 ??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ ; tinyxml2::MemPoolT<48>::MemPoolT<48>
  000b7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000c4	e8 00 00 00 00	 call	 ??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ ; tinyxml2::MemPoolT<44>::MemPoolT<44>

; 1778 :     // avoid VC++ C4355 warning about 'this' in initializer list (C4355 is off by default in VS2012+)
; 1779 :     _document = this;

  000c9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1780 : }

  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	83 c4 10	 add	 esp, 16			; 00000010H
  000ea	3b ec		 cmp	 ebp, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 44	 add	 ecx, 68			; 00000044H
  0000e	e9 00 00 00 00	 jmp	 ??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<52>::~MemPoolT<52>
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0001c	e9 00 00 00 00	 jmp	 ??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<36>::~MemPoolT<36>
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  0002a	e9 00 00 00 00	 jmp	 ??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<48>::~MemPoolT<48>
__ehhandler$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z:
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z ENDP	; tinyxml2::XMLDocument::XMLDocument
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GXMLDocument@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GXMLDocument@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::XMLDocument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1XMLDocument@tinyxml2@@UAE@XZ ; tinyxml2::XMLDocument::~XMLDocument
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 11		 je	 SHORT $LN2@scalar
  0001e	68 74 01 00 00	 push	 372			; 00000174H
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_GXMLDocument@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::XMLDocument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLDocument@tinyxml2@@UAE@XZ PROC			; tinyxml2::XMLDocument::~XMLDocument
; _this$ = ecx

; 1784 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1XMLDocument@tinyxml2@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLDocument@tinyxml2@@6B@

; 1785 :     Clear();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?Clear@XMLDocument@tinyxml2@@QAEXXZ ; tinyxml2::XMLDocument::Clear

; 1786 : }

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00047	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<44>::~MemPoolT<44>
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  00055	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<48>::~MemPoolT<48>
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00063	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<36>::~MemPoolT<36>
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	83 c1 44	 add	 ecx, 68			; 00000044H
  0006e	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<52>::~MemPoolT<52>
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ??1XMLNode@tinyxml2@@MAE@XZ ; tinyxml2::XMLNode::~XMLNode
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	83 c4 10	 add	 esp, 16			; 00000010H
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1XMLDocument@tinyxml2@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1XMLDocument@tinyxml2@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1XMLDocument@tinyxml2@@UAE@XZ ENDP			; tinyxml2::XMLDocument::~XMLDocument
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_hadError$ = -5						; size = 1
_this$ = -4						; size = 4
?Clear@XMLDocument@tinyxml2@@QAEXXZ PROC		; tinyxml2::XMLDocument::Clear
; _this$ = ecx

; 1790 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1791 :     DeleteChildren();

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ; tinyxml2::XMLNode::DeleteChildren

; 1792 : 
; 1793 : #ifdef DEBUG
; 1794 :     const bool hadError = Error();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Error@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::Error
  0002f	88 45 fb	 mov	 BYTE PTR _hadError$[ebp], al

; 1795 : #endif
; 1796 :     _errorID = XML_NO_ERROR;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 1797 :     _errorStr1 = 0;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 1798 :     _errorStr2 = 0;

  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0

; 1799 : 
; 1800 :     delete [] _charBuffer;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00056	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00059	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00062	83 c4 04	 add	 esp, 4

; 1801 :     _charBuffer = 0;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 1802 : 
; 1803 : #if 0
; 1804 :     _textPool.Trace( "text" );
; 1805 :     _elementPool.Trace( "element" );
; 1806 :     _commentPool.Trace( "comment" );
; 1807 :     _attributePool.Trace( "attribute" );
; 1808 : #endif
; 1809 :     
; 1810 : #ifdef DEBUG
; 1811 :     if ( !hadError ) {

  0006f	0f b6 4d fb	 movzx	 ecx, BYTE PTR _hadError$[ebp]
  00073	85 c9		 test	 ecx, ecx
  00075	0f 85 86 00 00
	00		 jne	 $LN1@Clear

; 1812 :         TIXMLASSERT( _elementPool.CurrentAllocs()   == _elementPool.Untracked() );

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 c1 44	 add	 ecx, 68			; 00000044H
  00081	e8 00 00 00 00	 call	 ?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<52>::CurrentAllocs
  00086	8b f0		 mov	 esi, eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 c1 44	 add	 ecx, 68			; 00000044H
  0008e	e8 00 00 00 00	 call	 ?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<52>::Untracked
  00093	3b f0		 cmp	 esi, eax
  00095	74 01		 je	 SHORT $LN3@Clear
  00097	cc		 int	 3
$LN3@Clear:

; 1813 :         TIXMLASSERT( _attributePool.CurrentAllocs() == _attributePool.Untracked() );

  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000a1	e8 00 00 00 00	 call	 ?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<36>::CurrentAllocs
  000a6	8b f0		 mov	 esi, eax
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  000b1	e8 00 00 00 00	 call	 ?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<36>::Untracked
  000b6	3b f0		 cmp	 esi, eax
  000b8	74 01		 je	 SHORT $LN4@Clear
  000ba	cc		 int	 3
$LN4@Clear:

; 1814 :         TIXMLASSERT( _textPool.CurrentAllocs()      == _textPool.Untracked() );

  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  000c4	e8 00 00 00 00	 call	 ?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<48>::CurrentAllocs
  000c9	8b f0		 mov	 esi, eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  000d4	e8 00 00 00 00	 call	 ?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<48>::Untracked
  000d9	3b f0		 cmp	 esi, eax
  000db	74 01		 je	 SHORT $LN5@Clear
  000dd	cc		 int	 3
$LN5@Clear:

; 1815 :         TIXMLASSERT( _commentPool.CurrentAllocs()   == _commentPool.Untracked() );

  000de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000e7	e8 00 00 00 00	 call	 ?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<44>::CurrentAllocs
  000ec	8b f0		 mov	 esi, eax
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000f7	e8 00 00 00 00	 call	 ?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<44>::Untracked
  000fc	3b f0		 cmp	 esi, eax
  000fe	74 01		 je	 SHORT $LN1@Clear
  00100	cc		 int	 3
$LN1@Clear:

; 1816 :     }
; 1817 : #endif
; 1818 : }

  00101	5e		 pop	 esi
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	3b ec		 cmp	 ebp, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
?Clear@XMLDocument@tinyxml2@@QAEXXZ ENDP		; tinyxml2::XMLDocument::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv130 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_ele$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewElement
; _this$ = ecx

; 1822 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1823 :     TIXMLASSERT( sizeof( XMLElement ) == _elementPool.ItemSize() );

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 44	 add	 ecx, 68			; 00000044H
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  0004c	8b f4		 mov	 esi, esp
  0004e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00051	ff d0		 call	 eax
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	83 f8 34	 cmp	 eax, 52			; 00000034H
  0005d	74 01		 je	 SHORT $LN2@NewElement
  0005f	cc		 int	 3
$LN2@NewElement:

; 1824 :     XMLElement* ele = new (_elementPool.Alloc()) XMLElement( this );

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	83 c1 44	 add	 ecx, 68			; 00000044H
  00066	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00069	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0006c	8b f4		 mov	 esi, esp
  0006e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00071	ff d2		 call	 edx
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0007d	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00080	50		 push	 eax
  00081	6a 34		 push	 52			; 00000034H
  00083	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00088	83 c4 08	 add	 esp, 8
  0008b	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00095	83 7d e4 00	 cmp	 DWORD PTR $T3[ebp], 0
  00099	74 11		 je	 SHORT $LN4@NewElement
  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  000a2	e8 00 00 00 00	 call	 ??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLElement::XMLElement
  000a7	89 45 dc	 mov	 DWORD PTR tv130[ebp], eax
  000aa	eb 07		 jmp	 SHORT $LN5@NewElement
$LN4@NewElement:
  000ac	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN5@NewElement:
  000b3	8b 55 dc	 mov	 edx, DWORD PTR tv130[ebp]
  000b6	89 55 e8	 mov	 DWORD PTR $T4[ebp], edx
  000b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c0	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  000c3	89 45 ec	 mov	 DWORD PTR _ele$[ebp], eax

; 1825 :     ele->_memPool = &_elementPool;

  000c6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	83 c1 44	 add	 ecx, 68			; 00000044H
  000cc	8b 55 ec	 mov	 edx, DWORD PTR _ele$[ebp]
  000cf	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1826 :     ele->SetName( name );

  000d2	6a 00		 push	 0
  000d4	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _ele$[ebp]
  000db	e8 00 00 00 00	 call	 ?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLElement::SetName

; 1827 :     return ele;

  000e0	8b 45 ec	 mov	 eax, DWORD PTR _ele$[ebp]

; 1828 : }

  000e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ed	59		 pop	 ecx
  000ee	5e		 pop	 esi
  000ef	83 c4 24	 add	 esp, 36			; 00000024H
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z$0:
  00000	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewElement
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv130 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_comment$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewComment
; _this$ = ecx

; 1832 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1833 :     TIXMLASSERT( sizeof( XMLComment ) == _commentPool.ItemSize() );

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  00052	8b f4		 mov	 esi, esp
  00054	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00057	ff d0		 call	 eax
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00063	74 01		 je	 SHORT $LN2@NewComment
  00065	cc		 int	 3
$LN2@NewComment:

; 1834 :     XMLComment* comment = new (_commentPool.Alloc()) XMLComment( this );

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0006f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  00078	8b f4		 mov	 esi, esp
  0007a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007d	ff d2		 call	 edx
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00089	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0008c	50		 push	 eax
  0008d	6a 2c		 push	 44			; 0000002cH
  0008f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00094	83 c4 08	 add	 esp, 8
  00097	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a1	83 7d e4 00	 cmp	 DWORD PTR $T3[ebp], 0
  000a5	74 11		 je	 SHORT $LN4@NewComment
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  000ae	e8 00 00 00 00	 call	 ??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLComment::XMLComment
  000b3	89 45 dc	 mov	 DWORD PTR tv130[ebp], eax
  000b6	eb 07		 jmp	 SHORT $LN5@NewComment
$LN4@NewComment:
  000b8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN5@NewComment:
  000bf	8b 55 dc	 mov	 edx, DWORD PTR tv130[ebp]
  000c2	89 55 e8	 mov	 DWORD PTR $T4[ebp], edx
  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  000cf	89 45 ec	 mov	 DWORD PTR _comment$[ebp], eax

; 1835 :     comment->_memPool = &_commentPool;

  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000db	8b 55 ec	 mov	 edx, DWORD PTR _comment$[ebp]
  000de	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1836 :     comment->SetValue( str );

  000e1	6a 00		 push	 0
  000e3	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d ec	 mov	 ecx, DWORD PTR _comment$[ebp]
  000ea	e8 00 00 00 00	 call	 ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLNode::SetValue

; 1837 :     return comment;

  000ef	8b 45 ec	 mov	 eax, DWORD PTR _comment$[ebp]

; 1838 : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5e		 pop	 esi
  000fe	83 c4 24	 add	 esp, 36			; 00000024H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z$0:
  00000	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewComment
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv130 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_text$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewText
; _this$ = ecx

; 1842 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1843 :     TIXMLASSERT( sizeof( XMLText ) == _textPool.ItemSize() );

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 90 dc 00 00
	00		 mov	 edx, DWORD PTR [eax+220]
  00052	8b f4		 mov	 esi, esp
  00054	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00057	ff d0		 call	 eax
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	83 f8 30	 cmp	 eax, 48			; 00000030H
  00063	74 01		 je	 SHORT $LN2@NewText
  00065	cc		 int	 3
$LN2@NewText:

; 1844 :     XMLText* text = new (_textPool.Alloc()) XMLText( this );

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  0006f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  00078	8b f4		 mov	 esi, esp
  0007a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007d	ff d2		 call	 edx
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00089	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0008c	50		 push	 eax
  0008d	6a 30		 push	 48			; 00000030H
  0008f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00094	83 c4 08	 add	 esp, 8
  00097	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a1	83 7d e4 00	 cmp	 DWORD PTR $T3[ebp], 0
  000a5	74 11		 je	 SHORT $LN4@NewText
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  000ae	e8 00 00 00 00	 call	 ??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLText::XMLText
  000b3	89 45 dc	 mov	 DWORD PTR tv130[ebp], eax
  000b6	eb 07		 jmp	 SHORT $LN5@NewText
$LN4@NewText:
  000b8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN5@NewText:
  000bf	8b 55 dc	 mov	 edx, DWORD PTR tv130[ebp]
  000c2	89 55 e8	 mov	 DWORD PTR $T4[ebp], edx
  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  000cf	89 45 ec	 mov	 DWORD PTR _text$[ebp], eax

; 1845 :     text->_memPool = &_textPool;

  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  000db	8b 55 ec	 mov	 edx, DWORD PTR _text$[ebp]
  000de	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1846 :     text->SetValue( str );

  000e1	6a 00		 push	 0
  000e3	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d ec	 mov	 ecx, DWORD PTR _text$[ebp]
  000ea	e8 00 00 00 00	 call	 ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLNode::SetValue

; 1847 :     return text;

  000ef	8b 45 ec	 mov	 eax, DWORD PTR _text$[ebp]

; 1848 : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5e		 pop	 esi
  000fe	83 c4 24	 add	 esp, 36			; 00000024H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z$0:
  00000	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewText
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv147 = -40						; size = 4
tv130 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_dec$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewDeclaration
; _this$ = ecx

; 1852 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001d	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00020	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00023	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00026	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00029	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1853 :     TIXMLASSERT( sizeof( XMLDeclaration ) == _commentPool.ItemSize() );

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  00055	8b f4		 mov	 esi, esp
  00057	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005a	ff d0		 call	 eax
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00066	74 01		 je	 SHORT $LN2@NewDeclara
  00068	cc		 int	 3
$LN2@NewDeclara:

; 1854 :     XMLDeclaration* dec = new (_commentPool.Alloc()) XMLDeclaration( this );

  00069	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00072	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  0007b	8b f4		 mov	 esi, esp
  0007d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00080	ff d2		 call	 edx
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0008c	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0008f	50		 push	 eax
  00090	6a 2c		 push	 44			; 0000002cH
  00092	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00097	83 c4 08	 add	 esp, 8
  0009a	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a4	83 7d e4 00	 cmp	 DWORD PTR $T3[ebp], 0
  000a8	74 11		 je	 SHORT $LN4@NewDeclara
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  000b1	e8 00 00 00 00	 call	 ??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLDeclaration::XMLDeclaration
  000b6	89 45 dc	 mov	 DWORD PTR tv130[ebp], eax
  000b9	eb 07		 jmp	 SHORT $LN5@NewDeclara
$LN4@NewDeclara:
  000bb	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN5@NewDeclara:
  000c2	8b 55 dc	 mov	 edx, DWORD PTR tv130[ebp]
  000c5	89 55 e8	 mov	 DWORD PTR $T4[ebp], edx
  000c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cf	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  000d2	89 45 ec	 mov	 DWORD PTR _dec$[ebp], eax

; 1855 :     dec->_memPool = &_commentPool;

  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000de	8b 55 ec	 mov	 edx, DWORD PTR _dec$[ebp]
  000e1	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1856 :     dec->SetValue( str ? str : "xml version=\"1.0\" encoding=\"UTF-8\"" );

  000e4	83 7d 08 00	 cmp	 DWORD PTR _str$[ebp], 0
  000e8	74 08		 je	 SHORT $LN6@NewDeclara
  000ea	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000ed	89 45 d8	 mov	 DWORD PTR tv147[ebp], eax
  000f0	eb 07		 jmp	 SHORT $LN7@NewDeclara
$LN6@NewDeclara:
  000f2	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv147[ebp], OFFSET $SG4294882657
$LN7@NewDeclara:
  000f9	6a 00		 push	 0
  000fb	8b 4d d8	 mov	 ecx, DWORD PTR tv147[ebp]
  000fe	51		 push	 ecx
  000ff	8b 4d ec	 mov	 ecx, DWORD PTR _dec$[ebp]
  00102	e8 00 00 00 00	 call	 ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLNode::SetValue

; 1857 :     return dec;

  00107	8b 45 ec	 mov	 eax, DWORD PTR _dec$[ebp]

; 1858 : }

  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5e		 pop	 esi
  00116	83 c4 28	 add	 esp, 40			; 00000028H
  00119	3b ec		 cmp	 ebp, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z$0:
  00000	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewDeclaration
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv130 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_unk$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewUnknown
; _this$ = ecx

; 1862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1863 :     TIXMLASSERT( sizeof( XMLUnknown ) == _commentPool.ItemSize() );

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  00052	8b f4		 mov	 esi, esp
  00054	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00057	ff d0		 call	 eax
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00063	74 01		 je	 SHORT $LN2@NewUnknown
  00065	cc		 int	 3
$LN2@NewUnknown:

; 1864 :     XMLUnknown* unk = new (_commentPool.Alloc()) XMLUnknown( this );

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0006f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  00078	8b f4		 mov	 esi, esp
  0007a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007d	ff d2		 call	 edx
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00089	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0008c	50		 push	 eax
  0008d	6a 2c		 push	 44			; 0000002cH
  0008f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00094	83 c4 08	 add	 esp, 8
  00097	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a1	83 7d e4 00	 cmp	 DWORD PTR $T3[ebp], 0
  000a5	74 11		 je	 SHORT $LN4@NewUnknown
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  000ae	e8 00 00 00 00	 call	 ??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLUnknown::XMLUnknown
  000b3	89 45 dc	 mov	 DWORD PTR tv130[ebp], eax
  000b6	eb 07		 jmp	 SHORT $LN5@NewUnknown
$LN4@NewUnknown:
  000b8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN5@NewUnknown:
  000bf	8b 55 dc	 mov	 edx, DWORD PTR tv130[ebp]
  000c2	89 55 e8	 mov	 DWORD PTR $T4[ebp], edx
  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  000cf	89 45 ec	 mov	 DWORD PTR _unk$[ebp], eax

; 1865 :     unk->_memPool = &_commentPool;

  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000db	8b 55 ec	 mov	 edx, DWORD PTR _unk$[ebp]
  000de	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1866 :     unk->SetValue( str );

  000e1	6a 00		 push	 0
  000e3	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d ec	 mov	 ecx, DWORD PTR _unk$[ebp]
  000ea	e8 00 00 00 00	 call	 ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLNode::SetValue

; 1867 :     return unk;

  000ef	8b 45 ec	 mov	 eax, DWORD PTR _unk$[ebp]

; 1868 : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5e		 pop	 esi
  000fe	83 c4 24	 add	 esp, 36			; 00000024H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z$0:
  00000	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	50		 push	 eax
  00004	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewUnknown
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_err$ = -16						; size = 4
_fp$ = -8						; size = 4
_filepath$ = 8						; size = 4
_mode$ = 12						; size = 4
?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z PROC		; tinyxml2::callfopen

; 1871 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1872 :     TIXMLASSERT( filepath );

  00018	83 7d 08 00	 cmp	 DWORD PTR _filepath$[ebp], 0
  0001c	75 01		 jne	 SHORT $LN2@callfopen
  0001e	cc		 int	 3
$LN2@callfopen:

; 1873 :     TIXMLASSERT( mode );

  0001f	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00023	75 01		 jne	 SHORT $LN3@callfopen
  00025	cc		 int	 3
$LN3@callfopen:

; 1874 : #if defined(_MSC_VER) && (_MSC_VER >= 1400 ) && (!defined WINCE)
; 1875 :     FILE* fp = 0;

  00026	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fp$[ebp], 0

; 1876 :     errno_t err = fopen_s( &fp, filepath, mode );

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _filepath$[ebp]
  00036	51		 push	 ecx
  00037	8d 55 f8	 lea	 edx, DWORD PTR _fp$[ebp]
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen_s
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 1877 :     if ( err ) {

  0004e	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  00052	74 04		 je	 SHORT $LN4@callfopen

; 1878 :         return 0;

  00054	33 c0		 xor	 eax, eax
  00056	eb 03		 jmp	 SHORT $LN1@callfopen
$LN4@callfopen:

; 1879 :     }
; 1880 : #else
; 1881 :     FILE* fp = fopen( filepath, mode );
; 1882 : #endif
; 1883 :     return fp;

  00058	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
$LN1@callfopen:

; 1884 : }

  0005b	52		 push	 edx
  0005c	8b cd		 mov	 ecx, ebp
  0005e	50		 push	 eax
  0005f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@callfopen
  00065	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006a	58		 pop	 eax
  0006b	5a		 pop	 edx
  0006c	5e		 pop	 esi
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
  0007b	90		 npad	 1
$LN8@callfopen:
  0007c	01 00 00 00	 DD	 1
  00080	00 00 00 00	 DD	 $LN7@callfopen
$LN7@callfopen:
  00084	f8 ff ff ff	 DD	 -8			; fffffff8H
  00088	04 00 00 00	 DD	 4
  0008c	00 00 00 00	 DD	 $LN6@callfopen
$LN6@callfopen:
  00090	66		 DB	 102			; 00000066H
  00091	70		 DB	 112			; 00000070H
  00092	00		 DB	 0
?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z ENDP		; tinyxml2::callfopen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node$ = 8						; size = 4
?DeleteNode@XMLDocument@tinyxml2@@QAEXPAVXMLNode@2@@Z PROC ; tinyxml2::XMLDocument::DeleteNode
; _this$ = ecx

; 1886 : void XMLDocument::DeleteNode( XMLNode* node )	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1887 :     TIXMLASSERT( node );

  0000f	83 7d 08 00	 cmp	 DWORD PTR _node$[ebp], 0
  00013	75 01		 jne	 SHORT $LN2@DeleteNode
  00015	cc		 int	 3
$LN2@DeleteNode:

; 1888 :     TIXMLASSERT(node->_document == this );

  00016	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00019	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001c	3b 4d fc	 cmp	 ecx, DWORD PTR _this$[ebp]
  0001f	74 01		 je	 SHORT $LN3@DeleteNode
  00021	cc		 int	 3
$LN3@DeleteNode:

; 1889 :     if (node->_parent) {

  00022	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  00025	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00029	74 11		 je	 SHORT $LN4@DeleteNode

; 1890 :         node->_parent->DeleteChild( node );

  0002b	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00032	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00035	e8 00 00 00 00	 call	 ?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z ; tinyxml2::XMLNode::DeleteChild

; 1891 :     }
; 1892 :     else {

  0003a	eb 28		 jmp	 SHORT $LN1@DeleteNode
$LN4@DeleteNode:

; 1893 :         // Isn't in the tree.
; 1894 :         // Use the parent delete.
; 1895 :         // Also, we need to mark it tracked: we 'know'
; 1896 :         // it was never used.
; 1897 :         node->_memPool->SetTracked();

  0003c	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  0003f	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00045	8b 10		 mov	 edx, DWORD PTR [eax]
  00047	8b f4		 mov	 esi, esp
  00049	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  0004c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004f	ff d0		 call	 eax
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1898 :         // Call the static XMLNode version:
; 1899 :         XMLNode::DeleteNode(node);

  00058	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
  00061	83 c4 04	 add	 esp, 4
$LN1@DeleteNode:

; 1900 :     }
; 1901 : }

  00064	5e		 pop	 esi
  00065	83 c4 04	 add	 esp, 4
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?DeleteNode@XMLDocument@tinyxml2@@QAEXPAVXMLNode@2@@Z ENDP ; tinyxml2::XMLDocument::DeleteNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_fp$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z PROC ; tinyxml2::XMLDocument::LoadFile
; _this$ = ecx

; 1905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1906 :     Clear();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Clear@XMLDocument@tinyxml2@@QAEXXZ ; tinyxml2::XMLDocument::Clear

; 1907 :     FILE* fp = callfopen( filename, "rb" );

  00020	68 00 00 00 00	 push	 OFFSET $SG4294882656
  00025	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z ; tinyxml2::callfopen
  0002e	83 c4 08	 add	 esp, 8
  00031	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 1908 :     if ( !fp ) {

  00034	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00038	75 18		 jne	 SHORT $LN2@LoadFile

; 1909 :         SetError( XML_ERROR_FILE_NOT_FOUND, filename, 0 );

  0003a	6a 00		 push	 0
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0003f	51		 push	 ecx
  00040	6a 03		 push	 3
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1910 :         return _errorID;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00050	eb 28		 jmp	 SHORT $LN1@LoadFile
$LN2@LoadFile:

; 1911 :     }
; 1912 :     LoadFile( fp );

  00052	8b 45 f8	 mov	 eax, DWORD PTR _fp$[ebp]
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z ; tinyxml2::XMLDocument::LoadFile

; 1913 :     fclose( fp );

  0005e	8b f4		 mov	 esi, esp
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _fp$[ebp]
  00063	51		 push	 ecx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0006a	83 c4 04	 add	 esp, 4
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1914 :     return _errorID;

  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
$LN1@LoadFile:

; 1915 : }

  0007a	5e		 pop	 esi
  0007b	83 c4 08	 add	 esp, 8
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z ENDP ; tinyxml2::XMLDocument::LoadFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
_read$ = -16						; size = 4
_size$ = -12						; size = 4
_filelength$ = -8					; size = 4
_this$ = -4						; size = 4
_fp$ = 8						; size = 4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z PROC ; tinyxml2::XMLDocument::LoadFile
; _this$ = ecx

; 1939 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1940 :     Clear();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?Clear@XMLDocument@tinyxml2@@QAEXXZ ; tinyxml2::XMLDocument::Clear

; 1941 : 
; 1942 :     fseek( fp, 0, SEEK_SET );

  00026	8b f4		 mov	 esi, esp
  00028	6a 00		 push	 0
  0002a	6a 00		 push	 0
  0002c	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1943 :     if ( fgetc( fp ) == EOF && ferror( fp ) != 0 ) {

  00040	8b f4		 mov	 esi, esp
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  00045	51		 push	 ecx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0004c	83 c4 04	 add	 esp, 4
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 33		 jne	 SHORT $LN2@LoadFile
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 55 08	 mov	 edx, DWORD PTR _fp$[ebp]
  00060	52		 push	 edx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ferror
  00067	83 c4 04	 add	 esp, 4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	85 c0		 test	 eax, eax
  00073	74 19		 je	 SHORT $LN2@LoadFile

; 1944 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

  00075	6a 00		 push	 0
  00077	6a 00		 push	 0
  00079	6a 05		 push	 5
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1945 :         return _errorID;

  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00089	e9 41 01 00 00	 jmp	 $LN1@LoadFile
$LN2@LoadFile:

; 1946 :     }
; 1947 : 
; 1948 :     fseek( fp, 0, SEEK_END );

  0008e	8b f4		 mov	 esi, esp
  00090	6a 02		 push	 2
  00092	6a 00		 push	 0
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  00097	51		 push	 ecx
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a1	3b f4		 cmp	 esi, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1949 :     const long filelength = ftell( fp );

  000a8	8b f4		 mov	 esi, esp
  000aa	8b 55 08	 mov	 edx, DWORD PTR _fp$[ebp]
  000ad	52		 push	 edx
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  000b4	83 c4 04	 add	 esp, 4
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	89 45 f8	 mov	 DWORD PTR _filelength$[ebp], eax

; 1950 :     fseek( fp, 0, SEEK_SET );

  000c1	8b f4		 mov	 esi, esp
  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	8b 45 08	 mov	 eax, DWORD PTR _fp$[ebp]
  000ca	50		 push	 eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d4	3b f4		 cmp	 esi, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1951 :     if ( filelength == -1L ) {

  000db	83 7d f8 ff	 cmp	 DWORD PTR _filelength$[ebp], -1
  000df	75 19		 jne	 SHORT $LN3@LoadFile

; 1952 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	6a 05		 push	 5
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1953 :         return _errorID;

  000ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000f5	e9 d5 00 00 00	 jmp	 $LN1@LoadFile
$LN3@LoadFile:

; 1954 :     }
; 1955 : 
; 1956 :     if ( !LongFitsIntoSizeTMinusOne<>::Fits( filelength ) ) {

  000fa	8b 55 f8	 mov	 edx, DWORD PTR _filelength$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?Fits@?$LongFitsIntoSizeTMinusOne@$00@tinyxml2@@SA_NK@Z ; tinyxml2::LongFitsIntoSizeTMinusOne<1>::Fits
  00103	83 c4 04	 add	 esp, 4
  00106	0f b6 c0	 movzx	 eax, al
  00109	85 c0		 test	 eax, eax
  0010b	75 19		 jne	 SHORT $LN4@LoadFile

; 1957 :         // Cannot handle files which won't fit in buffer together with null terminator
; 1958 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

  0010d	6a 00		 push	 0
  0010f	6a 00		 push	 0
  00111	6a 05		 push	 5
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1959 :         return _errorID;

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00121	e9 a9 00 00 00	 jmp	 $LN1@LoadFile
$LN4@LoadFile:

; 1960 :     }
; 1961 : 
; 1962 :     if ( filelength == 0 ) {

  00126	83 7d f8 00	 cmp	 DWORD PTR _filelength$[ebp], 0
  0012a	75 19		 jne	 SHORT $LN5@LoadFile

; 1963 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	6a 0f		 push	 15			; 0000000fH
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1964 :         return _errorID;

  0013a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00140	e9 8a 00 00 00	 jmp	 $LN1@LoadFile
$LN5@LoadFile:

; 1965 :     }
; 1966 : 
; 1967 :     const size_t size = filelength;

  00145	8b 45 f8	 mov	 eax, DWORD PTR _filelength$[ebp]
  00148	89 45 f4	 mov	 DWORD PTR _size$[ebp], eax

; 1968 :     TIXMLASSERT( _charBuffer == 0 );

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  00152	74 01		 je	 SHORT $LN6@LoadFile
  00154	cc		 int	 3
$LN6@LoadFile:

; 1969 :     _charBuffer = new char[size+1];

  00155	8b 55 f4	 mov	 edx, DWORD PTR _size$[ebp]
  00158	83 c2 01	 add	 edx, 1
  0015b	52		 push	 edx
  0015c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00161	83 c4 04	 add	 esp, 4
  00164	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  00167	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  0016d	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 1970 :     size_t read = fread( _charBuffer, 1, size, fp );

  00170	8b f4		 mov	 esi, esp
  00172	8b 55 08	 mov	 edx, DWORD PTR _fp$[ebp]
  00175	52		 push	 edx
  00176	8b 45 f4	 mov	 eax, DWORD PTR _size$[ebp]
  00179	50		 push	 eax
  0017a	6a 01		 push	 1
  0017c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017f	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00182	52		 push	 edx
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00189	83 c4 10	 add	 esp, 16			; 00000010H
  0018c	3b f4		 cmp	 esi, esp
  0018e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00193	89 45 f0	 mov	 DWORD PTR _read$[ebp], eax

; 1971 :     if ( read != size ) {

  00196	8b 45 f0	 mov	 eax, DWORD PTR _read$[ebp]
  00199	3b 45 f4	 cmp	 eax, DWORD PTR _size$[ebp]
  0019c	74 16		 je	 SHORT $LN7@LoadFile

; 1972 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 05		 push	 5
  001a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a7	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1973 :         return _errorID;

  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  001b2	eb 1b		 jmp	 SHORT $LN1@LoadFile
$LN7@LoadFile:

; 1974 :     }
; 1975 : 
; 1976 :     _charBuffer[size] = 0;

  001b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001b7	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  001ba	8b 4d f4	 mov	 ecx, DWORD PTR _size$[ebp]
  001bd	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1977 : 
; 1978 :     Parse();

  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	e8 00 00 00 00	 call	 ?Parse@XMLDocument@tinyxml2@@AAEXXZ ; tinyxml2::XMLDocument::Parse

; 1979 :     return _errorID;

  001c9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001cc	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
$LN1@LoadFile:

; 1980 : }

  001cf	5e		 pop	 esi
  001d0	83 c4 14	 add	 esp, 20			; 00000014H
  001d3	3b ec		 cmp	 ebp, esp
  001d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 04 00	 ret	 4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z ENDP ; tinyxml2::XMLDocument::LoadFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_fp$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_compact$ = 12						; size = 1
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z PROC ; tinyxml2::XMLDocument::SaveFile
; _this$ = ecx

; 1984 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1985 :     FILE* fp = callfopen( filename, "w" );

  00018	68 00 00 00 00	 push	 OFFSET $SG4294882655
  0001d	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z ; tinyxml2::callfopen
  00026	83 c4 08	 add	 esp, 8
  00029	89 45 f8	 mov	 DWORD PTR _fp$[ebp], eax

; 1986 :     if ( !fp ) {

  0002c	83 7d f8 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00030	75 18		 jne	 SHORT $LN2@SaveFile

; 1987 :         SetError( XML_ERROR_FILE_COULD_NOT_BE_OPENED, filename, 0 );

  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  00037	51		 push	 ecx
  00038	6a 04		 push	 4
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1988 :         return _errorID;

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00048	eb 2d		 jmp	 SHORT $LN1@SaveFile
$LN2@SaveFile:

; 1989 :     }
; 1990 :     SaveFile(fp, compact);

  0004a	0f b6 45 0c	 movzx	 eax, BYTE PTR _compact$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _fp$[ebp]
  00052	51		 push	 ecx
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z ; tinyxml2::XMLDocument::SaveFile

; 1991 :     fclose( fp );

  0005b	8b f4		 mov	 esi, esp
  0005d	8b 55 f8	 mov	 edx, DWORD PTR _fp$[ebp]
  00060	52		 push	 edx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00067	83 c4 04	 add	 esp, 4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1992 :     return _errorID;

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
$LN1@SaveFile:

; 1993 : }

  00077	5e		 pop	 esi
  00078	83 c4 08	 add	 esp, 8
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z ENDP ; tinyxml2::XMLDocument::SaveFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T2 = -272						; size = 4
_stream$ = -264						; size = 240
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fp$ = 8						; size = 4
_compact$ = 12						; size = 1
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z PROC ; tinyxml2::XMLDocument::SaveFile
; _this$ = ecx

; 1997 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  0001f	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1998 :     // Clear any error from the last save, otherwise it will get reported
; 1999 :     // for *this* call.
; 2000 :     SetError( XML_NO_ERROR, 0, 0 );

  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 2001 :     XMLPrinter stream( fp, compact );

  00051	6a 00		 push	 0
  00053	0f b6 45 0c	 movzx	 eax, BYTE PTR _compact$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _fp$[ebp]
  0005b	51		 push	 ecx
  0005c	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stream$[ebp]
  00062	e8 00 00 00 00	 call	 ??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z ; tinyxml2::XMLPrinter::XMLPrinter
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2002 :     Print( &stream );

  0006e	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _stream$[ebp]
  00074	52		 push	 edx
  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z ; tinyxml2::XMLDocument::Print

; 2003 :     return _errorID;

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00083	89 8d f0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00089	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00090	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stream$[ebp]
  00096	e8 00 00 00 00	 call	 ??1XMLPrinter@tinyxml2@@UAE@XZ ; tinyxml2::XMLPrinter::~XMLPrinter
  0009b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 2004 : }

  000a1	52		 push	 edx
  000a2	8b cd		 mov	 ecx, ebp
  000a4	50		 push	 eax
  000a5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@SaveFile
  000ab	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b0	58		 pop	 eax
  000b1	5a		 pop	 edx
  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	33 cd		 xor	 ecx, ebp
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
  000db	90		 npad	 1
$LN7@SaveFile:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN6@SaveFile
$LN6@SaveFile:
  000e4	f8 fe ff ff	 DD	 -264			; fffffef8H
  000e8	f0 00 00 00	 DD	 240			; 000000f0H
  000ec	00 00 00 00	 DD	 $LN4@SaveFile
$LN4@SaveFile:
  000f0	73		 DB	 115			; 00000073H
  000f1	74		 DB	 116			; 00000074H
  000f2	72		 DB	 114			; 00000072H
  000f3	65		 DB	 101			; 00000065H
  000f4	61		 DB	 97			; 00000061H
  000f5	6d		 DB	 109			; 0000006dH
  000f6	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z$0:
  00000	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stream$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1XMLPrinter@tinyxml2@@UAE@XZ ; tinyxml2::XMLPrinter::~XMLPrinter
__ehhandler$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a f4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-268]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z ENDP ; tinyxml2::XMLDocument::SaveFile
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z PROC ; tinyxml2::XMLDocument::Parse
; _this$ = ecx

; 2008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2009 :     Clear();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Clear@XMLDocument@tinyxml2@@QAEXXZ ; tinyxml2::XMLDocument::Clear

; 2010 : 
; 2011 :     if ( len == 0 || !p || !*p ) {

  00020	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00024	74 10		 je	 SHORT $LN3@Parse
  00026	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  0002a	74 0a		 je	 SHORT $LN3@Parse
  0002c	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0002f	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00032	85 c9		 test	 ecx, ecx
  00034	75 19		 jne	 SHORT $LN2@Parse
$LN3@Parse:

; 2012 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 0f		 push	 15			; 0000000fH
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 2013 :         return _errorID;

  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0004a	e9 15 01 00 00	 jmp	 $LN1@Parse
$LN2@Parse:

; 2014 :     }
; 2015 :     if ( len == (size_t)(-1) ) {

  0004f	83 7d 0c ff	 cmp	 DWORD PTR _len$[ebp], -1
  00053	75 19		 jne	 SHORT $LN4@Parse

; 2016 :         len = strlen( p );

  00055	8b f4		 mov	 esi, esp
  00057	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strlen
  00061	83 c4 04	 add	 esp, 4
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
$LN4@Parse:

; 2017 :     }
; 2018 :     TIXMLASSERT( _charBuffer == 0 );

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  00075	74 01		 je	 SHORT $LN5@Parse
  00077	cc		 int	 3
$LN5@Parse:

; 2019 :     _charBuffer = new char[ len+1 ];

  00078	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]
  0007b	83 c2 01	 add	 edx, 1
  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00084	83 c4 04	 add	 esp, 4
  00087	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00090	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 2020 :     memcpy( _charBuffer, p, len );

  00093	8b f4		 mov	 esi, esp
  00095	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]
  00098	52		 push	 edx
  00099	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000a3	52		 push	 edx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2021 :     _charBuffer[len] = 0;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000ba	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]
  000bd	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 2022 : 
; 2023 :     Parse();

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	e8 00 00 00 00	 call	 ?Parse@XMLDocument@tinyxml2@@AAEXXZ ; tinyxml2::XMLDocument::Parse

; 2024 :     if ( Error() ) {

  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	e8 00 00 00 00	 call	 ?Error@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::Error
  000d1	0f b6 c0	 movzx	 eax, al
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 82 00 00
	00		 je	 $LN6@Parse

; 2025 :         // clean up now essentially dangling memory.
; 2026 :         // and the parse fail can put objects in the
; 2027 :         // pools that are dead and inaccessible.
; 2028 :         DeleteChildren();

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ; tinyxml2::XMLNode::DeleteChildren

; 2029 :         _elementPool.Clear();

  000e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	83 c1 44	 add	 ecx, 68			; 00000044H
  000ea	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000f0	8b f4		 mov	 esi, esp
  000f2	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000f5	ff d2		 call	 edx
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2030 :         _attributePool.Clear();

  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00107	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00110	8b f4		 mov	 esi, esp
  00112	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00115	ff d0		 call	 eax
  00117	3b f4		 cmp	 esi, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2031 :         _textPool.Clear();

  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	81 c1 dc 00 00
	00		 add	 ecx, 220		; 000000dcH
  00127	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012a	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  00130	8b f4		 mov	 esi, esp
  00132	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00135	ff d2		 call	 edx
  00137	3b f4		 cmp	 esi, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2032 :         _commentPool.Clear();

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00147	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [eax+296]
  00150	8b f4		 mov	 esi, esp
  00152	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00155	ff d0		 call	 eax
  00157	3b f4		 cmp	 esi, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Parse:

; 2033 :     }
; 2034 :     return _errorID;

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
$LN1@Parse:

; 2035 : }

  00164	5e		 pop	 esi
  00165	83 c4 08	 add	 esp, 8
  00168	3b ec		 cmp	 ebp, esp
  0016a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 08 00	 ret	 8
?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z ENDP ; tinyxml2::XMLDocument::Parse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_stdoutStreamer$2 = -264				; size = 240
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_streamer$ = 8						; size = 4
?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z PROC ; tinyxml2::XMLDocument::Print
; _this$ = ecx

; 2039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00020	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2040 :     if ( streamer ) {

  00044	83 7d 08 00	 cmp	 DWORD PTR _streamer$[ebp], 0
  00048	74 1c		 je	 SHORT $LN2@Print

; 2041 :         Accept( streamer );

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _streamer$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0005b	ff d0		 call	 eax
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2042 :     }
; 2043 :     else {

  00064	eb 5a		 jmp	 SHORT $LN1@Print
$LN2@Print:

; 2044 :         XMLPrinter stdoutStreamer( stdout );

  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	8b f4		 mov	 esi, esp
  0006c	6a 01		 push	 1
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00074	83 c4 04	 add	 esp, 4
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	50		 push	 eax
  0007f	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stdoutStreamer$2[ebp]
  00085	e8 00 00 00 00	 call	 ??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z ; tinyxml2::XMLPrinter::XMLPrinter
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2045 :         Accept( &stdoutStreamer );

  00091	8b f4		 mov	 esi, esp
  00093	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stdoutStreamer$2[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	8b 02		 mov	 eax, DWORD PTR [edx]
  0009f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  000a5	ff d2		 call	 edx
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2046 :     }

  000ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b5	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stdoutStreamer$2[ebp]
  000bb	e8 00 00 00 00	 call	 ??1XMLPrinter@tinyxml2@@UAE@XZ ; tinyxml2::XMLPrinter::~XMLPrinter
$LN1@Print:

; 2047 : }

  000c0	52		 push	 edx
  000c1	8b cd		 mov	 ecx, ebp
  000c3	50		 push	 eax
  000c4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Print
  000ca	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cf	58		 pop	 eax
  000d0	5a		 pop	 edx
  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e1	33 cd		 xor	 ecx, ebp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
  000fb	90		 npad	 1
$LN9@Print:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN8@Print
$LN8@Print:
  00104	f8 fe ff ff	 DD	 -264			; fffffef8H
  00108	f0 00 00 00	 DD	 240			; 000000f0H
  0010c	00 00 00 00	 DD	 $LN6@Print
$LN6@Print:
  00110	73		 DB	 115			; 00000073H
  00111	74		 DB	 116			; 00000074H
  00112	64		 DB	 100			; 00000064H
  00113	6f		 DB	 111			; 0000006fH
  00114	75		 DB	 117			; 00000075H
  00115	74		 DB	 116			; 00000074H
  00116	53		 DB	 83			; 00000053H
  00117	74		 DB	 116			; 00000074H
  00118	72		 DB	 114			; 00000072H
  00119	65		 DB	 101			; 00000065H
  0011a	61		 DB	 97			; 00000061H
  0011b	6d		 DB	 109			; 0000006dH
  0011c	65		 DB	 101			; 00000065H
  0011d	72		 DB	 114			; 00000072H
  0011e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z$0:
  00000	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _stdoutStreamer$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1XMLPrinter@tinyxml2@@UAE@XZ ; tinyxml2::XMLPrinter::~XMLPrinter
__ehhandler$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a f4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-268]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z ENDP ; tinyxml2::XMLDocument::Print
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_error$ = 8						; size = 4
_str1$ = 12						; size = 4
_str2$ = 16						; size = 4
?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z PROC ; tinyxml2::XMLDocument::SetError
; _this$ = ecx

; 2051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2052 :     TIXMLASSERT( error >= 0 && error < XML_ERROR_COUNT );

  00017	83 7d 08 00	 cmp	 DWORD PTR _error$[ebp], 0
  0001b	7c 0f		 jl	 SHORT $LN4@SetError
  0001d	83 7d 08 14	 cmp	 DWORD PTR _error$[ebp], 20 ; 00000014H
  00021	7d 09		 jge	 SHORT $LN4@SetError
  00023	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0002a	eb 07		 jmp	 SHORT $LN5@SetError
$LN4@SetError:
  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN5@SetError:
  00033	83 7d f8 00	 cmp	 DWORD PTR tv66[ebp], 0
  00037	75 01		 jne	 SHORT $LN2@SetError
  00039	cc		 int	 3
$LN2@SetError:

; 2053 :     _errorID = error;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _error$[ebp]
  00040	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 2054 :     _errorStr1 = str1;

  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	8b 45 0c	 mov	 eax, DWORD PTR _str1$[ebp]
  00049	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 2055 :     _errorStr2 = str2;

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 55 10	 mov	 edx, DWORD PTR _str2$[ebp]
  00052	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 2056 : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ENDP ; tinyxml2::XMLDocument::SetError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv79 = -16						; size = 4
tv68 = -12						; size = 4
_errorName$ = -8					; size = 4
_this$ = -4						; size = 4
?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLDocument::ErrorName
; _this$ = ecx

; 2059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2060 : 	TIXMLASSERT( _errorID >= 0 && _errorID < XML_ERROR_COUNT );

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00021	7c 12		 jl	 SHORT $LN5@ErrorName
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 79 30 14	 cmp	 DWORD PTR [ecx+48], 20	; 00000014H
  0002a	7d 09		 jge	 SHORT $LN5@ErrorName
  0002c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00033	eb 07		 jmp	 SHORT $LN6@ErrorName
$LN5@ErrorName:
  00035	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN6@ErrorName:
  0003c	83 7d f4 00	 cmp	 DWORD PTR tv68[ebp], 0
  00040	75 01		 jne	 SHORT $LN2@ErrorName
  00042	cc		 int	 3
$LN2@ErrorName:

; 2061 :     const char* errorName = _errorNames[_errorID];

  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00049	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?_errorNames@XMLDocument@tinyxml2@@0PAPBDA[eax*4]
  00050	89 4d f8	 mov	 DWORD PTR _errorName$[ebp], ecx

; 2062 :     TIXMLASSERT( errorName && errorName[0] );

  00053	83 7d f8 00	 cmp	 DWORD PTR _errorName$[ebp], 0
  00057	74 1c		 je	 SHORT $LN7@ErrorName
  00059	ba 01 00 00 00	 mov	 edx, 1
  0005e	6b c2 00	 imul	 eax, edx, 0
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _errorName$[ebp]
  00064	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00068	85 d2		 test	 edx, edx
  0006a	74 09		 je	 SHORT $LN7@ErrorName
  0006c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  00073	eb 07		 jmp	 SHORT $LN8@ErrorName
$LN7@ErrorName:
  00075	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN8@ErrorName:
  0007c	83 7d f0 00	 cmp	 DWORD PTR tv79[ebp], 0
  00080	75 01		 jne	 SHORT $LN3@ErrorName
  00082	cc		 int	 3
$LN3@ErrorName:

; 2063 :     return errorName;

  00083	8b 45 f8	 mov	 eax, DWORD PTR _errorName$[ebp]

; 2064 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLDocument::ErrorName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv91 = -68						; size = 4
_buf2$1 = -60						; size = 20
_buf1$2 = -32						; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?PrintError@XMLDocument@tinyxml2@@QBEXXZ PROC		; tinyxml2::XMLDocument::PrintError
; _this$ = ecx

; 2067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  0000b	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2068 :     if ( Error() ) {

  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Error@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::Error
  0002d	0f b6 c0	 movzx	 eax, al
  00030	85 c0		 test	 eax, eax
  00032	0f 84 c6 00 00
	00		 je	 $LN1@PrintError

; 2069 :         static const int LEN = 20;
; 2070 :         char buf1[LEN] = { 0 };

  00038	c6 45 e0 00	 mov	 BYTE PTR _buf1$2[ebp], 0
  0003c	33 c9		 xor	 ecx, ecx
  0003e	89 4d e1	 mov	 DWORD PTR _buf1$2[ebp+1], ecx
  00041	89 4d e5	 mov	 DWORD PTR _buf1$2[ebp+5], ecx
  00044	89 4d e9	 mov	 DWORD PTR _buf1$2[ebp+9], ecx
  00047	89 4d ed	 mov	 DWORD PTR _buf1$2[ebp+13], ecx
  0004a	66 89 4d f1	 mov	 WORD PTR _buf1$2[ebp+17], cx
  0004e	88 4d f3	 mov	 BYTE PTR _buf1$2[ebp+19], cl

; 2071 :         char buf2[LEN] = { 0 };

  00051	c6 45 c4 00	 mov	 BYTE PTR _buf2$1[ebp], 0
  00055	33 d2		 xor	 edx, edx
  00057	89 55 c5	 mov	 DWORD PTR _buf2$1[ebp+1], edx
  0005a	89 55 c9	 mov	 DWORD PTR _buf2$1[ebp+5], edx
  0005d	89 55 cd	 mov	 DWORD PTR _buf2$1[ebp+9], edx
  00060	89 55 d1	 mov	 DWORD PTR _buf2$1[ebp+13], edx
  00063	66 89 55 d5	 mov	 WORD PTR _buf2$1[ebp+17], dx
  00067	88 55 d7	 mov	 BYTE PTR _buf2$1[ebp+19], dl

; 2072 : 
; 2073 :         if ( _errorStr1 ) {

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00071	74 1a		 je	 SHORT $LN3@PrintError

; 2074 :             TIXML_SNPRINTF( buf1, LEN, "%s", _errorStr1 );

  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00079	52		 push	 edx
  0007a	68 00 00 00 00	 push	 OFFSET $SG4294882654
  0007f	6a 14		 push	 20			; 00000014H
  00081	8d 45 e0	 lea	 eax, DWORD PTR _buf1$2[ebp]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@PrintError:

; 2075 :         }
; 2076 :         if ( _errorStr2 ) {

  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  00094	74 1a		 je	 SHORT $LN4@PrintError

; 2077 :             TIXML_SNPRINTF( buf2, LEN, "%s", _errorStr2 );

  00096	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  0009c	50		 push	 eax
  0009d	68 00 00 00 00	 push	 OFFSET $SG4294882653
  000a2	6a 14		 push	 20			; 00000014H
  000a4	8d 4d c4	 lea	 ecx, DWORD PTR _buf2$1[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ?TIXML_SNPRINTF@@YAHPADIPBDZZ ; TIXML_SNPRINTF
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@PrintError:

; 2078 :         }
; 2079 : 
; 2080 :         // Should check INT_MIN <= _errorID && _errorId <= INT_MAX, but that
; 2081 :         // causes a clang "always true" -Wtautological-constant-out-of-range-compare warning
; 2082 :         TIXMLASSERT( 0 <= _errorID && XML_ERROR_COUNT - 1 <= INT_MAX );

  000b0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b3	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  000b7	7c 12		 jl	 SHORT $LN7@PrintError
  000b9	b8 01 00 00 00	 mov	 eax, 1
  000be	85 c0		 test	 eax, eax
  000c0	74 09		 je	 SHORT $LN7@PrintError
  000c2	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv91[ebp], 1
  000c9	eb 07		 jmp	 SHORT $LN8@PrintError
$LN7@PrintError:
  000cb	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN8@PrintError:
  000d2	83 7d bc 00	 cmp	 DWORD PTR tv91[ebp], 0
  000d6	75 01		 jne	 SHORT $LN5@PrintError
  000d8	cc		 int	 3
$LN5@PrintError:

; 2083 :         printf( "XMLDocument error id=%d '%s' str1=%s str2=%s\n",

  000d9	8d 4d c4	 lea	 ecx, DWORD PTR _buf2$1[ebp]
  000dc	51		 push	 ecx
  000dd	8d 55 e0	 lea	 edx, DWORD PTR _buf1$2[ebp]
  000e0	52		 push	 edx
  000e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	e8 00 00 00 00	 call	 ?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLDocument::ErrorName
  000e9	50		 push	 eax
  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000f0	51		 push	 ecx
  000f1	68 00 00 00 00	 push	 OFFSET $SG4294882652
  000f6	e8 00 00 00 00	 call	 _printf
  000fb	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@PrintError:

; 2084 :                 static_cast<int>( _errorID ), ErrorName(), buf1, buf2 );
; 2085 :     }
; 2086 : }

  000fe	52		 push	 edx
  000ff	8b cd		 mov	 ecx, ebp
  00101	50		 push	 eax
  00102	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@PrintError
  00108	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010d	58		 pop	 eax
  0010e	5a		 pop	 edx
  0010f	5f		 pop	 edi
  00110	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	83 c4 44	 add	 esp, 68			; 00000044H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
$LN12@PrintError:
  00128	02 00 00 00	 DD	 2
  0012c	00 00 00 00	 DD	 $LN11@PrintError
$LN11@PrintError:
  00130	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00134	14 00 00 00	 DD	 20			; 00000014H
  00138	00 00 00 00	 DD	 $LN9@PrintError
  0013c	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00140	14 00 00 00	 DD	 20			; 00000014H
  00144	00 00 00 00	 DD	 $LN10@PrintError
$LN10@PrintError:
  00148	62		 DB	 98			; 00000062H
  00149	75		 DB	 117			; 00000075H
  0014a	66		 DB	 102			; 00000066H
  0014b	32		 DB	 50			; 00000032H
  0014c	00		 DB	 0
$LN9@PrintError:
  0014d	62		 DB	 98			; 00000062H
  0014e	75		 DB	 117			; 00000075H
  0014f	66		 DB	 102			; 00000066H
  00150	31		 DB	 49			; 00000031H
  00151	00		 DB	 0
?PrintError@XMLDocument@tinyxml2@@QBEXXZ ENDP		; tinyxml2::XMLDocument::PrintError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?Parse@XMLDocument@tinyxml2@@AAEXXZ PROC		; tinyxml2::XMLDocument::Parse
; _this$ = ecx

; 2089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2090 :     TIXMLASSERT( NoChildren() ); // Clear() must have been called previously

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?NoChildren@XMLNode@tinyxml2@@QBE_NXZ ; tinyxml2::XMLNode::NoChildren
  00020	0f b6 c0	 movzx	 eax, al
  00023	85 c0		 test	 eax, eax
  00025	75 01		 jne	 SHORT $LN2@Parse
  00027	cc		 int	 3
$LN2@Parse:

; 2091 :     TIXMLASSERT( _charBuffer );

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  0002f	75 01		 jne	 SHORT $LN3@Parse
  00031	cc		 int	 3
$LN3@Parse:

; 2092 :     char* p = _charBuffer;

  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00038	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 2093 :     p = XMLUtil::SkipWhiteSpace( p );

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 2094 :     p = const_cast<char*>( XMLUtil::ReadBOM( p, &_writeBOM ) );

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	83 c2 2c	 add	 edx, 44			; 0000002cH
  00050	52		 push	 edx
  00051	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z ; tinyxml2::XMLUtil::ReadBOM
  0005a	83 c4 08	 add	 esp, 8
  0005d	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 2095 :     if ( !*p ) {

  00060	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00063	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00066	85 d2		 test	 edx, edx
  00068	75 10		 jne	 SHORT $LN4@Parse

; 2096 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	6a 0f		 push	 15			; 0000000fH
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 2097 :         return;

  00078	eb 1c		 jmp	 SHORT $LN1@Parse
$LN4@Parse:

; 2098 :     }
; 2099 :     ParseDeep(p, 0 );

  0007a	8b f4		 mov	 esi, esp
  0007c	6a 00		 push	 0
  0007e	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00081	50		 push	 eax
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0008d	ff d0		 call	 eax
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Parse:

; 2100 : }

  00096	5e		 pop	 esi
  00097	83 c4 08	 add	 esp, 8
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?Parse@XMLDocument@tinyxml2@@AAEXXZ ENDP		; tinyxml2::XMLDocument::Parse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv146 = -32						; size = 4
_entityValue$2 = -25					; size = 1
_i$3 = -24						; size = 4
_i$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_file$ = 8						; size = 4
_compact$ = 12						; size = 1
_depth$ = 16						; size = 4
??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z PROC	; tinyxml2::XMLPrinter::XMLPrinter
; _this$ = ecx

; 2110 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0XMLVisitor@tinyxml2@@QAE@XZ
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLPrinter@tinyxml2@@6B@

; 2103 :     _elementJustOpened( false ),

  00054	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 2110 : {

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 08	 add	 ecx, 8
  00061	e8 00 00 00 00	 call	 ??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>
  00066	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2104 :     _firstElement( true ),

  0006a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	c6 42 3c 01	 mov	 BYTE PTR [edx+60], 1

; 2105 :     _fp( file ),

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00077	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 2106 :     _depth( depth ),

  0007a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 45 10	 mov	 eax, DWORD PTR _depth$[ebp]
  00080	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 2107 :     _textDepth( -1 ),

  00083	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	c7 41 48 ff ff
	ff ff		 mov	 DWORD PTR [ecx+72], -1

; 2108 :     _processEntities( true ),

  0008d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00090	c6 42 4c 01	 mov	 BYTE PTR [edx+76], 1

; 2109 :     _compactMode( compact )

  00094	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8a 4d 0c	 mov	 cl, BYTE PTR _compact$[ebp]
  0009a	88 48 4d	 mov	 BYTE PTR [eax+77], cl

; 2110 : {

  0009d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  000a6	e8 00 00 00 00	 call	 ??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<char,20>::DynArray<char,20>
  000ab	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2111 :     for( int i=0; i<ENTITY_RANGE; ++i ) {

  000af	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  000b6	eb 09		 jmp	 SHORT $LN4@XMLPrinter
$LN2@XMLPrinter:
  000b8	8b 55 ec	 mov	 edx, DWORD PTR _i$4[ebp]
  000bb	83 c2 01	 add	 edx, 1
  000be	89 55 ec	 mov	 DWORD PTR _i$4[ebp], edx
$LN4@XMLPrinter:
  000c1	83 7d ec 40	 cmp	 DWORD PTR _i$4[ebp], 64	; 00000040H
  000c5	7d 19		 jge	 SHORT $LN3@XMLPrinter

; 2112 :         _entityFlag[i] = false;

  000c7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	03 45 ec	 add	 eax, DWORD PTR _i$4[ebp]
  000cd	c6 40 4e 00	 mov	 BYTE PTR [eax+78], 0

; 2113 :         _restrictedEntityFlag[i] = false;

  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	03 4d ec	 add	 ecx, DWORD PTR _i$4[ebp]
  000d7	c6 81 8e 00 00
	00 00		 mov	 BYTE PTR [ecx+142], 0

; 2114 :     }

  000de	eb d8		 jmp	 SHORT $LN2@XMLPrinter
$LN3@XMLPrinter:

; 2115 :     for( int i=0; i<NUM_ENTITIES; ++i ) {

  000e0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  000e7	eb 09		 jmp	 SHORT $LN7@XMLPrinter
$LN5@XMLPrinter:
  000e9	8b 55 e8	 mov	 edx, DWORD PTR _i$3[ebp]
  000ec	83 c2 01	 add	 edx, 1
  000ef	89 55 e8	 mov	 DWORD PTR _i$3[ebp], edx
$LN7@XMLPrinter:
  000f2	83 7d e8 05	 cmp	 DWORD PTR _i$3[ebp], 5
  000f6	7d 43		 jge	 SHORT $LN6@XMLPrinter

; 2116 :         const char entityValue = entities[i].value;

  000f8	6b 45 e8 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  000fc	8a 88 08 00 00
	00		 mov	 cl, BYTE PTR ?entities@tinyxml2@@3QBUEntity@1@B[eax+8]
  00102	88 4d e7	 mov	 BYTE PTR _entityValue$2[ebp], cl

; 2117 :         TIXMLASSERT( 0 <= entityValue && entityValue < ENTITY_RANGE );

  00105	0f be 55 e7	 movsx	 edx, BYTE PTR _entityValue$2[ebp]
  00109	85 d2		 test	 edx, edx
  0010b	7c 12		 jl	 SHORT $LN10@XMLPrinter
  0010d	0f be 45 e7	 movsx	 eax, BYTE PTR _entityValue$2[ebp]
  00111	83 f8 40	 cmp	 eax, 64			; 00000040H
  00114	7d 09		 jge	 SHORT $LN10@XMLPrinter
  00116	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv146[ebp], 1
  0011d	eb 07		 jmp	 SHORT $LN11@XMLPrinter
$LN10@XMLPrinter:
  0011f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN11@XMLPrinter:
  00126	83 7d e0 00	 cmp	 DWORD PTR tv146[ebp], 0
  0012a	75 01		 jne	 SHORT $LN8@XMLPrinter
  0012c	cc		 int	 3
$LN8@XMLPrinter:

; 2118 :         _entityFlag[ (unsigned char)entityValue ] = true;

  0012d	0f b6 4d e7	 movzx	 ecx, BYTE PTR _entityValue$2[ebp]
  00131	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00134	c6 44 0a 4e 01	 mov	 BYTE PTR [edx+ecx+78], 1

; 2119 :     }

  00139	eb ae		 jmp	 SHORT $LN5@XMLPrinter
$LN6@XMLPrinter:

; 2120 :     _restrictedEntityFlag[(unsigned char)'&'] = true;

  0013b	b8 01 00 00 00	 mov	 eax, 1
  00140	6b c8 26	 imul	 ecx, eax, 38
  00143	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00146	c6 84 0a 8e 00
	00 00 01	 mov	 BYTE PTR [edx+ecx+142], 1

; 2121 :     _restrictedEntityFlag[(unsigned char)'<'] = true;

  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	6b c8 3c	 imul	 ecx, eax, 60
  00156	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00159	c6 84 0a 8e 00
	00 00 01	 mov	 BYTE PTR [edx+ecx+142], 1

; 2122 :     _restrictedEntityFlag[(unsigned char)'>'] = true;	// not required, but consistency is nice

  00161	b8 01 00 00 00	 mov	 eax, 1
  00166	6b c8 3e	 imul	 ecx, eax, 62
  00169	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0016c	c6 84 0a 8e 00
	00 00 01	 mov	 BYTE PTR [edx+ecx+142], 1

; 2123 :     _buffer.Push( 0 );

  00174	6a 00		 push	 0
  00176	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  0017f	e8 00 00 00 00	 call	 ?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z ; tinyxml2::DynArray<char,20>::Push

; 2124 : }

  00184	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	83 c4 20	 add	 esp, 32			; 00000020H
  0019c	3b ec		 cmp	 ebp, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1XMLVisitor@tinyxml2@@UAE@XZ ; tinyxml2::XMLVisitor::~XMLVisitor
__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  0001c	e9 00 00 00 00	 jmp	 ??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<char,20>::~DynArray<char,20>
__ehhandler$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z ENDP	; tinyxml2::XMLPrinter::XMLPrinter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMLVisitor@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMLVisitor@tinyxml2@@QAE@XZ PROC			; tinyxml2::XMLVisitor::XMLVisitor, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7XMLVisitor@tinyxml2@@6B@
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0XMLVisitor@tinyxml2@@QAE@XZ ENDP			; tinyxml2::XMLVisitor::XMLVisitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv90 = -16						; size = 4
_p$1 = -12						; size = 4
_len$2 = -8						; size = 4
_va$ = -4						; size = 4
_this$ = 8						; size = 4
_format$ = 12						; size = 4
?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ PROC		; tinyxml2::XMLPrinter::Print

; 2128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 2129 :     va_list     va;
; 2130 :     va_start( va, format );

  00017	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const *>
  0001c	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  0001f	89 45 fc	 mov	 DWORD PTR _va$[ebp], eax

; 2131 : 
; 2132 :     if ( _fp ) {

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  00029	74 1c		 je	 SHORT $LN2@Print

; 2133 :         vfprintf( _fp, format, va );

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _va$[ebp]
  0002e	52		 push	 edx
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _vfprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2134 :     }
; 2135 :     else {

  00042	e9 af 00 00 00	 jmp	 $LN3@Print
$LN2@Print:

; 2136 :         const int len = TIXML_VSCPRINTF( format, va );

  00047	8b 45 fc	 mov	 eax, DWORD PTR _va$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 __vscprintf
  00054	83 c4 08	 add	 esp, 8
  00057	89 45 f8	 mov	 DWORD PTR _len$2[ebp], eax

; 2137 :         // Close out and re-start the va-args
; 2138 :         va_end( va );

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 2139 :         TIXMLASSERT( len >= 0 );

  00061	83 7d f8 00	 cmp	 DWORD PTR _len$2[ebp], 0
  00065	7d 01		 jge	 SHORT $LN4@Print
  00067	cc		 int	 3
$LN4@Print:

; 2140 :         va_start( va, format );

  00068	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const *>
  0006d	8d 55 10	 lea	 edx, DWORD PTR _format$[ebp+4]
  00070	89 55 fc	 mov	 DWORD PTR _va$[ebp], edx

; 2141 :         TIXMLASSERT( _buffer.Size() > 0 && _buffer[_buffer.Size() - 1] == 0 );

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  0007c	e8 00 00 00 00	 call	 ?Size@?$DynArray@D$0BE@@tinyxml2@@QBEHXZ ; tinyxml2::DynArray<char,20>::Size
  00081	85 c0		 test	 eax, eax
  00083	7e 30		 jle	 SHORT $LN7@Print
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  0008e	e8 00 00 00 00	 call	 ?Size@?$DynArray@D$0BE@@tinyxml2@@QBEHXZ ; tinyxml2::DynArray<char,20>::Size
  00093	83 e8 01	 sub	 eax, 1
  00096	50		 push	 eax
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  000a0	e8 00 00 00 00	 call	 ??A?$DynArray@D$0BE@@tinyxml2@@QAEAADH@Z ; tinyxml2::DynArray<char,20>::operator[]
  000a5	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000a8	85 c0		 test	 eax, eax
  000aa	75 09		 jne	 SHORT $LN7@Print
  000ac	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  000b3	eb 07		 jmp	 SHORT $LN8@Print
$LN7@Print:
  000b5	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@Print:
  000bc	83 7d f0 00	 cmp	 DWORD PTR tv90[ebp], 0
  000c0	75 01		 jne	 SHORT $LN5@Print
  000c2	cc		 int	 3
$LN5@Print:

; 2142 :         char* p = _buffer.PushArr( len ) - 1;	// back up over the null terminator.

  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _len$2[ebp]
  000c6	51		 push	 ecx
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  000d0	e8 00 00 00 00	 call	 ?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z ; tinyxml2::DynArray<char,20>::PushArr
  000d5	83 e8 01	 sub	 eax, 1
  000d8	89 45 f4	 mov	 DWORD PTR _p$1[ebp], eax

; 2143 : 		TIXML_VSNPRINTF( p, len+1, format, va );

  000db	8b 55 fc	 mov	 edx, DWORD PTR _va$[ebp]
  000de	52		 push	 edx
  000df	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _len$2[ebp]
  000e6	83 c1 01	 add	 ecx, 1
  000e9	51		 push	 ecx
  000ea	8b 55 f4	 mov	 edx, DWORD PTR _p$1[ebp]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?TIXML_VSNPRINTF@@YAHPADIPBD0@Z ; TIXML_VSNPRINTF
  000f3	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@Print:

; 2144 :     }
; 2145 :     va_end( va );

  000f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 2146 : }

  000fd	83 c4 10	 add	 esp, 16			; 00000010H
  00100	3b ec		 cmp	 ebp, esp
  00102	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ENDP		; tinyxml2::XMLPrinter::Print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_depth$ = 8						; size = 4
?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z PROC		; tinyxml2::XMLPrinter::PrintSpace
; _this$ = ecx

; 2150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2151 :     for( int i=0; i<depth; ++i ) {

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@PrintSpace
$LN2@PrintSpace:
  00020	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@PrintSpace:
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR _depth$[ebp]
  0002f	7d 13		 jge	 SHORT $LN1@PrintSpace

; 2152 :         Print( "    " );

  00031	68 00 00 00 00	 push	 OFFSET $SG4294882651
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0003f	83 c4 08	 add	 esp, 8

; 2153 :     }

  00042	eb dc		 jmp	 SHORT $LN2@PrintSpace
$LN1@PrintSpace:

; 2154 : }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z ENDP		; tinyxml2::XMLPrinter::PrintSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv87 = -36						; size = 4
tv71 = -32						; size = 4
_i$1 = -28						; size = 4
_entityPatternPrinted$2 = -21				; size = 1
_toPrint$3 = -20					; size = 4
_delta$4 = -16						; size = 4
_flag$5 = -12						; size = 4
_q$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_restricted$ = 12					; size = 1
?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z PROC	; tinyxml2::XMLPrinter::PrintString
; _this$ = ecx

; 2158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2159 :     // Look for runs of bytes between entities to print.
; 2160 :     const char* q = p;

  00029	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0002c	89 45 f8	 mov	 DWORD PTR _q$[ebp], eax

; 2161 : 
; 2162 :     if ( _processEntities ) {

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	0f b6 51 4c	 movzx	 edx, BYTE PTR [ecx+76]
  00036	85 d2		 test	 edx, edx
  00038	0f 84 43 01 00
	00		 je	 $LN9@PrintStrin

; 2163 :         const bool* flag = restricted ? _restrictedEntityFlag : _entityFlag;

  0003e	0f b6 45 0c	 movzx	 eax, BYTE PTR _restricted$[ebp]
  00042	85 c0		 test	 eax, eax
  00044	74 0e		 je	 SHORT $LN21@PrintStrin
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	81 c1 8e 00 00
	00		 add	 ecx, 142		; 0000008eH
  0004f	89 4d e0	 mov	 DWORD PTR tv71[ebp], ecx
  00052	eb 09		 jmp	 SHORT $LN22@PrintStrin
$LN21@PrintStrin:
  00054	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00057	83 c2 4e	 add	 edx, 78			; 0000004eH
  0005a	89 55 e0	 mov	 DWORD PTR tv71[ebp], edx
$LN22@PrintStrin:
  0005d	8b 45 e0	 mov	 eax, DWORD PTR tv71[ebp]
  00060	89 45 f4	 mov	 DWORD PTR _flag$5[ebp], eax
$LN2@PrintStrin:

; 2164 :         while ( *q ) {

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _q$[ebp]
  00066	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00069	85 d2		 test	 edx, edx
  0006b	0f 84 10 01 00
	00		 je	 $LN9@PrintStrin

; 2165 :             TIXMLASSERT( p <= q );

  00071	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00074	3b 45 f8	 cmp	 eax, DWORD PTR _q$[ebp]
  00077	76 01		 jbe	 SHORT $LN10@PrintStrin
  00079	cc		 int	 3
$LN10@PrintStrin:

; 2166 :             // Remember, char is sometimes signed. (How many times has that bitten me?)
; 2167 :             if ( *q > 0 && *q < ENTITY_RANGE ) {

  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _q$[ebp]
  0007d	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00080	85 d2		 test	 edx, edx
  00082	0f 8e e2 00 00
	00		 jle	 $LN11@PrintStrin
  00088	8b 45 f8	 mov	 eax, DWORD PTR _q$[ebp]
  0008b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0008e	83 f9 40	 cmp	 ecx, 64			; 00000040H
  00091	0f 8d d3 00 00
	00		 jge	 $LN11@PrintStrin

; 2168 :                 // Check for entities. If one is found, flush
; 2169 :                 // the stream up until the entity, write the
; 2170 :                 // entity, and keep looking.
; 2171 :                 if ( flag[(unsigned char)(*q)] ) {

  00097	8b 55 f8	 mov	 edx, DWORD PTR _q$[ebp]
  0009a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR _flag$5[ebp]
  000a0	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  000a4	85 d2		 test	 edx, edx
  000a6	0f 84 be 00 00
	00		 je	 $LN11@PrintStrin
$LN4@PrintStrin:

; 2172 :                     while ( p < q ) {

  000ac	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  000af	3b 45 f8	 cmp	 eax, DWORD PTR _q$[ebp]
  000b2	73 4b		 jae	 SHORT $LN5@PrintStrin

; 2173 :                         const size_t delta = q - p;

  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _q$[ebp]
  000b7	2b 4d 08	 sub	 ecx, DWORD PTR _p$[ebp]
  000ba	89 4d f0	 mov	 DWORD PTR _delta$4[ebp], ecx

; 2174 :                         // %.*s accepts type int as "precision"
; 2175 :                         const int toPrint = ( INT_MAX < delta ) ? INT_MAX : (int)delta;

  000bd	81 7d f0 ff ff
	ff 7f		 cmp	 DWORD PTR _delta$4[ebp], 2147483647 ; 7fffffffH
  000c4	76 09		 jbe	 SHORT $LN23@PrintStrin
  000c6	c7 45 dc ff ff
	ff 7f		 mov	 DWORD PTR tv87[ebp], 2147483647 ; 7fffffffH
  000cd	eb 06		 jmp	 SHORT $LN24@PrintStrin
$LN23@PrintStrin:
  000cf	8b 55 f0	 mov	 edx, DWORD PTR _delta$4[ebp]
  000d2	89 55 dc	 mov	 DWORD PTR tv87[ebp], edx
$LN24@PrintStrin:
  000d5	8b 45 dc	 mov	 eax, DWORD PTR tv87[ebp]
  000d8	89 45 ec	 mov	 DWORD PTR _toPrint$3[ebp], eax

; 2176 :                         Print( "%.*s", toPrint, p );

  000db	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  000de	51		 push	 ecx
  000df	8b 55 ec	 mov	 edx, DWORD PTR _toPrint$3[ebp]
  000e2	52		 push	 edx
  000e3	68 00 00 00 00	 push	 OFFSET $SG4294882650
  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  000f1	83 c4 10	 add	 esp, 16			; 00000010H

; 2177 :                         p += toPrint;

  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  000f7	03 4d ec	 add	 ecx, DWORD PTR _toPrint$3[ebp]
  000fa	89 4d 08	 mov	 DWORD PTR _p$[ebp], ecx

; 2178 :                     }

  000fd	eb ad		 jmp	 SHORT $LN4@PrintStrin
$LN5@PrintStrin:

; 2179 :                     bool entityPatternPrinted = false;

  000ff	c6 45 eb 00	 mov	 BYTE PTR _entityPatternPrinted$2[ebp], 0

; 2180 :                     for( int i=0; i<NUM_ENTITIES; ++i ) {

  00103	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0010a	eb 09		 jmp	 SHORT $LN8@PrintStrin
$LN6@PrintStrin:
  0010c	8b 55 e4	 mov	 edx, DWORD PTR _i$1[ebp]
  0010f	83 c2 01	 add	 edx, 1
  00112	89 55 e4	 mov	 DWORD PTR _i$1[ebp], edx
$LN8@PrintStrin:
  00115	83 7d e4 05	 cmp	 DWORD PTR _i$1[ebp], 5
  00119	7d 39		 jge	 SHORT $LN7@PrintStrin

; 2181 :                         if ( entities[i].value == *q ) {

  0011b	6b 45 e4 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  0011f	0f be 88 08 00
	00 00		 movsx	 ecx, BYTE PTR ?entities@tinyxml2@@3QBUEntity@1@B[eax+8]
  00126	8b 55 f8	 mov	 edx, DWORD PTR _q$[ebp]
  00129	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0012c	3b c8		 cmp	 ecx, eax
  0012e	75 22		 jne	 SHORT $LN13@PrintStrin

; 2182 :                             Print( "&%s;", entities[i].pattern );

  00130	6b 4d e4 0c	 imul	 ecx, DWORD PTR _i$1[ebp], 12
  00134	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?entities@tinyxml2@@3QBUEntity@1@B[ecx]
  0013a	52		 push	 edx
  0013b	68 00 00 00 00	 push	 OFFSET $SG4294882649
  00140	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2183 :                             entityPatternPrinted = true;

  0014c	c6 45 eb 01	 mov	 BYTE PTR _entityPatternPrinted$2[ebp], 1

; 2184 :                             break;

  00150	eb 02		 jmp	 SHORT $LN7@PrintStrin
$LN13@PrintStrin:

; 2185 :                         }
; 2186 :                     }

  00152	eb b8		 jmp	 SHORT $LN6@PrintStrin
$LN7@PrintStrin:

; 2187 :                     if ( !entityPatternPrinted ) {

  00154	0f b6 4d eb	 movzx	 ecx, BYTE PTR _entityPatternPrinted$2[ebp]
  00158	85 c9		 test	 ecx, ecx
  0015a	75 05		 jne	 SHORT $LN14@PrintStrin

; 2188 :                         // TIXMLASSERT( entityPatternPrinted ) causes gcc -Wunused-but-set-variable in release
; 2189 :                         TIXMLASSERT( false );

  0015c	33 d2		 xor	 edx, edx
  0015e	75 01		 jne	 SHORT $LN14@PrintStrin
  00160	cc		 int	 3
$LN14@PrintStrin:

; 2190 :                     }
; 2191 :                     ++p;

  00161	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00164	83 c0 01	 add	 eax, 1
  00167	89 45 08	 mov	 DWORD PTR _p$[ebp], eax
$LN11@PrintStrin:

; 2192 :                 }
; 2193 :             }
; 2194 :             ++q;

  0016a	8b 4d f8	 mov	 ecx, DWORD PTR _q$[ebp]
  0016d	83 c1 01	 add	 ecx, 1
  00170	89 4d f8	 mov	 DWORD PTR _q$[ebp], ecx

; 2195 :             TIXMLASSERT( p <= q );

  00173	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00176	3b 55 f8	 cmp	 edx, DWORD PTR _q$[ebp]
  00179	76 01		 jbe	 SHORT $LN16@PrintStrin
  0017b	cc		 int	 3
$LN16@PrintStrin:

; 2196 :         }

  0017c	e9 e2 fe ff ff	 jmp	 $LN2@PrintStrin
$LN9@PrintStrin:

; 2197 :     }
; 2198 :     // Flush the remaining string. This will be the entire
; 2199 :     // string if an entity wasn't found.
; 2200 :     TIXMLASSERT( p <= q );

  00181	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00184	3b 45 f8	 cmp	 eax, DWORD PTR _q$[ebp]
  00187	76 01		 jbe	 SHORT $LN17@PrintStrin
  00189	cc		 int	 3
$LN17@PrintStrin:

; 2201 :     if ( !_processEntities || ( p < q ) ) {

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	0f b6 51 4c	 movzx	 edx, BYTE PTR [ecx+76]
  00191	85 d2		 test	 edx, edx
  00193	74 08		 je	 SHORT $LN19@PrintStrin
  00195	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00198	3b 45 f8	 cmp	 eax, DWORD PTR _q$[ebp]
  0019b	73 15		 jae	 SHORT $LN1@PrintStrin
$LN19@PrintStrin:

; 2202 :         Print( "%s", p );

  0019d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  001a0	51		 push	 ecx
  001a1	68 00 00 00 00	 push	 OFFSET $SG4294882648
  001a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a9	52		 push	 edx
  001aa	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@PrintStrin:

; 2203 :     }
; 2204 : }

  001b2	83 c4 24	 add	 esp, 36			; 00000024H
  001b5	3b ec		 cmp	 ebp, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c2 08 00	 ret	 8
?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z ENDP	; tinyxml2::XMLPrinter::PrintString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_writeBOM$ = 8						; size = 1
_writeDec$ = 12						; size = 1
?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z PROC		; tinyxml2::XMLPrinter::PushHeader
; _this$ = ecx

; 2208 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :     if ( writeBOM ) {

  0000e	0f b6 45 08	 movzx	 eax, BYTE PTR _writeBOM$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 16		 je	 SHORT $LN2@PushHeader

; 2210 :         static const unsigned char bom[] = { TIXML_UTF_LEAD_0, TIXML_UTF_LEAD_1, TIXML_UTF_LEAD_2, 0 };
; 2211 :         Print( "%s", bom );

  00016	68 00 00 00 00	 push	 OFFSET ?bom@?4??PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z@4QBEB
  0001b	68 00 00 00 00	 push	 OFFSET $SG4294882647
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@PushHeader:

; 2212 :     }
; 2213 :     if ( writeDec ) {

  0002c	0f b6 55 0c	 movzx	 edx, BYTE PTR _writeDec$[ebp]
  00030	85 d2		 test	 edx, edx
  00032	74 0d		 je	 SHORT $LN1@PushHeader

; 2214 :         PushDeclaration( "xml version=\"1.0\"" );

  00034	68 00 00 00 00	 push	 OFFSET $SG4294882646
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushDeclaration
$LN1@PushHeader:

; 2215 :     }
; 2216 : }

  00041	83 c4 04	 add	 esp, 4
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z ENDP		; tinyxml2::XMLPrinter::PushHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_compactMode$ = 12					; size = 1
?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z PROC	; tinyxml2::XMLPrinter::OpenElement
; _this$ = ecx

; 2220 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2221 :     SealElementIfJustOpened();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElementIfJustOpened

; 2222 :     _stack.Push( name );

  00017	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 08	 add	 ecx, 8
  00021	e8 00 00 00 00	 call	 ?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z ; tinyxml2::DynArray<char const *,10>::Push

; 2223 : 
; 2224 :     if ( _textDepth < 0 && !_firstElement && !compactMode ) {

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  0002d	7d 24		 jge	 SHORT $LN2@OpenElemen
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	0f b6 42 3c	 movzx	 eax, BYTE PTR [edx+60]
  00036	85 c0		 test	 eax, eax
  00038	75 19		 jne	 SHORT $LN2@OpenElemen
  0003a	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _compactMode$[ebp]
  0003e	85 c9		 test	 ecx, ecx
  00040	75 11		 jne	 SHORT $LN2@OpenElemen

; 2225 :         Print( "\n" );

  00042	68 00 00 00 00	 push	 OFFSET $SG4294882645
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00050	83 c4 08	 add	 esp, 8
$LN2@OpenElemen:

; 2226 :     }
; 2227 :     if ( !compactMode ) {

  00053	0f b6 45 0c	 movzx	 eax, BYTE PTR _compactMode$[ebp]
  00057	85 c0		 test	 eax, eax
  00059	75 1d		 jne	 SHORT $LN3@OpenElemen

; 2228 :         PrintSpace( _depth );

  0005b	8b f4		 mov	 esi, esp
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00063	52		 push	 edx
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 10		 mov	 edx, DWORD PTR [eax]
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0006f	ff d0		 call	 eax
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@OpenElemen:

; 2229 :     }
; 2230 : 
; 2231 :     Print( "<%s", name );

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0007b	51		 push	 ecx
  0007c	68 00 00 00 00	 push	 OFFSET $SG4294882644
  00081	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2232 :     _elementJustOpened = true;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 2233 :     _firstElement = false;

  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	c6 41 3c 00	 mov	 BYTE PTR [ecx+60], 0

; 2234 :     ++_depth;

  0009b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000a1	83 c0 01	 add	 eax, 1
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 2235 : }

  000aa	5e		 pop	 esi
  000ab	83 c4 04	 add	 esp, 4
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ENDP	; tinyxml2::XMLPrinter::OpenElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z PROC	; tinyxml2::XMLPrinter::PushAttribute
; _this$ = ecx

; 2239 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2240 :     TIXMLASSERT( _elementJustOpened );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00015	85 c9		 test	 ecx, ecx
  00017	75 01		 jne	 SHORT $LN2@PushAttrib
  00019	cc		 int	 3
$LN2@PushAttrib:

; 2241 :     Print( " %s=\"", name );

  0001a	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  0001d	52		 push	 edx
  0001e	68 00 00 00 00	 push	 OFFSET $SG4294882643
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2242 :     PrintString( value, false );

  0002f	6a 00		 push	 0
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z ; tinyxml2::XMLPrinter::PrintString

; 2243 :     Print( "\"" );

  0003d	68 00 00 00 00	 push	 OFFSET $SG4294882642
  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0004b	83 c4 08	 add	 esp, 8

; 2244 : }

  0004e	83 c4 04	 add	 esp, 4
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 4
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z PROC	; tinyxml2::XMLPrinter::PushAttribute
; _this$ = ecx

; 2248 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2249 :     char buf[BUF_SIZE];
; 2250 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2251 :     PushAttribute( name, buf );

  00043	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00049	52		 push	 edx
  0004a	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2252 : }

  00056	52		 push	 edx
  00057	8b cd		 mov	 ecx, ebp
  00059	50		 push	 eax
  0005a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushAttrib
  00060	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00065	58		 pop	 eax
  00066	5a		 pop	 edx
  00067	5f		 pop	 edi
  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006b	33 cd		 xor	 ecx, ebp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
  00085	0f 1f 00	 npad	 3
$LN5@PushAttrib:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@PushAttrib
$LN4@PushAttrib:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@PushAttrib
$LN3@PushAttrib:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 4
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z PROC	; tinyxml2::XMLPrinter::PushAttribute
; _this$ = ecx

; 2256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2257 :     char buf[BUF_SIZE];
; 2258 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2259 :     PushAttribute( name, buf );

  00043	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00049	52		 push	 edx
  0004a	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2260 : }

  00056	52		 push	 edx
  00057	8b cd		 mov	 ecx, ebp
  00059	50		 push	 eax
  0005a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushAttrib
  00060	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00065	58		 pop	 eax
  00066	5a		 pop	 edx
  00067	5f		 pop	 edi
  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006b	33 cd		 xor	 ecx, ebp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
  00085	0f 1f 00	 npad	 3
$LN5@PushAttrib:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@PushAttrib
$LN4@PushAttrib:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@PushAttrib
$LN3@PushAttrib:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 1
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z PROC	; tinyxml2::XMLPrinter::PushAttribute
; _this$ = ecx

; 2264 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2265 :     char buf[BUF_SIZE];
; 2266 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _v$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z ; tinyxml2::XMLUtil::ToStr
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2267 :     PushAttribute( name, buf );

  00044	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004a	52		 push	 edx
  0004b	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2268 : }

  00057	52		 push	 edx
  00058	8b cd		 mov	 ecx, ebp
  0005a	50		 push	 eax
  0005b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushAttrib
  00061	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00066	58		 pop	 eax
  00067	5a		 pop	 edx
  00068	5f		 pop	 edi
  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	33 cd		 xor	 ecx, ebp
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
  00086	66 90		 npad	 2
$LN5@PushAttrib:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@PushAttrib
$LN4@PushAttrib:
  00090	2c ff ff ff	 DD	 -212			; ffffff2cH
  00094	c8 00 00 00	 DD	 200			; 000000c8H
  00098	00 00 00 00	 DD	 $LN3@PushAttrib
$LN3@PushAttrib:
  0009c	62		 DB	 98			; 00000062H
  0009d	75		 DB	 117			; 00000075H
  0009e	66		 DB	 102			; 00000066H
  0009f	00		 DB	 0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 8
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z PROC	; tinyxml2::XMLPrinter::PushAttribute
; _this$ = ecx

; 2272 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2273 :     char buf[BUF_SIZE];
; 2274 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	83 ec 08	 sub	 esp, 8
  0003a	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _v$[ebp]
  0003f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z ; tinyxml2::XMLUtil::ToStr
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 2275 :     PushAttribute( name, buf );

  0004c	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 08	 mov	 edx, DWORD PTR _name$[ebp]
  00056	52		 push	 edx
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2276 : }

  0005f	52		 push	 edx
  00060	8b cd		 mov	 ecx, ebp
  00062	50		 push	 eax
  00063	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushAttrib
  00069	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006e	58		 pop	 eax
  0006f	5a		 pop	 edx
  00070	5f		 pop	 edi
  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	33 cd		 xor	 ecx, ebp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
  0008e	66 90		 npad	 2
$LN5@PushAttrib:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@PushAttrib
$LN4@PushAttrib:
  00098	2c ff ff ff	 DD	 -212			; ffffff2cH
  0009c	c8 00 00 00	 DD	 200			; 000000c8H
  000a0	00 00 00 00	 DD	 $LN3@PushAttrib
$LN3@PushAttrib:
  000a4	62		 DB	 98			; 00000062H
  000a5	75		 DB	 117			; 00000075H
  000a6	66		 DB	 102			; 00000066H
  000a7	00		 DB	 0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_name$ = -8						; size = 4
_this$ = -4						; size = 4
_compactMode$ = 8					; size = 1
?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z PROC	; tinyxml2::XMLPrinter::CloseElement
; _this$ = ecx

; 2280 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2281 :     --_depth;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 2282 :     const char* name = _stack.Pop();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 08	 add	 ecx, 8
  0002d	e8 00 00 00 00	 call	 ?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ ; tinyxml2::DynArray<char const *,10>::Pop
  00032	89 45 f8	 mov	 DWORD PTR _name$[ebp], eax

; 2283 : 
; 2284 :     if ( _elementJustOpened ) {

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0003c	85 c9		 test	 ecx, ecx
  0003e	74 13		 je	 SHORT $LN2@CloseEleme

; 2285 :         Print( "/>" );

  00040	68 00 00 00 00	 push	 OFFSET $SG4294882641
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0004e	83 c4 08	 add	 esp, 8

; 2286 :     }
; 2287 :     else {

  00051	eb 54		 jmp	 SHORT $LN3@CloseEleme
$LN2@CloseEleme:

; 2288 :         if ( _textDepth < 0 && !compactMode) {

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0005a	7d 36		 jge	 SHORT $LN4@CloseEleme
  0005c	0f b6 4d 08	 movzx	 ecx, BYTE PTR _compactMode$[ebp]
  00060	85 c9		 test	 ecx, ecx
  00062	75 2e		 jne	 SHORT $LN4@CloseEleme

; 2289 :             Print( "\n" );

  00064	68 00 00 00 00	 push	 OFFSET $SG4294882640
  00069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00072	83 c4 08	 add	 esp, 8

; 2290 :             PrintSpace( _depth );

  00075	8b f4		 mov	 esi, esp
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0007d	51		 push	 ecx
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 02		 mov	 eax, DWORD PTR [edx]
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00089	ff d2		 call	 edx
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@CloseEleme:

; 2291 :         }
; 2292 :         Print( "</%s>", name );

  00092	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET $SG4294882639
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@CloseEleme:

; 2293 :     }
; 2294 : 
; 2295 :     if ( _textDepth == _depth ) {

  000a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  000b0	3b 48 44	 cmp	 ecx, DWORD PTR [eax+68]
  000b3	75 0a		 jne	 SHORT $LN5@CloseEleme

; 2296 :         _textDepth = -1;

  000b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	c7 42 48 ff ff
	ff ff		 mov	 DWORD PTR [edx+72], -1
$LN5@CloseEleme:

; 2297 :     }
; 2298 :     if ( _depth == 0 && !compactMode) {

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  000c6	75 19		 jne	 SHORT $LN6@CloseEleme
  000c8	0f b6 4d 08	 movzx	 ecx, BYTE PTR _compactMode$[ebp]
  000cc	85 c9		 test	 ecx, ecx
  000ce	75 11		 jne	 SHORT $LN6@CloseEleme

; 2299 :         Print( "\n" );

  000d0	68 00 00 00 00	 push	 OFFSET $SG4294882638
  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  000de	83 c4 08	 add	 esp, 8
$LN6@CloseEleme:

; 2300 :     }
; 2301 :     _elementJustOpened = false;

  000e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 2302 : }

  000e8	5e		 pop	 esi
  000e9	83 c4 08	 add	 esp, 8
  000ec	3b ec		 cmp	 ebp, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z ENDP	; tinyxml2::XMLPrinter::CloseElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ PROC ; tinyxml2::XMLPrinter::SealElementIfJustOpened
; _this$ = ecx

; 2306 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2307 :     if ( !_elementJustOpened ) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00015	85 c9		 test	 ecx, ecx
  00017	75 02		 jne	 SHORT $LN2@SealElemen

; 2308 :         return;

  00019	eb 18		 jmp	 SHORT $LN1@SealElemen
$LN2@SealElemen:

; 2309 :     }
; 2310 :     _elementJustOpened = false;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c6 42 04 00	 mov	 BYTE PTR [edx+4], 0

; 2311 :     Print( ">" );

  00022	68 00 00 00 00	 push	 OFFSET $SG4294882637
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00030	83 c4 08	 add	 esp, 8
$LN1@SealElemen:

; 2312 : }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ENDP ; tinyxml2::XMLPrinter::SealElementIfJustOpened
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_text$ = 8						; size = 4
_cdata$ = 12						; size = 1
?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z PROC		; tinyxml2::XMLPrinter::PushText
; _this$ = ecx

; 2316 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2317 :     _textDepth = _depth-1;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00014	83 e9 01	 sub	 ecx, 1
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 2318 : 
; 2319 :     SealElementIfJustOpened();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElementIfJustOpened

; 2320 :     if ( cdata ) {

  00025	0f b6 45 0c	 movzx	 eax, BYTE PTR _cdata$[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 17		 je	 SHORT $LN2@PushText

; 2321 :         Print( "<![CDATA[%s]]>", text );

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _text$[ebp]
  00030	51		 push	 ecx
  00031	68 00 00 00 00	 push	 OFFSET $SG4294882636
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2322 :     }
; 2323 :     else {

  00042	eb 0e		 jmp	 SHORT $LN1@PushText
$LN2@PushText:

; 2324 :         PrintString( text, true );

  00044	6a 01		 push	 1
  00046	8b 45 08	 mov	 eax, DWORD PTR _text$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z ; tinyxml2::XMLPrinter::PrintString
$LN1@PushText:

; 2325 :     }
; 2326 : }

  00052	83 c4 04	 add	 esp, 4
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 4
?PushText@XMLPrinter@tinyxml2@@QAEXH@Z PROC		; tinyxml2::XMLPrinter::PushText
; _this$ = ecx

; 2329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2330 :     char buf[BUF_SIZE];
; 2331 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2332 :     PushText( buf, false );

  00043	6a 00		 push	 0
  00045	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004b	52		 push	 edx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2333 : }

  00054	52		 push	 edx
  00055	8b cd		 mov	 ecx, ebp
  00057	50		 push	 eax
  00058	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushText
  0005e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00063	58		 pop	 eax
  00064	5a		 pop	 edx
  00065	5f		 pop	 edi
  00066	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00069	33 cd		 xor	 ecx, ebp
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
  00083	90		 npad	 1
$LN5@PushText:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@PushText
$LN4@PushText:
  0008c	2c ff ff ff	 DD	 -212			; ffffff2cH
  00090	c8 00 00 00	 DD	 200			; 000000c8H
  00094	00 00 00 00	 DD	 $LN3@PushText
$LN3@PushText:
  00098	62		 DB	 98			; 00000062H
  00099	75		 DB	 117			; 00000075H
  0009a	66		 DB	 102			; 00000066H
  0009b	00		 DB	 0
?PushText@XMLPrinter@tinyxml2@@QAEXH@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 4
?PushText@XMLPrinter@tinyxml2@@QAEXI@Z PROC		; tinyxml2::XMLPrinter::PushText
; _this$ = ecx

; 2337 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2338 :     char buf[BUF_SIZE];
; 2339 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z ; tinyxml2::XMLUtil::ToStr
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2340 :     PushText( buf, false );

  00043	6a 00		 push	 0
  00045	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004b	52		 push	 edx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2341 : }

  00054	52		 push	 edx
  00055	8b cd		 mov	 ecx, ebp
  00057	50		 push	 eax
  00058	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushText
  0005e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00063	58		 pop	 eax
  00064	5a		 pop	 edx
  00065	5f		 pop	 edi
  00066	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00069	33 cd		 xor	 ecx, ebp
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
  00083	90		 npad	 1
$LN5@PushText:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@PushText
$LN4@PushText:
  0008c	2c ff ff ff	 DD	 -212			; ffffff2cH
  00090	c8 00 00 00	 DD	 200			; 000000c8H
  00094	00 00 00 00	 DD	 $LN3@PushText
$LN3@PushText:
  00098	62		 DB	 98			; 00000062H
  00099	75		 DB	 117			; 00000075H
  0009a	66		 DB	 102			; 00000066H
  0009b	00		 DB	 0
?PushText@XMLPrinter@tinyxml2@@QAEXI@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 1
?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z PROC		; tinyxml2::XMLPrinter::PushText
; _this$ = ecx

; 2345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2346 :     char buf[BUF_SIZE];
; 2347 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _value$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z ; tinyxml2::XMLUtil::ToStr
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2348 :     PushText( buf, false );

  00044	6a 00		 push	 0
  00046	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004c	52		 push	 edx
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2349 : }

  00055	52		 push	 edx
  00056	8b cd		 mov	 ecx, ebp
  00058	50		 push	 eax
  00059	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushText
  0005f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00064	58		 pop	 eax
  00065	5a		 pop	 edx
  00066	5f		 pop	 edi
  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN5@PushText:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@PushText
$LN4@PushText:
  0008c	2c ff ff ff	 DD	 -212			; ffffff2cH
  00090	c8 00 00 00	 DD	 200			; 000000c8H
  00094	00 00 00 00	 DD	 $LN3@PushText
$LN3@PushText:
  00098	62		 DB	 98			; 00000062H
  00099	75		 DB	 117			; 00000075H
  0009a	66		 DB	 102			; 00000066H
  0009b	00		 DB	 0
?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 4
?PushText@XMLPrinter@tinyxml2@@QAEXM@Z PROC		; tinyxml2::XMLPrinter::PushText
; _this$ = ecx

; 2353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2354 :     char buf[BUF_SIZE];
; 2355 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	51		 push	 ecx
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _value$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z ; tinyxml2::XMLUtil::ToStr
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2356 :     PushText( buf, false );

  0004a	6a 00		 push	 0
  0004c	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00052	51		 push	 ecx
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2357 : }

  0005b	52		 push	 edx
  0005c	8b cd		 mov	 ecx, ebp
  0005e	50		 push	 eax
  0005f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushText
  00065	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006a	58		 pop	 eax
  0006b	5a		 pop	 edx
  0006c	5f		 pop	 edi
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
  0008a	66 90		 npad	 2
$LN5@PushText:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@PushText
$LN4@PushText:
  00094	2c ff ff ff	 DD	 -212			; ffffff2cH
  00098	c8 00 00 00	 DD	 200			; 000000c8H
  0009c	00 00 00 00	 DD	 $LN3@PushText
$LN3@PushText:
  000a0	62		 DB	 98			; 00000062H
  000a1	75		 DB	 117			; 00000075H
  000a2	66		 DB	 102			; 00000066H
  000a3	00		 DB	 0
?PushText@XMLPrinter@tinyxml2@@QAEXM@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_buf$ = -212						; size = 200
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 8
?PushText@XMLPrinter@tinyxml2@@QAEXN@Z PROC		; tinyxml2::XMLPrinter::PushText
; _this$ = ecx

; 2361 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00011	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2362 :     char buf[BUF_SIZE];
; 2363 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

  0002b	68 c8 00 00 00	 push	 200			; 000000c8H
  00030	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00036	50		 push	 eax
  00037	83 ec 08	 sub	 esp, 8
  0003a	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _value$[ebp]
  0003f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00044	e8 00 00 00 00	 call	 ?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z ; tinyxml2::XMLUtil::ToStr
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 2364 :     PushText( buf, false );

  0004c	6a 00		 push	 0
  0004e	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2365 : }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@PushText
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	5f		 pop	 edi
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	33 cd		 xor	 ecx, ebp
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN5@PushText:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@PushText
$LN4@PushText:
  00094	2c ff ff ff	 DD	 -212			; ffffff2cH
  00098	c8 00 00 00	 DD	 200			; 000000c8H
  0009c	00 00 00 00	 DD	 $LN3@PushText
$LN3@PushText:
  000a0	62		 DB	 98			; 00000062H
  000a1	75		 DB	 117			; 00000075H
  000a2	66		 DB	 102			; 00000066H
  000a3	00		 DB	 0
?PushText@XMLPrinter@tinyxml2@@QAEXN@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_comment$ = 8						; size = 4
?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLPrinter::PushComment
; _this$ = ecx

; 2369 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2370 :     SealElementIfJustOpened();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElementIfJustOpened

; 2371 :     if ( _textDepth < 0 && !_firstElement && !_compactMode) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0001e	7d 44		 jge	 SHORT $LN2@PushCommen
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	0f b6 51 3c	 movzx	 edx, BYTE PTR [ecx+60]
  00027	85 d2		 test	 edx, edx
  00029	75 39		 jne	 SHORT $LN2@PushCommen
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	0f b6 48 4d	 movzx	 ecx, BYTE PTR [eax+77]
  00032	85 c9		 test	 ecx, ecx
  00034	75 2e		 jne	 SHORT $LN2@PushCommen

; 2372 :         Print( "\n" );

  00036	68 00 00 00 00	 push	 OFFSET $SG4294882635
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00044	83 c4 08	 add	 esp, 8

; 2373 :         PrintSpace( _depth );

  00047	8b f4		 mov	 esi, esp
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0004f	51		 push	 ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0005b	ff d2		 call	 edx
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@PushCommen:

; 2374 :     }
; 2375 :     _firstElement = false;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0

; 2376 :     Print( "<!--%s-->", comment );

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _comment$[ebp]
  0006e	51		 push	 ecx
  0006f	68 00 00 00 00	 push	 OFFSET $SG4294882634
  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2377 : }

  00080	5e		 pop	 esi
  00081	83 c4 04	 add	 esp, 4
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLPrinter::PushComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLPrinter::PushDeclaration
; _this$ = ecx

; 2381 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2382 :     SealElementIfJustOpened();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElementIfJustOpened

; 2383 :     if ( _textDepth < 0 && !_firstElement && !_compactMode) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0001e	7d 44		 jge	 SHORT $LN2@PushDeclar
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	0f b6 51 3c	 movzx	 edx, BYTE PTR [ecx+60]
  00027	85 d2		 test	 edx, edx
  00029	75 39		 jne	 SHORT $LN2@PushDeclar
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	0f b6 48 4d	 movzx	 ecx, BYTE PTR [eax+77]
  00032	85 c9		 test	 ecx, ecx
  00034	75 2e		 jne	 SHORT $LN2@PushDeclar

; 2384 :         Print( "\n" );

  00036	68 00 00 00 00	 push	 OFFSET $SG4294882633
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00044	83 c4 08	 add	 esp, 8

; 2385 :         PrintSpace( _depth );

  00047	8b f4		 mov	 esi, esp
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0004f	51		 push	 ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0005b	ff d2		 call	 edx
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@PushDeclar:

; 2386 :     }
; 2387 :     _firstElement = false;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0

; 2388 :     Print( "<?%s?>", value );

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0006e	51		 push	 ecx
  0006f	68 00 00 00 00	 push	 OFFSET $SG4294882632
  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2389 : }

  00080	5e		 pop	 esi
  00081	83 c4 04	 add	 esp, 4
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLPrinter::PushDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLPrinter::PushUnknown
; _this$ = ecx

; 2393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2394 :     SealElementIfJustOpened();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?SealElementIfJustOpened@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElementIfJustOpened

; 2395 :     if ( _textDepth < 0 && !_firstElement && !_compactMode) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0001e	7d 44		 jge	 SHORT $LN2@PushUnknow
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	0f b6 51 3c	 movzx	 edx, BYTE PTR [ecx+60]
  00027	85 d2		 test	 edx, edx
  00029	75 39		 jne	 SHORT $LN2@PushUnknow
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	0f b6 48 4d	 movzx	 ecx, BYTE PTR [eax+77]
  00032	85 c9		 test	 ecx, ecx
  00034	75 2e		 jne	 SHORT $LN2@PushUnknow

; 2396 :         Print( "\n" );

  00036	68 00 00 00 00	 push	 OFFSET $SG4294882631
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  00044	83 c4 08	 add	 esp, 8

; 2397 :         PrintSpace( _depth );

  00047	8b f4		 mov	 esi, esp
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0004f	51		 push	 ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0005b	ff d2		 call	 edx
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@PushUnknow:

; 2398 :     }
; 2399 :     _firstElement = false;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0

; 2400 :     Print( "<!%s>", value );

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0006e	51		 push	 ecx
  0006f	68 00 00 00 00	 push	 OFFSET $SG4294882630
  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	52		 push	 edx
  00078	e8 00 00 00 00	 call	 ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ; tinyxml2::XMLPrinter::Print
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2401 : }

  00080	5e		 pop	 esi
  00081	83 c4 04	 add	 esp, 4
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLPrinter::PushUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_doc$ = 8						; size = 4
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLPrinter::VisitEnter
; _this$ = ecx

; 2405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2406 :     _processEntities = doc.ProcessEntities();

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00011	e8 00 00 00 00	 call	 ?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::ProcessEntities
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	88 41 4c	 mov	 BYTE PTR [ecx+76], al

; 2407 :     if ( doc.HasBOM() ) {

  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  0001f	e8 00 00 00 00	 call	 ?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::HasBOM
  00024	0f b6 d0	 movzx	 edx, al
  00027	85 d2		 test	 edx, edx
  00029	74 0c		 je	 SHORT $LN2@VisitEnter

; 2408 :         PushHeader( true, false );

  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z ; tinyxml2::XMLPrinter::PushHeader
$LN2@VisitEnter:

; 2409 :     }
; 2410 :     return true;

  00037	b0 01		 mov	 al, 1

; 2411 : }

  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
tv89 = -17						; size = 1
tv78 = -16						; size = 4
_compactMode$ = -9					; size = 1
_parentElem$ = -8					; size = 4
_this$ = -4						; size = 4
_element$ = 8						; size = 4
_attribute$ = 12					; size = 4
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z PROC ; tinyxml2::XMLPrinter::VisitEnter
; _this$ = ecx

; 2415 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2416 :     const XMLElement* parentElem = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _parentElem$[ebp], 0

; 2417 :     if ( element.Parent() ) {

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _element$[ebp]
  00028	e8 00 00 00 00	 call	 ?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::Parent
  0002d	85 c0		 test	 eax, eax
  0002f	74 23		 je	 SHORT $LN4@VisitEnter

; 2418 :         parentElem = element.Parent()->ToElement();

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _element$[ebp]
  00034	e8 00 00 00 00	 call	 ?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::Parent
  00039	89 45 f0	 mov	 DWORD PTR tv78[ebp], eax
  0003c	8b 45 f0	 mov	 eax, DWORD PTR tv78[ebp]
  0003f	8b 10		 mov	 edx, DWORD PTR [eax]
  00041	8b f4		 mov	 esi, esp
  00043	8b 4d f0	 mov	 ecx, DWORD PTR tv78[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	ff d0		 call	 eax
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	89 45 f8	 mov	 DWORD PTR _parentElem$[ebp], eax
$LN4@VisitEnter:

; 2419 :     }
; 2420 :     const bool compactMode = parentElem ? CompactMode( *parentElem ) : _compactMode;

  00054	83 7d f8 00	 cmp	 DWORD PTR _parentElem$[ebp], 0
  00058	74 1f		 je	 SHORT $LN6@VisitEnter
  0005a	8b f4		 mov	 esi, esp
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _parentElem$[ebp]
  0005f	51		 push	 ecx
  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0006b	ff d2		 call	 edx
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	88 45 ef	 mov	 BYTE PTR tv89[ebp], al
  00077	eb 09		 jmp	 SHORT $LN7@VisitEnter
$LN6@VisitEnter:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8a 48 4d	 mov	 cl, BYTE PTR [eax+77]
  0007f	88 4d ef	 mov	 BYTE PTR tv89[ebp], cl
$LN7@VisitEnter:
  00082	8a 55 ef	 mov	 dl, BYTE PTR tv89[ebp]
  00085	88 55 f7	 mov	 BYTE PTR _compactMode$[ebp], dl

; 2421 :     OpenElement( element.Name(), compactMode );

  00088	0f b6 45 f7	 movzx	 eax, BYTE PTR _compactMode$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _element$[ebp]
  00090	e8 00 00 00 00	 call	 ?Name@XMLElement@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLElement::Name
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::OpenElement
$LN2@VisitEnter:

; 2422 :     while ( attribute ) {

  0009e	83 7d 0c 00	 cmp	 DWORD PTR _attribute$[ebp], 0
  000a2	74 27		 je	 SHORT $LN3@VisitEnter

; 2423 :         PushAttribute( attribute->Name(), attribute->Value() );

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _attribute$[ebp]
  000a7	e8 00 00 00 00	 call	 ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Value
  000ac	50		 push	 eax
  000ad	8b 4d 0c	 mov	 ecx, DWORD PTR _attribute$[ebp]
  000b0	e8 00 00 00 00	 call	 ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLAttribute::Name
  000b5	50		 push	 eax
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	e8 00 00 00 00	 call	 ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2424 :         attribute = attribute->Next();

  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _attribute$[ebp]
  000c1	e8 00 00 00 00	 call	 ?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
  000c6	89 45 0c	 mov	 DWORD PTR _attribute$[ebp], eax

; 2425 :     }

  000c9	eb d3		 jmp	 SHORT $LN2@VisitEnter
$LN3@VisitEnter:

; 2426 :     return true;

  000cb	b0 01		 mov	 al, 1

; 2427 : }

  000cd	5e		 pop	 esi
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_element$ = 8						; size = 4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z PROC ; tinyxml2::XMLPrinter::VisitExit
; _this$ = ecx

; 2431 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2432 :     CloseElement( CompactMode(element) );

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 08	 mov	 eax, DWORD PTR _element$[ebp]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00020	ff d0		 call	 eax
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b f4		 mov	 esi, esp
  0002b	0f b6 c8	 movzx	 ecx, al
  0002e	51		 push	 ecx
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  0003a	ff d2		 call	 edx
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2433 :     return true;

  00043	b0 01		 mov	 al, 1

; 2434 : }

  00045	5e		 pop	 esi
  00046	83 c4 04	 add	 esp, 4
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_text$ = 8						; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z PROC	; tinyxml2::XMLPrinter::Visit
; _this$ = ecx

; 2438 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2439 :     PushText( text.Value(), text.CData() );

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _text$[ebp]
  00011	e8 00 00 00 00	 call	 ?CData@XMLText@tinyxml2@@QBE_NXZ ; tinyxml2::XMLText::CData
  00016	0f b6 c0	 movzx	 eax, al
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _text$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2440 :     return true;

  0002b	b0 01		 mov	 al, 1

; 2441 : }

  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z ENDP	; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_comment$ = 8						; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z PROC ; tinyxml2::XMLPrinter::Visit
; _this$ = ecx

; 2445 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2446 :     PushComment( comment.Value() );

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _comment$[ebp]
  00011	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushComment

; 2447 :     return true;

  0001f	b0 01		 mov	 al, 1

; 2448 : }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z ENDP ; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_declaration$ = 8					; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z PROC ; tinyxml2::XMLPrinter::Visit
; _this$ = ecx

; 2451 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2452 :     PushDeclaration( declaration.Value() );

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _declaration$[ebp]
  00011	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushDeclaration

; 2453 :     return true;

  0001f	b0 01		 mov	 al, 1

; 2454 : }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ENDP ; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unknown$ = 8						; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z PROC ; tinyxml2::XMLPrinter::Visit
; _this$ = ecx

; 2458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2459 :     PushUnknown( unknown.Value() );

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _unknown$[ebp]
  00011	e8 00 00 00 00	 call	 ?Value@XMLNode@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLNode::Value
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushUnknown

; 2460 :     return true;

  0001f	b0 01		 mov	 al, 1

; 2461 : }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ENDP ; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.cpp
;	COMDAT ?Fits@?$LongFitsIntoSizeTMinusOne@$00@tinyxml2@@SA_NK@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_value$ = 8						; size = 4
?Fits@?$LongFitsIntoSizeTMinusOne@$00@tinyxml2@@SA_NK@Z PROC ; tinyxml2::LongFitsIntoSizeTMinusOne<1>::Fits, COMDAT

; 1927 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1928 :         return value < (size_t)-1;

  0000b	83 7d 08 ff	 cmp	 DWORD PTR _value$[ebp], -1
  0000f	73 09		 jae	 SHORT $LN3@Fits
  00011	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00018	eb 07		 jmp	 SHORT $LN4@Fits
$LN3@Fits:
  0001a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@Fits:
  00021	8a 45 fc	 mov	 al, BYTE PTR tv65[ebp]

; 1929 :     }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?Fits@?$LongFitsIntoSizeTMinusOne@$00@tinyxml2@@SA_NK@Z ENDP ; tinyxml2::LongFitsIntoSizeTMinusOne<1>::Fits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Size@?$DynArray@D$0BE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$DynArray@D$0BE@@tinyxml2@@QBEHXZ PROC		; tinyxml2::DynArray<char,20>::Size, COMDAT
; _this$ = ecx

; 247  :     int Size() const					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  :         TIXMLASSERT( _size >= 0 );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00015	7d 01		 jge	 SHORT $LN2@Size
  00017	cc		 int	 3
$LN2@Size:

; 249  :         return _size;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 250  :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Size@?$DynArray@D$0BE@@tinyxml2@@QBEHXZ ENDP		; tinyxml2::DynArray<char,20>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??A?$DynArray@D$0BE@@tinyxml2@@QAEAADH@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$DynArray@D$0BE@@tinyxml2@@QAEAADH@Z PROC		; tinyxml2::DynArray<char,20>::operator[], COMDAT
; _this$ = ecx

; 232  :     T& operator[](int i)				{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  :         TIXMLASSERT( i>= 0 && i < _size );

  00017	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0001b	7c 14		 jl	 SHORT $LN4@operator
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00023	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00026	7d 09		 jge	 SHORT $LN4@operator
  00028	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN5@operator
$LN4@operator:
  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN5@operator:
  00038	83 7d f8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0003c	75 01		 jne	 SHORT $LN2@operator
  0003e	cc		 int	 3
$LN2@operator:

; 234  :         return _mem[i];

  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	03 45 08	 add	 eax, DWORD PTR _i$[ebp]

; 235  :     }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??A?$DynArray@D$0BE@@tinyxml2@@QAEAADH@Z ENDP		; tinyxml2::DynArray<char,20>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_this$ = -4						; size = 4
_count$ = 8						; size = 4
?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z PROC	; tinyxml2::DynArray<char,20>::PushArr, COMDAT
; _this$ = ecx

; 209  :     T* PushArr( int count ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 210  :         TIXMLASSERT( count >= 0 );

  00017	83 7d 08 00	 cmp	 DWORD PTR _count$[ebp], 0
  0001b	7d 01		 jge	 SHORT $LN2@PushArr
  0001d	cc		 int	 3
$LN2@PushArr:

; 211  :         TIXMLASSERT( _size <= INT_MAX - count );

  0001e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00023	2b 45 08	 sub	 eax, DWORD PTR _count$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	39 41 1c	 cmp	 DWORD PTR [ecx+28], eax
  0002c	7e 01		 jle	 SHORT $LN3@PushArr
  0002e	cc		 int	 3
$LN3@PushArr:

; 212  :         EnsureCapacity( _size+count );

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00035	03 45 08	 add	 eax, DWORD PTR _count$[ebp]
  00038	50		 push	 eax
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char,20>::EnsureCapacity

; 213  :         T* ret = &_mem[_size];

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 11		 mov	 edx, DWORD PTR [ecx]
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	03 50 1c	 add	 edx, DWORD PTR [eax+28]
  0004c	89 55 f8	 mov	 DWORD PTR _ret$[ebp], edx

; 214  :         _size += count;

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00055	03 55 08	 add	 edx, DWORD PTR _count$[ebp]
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 215  :         return ret;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 216  :     }

  00061	83 c4 08	 add	 esp, 8
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z ENDP	; tinyxml2::DynArray<char,20>::PushArr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 1
?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z PROC		; tinyxml2::DynArray<char,20>::Push, COMDAT
; _this$ = ecx

; 203  :     void Push( T t ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 204  :         TIXMLASSERT( _size < INT_MAX );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	81 78 1c ff ff
	ff 7f		 cmp	 DWORD PTR [eax+28], 2147483647 ; 7fffffffH
  00018	7c 01		 jl	 SHORT $LN2@Push
  0001a	cc		 int	 3
$LN2@Push:

; 205  :         EnsureCapacity( _size+1 );

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00021	83 c2 01	 add	 edx, 1
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char,20>::EnsureCapacity

; 206  :         _mem[_size++] = t;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8a 55 08	 mov	 dl, BYTE PTR _t$[ebp]
  0003b	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 207  :     }

  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z ENDP		; tinyxml2::DynArray<char,20>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char,20>::~DynArray<char,20>, COMDAT
; _this$ = ecx

; 193  :     ~DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         if ( _mem != _pool ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	39 01		 cmp	 DWORD PTR [ecx], eax
  00022	74 14		 je	 SHORT $LN3@DynArray

; 195  :             delete [] _mem;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN3@DynArray:

; 196  :         }
; 197  :     }

  00038	83 c4 08	 add	 esp, 8
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char,20>::~DynArray<char,20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char,20>::DynArray<char,20>, COMDAT
; _this$ = ecx

; 187  :     DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         _mem = _pool;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 189  :         _allocated = INITIAL_SIZE;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 18 14 00
	00 00		 mov	 DWORD PTR [edx+24], 20	; 00000014H

; 190  :         _size = 0;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 191  :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char,20>::DynArray<char,20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ PROC		; tinyxml2::DynArray<char const *,10>::Pop, COMDAT
; _this$ = ecx

; 218  :     T Pop() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :         TIXMLASSERT( _size > 0 );

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	7f 01		 jg	 SHORT $LN2@Pop
  00020	cc		 int	 3
$LN2@Pop:

; 220  :         return _mem[--_size];

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00027	83 ea 01	 sub	 edx, 1
  0002a	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  00033	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  0003e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 221  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ ENDP		; tinyxml2::DynArray<char const *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::DynArray<char const *,10>::Push, COMDAT
; _this$ = ecx

; 203  :     void Push( T t ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 204  :         TIXMLASSERT( _size < INT_MAX );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	81 78 30 ff ff
	ff 7f		 cmp	 DWORD PTR [eax+48], 2147483647 ; 7fffffffH
  00018	7c 01		 jl	 SHORT $LN2@Push
  0001a	cc		 int	 3
$LN2@Push:

; 205  :         EnsureCapacity( _size+1 );

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	83 c2 01	 add	 edx, 1
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char const *,10>::EnsureCapacity

; 206  :         _mem[_size++] = t;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  0003b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 207  :     }

  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::DynArray<char const *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>, COMDAT
; _this$ = ecx

; 193  :     ~DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         if ( _mem != _pool ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	39 01		 cmp	 DWORD PTR [ecx], eax
  00022	74 14		 je	 SHORT $LN3@DynArray

; 195  :             delete [] _mem;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN3@DynArray:

; 196  :         }
; 197  :     }

  00038	83 c4 08	 add	 esp, 8
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>, COMDAT
; _this$ = ecx

; 187  :     DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         _mem = _pool;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 189  :         _allocated = INITIAL_SIZE;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 2c 0a 00
	00 00		 mov	 DWORD PTR [edx+44], 10	; 0000000aH

; 190  :         _size = 0;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 191  :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<44>::Untracked, COMDAT
; _this$ = ecx

; 388  :     int Untracked() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :         return _nUntracked;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 48	 mov	 eax, DWORD PTR [eax+72]

; 390  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<44>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<44>::SetTracked, COMDAT
; _this$ = ecx

; 384  :     void SetTracked() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :         _nUntracked--;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00014	83 e9 01	 sub	 ecx, 1
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 386  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<44>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -8						; size = 4
_this$ = -4						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<44>::Free, COMDAT
; _this$ = ecx

; 367  :     virtual void Free( void* mem ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  :         if ( !mem ) {

  00018	83 7d 08 00	 cmp	 DWORD PTR _mem$[ebp], 0
  0001c	75 02		 jne	 SHORT $LN2@Free

; 369  :             return;

  0001e	eb 46		 jmp	 SHORT $LN1@Free
$LN2@Free:

; 370  :         }
; 371  :         --_currentAllocs;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 372  :         Chunk* chunk = static_cast<Chunk*>( mem );

  0002f	8b 45 08	 mov	 eax, DWORD PTR _mem$[ebp]
  00032	89 45 f8	 mov	 DWORD PTR _chunk$[ebp], eax

; 373  : #ifdef DEBUG
; 374  :         memset( chunk, 0xfe, sizeof(Chunk) );

  00035	8b f4		 mov	 esi, esp
  00037	6a 2c		 push	 44			; 0000002cH
  00039	68 fe 00 00 00	 push	 254			; 000000feH
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _chunk$[ebp]
  00041	51		 push	 ecx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 375  : #endif
; 376  :         chunk->next = _root;

  00052	8b 55 f8	 mov	 edx, DWORD PTR _chunk$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0005b	89 0a		 mov	 DWORD PTR [edx], ecx

; 377  :         _root = chunk;

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 45 f8	 mov	 eax, DWORD PTR _chunk$[ebp]
  00063	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN1@Free:

; 378  :     }

  00066	5e		 pop	 esi
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<44>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv72 = -24						; size = 4
$T1 = -20						; size = 4
_result$ = -16						; size = 4
_i$2 = -12						; size = 4
_block$3 = -8						; size = 4
_this$ = -4						; size = 4
?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<44>::Alloc, COMDAT
; _this$ = ecx

; 343  :     virtual void* Alloc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :         if ( !_root ) {

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00027	0f 85 92 00 00
	00		 jne	 $LN5@Alloc

; 345  :             // Need a new block.
; 346  :             Block* block = new Block();

  0002d	68 fc 0f 00 00	 push	 4092			; 00000ffcH
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  0003d	68 fc 0f 00 00	 push	 4092			; 00000ffcH
  00042	6a 00		 push	 0
  00044	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00053	89 55 e8	 mov	 DWORD PTR tv72[ebp], edx
  00056	eb 07		 jmp	 SHORT $LN9@Alloc
  00058	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN9@Alloc:
  0005f	8b 45 e8	 mov	 eax, DWORD PTR tv72[ebp]
  00062	89 45 f8	 mov	 DWORD PTR _block$3[ebp], eax

; 347  :             _blockPtrs.Push( block );

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  00068	51		 push	 ecx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 04	 add	 ecx, 4
  0006f	e8 00 00 00 00	 call	 ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push

; 348  : 
; 349  :             for( int i=0; i<COUNT-1; ++i ) {

  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN4@Alloc
$LN2@Alloc:
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _i$2[ebp]
  00080	83 c2 01	 add	 edx, 1
  00083	89 55 f4	 mov	 DWORD PTR _i$2[ebp], edx
$LN4@Alloc:
  00086	83 7d f4 5c	 cmp	 DWORD PTR _i$2[ebp], 92	; 0000005cH
  0008a	7d 18		 jge	 SHORT $LN3@Alloc

; 350  :                 block->chunk[i].next = &block->chunk[i+1];

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	6b c8 2c	 imul	 ecx, eax, 44
  00095	03 4d f8	 add	 ecx, DWORD PTR _block$3[ebp]
  00098	6b 55 f4 2c	 imul	 edx, DWORD PTR _i$2[ebp], 44
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  0009f	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 351  :             }

  000a2	eb d9		 jmp	 SHORT $LN2@Alloc
$LN3@Alloc:

; 352  :             block->chunk[COUNT-1].next = 0;

  000a4	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  000a9	6b d1 5c	 imul	 edx, ecx, 92
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  000af	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 353  :             _root = block->chunk;

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
$LN5@Alloc:

; 354  :         }
; 355  :         void* result = _root;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c5	89 4d f0	 mov	 DWORD PTR _result$[ebp], ecx

; 356  :         _root = _root->next;

  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	89 51 38	 mov	 DWORD PTR [ecx+56], edx

; 357  : 
; 358  :         ++_currentAllocs;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000dc	83 c1 01	 add	 ecx, 1
  000df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 359  :         if ( _currentAllocs > _maxAllocs ) {

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  000ee	3b 51 44	 cmp	 edx, DWORD PTR [ecx+68]
  000f1	7e 0c		 jle	 SHORT $LN6@Alloc

; 360  :             _maxAllocs = _currentAllocs;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000fc	89 50 44	 mov	 DWORD PTR [eax+68], edx
$LN6@Alloc:

; 361  :         }
; 362  :         _nAllocs++;

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00105	83 c1 01	 add	 ecx, 1
  00108	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 363  :         _nUntracked++;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00114	83 c1 01	 add	 ecx, 1
  00117	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 364  :         return result;

  0011d	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]

; 365  :     }

  00120	83 c4 18	 add	 esp, 24			; 00000018H
  00123	3b ec		 cmp	 ebp, esp
  00125	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<44>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<44>::CurrentAllocs, COMDAT
; _this$ = ecx

; 339  :     int CurrentAllocs() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  :         return _currentAllocs;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 341  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<44>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<44>::ItemSize, COMDAT
; _this$ = ecx

; 336  :     virtual int ItemSize() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  :         return SIZE;

  0000e	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH

; 338  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<44>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_b$2 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<44>::Clear, COMDAT
; _this$ = ecx

; 323  :     void Clear() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 324  :         // Delete the blocks.
; 325  :         while( !_blockPtrs.Empty()) {

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	e8 00 00 00 00	 call	 ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty
  00029	0f b6 c0	 movzx	 eax, al
  0002c	85 c0		 test	 eax, eax
  0002e	75 27		 jne	 SHORT $LN3@Clear

; 326  :             Block* b  = _blockPtrs.Pop();

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 04	 add	 ecx, 4
  00036	e8 00 00 00 00	 call	 ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop
  0003b	89 45 f8	 mov	 DWORD PTR _b$2[ebp], eax

; 327  :             delete b;

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _b$2[ebp]
  00041	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00044	68 fc 0f 00 00	 push	 4092			; 00000ffcH
  00049	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8

; 328  :         }

  00055	eb c7		 jmp	 SHORT $LN2@Clear
$LN3@Clear:

; 329  :         _root = 0;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 330  :         _currentAllocs = 0;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 331  :         _nAllocs = 0;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 332  :         _maxAllocs = 0;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 333  :         _nUntracked = 0;

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 334  :     }

  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<44>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<44>::~MemPoolT<44>, COMDAT
; _this$ = ecx

; 319  :     ~MemPoolT() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CM@@tinyxml2@@6B@

; 320  :         Clear();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<44>::Clear

; 321  :     }

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 04	 add	 ecx, 4
  00044	e8 00 00 00 00	 call	 ??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<44>::~MemPoolT<44>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<44>::MemPoolT<44>, COMDAT
; _this$ = ecx

; 318  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0MemPool@tinyxml2@@QAE@XZ ; tinyxml2::MemPool::MemPool
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CM@@tinyxml2@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00078	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<44>::MemPoolT<44>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<48>::Untracked, COMDAT
; _this$ = ecx

; 388  :     int Untracked() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :         return _nUntracked;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 48	 mov	 eax, DWORD PTR [eax+72]

; 390  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<48>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<48>::SetTracked, COMDAT
; _this$ = ecx

; 384  :     void SetTracked() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :         _nUntracked--;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00014	83 e9 01	 sub	 ecx, 1
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 386  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<48>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -8						; size = 4
_this$ = -4						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<48>::Free, COMDAT
; _this$ = ecx

; 367  :     virtual void Free( void* mem ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  :         if ( !mem ) {

  00018	83 7d 08 00	 cmp	 DWORD PTR _mem$[ebp], 0
  0001c	75 02		 jne	 SHORT $LN2@Free

; 369  :             return;

  0001e	eb 46		 jmp	 SHORT $LN1@Free
$LN2@Free:

; 370  :         }
; 371  :         --_currentAllocs;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 372  :         Chunk* chunk = static_cast<Chunk*>( mem );

  0002f	8b 45 08	 mov	 eax, DWORD PTR _mem$[ebp]
  00032	89 45 f8	 mov	 DWORD PTR _chunk$[ebp], eax

; 373  : #ifdef DEBUG
; 374  :         memset( chunk, 0xfe, sizeof(Chunk) );

  00035	8b f4		 mov	 esi, esp
  00037	6a 30		 push	 48			; 00000030H
  00039	68 fe 00 00 00	 push	 254			; 000000feH
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _chunk$[ebp]
  00041	51		 push	 ecx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 375  : #endif
; 376  :         chunk->next = _root;

  00052	8b 55 f8	 mov	 edx, DWORD PTR _chunk$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0005b	89 0a		 mov	 DWORD PTR [edx], ecx

; 377  :         _root = chunk;

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 45 f8	 mov	 eax, DWORD PTR _chunk$[ebp]
  00063	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN1@Free:

; 378  :     }

  00066	5e		 pop	 esi
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<48>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv72 = -24						; size = 4
$T1 = -20						; size = 4
_result$ = -16						; size = 4
_i$2 = -12						; size = 4
_block$3 = -8						; size = 4
_this$ = -4						; size = 4
?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<48>::Alloc, COMDAT
; _this$ = ecx

; 343  :     virtual void* Alloc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :         if ( !_root ) {

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00027	0f 85 92 00 00
	00		 jne	 $LN5@Alloc

; 345  :             // Need a new block.
; 346  :             Block* block = new Block();

  0002d	68 f0 0f 00 00	 push	 4080			; 00000ff0H
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  0003d	68 f0 0f 00 00	 push	 4080			; 00000ff0H
  00042	6a 00		 push	 0
  00044	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00053	89 55 e8	 mov	 DWORD PTR tv72[ebp], edx
  00056	eb 07		 jmp	 SHORT $LN9@Alloc
  00058	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN9@Alloc:
  0005f	8b 45 e8	 mov	 eax, DWORD PTR tv72[ebp]
  00062	89 45 f8	 mov	 DWORD PTR _block$3[ebp], eax

; 347  :             _blockPtrs.Push( block );

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  00068	51		 push	 ecx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 04	 add	 ecx, 4
  0006f	e8 00 00 00 00	 call	 ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push

; 348  : 
; 349  :             for( int i=0; i<COUNT-1; ++i ) {

  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN4@Alloc
$LN2@Alloc:
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _i$2[ebp]
  00080	83 c2 01	 add	 edx, 1
  00083	89 55 f4	 mov	 DWORD PTR _i$2[ebp], edx
$LN4@Alloc:
  00086	83 7d f4 54	 cmp	 DWORD PTR _i$2[ebp], 84	; 00000054H
  0008a	7d 18		 jge	 SHORT $LN3@Alloc

; 350  :                 block->chunk[i].next = &block->chunk[i+1];

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	6b c8 30	 imul	 ecx, eax, 48
  00095	03 4d f8	 add	 ecx, DWORD PTR _block$3[ebp]
  00098	6b 55 f4 30	 imul	 edx, DWORD PTR _i$2[ebp], 48
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  0009f	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 351  :             }

  000a2	eb d9		 jmp	 SHORT $LN2@Alloc
$LN3@Alloc:

; 352  :             block->chunk[COUNT-1].next = 0;

  000a4	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000a9	6b d1 54	 imul	 edx, ecx, 84
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  000af	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 353  :             _root = block->chunk;

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
$LN5@Alloc:

; 354  :         }
; 355  :         void* result = _root;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c5	89 4d f0	 mov	 DWORD PTR _result$[ebp], ecx

; 356  :         _root = _root->next;

  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	89 51 38	 mov	 DWORD PTR [ecx+56], edx

; 357  : 
; 358  :         ++_currentAllocs;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000dc	83 c1 01	 add	 ecx, 1
  000df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 359  :         if ( _currentAllocs > _maxAllocs ) {

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  000ee	3b 51 44	 cmp	 edx, DWORD PTR [ecx+68]
  000f1	7e 0c		 jle	 SHORT $LN6@Alloc

; 360  :             _maxAllocs = _currentAllocs;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000fc	89 50 44	 mov	 DWORD PTR [eax+68], edx
$LN6@Alloc:

; 361  :         }
; 362  :         _nAllocs++;

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00105	83 c1 01	 add	 ecx, 1
  00108	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 363  :         _nUntracked++;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00114	83 c1 01	 add	 ecx, 1
  00117	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 364  :         return result;

  0011d	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]

; 365  :     }

  00120	83 c4 18	 add	 esp, 24			; 00000018H
  00123	3b ec		 cmp	 ebp, esp
  00125	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<48>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<48>::CurrentAllocs, COMDAT
; _this$ = ecx

; 339  :     int CurrentAllocs() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  :         return _currentAllocs;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 341  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<48>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<48>::ItemSize, COMDAT
; _this$ = ecx

; 336  :     virtual int ItemSize() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  :         return SIZE;

  0000e	b8 30 00 00 00	 mov	 eax, 48			; 00000030H

; 338  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<48>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_b$2 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<48>::Clear, COMDAT
; _this$ = ecx

; 323  :     void Clear() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 324  :         // Delete the blocks.
; 325  :         while( !_blockPtrs.Empty()) {

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	e8 00 00 00 00	 call	 ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty
  00029	0f b6 c0	 movzx	 eax, al
  0002c	85 c0		 test	 eax, eax
  0002e	75 27		 jne	 SHORT $LN3@Clear

; 326  :             Block* b  = _blockPtrs.Pop();

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 04	 add	 ecx, 4
  00036	e8 00 00 00 00	 call	 ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop
  0003b	89 45 f8	 mov	 DWORD PTR _b$2[ebp], eax

; 327  :             delete b;

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _b$2[ebp]
  00041	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00044	68 f0 0f 00 00	 push	 4080			; 00000ff0H
  00049	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8

; 328  :         }

  00055	eb c7		 jmp	 SHORT $LN2@Clear
$LN3@Clear:

; 329  :         _root = 0;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 330  :         _currentAllocs = 0;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 331  :         _nAllocs = 0;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 332  :         _maxAllocs = 0;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 333  :         _nUntracked = 0;

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 334  :     }

  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<48>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<48>::~MemPoolT<48>, COMDAT
; _this$ = ecx

; 319  :     ~MemPoolT() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DA@@tinyxml2@@6B@

; 320  :         Clear();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<48>::Clear

; 321  :     }

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 04	 add	 ecx, 4
  00044	e8 00 00 00 00	 call	 ??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<48>::~MemPoolT<48>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<48>::MemPoolT<48>, COMDAT
; _this$ = ecx

; 318  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0MemPool@tinyxml2@@QAE@XZ ; tinyxml2::MemPool::MemPool
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DA@@tinyxml2@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00078	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<48>::MemPoolT<48>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<36>::Untracked, COMDAT
; _this$ = ecx

; 388  :     int Untracked() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :         return _nUntracked;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 48	 mov	 eax, DWORD PTR [eax+72]

; 390  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<36>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<36>::SetTracked, COMDAT
; _this$ = ecx

; 384  :     void SetTracked() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :         _nUntracked--;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00014	83 e9 01	 sub	 ecx, 1
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 386  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<36>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -8						; size = 4
_this$ = -4						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<36>::Free, COMDAT
; _this$ = ecx

; 367  :     virtual void Free( void* mem ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  :         if ( !mem ) {

  00018	83 7d 08 00	 cmp	 DWORD PTR _mem$[ebp], 0
  0001c	75 02		 jne	 SHORT $LN2@Free

; 369  :             return;

  0001e	eb 46		 jmp	 SHORT $LN1@Free
$LN2@Free:

; 370  :         }
; 371  :         --_currentAllocs;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 372  :         Chunk* chunk = static_cast<Chunk*>( mem );

  0002f	8b 45 08	 mov	 eax, DWORD PTR _mem$[ebp]
  00032	89 45 f8	 mov	 DWORD PTR _chunk$[ebp], eax

; 373  : #ifdef DEBUG
; 374  :         memset( chunk, 0xfe, sizeof(Chunk) );

  00035	8b f4		 mov	 esi, esp
  00037	6a 24		 push	 36			; 00000024H
  00039	68 fe 00 00 00	 push	 254			; 000000feH
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _chunk$[ebp]
  00041	51		 push	 ecx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 375  : #endif
; 376  :         chunk->next = _root;

  00052	8b 55 f8	 mov	 edx, DWORD PTR _chunk$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0005b	89 0a		 mov	 DWORD PTR [edx], ecx

; 377  :         _root = chunk;

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 45 f8	 mov	 eax, DWORD PTR _chunk$[ebp]
  00063	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN1@Free:

; 378  :     }

  00066	5e		 pop	 esi
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<36>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv72 = -24						; size = 4
$T1 = -20						; size = 4
_result$ = -16						; size = 4
_i$2 = -12						; size = 4
_block$3 = -8						; size = 4
_this$ = -4						; size = 4
?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<36>::Alloc, COMDAT
; _this$ = ecx

; 343  :     virtual void* Alloc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :         if ( !_root ) {

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00027	0f 85 92 00 00
	00		 jne	 $LN5@Alloc

; 345  :             // Need a new block.
; 346  :             Block* block = new Block();

  0002d	68 e4 0f 00 00	 push	 4068			; 00000fe4H
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  0003d	68 e4 0f 00 00	 push	 4068			; 00000fe4H
  00042	6a 00		 push	 0
  00044	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00053	89 55 e8	 mov	 DWORD PTR tv72[ebp], edx
  00056	eb 07		 jmp	 SHORT $LN9@Alloc
  00058	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN9@Alloc:
  0005f	8b 45 e8	 mov	 eax, DWORD PTR tv72[ebp]
  00062	89 45 f8	 mov	 DWORD PTR _block$3[ebp], eax

; 347  :             _blockPtrs.Push( block );

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  00068	51		 push	 ecx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 04	 add	 ecx, 4
  0006f	e8 00 00 00 00	 call	 ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push

; 348  : 
; 349  :             for( int i=0; i<COUNT-1; ++i ) {

  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN4@Alloc
$LN2@Alloc:
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _i$2[ebp]
  00080	83 c2 01	 add	 edx, 1
  00083	89 55 f4	 mov	 DWORD PTR _i$2[ebp], edx
$LN4@Alloc:
  00086	83 7d f4 70	 cmp	 DWORD PTR _i$2[ebp], 112 ; 00000070H
  0008a	7d 18		 jge	 SHORT $LN3@Alloc

; 350  :                 block->chunk[i].next = &block->chunk[i+1];

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	6b c8 24	 imul	 ecx, eax, 36
  00095	03 4d f8	 add	 ecx, DWORD PTR _block$3[ebp]
  00098	6b 55 f4 24	 imul	 edx, DWORD PTR _i$2[ebp], 36
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  0009f	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 351  :             }

  000a2	eb d9		 jmp	 SHORT $LN2@Alloc
$LN3@Alloc:

; 352  :             block->chunk[COUNT-1].next = 0;

  000a4	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000a9	6b d1 70	 imul	 edx, ecx, 112
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  000af	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 353  :             _root = block->chunk;

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
$LN5@Alloc:

; 354  :         }
; 355  :         void* result = _root;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c5	89 4d f0	 mov	 DWORD PTR _result$[ebp], ecx

; 356  :         _root = _root->next;

  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	89 51 38	 mov	 DWORD PTR [ecx+56], edx

; 357  : 
; 358  :         ++_currentAllocs;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000dc	83 c1 01	 add	 ecx, 1
  000df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 359  :         if ( _currentAllocs > _maxAllocs ) {

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  000ee	3b 51 44	 cmp	 edx, DWORD PTR [ecx+68]
  000f1	7e 0c		 jle	 SHORT $LN6@Alloc

; 360  :             _maxAllocs = _currentAllocs;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000fc	89 50 44	 mov	 DWORD PTR [eax+68], edx
$LN6@Alloc:

; 361  :         }
; 362  :         _nAllocs++;

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00105	83 c1 01	 add	 ecx, 1
  00108	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 363  :         _nUntracked++;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00114	83 c1 01	 add	 ecx, 1
  00117	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 364  :         return result;

  0011d	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]

; 365  :     }

  00120	83 c4 18	 add	 esp, 24			; 00000018H
  00123	3b ec		 cmp	 ebp, esp
  00125	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<36>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<36>::CurrentAllocs, COMDAT
; _this$ = ecx

; 339  :     int CurrentAllocs() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  :         return _currentAllocs;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 341  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<36>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<36>::ItemSize, COMDAT
; _this$ = ecx

; 336  :     virtual int ItemSize() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  :         return SIZE;

  0000e	b8 24 00 00 00	 mov	 eax, 36			; 00000024H

; 338  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<36>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_b$2 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<36>::Clear, COMDAT
; _this$ = ecx

; 323  :     void Clear() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 324  :         // Delete the blocks.
; 325  :         while( !_blockPtrs.Empty()) {

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	e8 00 00 00 00	 call	 ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty
  00029	0f b6 c0	 movzx	 eax, al
  0002c	85 c0		 test	 eax, eax
  0002e	75 27		 jne	 SHORT $LN3@Clear

; 326  :             Block* b  = _blockPtrs.Pop();

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 04	 add	 ecx, 4
  00036	e8 00 00 00 00	 call	 ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop
  0003b	89 45 f8	 mov	 DWORD PTR _b$2[ebp], eax

; 327  :             delete b;

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _b$2[ebp]
  00041	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00044	68 e4 0f 00 00	 push	 4068			; 00000fe4H
  00049	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8

; 328  :         }

  00055	eb c7		 jmp	 SHORT $LN2@Clear
$LN3@Clear:

; 329  :         _root = 0;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 330  :         _currentAllocs = 0;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 331  :         _nAllocs = 0;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 332  :         _maxAllocs = 0;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 333  :         _nUntracked = 0;

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 334  :     }

  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<36>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<36>::~MemPoolT<36>, COMDAT
; _this$ = ecx

; 319  :     ~MemPoolT() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CE@@tinyxml2@@6B@

; 320  :         Clear();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<36>::Clear

; 321  :     }

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 04	 add	 ecx, 4
  00044	e8 00 00 00 00	 call	 ??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<36>::~MemPoolT<36>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<36>::MemPoolT<36>, COMDAT
; _this$ = ecx

; 318  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0MemPool@tinyxml2@@QAE@XZ ; tinyxml2::MemPool::MemPool
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CE@@tinyxml2@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00078	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<36>::MemPoolT<36>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<52>::Untracked, COMDAT
; _this$ = ecx

; 388  :     int Untracked() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :         return _nUntracked;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 48	 mov	 eax, DWORD PTR [eax+72]

; 390  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<52>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<52>::SetTracked, COMDAT
; _this$ = ecx

; 384  :     void SetTracked() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :         _nUntracked--;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00014	83 e9 01	 sub	 ecx, 1
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 386  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<52>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -8						; size = 4
_this$ = -4						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<52>::Free, COMDAT
; _this$ = ecx

; 367  :     virtual void Free( void* mem ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  :         if ( !mem ) {

  00018	83 7d 08 00	 cmp	 DWORD PTR _mem$[ebp], 0
  0001c	75 02		 jne	 SHORT $LN2@Free

; 369  :             return;

  0001e	eb 46		 jmp	 SHORT $LN1@Free
$LN2@Free:

; 370  :         }
; 371  :         --_currentAllocs;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 372  :         Chunk* chunk = static_cast<Chunk*>( mem );

  0002f	8b 45 08	 mov	 eax, DWORD PTR _mem$[ebp]
  00032	89 45 f8	 mov	 DWORD PTR _chunk$[ebp], eax

; 373  : #ifdef DEBUG
; 374  :         memset( chunk, 0xfe, sizeof(Chunk) );

  00035	8b f4		 mov	 esi, esp
  00037	6a 34		 push	 52			; 00000034H
  00039	68 fe 00 00 00	 push	 254			; 000000feH
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _chunk$[ebp]
  00041	51		 push	 ecx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 375  : #endif
; 376  :         chunk->next = _root;

  00052	8b 55 f8	 mov	 edx, DWORD PTR _chunk$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0005b	89 0a		 mov	 DWORD PTR [edx], ecx

; 377  :         _root = chunk;

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 45 f8	 mov	 eax, DWORD PTR _chunk$[ebp]
  00063	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN1@Free:

; 378  :     }

  00066	5e		 pop	 esi
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<52>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv72 = -24						; size = 4
$T1 = -20						; size = 4
_result$ = -16						; size = 4
_i$2 = -12						; size = 4
_block$3 = -8						; size = 4
_this$ = -4						; size = 4
?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<52>::Alloc, COMDAT
; _this$ = ecx

; 343  :     virtual void* Alloc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :         if ( !_root ) {

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00027	0f 85 92 00 00
	00		 jne	 $LN5@Alloc

; 345  :             // Need a new block.
; 346  :             Block* block = new Block();

  0002d	68 d8 0f 00 00	 push	 4056			; 00000fd8H
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  0003d	68 d8 0f 00 00	 push	 4056			; 00000fd8H
  00042	6a 00		 push	 0
  00044	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _memset
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00053	89 55 e8	 mov	 DWORD PTR tv72[ebp], edx
  00056	eb 07		 jmp	 SHORT $LN9@Alloc
  00058	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN9@Alloc:
  0005f	8b 45 e8	 mov	 eax, DWORD PTR tv72[ebp]
  00062	89 45 f8	 mov	 DWORD PTR _block$3[ebp], eax

; 347  :             _blockPtrs.Push( block );

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  00068	51		 push	 ecx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 04	 add	 ecx, 4
  0006f	e8 00 00 00 00	 call	 ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push

; 348  : 
; 349  :             for( int i=0; i<COUNT-1; ++i ) {

  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0007b	eb 09		 jmp	 SHORT $LN4@Alloc
$LN2@Alloc:
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _i$2[ebp]
  00080	83 c2 01	 add	 edx, 1
  00083	89 55 f4	 mov	 DWORD PTR _i$2[ebp], edx
$LN4@Alloc:
  00086	83 7d f4 4d	 cmp	 DWORD PTR _i$2[ebp], 77	; 0000004dH
  0008a	7d 18		 jge	 SHORT $LN3@Alloc

; 350  :                 block->chunk[i].next = &block->chunk[i+1];

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	6b c8 34	 imul	 ecx, eax, 52
  00095	03 4d f8	 add	 ecx, DWORD PTR _block$3[ebp]
  00098	6b 55 f4 34	 imul	 edx, DWORD PTR _i$2[ebp], 52
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  0009f	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 351  :             }

  000a2	eb d9		 jmp	 SHORT $LN2@Alloc
$LN3@Alloc:

; 352  :             block->chunk[COUNT-1].next = 0;

  000a4	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  000a9	6b d1 4d	 imul	 edx, ecx, 77
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _block$3[ebp]
  000af	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 353  :             _root = block->chunk;

  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _block$3[ebp]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
$LN5@Alloc:

; 354  :         }
; 355  :         void* result = _root;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c5	89 4d f0	 mov	 DWORD PTR _result$[ebp], ecx

; 356  :         _root = _root->next;

  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	89 51 38	 mov	 DWORD PTR [ecx+56], edx

; 357  : 
; 358  :         ++_currentAllocs;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000dc	83 c1 01	 add	 ecx, 1
  000df	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 359  :         if ( _currentAllocs > _maxAllocs ) {

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  000ee	3b 51 44	 cmp	 edx, DWORD PTR [ecx+68]
  000f1	7e 0c		 jle	 SHORT $LN6@Alloc

; 360  :             _maxAllocs = _currentAllocs;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000fc	89 50 44	 mov	 DWORD PTR [eax+68], edx
$LN6@Alloc:

; 361  :         }
; 362  :         _nAllocs++;

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00105	83 c1 01	 add	 ecx, 1
  00108	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 363  :         _nUntracked++;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00114	83 c1 01	 add	 ecx, 1
  00117	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 364  :         return result;

  0011d	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp]

; 365  :     }

  00120	83 c4 18	 add	 esp, 24			; 00000018H
  00123	3b ec		 cmp	 ebp, esp
  00125	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<52>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<52>::CurrentAllocs, COMDAT
; _this$ = ecx

; 339  :     int CurrentAllocs() const		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  :         return _currentAllocs;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 341  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<52>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<52>::ItemSize, COMDAT
; _this$ = ecx

; 336  :     virtual int ItemSize() const	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  :         return SIZE;

  0000e	b8 34 00 00 00	 mov	 eax, 52			; 00000034H

; 338  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<52>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_b$2 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<52>::Clear, COMDAT
; _this$ = ecx

; 323  :     void Clear() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 324  :         // Delete the blocks.
; 325  :         while( !_blockPtrs.Empty()) {

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	e8 00 00 00 00	 call	 ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty
  00029	0f b6 c0	 movzx	 eax, al
  0002c	85 c0		 test	 eax, eax
  0002e	75 27		 jne	 SHORT $LN3@Clear

; 326  :             Block* b  = _blockPtrs.Pop();

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 04	 add	 ecx, 4
  00036	e8 00 00 00 00	 call	 ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop
  0003b	89 45 f8	 mov	 DWORD PTR _b$2[ebp], eax

; 327  :             delete b;

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _b$2[ebp]
  00041	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00044	68 d8 0f 00 00	 push	 4056			; 00000fd8H
  00049	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8

; 328  :         }

  00055	eb c7		 jmp	 SHORT $LN2@Clear
$LN3@Clear:

; 329  :         _root = 0;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 330  :         _currentAllocs = 0;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 331  :         _nAllocs = 0;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 332  :         _maxAllocs = 0;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 333  :         _nUntracked = 0;

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 334  :     }

  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<52>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<52>::~MemPoolT<52>, COMDAT
; _this$ = ecx

; 319  :     ~MemPoolT() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DE@@tinyxml2@@6B@

; 320  :         Clear();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<52>::Clear

; 321  :     }

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 04	 add	 ecx, 4
  00044	e8 00 00 00 00	 call	 ??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<52>::~MemPoolT<52>
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<52>::MemPoolT<52>, COMDAT
; _this$ = ecx

; 318  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0MemPool@tinyxml2@@QAE@XZ ; tinyxml2::MemPool::MemPool
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DE@@tinyxml2@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00078	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1MemPool@tinyxml2@@UAE@XZ ; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<52>::MemPoolT<52>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<44>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<44>::~MemPoolT<44>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 4c		 push	 76			; 0000004cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<44>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<48>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<48>::~MemPoolT<48>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 4c		 push	 76			; 0000004cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<48>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<36>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<36>::~MemPoolT<36>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 4c		 push	 76			; 0000004cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<36>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<52>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ ; tinyxml2::MemPoolT<52>::~MemPoolT<52>
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 4c		 push	 76			; 0000004cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<52>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_newMem$3 = -12						; size = 4
_newAllocated$4 = -8					; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<char,20>::EnsureCapacity, COMDAT
; _this$ = ecx

; 271  :     void EnsureCapacity( int cap ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         TIXMLASSERT( cap > 0 );

  0001e	83 7d 08 00	 cmp	 DWORD PTR _cap$[ebp], 0
  00022	7f 01		 jg	 SHORT $LN2@EnsureCapa
  00024	cc		 int	 3
$LN2@EnsureCapa:

; 273  :         if ( cap > _allocated ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _cap$[ebp]
  0002b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0002e	7e 7c		 jle	 SHORT $LN1@EnsureCapa

; 274  :             TIXMLASSERT( cap <= INT_MAX / 2 );

  00030	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _cap$[ebp], 1073741823 ; 3fffffffH
  00037	7e 01		 jle	 SHORT $LN4@EnsureCapa
  00039	cc		 int	 3
$LN4@EnsureCapa:

; 275  :             int newAllocated = cap * 2;

  0003a	8b 55 08	 mov	 edx, DWORD PTR _cap$[ebp]
  0003d	d1 e2		 shl	 edx, 1
  0003f	89 55 f8	 mov	 DWORD PTR _newAllocated$4[ebp], edx

; 276  :             T* newMem = new T[newAllocated];

  00042	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00051	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00054	89 4d f4	 mov	 DWORD PTR _newMem$3[ebp], ecx

; 277  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

  00057	8b f4		 mov	 esi, esp
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0005f	50		 push	 eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	52		 push	 edx
  00066	8b 45 f4	 mov	 eax, DWORD PTR _newMem$3[ebp]
  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  :             if ( _mem != _pool ) {

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	83 c1 04	 add	 ecx, 4
  00080	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00083	39 0a		 cmp	 DWORD PTR [edx], ecx
  00085	74 14		 je	 SHORT $LN5@EnsureCapa

; 279  :                 delete [] _mem;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	89 4d ec	 mov	 DWORD PTR $T1[ebp], ecx
  0008f	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00092	52		 push	 edx
  00093	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00098	83 c4 04	 add	 esp, 4
$LN5@EnsureCapa:

; 280  :             }
; 281  :             _mem = newMem;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _newMem$3[ebp]
  000a1	89 08		 mov	 DWORD PTR [eax], ecx

; 282  :             _allocated = newAllocated;

  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  000a9	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN1@EnsureCapa:

; 283  :         }
; 284  :     }

  000ac	5e		 pop	 esi
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	3b ec		 cmp	 ebp, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<char,20>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_newMem$3 = -12						; size = 4
_newAllocated$4 = -8					; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<char const *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 271  :     void EnsureCapacity( int cap ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         TIXMLASSERT( cap > 0 );

  0001e	83 7d 08 00	 cmp	 DWORD PTR _cap$[ebp], 0
  00022	7f 01		 jg	 SHORT $LN2@EnsureCapa
  00024	cc		 int	 3
$LN2@EnsureCapa:

; 273  :         if ( cap > _allocated ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _cap$[ebp]
  0002b	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  0002e	0f 8e 8f 00 00
	00		 jle	 $LN1@EnsureCapa

; 274  :             TIXMLASSERT( cap <= INT_MAX / 2 );

  00034	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _cap$[ebp], 1073741823 ; 3fffffffH
  0003b	7e 01		 jle	 SHORT $LN4@EnsureCapa
  0003d	cc		 int	 3
$LN4@EnsureCapa:

; 275  :             int newAllocated = cap * 2;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _cap$[ebp]
  00041	d1 e2		 shl	 edx, 1
  00043	89 55 f8	 mov	 DWORD PTR _newAllocated$4[ebp], edx

; 276  :             T* newMem = new T[newAllocated];

  00046	33 c9		 xor	 ecx, ecx
  00048	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  0004b	ba 04 00 00 00	 mov	 edx, 4
  00050	f7 e2		 mul	 edx
  00052	0f 90 c1	 seto	 cl
  00055	f7 d9		 neg	 ecx
  00057	0b c8		 or	 ecx, eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005f	83 c4 04	 add	 esp, 4
  00062	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00065	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	89 45 f4	 mov	 DWORD PTR _newMem$3[ebp], eax

; 277  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00071	c1 e2 02	 shl	 edx, 2
  00074	8b f4		 mov	 esi, esp
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _newMem$3[ebp]
  00080	52		 push	 edx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  :             if ( _mem != _pool ) {

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c0 04	 add	 eax, 4
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	39 01		 cmp	 DWORD PTR [ecx], eax
  0009c	74 14		 je	 SHORT $LN5@EnsureCapa

; 279  :                 delete [] _mem;

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000af	83 c4 04	 add	 esp, 4
$LN5@EnsureCapa:

; 280  :             }
; 281  :             _mem = newMem;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 45 f4	 mov	 eax, DWORD PTR _newMem$3[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax

; 282  :             _allocated = newAllocated;

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 55 f8	 mov	 edx, DWORD PTR _newAllocated$4[ebp]
  000c0	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN1@EnsureCapa:

; 283  :         }
; 284  :     }

  000c3	5e		 pop	 esi
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<char const *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 228  :     bool Empty() const					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  :         return _size == 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	75 09		 jne	 SHORT $LN3@Empty
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Empty
$LN3@Empty:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Empty:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 230  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 218  :     T Pop() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :         TIXMLASSERT( _size > 0 );

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	7f 01		 jg	 SHORT $LN2@Pop
  00020	cc		 int	 3
$LN2@Pop:

; 220  :         return _mem[--_size];

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00027	83 ea 01	 sub	 edx, 1
  0002a	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  00033	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  0003e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 221  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 203  :     void Push( T t ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 204  :         TIXMLASSERT( _size < INT_MAX );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	81 78 30 ff ff
	ff 7f		 cmp	 DWORD PTR [eax+48], 2147483647 ; 7fffffffH
  00018	7c 01		 jl	 SHORT $LN2@Push
  0001a	cc		 int	 3
$LN2@Push:

; 205  :         EnsureCapacity( _size+1 );

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	83 c2 01	 add	 edx, 1
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity

; 206  :         _mem[_size++] = t;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  0003b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 207  :     }

  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>, COMDAT
; _this$ = ecx

; 193  :     ~DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         if ( _mem != _pool ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	39 01		 cmp	 DWORD PTR [ecx], eax
  00022	74 14		 je	 SHORT $LN3@DynArray

; 195  :             delete [] _mem;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN3@DynArray:

; 196  :         }
; 197  :     }

  00038	83 c4 08	 add	 esp, 8
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>, COMDAT
; _this$ = ecx

; 187  :     DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         _mem = _pool;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 189  :         _allocated = INITIAL_SIZE;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 2c 0a 00
	00 00		 mov	 DWORD PTR [edx+44], 10	; 0000000aH

; 190  :         _size = 0;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 191  :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 228  :     bool Empty() const					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  :         return _size == 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	75 09		 jne	 SHORT $LN3@Empty
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Empty
$LN3@Empty:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Empty:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 230  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 218  :     T Pop() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :         TIXMLASSERT( _size > 0 );

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	7f 01		 jg	 SHORT $LN2@Pop
  00020	cc		 int	 3
$LN2@Pop:

; 220  :         return _mem[--_size];

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00027	83 ea 01	 sub	 edx, 1
  0002a	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  00033	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  0003e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 221  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 203  :     void Push( T t ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 204  :         TIXMLASSERT( _size < INT_MAX );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	81 78 30 ff ff
	ff 7f		 cmp	 DWORD PTR [eax+48], 2147483647 ; 7fffffffH
  00018	7c 01		 jl	 SHORT $LN2@Push
  0001a	cc		 int	 3
$LN2@Push:

; 205  :         EnsureCapacity( _size+1 );

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	83 c2 01	 add	 edx, 1
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity

; 206  :         _mem[_size++] = t;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  0003b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 207  :     }

  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>, COMDAT
; _this$ = ecx

; 193  :     ~DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         if ( _mem != _pool ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	39 01		 cmp	 DWORD PTR [ecx], eax
  00022	74 14		 je	 SHORT $LN3@DynArray

; 195  :             delete [] _mem;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN3@DynArray:

; 196  :         }
; 197  :     }

  00038	83 c4 08	 add	 esp, 8
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>, COMDAT
; _this$ = ecx

; 187  :     DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         _mem = _pool;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 189  :         _allocated = INITIAL_SIZE;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 2c 0a 00
	00 00		 mov	 DWORD PTR [edx+44], 10	; 0000000aH

; 190  :         _size = 0;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 191  :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 228  :     bool Empty() const					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  :         return _size == 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	75 09		 jne	 SHORT $LN3@Empty
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Empty
$LN3@Empty:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Empty:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 230  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 218  :     T Pop() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :         TIXMLASSERT( _size > 0 );

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	7f 01		 jg	 SHORT $LN2@Pop
  00020	cc		 int	 3
$LN2@Pop:

; 220  :         return _mem[--_size];

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00027	83 ea 01	 sub	 edx, 1
  0002a	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  00033	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  0003e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 221  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 203  :     void Push( T t ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 204  :         TIXMLASSERT( _size < INT_MAX );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	81 78 30 ff ff
	ff 7f		 cmp	 DWORD PTR [eax+48], 2147483647 ; 7fffffffH
  00018	7c 01		 jl	 SHORT $LN2@Push
  0001a	cc		 int	 3
$LN2@Push:

; 205  :         EnsureCapacity( _size+1 );

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	83 c2 01	 add	 edx, 1
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity

; 206  :         _mem[_size++] = t;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  0003b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 207  :     }

  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>, COMDAT
; _this$ = ecx

; 193  :     ~DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         if ( _mem != _pool ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	39 01		 cmp	 DWORD PTR [ecx], eax
  00022	74 14		 je	 SHORT $LN3@DynArray

; 195  :             delete [] _mem;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN3@DynArray:

; 196  :         }
; 197  :     }

  00038	83 c4 08	 add	 esp, 8
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>, COMDAT
; _this$ = ecx

; 187  :     DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         _mem = _pool;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 189  :         _allocated = INITIAL_SIZE;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 2c 0a 00
	00 00		 mov	 DWORD PTR [edx+44], 10	; 0000000aH

; 190  :         _size = 0;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 191  :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 228  :     bool Empty() const					{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  :         return _size == 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	75 09		 jne	 SHORT $LN3@Empty
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Empty
$LN3@Empty:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Empty:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 230  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 218  :     T Pop() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :         TIXMLASSERT( _size > 0 );

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0001e	7f 01		 jg	 SHORT $LN2@Pop
  00020	cc		 int	 3
$LN2@Pop:

; 220  :         return _mem[--_size];

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00027	83 ea 01	 sub	 edx, 1
  0002a	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  00033	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR tv71[ebp]
  0003e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 221  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 203  :     void Push( T t ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 204  :         TIXMLASSERT( _size < INT_MAX );

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	81 78 30 ff ff
	ff 7f		 cmp	 DWORD PTR [eax+48], 2147483647 ; 7fffffffH
  00018	7c 01		 jl	 SHORT $LN2@Push
  0001a	cc		 int	 3
$LN2@Push:

; 205  :         EnsureCapacity( _size+1 );

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00021	83 c2 01	 add	 edx, 1
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity

; 206  :         _mem[_size++] = t;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 55 08	 mov	 edx, DWORD PTR _t$[ebp]
  0003b	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00044	83 c1 01	 add	 ecx, 1
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 207  :     }

  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>, COMDAT
; _this$ = ecx

; 193  :     ~DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         if ( _mem != _pool ) {

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	39 01		 cmp	 DWORD PTR [ecx], eax
  00022	74 14		 je	 SHORT $LN3@DynArray

; 195  :             delete [] _mem;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00035	83 c4 04	 add	 esp, 4
$LN3@DynArray:

; 196  :         }
; 197  :     }

  00038	83 c4 08	 add	 esp, 8
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>, COMDAT
; _this$ = ecx

; 187  :     DynArray() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 188  :         _mem = _pool;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 04	 add	 eax, 4
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 189  :         _allocated = INITIAL_SIZE;

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 2c 0a 00
	00 00		 mov	 DWORD PTR [edx+44], 10	; 0000000aH

; 190  :         _size = 0;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 191  :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_newMem$3 = -12						; size = 4
_newAllocated$4 = -8					; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 271  :     void EnsureCapacity( int cap ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         TIXMLASSERT( cap > 0 );

  0001e	83 7d 08 00	 cmp	 DWORD PTR _cap$[ebp], 0
  00022	7f 01		 jg	 SHORT $LN2@EnsureCapa
  00024	cc		 int	 3
$LN2@EnsureCapa:

; 273  :         if ( cap > _allocated ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _cap$[ebp]
  0002b	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  0002e	0f 8e 8f 00 00
	00		 jle	 $LN1@EnsureCapa

; 274  :             TIXMLASSERT( cap <= INT_MAX / 2 );

  00034	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _cap$[ebp], 1073741823 ; 3fffffffH
  0003b	7e 01		 jle	 SHORT $LN4@EnsureCapa
  0003d	cc		 int	 3
$LN4@EnsureCapa:

; 275  :             int newAllocated = cap * 2;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _cap$[ebp]
  00041	d1 e2		 shl	 edx, 1
  00043	89 55 f8	 mov	 DWORD PTR _newAllocated$4[ebp], edx

; 276  :             T* newMem = new T[newAllocated];

  00046	33 c9		 xor	 ecx, ecx
  00048	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  0004b	ba 04 00 00 00	 mov	 edx, 4
  00050	f7 e2		 mul	 edx
  00052	0f 90 c1	 seto	 cl
  00055	f7 d9		 neg	 ecx
  00057	0b c8		 or	 ecx, eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005f	83 c4 04	 add	 esp, 4
  00062	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00065	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	89 45 f4	 mov	 DWORD PTR _newMem$3[ebp], eax

; 277  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00071	c1 e2 02	 shl	 edx, 2
  00074	8b f4		 mov	 esi, esp
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _newMem$3[ebp]
  00080	52		 push	 edx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  :             if ( _mem != _pool ) {

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c0 04	 add	 eax, 4
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	39 01		 cmp	 DWORD PTR [ecx], eax
  0009c	74 14		 je	 SHORT $LN5@EnsureCapa

; 279  :                 delete [] _mem;

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000af	83 c4 04	 add	 esp, 4
$LN5@EnsureCapa:

; 280  :             }
; 281  :             _mem = newMem;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 45 f4	 mov	 eax, DWORD PTR _newMem$3[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax

; 282  :             _allocated = newAllocated;

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 55 f8	 mov	 edx, DWORD PTR _newAllocated$4[ebp]
  000c0	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN1@EnsureCapa:

; 283  :         }
; 284  :     }

  000c3	5e		 pop	 esi
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_newMem$3 = -12						; size = 4
_newAllocated$4 = -8					; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 271  :     void EnsureCapacity( int cap ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         TIXMLASSERT( cap > 0 );

  0001e	83 7d 08 00	 cmp	 DWORD PTR _cap$[ebp], 0
  00022	7f 01		 jg	 SHORT $LN2@EnsureCapa
  00024	cc		 int	 3
$LN2@EnsureCapa:

; 273  :         if ( cap > _allocated ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _cap$[ebp]
  0002b	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  0002e	0f 8e 8f 00 00
	00		 jle	 $LN1@EnsureCapa

; 274  :             TIXMLASSERT( cap <= INT_MAX / 2 );

  00034	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _cap$[ebp], 1073741823 ; 3fffffffH
  0003b	7e 01		 jle	 SHORT $LN4@EnsureCapa
  0003d	cc		 int	 3
$LN4@EnsureCapa:

; 275  :             int newAllocated = cap * 2;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _cap$[ebp]
  00041	d1 e2		 shl	 edx, 1
  00043	89 55 f8	 mov	 DWORD PTR _newAllocated$4[ebp], edx

; 276  :             T* newMem = new T[newAllocated];

  00046	33 c9		 xor	 ecx, ecx
  00048	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  0004b	ba 04 00 00 00	 mov	 edx, 4
  00050	f7 e2		 mul	 edx
  00052	0f 90 c1	 seto	 cl
  00055	f7 d9		 neg	 ecx
  00057	0b c8		 or	 ecx, eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005f	83 c4 04	 add	 esp, 4
  00062	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00065	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	89 45 f4	 mov	 DWORD PTR _newMem$3[ebp], eax

; 277  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00071	c1 e2 02	 shl	 edx, 2
  00074	8b f4		 mov	 esi, esp
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _newMem$3[ebp]
  00080	52		 push	 edx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  :             if ( _mem != _pool ) {

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c0 04	 add	 eax, 4
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	39 01		 cmp	 DWORD PTR [ecx], eax
  0009c	74 14		 je	 SHORT $LN5@EnsureCapa

; 279  :                 delete [] _mem;

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000af	83 c4 04	 add	 esp, 4
$LN5@EnsureCapa:

; 280  :             }
; 281  :             _mem = newMem;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 45 f4	 mov	 eax, DWORD PTR _newMem$3[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax

; 282  :             _allocated = newAllocated;

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 55 f8	 mov	 edx, DWORD PTR _newAllocated$4[ebp]
  000c0	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN1@EnsureCapa:

; 283  :         }
; 284  :     }

  000c3	5e		 pop	 esi
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_newMem$3 = -12						; size = 4
_newAllocated$4 = -8					; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 271  :     void EnsureCapacity( int cap ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         TIXMLASSERT( cap > 0 );

  0001e	83 7d 08 00	 cmp	 DWORD PTR _cap$[ebp], 0
  00022	7f 01		 jg	 SHORT $LN2@EnsureCapa
  00024	cc		 int	 3
$LN2@EnsureCapa:

; 273  :         if ( cap > _allocated ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _cap$[ebp]
  0002b	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  0002e	0f 8e 8f 00 00
	00		 jle	 $LN1@EnsureCapa

; 274  :             TIXMLASSERT( cap <= INT_MAX / 2 );

  00034	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _cap$[ebp], 1073741823 ; 3fffffffH
  0003b	7e 01		 jle	 SHORT $LN4@EnsureCapa
  0003d	cc		 int	 3
$LN4@EnsureCapa:

; 275  :             int newAllocated = cap * 2;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _cap$[ebp]
  00041	d1 e2		 shl	 edx, 1
  00043	89 55 f8	 mov	 DWORD PTR _newAllocated$4[ebp], edx

; 276  :             T* newMem = new T[newAllocated];

  00046	33 c9		 xor	 ecx, ecx
  00048	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  0004b	ba 04 00 00 00	 mov	 edx, 4
  00050	f7 e2		 mul	 edx
  00052	0f 90 c1	 seto	 cl
  00055	f7 d9		 neg	 ecx
  00057	0b c8		 or	 ecx, eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005f	83 c4 04	 add	 esp, 4
  00062	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00065	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	89 45 f4	 mov	 DWORD PTR _newMem$3[ebp], eax

; 277  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00071	c1 e2 02	 shl	 edx, 2
  00074	8b f4		 mov	 esi, esp
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _newMem$3[ebp]
  00080	52		 push	 edx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  :             if ( _mem != _pool ) {

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c0 04	 add	 eax, 4
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	39 01		 cmp	 DWORD PTR [ecx], eax
  0009c	74 14		 je	 SHORT $LN5@EnsureCapa

; 279  :                 delete [] _mem;

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000af	83 c4 04	 add	 esp, 4
$LN5@EnsureCapa:

; 280  :             }
; 281  :             _mem = newMem;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 45 f4	 mov	 eax, DWORD PTR _newMem$3[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax

; 282  :             _allocated = newAllocated;

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 55 f8	 mov	 edx, DWORD PTR _newAllocated$4[ebp]
  000c0	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN1@EnsureCapa:

; 283  :         }
; 284  :     }

  000c3	5e		 pop	 esi
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\staticlibs\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_newMem$3 = -12						; size = 4
_newAllocated$4 = -8					; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 271  :     void EnsureCapacity( int cap ) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         TIXMLASSERT( cap > 0 );

  0001e	83 7d 08 00	 cmp	 DWORD PTR _cap$[ebp], 0
  00022	7f 01		 jg	 SHORT $LN2@EnsureCapa
  00024	cc		 int	 3
$LN2@EnsureCapa:

; 273  :         if ( cap > _allocated ) {

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _cap$[ebp]
  0002b	3b 48 2c	 cmp	 ecx, DWORD PTR [eax+44]
  0002e	0f 8e 8f 00 00
	00		 jle	 $LN1@EnsureCapa

; 274  :             TIXMLASSERT( cap <= INT_MAX / 2 );

  00034	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _cap$[ebp], 1073741823 ; 3fffffffH
  0003b	7e 01		 jle	 SHORT $LN4@EnsureCapa
  0003d	cc		 int	 3
$LN4@EnsureCapa:

; 275  :             int newAllocated = cap * 2;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _cap$[ebp]
  00041	d1 e2		 shl	 edx, 1
  00043	89 55 f8	 mov	 DWORD PTR _newAllocated$4[ebp], edx

; 276  :             T* newMem = new T[newAllocated];

  00046	33 c9		 xor	 ecx, ecx
  00048	8b 45 f8	 mov	 eax, DWORD PTR _newAllocated$4[ebp]
  0004b	ba 04 00 00 00	 mov	 edx, 4
  00050	f7 e2		 mul	 edx
  00052	0f 90 c1	 seto	 cl
  00055	f7 d9		 neg	 ecx
  00057	0b c8		 or	 ecx, eax
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005f	83 c4 04	 add	 esp, 4
  00062	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00065	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	89 45 f4	 mov	 DWORD PTR _newMem$3[ebp], eax

; 277  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00071	c1 e2 02	 shl	 edx, 2
  00074	8b f4		 mov	 esi, esp
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _newMem$3[ebp]
  00080	52		 push	 edx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  :             if ( _mem != _pool ) {

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c0 04	 add	 eax, 4
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	39 01		 cmp	 DWORD PTR [ecx], eax
  0009c	74 14		 je	 SHORT $LN5@EnsureCapa

; 279  :                 delete [] _mem;

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000a6	8b 4d ec	 mov	 ecx, DWORD PTR $T1[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000af	83 c4 04	 add	 esp, 4
$LN5@EnsureCapa:

; 280  :             }
; 281  :             _mem = newMem;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 45 f4	 mov	 eax, DWORD PTR _newMem$3[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax

; 282  :             _allocated = newAllocated;

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 55 f8	 mov	 edx, DWORD PTR _newAllocated$4[ebp]
  000c0	89 51 2c	 mov	 DWORD PTR [ecx+44], edx
$LN1@EnsureCapa:

; 283  :         }
; 284  :     }

  000c3	5e		 pop	 esi
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const *>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const *>
_TEXT	ENDS
END
