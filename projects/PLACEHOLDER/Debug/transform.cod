; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\core\transform.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
$SG4294881366 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294881364 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294881365 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294881362 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294881363 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+3
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294881361 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
PUBLIC	?Cross@?$Vector3@M@@QBE?AV1@ABV1@@Z		; Vector3<float>::Cross
PUBLIC	?LengthSq@?$Vector@M$03@@QBEMXZ			; Vector<float,4>::LengthSq
PUBLIC	??K?$Vector@M$03@@QBE?AV0@ABM@Z			; Vector<float,4>::operator/
PUBLIC	??8?$Vector@M$03@@QBE_NABV0@@Z			; Vector<float,4>::operator==
PUBLIC	?InitRotationFromVectors@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@00@Z ; Matrix4<float>::InitRotationFromVectors
PUBLIC	?InitRotationFromDirection@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@0@Z ; Matrix4<float>::InitRotationFromDirection
PUBLIC	?Dot@?$Vector@M$03@@QBEMABV1@@Z			; Vector<float,4>::Dot
PUBLIC	?Length@?$Vector@M$03@@QBEMXZ			; Vector<float,4>::Length
PUBLIC	?Normalized@?$Vector@M$03@@QBE?AV1@XZ		; Vector<float,4>::Normalized
PUBLIC	??9?$Vector@M$03@@QBE_NABV0@@Z			; Vector<float,4>::operator!=
PUBLIC	?LookAt@Transform@@QAEXABVVector3f@@0@Z		; Transform::LookAt
PUBLIC	?Rotate@Transform@@QAEXABVVector3f@@M@Z		; Transform::Rotate
PUBLIC	?HasChanged@Transform@@QAE_NXZ			; Transform::HasChanged
PUBLIC	?GetLookAtRotation@Transform@@QAE?AVQuaternion@@ABVVector3f@@0@Z ; Transform::GetLookAtRotation
PUBLIC	??DQuaternion@@QBE?AV0@ABV0@@Z			; Quaternion::operator*
PUBLIC	?ToRotationMatrix@Quaternion@@QBE?AV?$Matrix4@M@@XZ ; Quaternion::ToRotationMatrix
PUBLIC	??0Quaternion@@QAE@ABV?$Matrix4@M@@@Z		; Quaternion::Quaternion
PUBLIC	??0Quaternion@@QAE@ABV?$Vector4@M@@@Z		; Quaternion::Quaternion
PUBLIC	??9Vector3f@@QBE_NABV0@@Z			; Vector3f::operator!=
PUBLIC	??8Vector3f@@QBE_NABV0@@Z			; Vector3f::operator==
PUBLIC	?Rotate@Transform@@QAEXABVQuaternion@@@Z	; Transform::Rotate
PUBLIC	?GetParentMatrix@Transform@@ABEABV?$Matrix4@M@@XZ ; Transform::GetParentMatrix
PUBLIC	?GetTransformedRot@Transform@@QBE?AVQuaternion@@XZ ; Transform::GetTransformedRot
PUBLIC	?GetTransformation@Transform@@QBE?AV?$Matrix4@M@@XZ ; Transform::GetTransformation
PUBLIC	?Update@Transform@@QAEXXZ			; Transform::Update
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -64						; size = 16
$T2 = -48						; size = 16
$T3 = -32						; size = 12
$T4 = -20						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Update@Transform@@QAEXXZ PROC				; Transform::Update
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	if(m_initializedOldStuff)

  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	0f b6 88 84 00
	00 00		 movzx	 ecx, BYTE PTR [eax+132]
  0002f	85 c9		 test	 ecx, ecx
  00031	74 4f		 je	 SHORT $LN2@Update

; 47   : 	{
; 48   : 		m_oldPos = m_pos;

  00033	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00036	83 c2 64	 add	 edx, 100		; 00000064H
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 0a		 mov	 DWORD PTR [edx], ecx
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00046	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00049	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 49   : 		m_oldRot = m_rot;

  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00052	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00055	83 c2 70	 add	 edx, 112		; 00000070H
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	89 02		 mov	 DWORD PTR [edx], eax
  0005c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0005f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00062	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00065	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00068	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0006b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 50   : 		m_oldScale = m_scale;

  0006e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00077	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 51   : 	}
; 52   : 	else

  0007d	e9 e9 00 00 00	 jmp	 $LN3@Update
$LN2@Update:

; 53   : 	{
; 54   : 		m_oldPos = m_pos + Vector3f(1,1,1);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	51		 push	 ecx
  0009f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  000af	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  000b4	50		 push	 eax
  000b5	8d 55 e0	 lea	 edx, DWORD PTR $T3[ebp]
  000b8	52		 push	 edx
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??HVector3f@@QBE?AV0@ABV0@@Z ; Vector3f::operator+
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	83 c1 64	 add	 ecx, 100		; 00000064H
  000c7	8b 10		 mov	 edx, DWORD PTR [eax]
  000c9	89 11		 mov	 DWORD PTR [ecx], edx
  000cb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ce	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000d1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 55   : 		m_oldRot = m_rot * 0.5f;

  000d7	51		 push	 ecx
  000d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	51		 push	 ecx
  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0010a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010f	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  00112	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@MMMM@Z ; Quaternion::Quaternion
  00117	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  0011a	51		 push	 ecx
  0011b	8d 55 c0	 lea	 edx, DWORD PTR $T1[ebp]
  0011e	52		 push	 edx
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00125	e8 00 00 00 00	 call	 ??DQuaternion@@QBE?AV0@ABV0@@Z ; Quaternion::operator*
  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	83 c1 70	 add	 ecx, 112		; 00000070H
  00130	8b 10		 mov	 edx, DWORD PTR [eax]
  00132	89 11		 mov	 DWORD PTR [ecx], edx
  00134	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00137	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0013a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0013d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00140	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00143	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 56   : 		m_oldScale = m_scale + 1;

  00146	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  0014e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00156	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00159	f3 0f 11 82 80
	00 00 00	 movss	 DWORD PTR [edx+128], xmm0

; 57   : 		m_initializedOldStuff = true;

  00161	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00164	c6 80 84 00 00
	00 01		 mov	 BYTE PTR [eax+132], 1
$LN3@Update:

; 58   : 	}
; 59   : }

  0016b	5f		 pop	 edi
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016f	33 cd		 xor	 ecx, ebp
  00171	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00176	83 c4 40	 add	 esp, 64			; 00000040H
  00179	3b ec		 cmp	 ebp, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
?Update@Transform@@QAEXXZ ENDP				; Transform::Update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -632						; size = 64
$T2 = -568						; size = 64
$T3 = -504						; size = 64
$T4 = -440						; size = 64
_result$ = -372						; size = 64
$T5 = -304						; size = 64
$T6 = -240						; size = 12
$T7 = -228						; size = 64
$T8 = -164						; size = 12
_scaleMatrix$ = -148					; size = 64
_translationMatrix$ = -76				; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTransformation@Transform@@QBE?AV?$Matrix4@M@@XZ PROC ; Transform::GetTransformation
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 02 00
	00		 sub	 esp, 632		; 00000278H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 88 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-632]
  00011	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 	Matrix4f translationMatrix;

  0002b	8d 4d b4	 lea	 ecx, DWORD PTR _translationMatrix$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>

; 79   : 	Matrix4f scaleMatrix;

  00033	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _scaleMatrix$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>

; 80   : 
; 81   : 	translationMatrix.InitTranslation(Vector3f(m_pos.GetX(), m_pos.GetY(), m_pos.GetZ()));

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?GetZ@Vector3f@@QBEMXZ	; Vector3f::GetZ
  00046	51		 push	 ecx
  00047	d9 1c 24	 fstp	 DWORD PTR [esp]
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?GetY@Vector3f@@QBEMXZ	; Vector3f::GetY
  00052	51		 push	 ecx
  00053	d9 1c 24	 fstp	 DWORD PTR [esp]
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?GetX@Vector3f@@QBEMXZ	; Vector3f::GetX
  0005e	51		 push	 ecx
  0005f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00062	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00068	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  0006d	50		 push	 eax
  0006e	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00074	50		 push	 eax
  00075	8d 4d b4	 lea	 ecx, DWORD PTR _translationMatrix$[ebp]
  00078	e8 00 00 00 00	 call	 ?InitTranslation@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitTranslation

; 82   : 	scaleMatrix.InitScale(Vector3f(m_scale, m_scale, m_scale));

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	51		 push	 ecx
  00081	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	51		 push	 ecx
  0008f	f3 0f 10 42 1c	 movss	 xmm0, DWORD PTR [edx+28]
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	51		 push	 ecx
  0009d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  000ad	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  000b2	50		 push	 eax
  000b3	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  000b9	51		 push	 ecx
  000ba	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _scaleMatrix$[ebp]
  000c0	e8 00 00 00 00	 call	 ?InitScale@?$Matrix@M$03@@QAE?AV1@ABV?$Vector@M$02@@@Z ; Matrix<float,4>::InitScale

; 83   : 
; 84   : 	Matrix4f result = translationMatrix * m_rot.ToRotationMatrix() * scaleMatrix;

  000c5	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _scaleMatrix$[ebp]
  000cb	52		 push	 edx
  000cc	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000d9	51		 push	 ecx
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000e0	e8 00 00 00 00	 call	 ?ToRotationMatrix@Quaternion@@QBE?AV?$Matrix4@M@@XZ ; Quaternion::ToRotationMatrix
  000e5	50		 push	 eax
  000e6	8d 95 08 fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  000ec	52		 push	 edx
  000ed	8d 4d b4	 lea	 ecx, DWORD PTR _translationMatrix$[ebp]
  000f0	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  000f5	8b c8		 mov	 ecx, eax
  000f7	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  000fc	50		 push	 eax
  000fd	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  00103	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>

; 85   : 
; 86   : 	return GetParentMatrix() * result;

  00108	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _result$[ebp]
  0010e	50		 push	 eax
  0010f	8d 8d 88 fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00115	51		 push	 ecx
  00116	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?GetParentMatrix@Transform@@ABEABV?$Matrix4@M@@XZ ; Transform::GetParentMatrix
  0011e	8b c8		 mov	 ecx, eax
  00120	e8 00 00 00 00	 call	 ??D?$Matrix@M$03@@QBE?AV0@ABV0@@Z ; Matrix<float,4>::operator*
  00125	50		 push	 eax
  00126	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00129	e8 00 00 00 00	 call	 ??$?0$03@?$Matrix4@M@@QAE@ABV?$Matrix@M$03@@@Z ; Matrix4<float>::Matrix4<float><4>
  0012e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 87   : }

  00131	52		 push	 edx
  00132	8b cd		 mov	 ecx, ebp
  00134	50		 push	 eax
  00135	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@GetTransfo
  0013b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00140	58		 pop	 eax
  00141	5a		 pop	 edx
  00142	5f		 pop	 edi
  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	81 c4 78 02 00
	00		 add	 esp, 632		; 00000278H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 04 00	 ret	 4
$LN7@GetTransfo:
  00160	03 00 00 00	 DD	 3
  00164	00 00 00 00	 DD	 $LN6@GetTransfo
$LN6@GetTransfo:
  00168	b4 ff ff ff	 DD	 -76			; ffffffb4H
  0016c	40 00 00 00	 DD	 64			; 00000040H
  00170	00 00 00 00	 DD	 $LN3@GetTransfo
  00174	6c ff ff ff	 DD	 -148			; ffffff6cH
  00178	40 00 00 00	 DD	 64			; 00000040H
  0017c	00 00 00 00	 DD	 $LN4@GetTransfo
  00180	8c fe ff ff	 DD	 -372			; fffffe8cH
  00184	40 00 00 00	 DD	 64			; 00000040H
  00188	00 00 00 00	 DD	 $LN5@GetTransfo
$LN5@GetTransfo:
  0018c	72		 DB	 114			; 00000072H
  0018d	65		 DB	 101			; 00000065H
  0018e	73		 DB	 115			; 00000073H
  0018f	75		 DB	 117			; 00000075H
  00190	6c		 DB	 108			; 0000006cH
  00191	74		 DB	 116			; 00000074H
  00192	00		 DB	 0
$LN4@GetTransfo:
  00193	73		 DB	 115			; 00000073H
  00194	63		 DB	 99			; 00000063H
  00195	61		 DB	 97			; 00000061H
  00196	6c		 DB	 108			; 0000006cH
  00197	65		 DB	 101			; 00000065H
  00198	4d		 DB	 77			; 0000004dH
  00199	61		 DB	 97			; 00000061H
  0019a	74		 DB	 116			; 00000074H
  0019b	72		 DB	 114			; 00000072H
  0019c	69		 DB	 105			; 00000069H
  0019d	78		 DB	 120			; 00000078H
  0019e	00		 DB	 0
$LN3@GetTransfo:
  0019f	74		 DB	 116			; 00000074H
  001a0	72		 DB	 114			; 00000072H
  001a1	61		 DB	 97			; 00000061H
  001a2	6e		 DB	 110			; 0000006eH
  001a3	73		 DB	 115			; 00000073H
  001a4	6c		 DB	 108			; 0000006cH
  001a5	61		 DB	 97			; 00000061H
  001a6	74		 DB	 116			; 00000074H
  001a7	69		 DB	 105			; 00000069H
  001a8	6f		 DB	 111			; 0000006fH
  001a9	6e		 DB	 110			; 0000006eH
  001aa	4d		 DB	 77			; 0000004dH
  001ab	61		 DB	 97			; 00000061H
  001ac	74		 DB	 116			; 00000074H
  001ad	72		 DB	 114			; 00000072H
  001ae	69		 DB	 105			; 00000069H
  001af	78		 DB	 120			; 00000078H
  001b0	00		 DB	 0
?GetTransformation@Transform@@QBE?AV?$Matrix4@M@@XZ ENDP ; Transform::GetTransformation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -48						; size = 16
_parentRot$ = -28					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTransformedRot@Transform@@QBE?AVQuaternion@@XZ PROC	; Transform::GetTransformedRot
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 	Quaternion parentRot = Quaternion(0,0,0,1);

  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	8d 4d e4	 lea	 ecx, DWORD PTR _parentRot$[ebp]
  00060	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@MMMM@Z ; Quaternion::Quaternion

; 102  : 	
; 103  : 	if(m_parent)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00068	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0006c	74 26		 je	 SHORT $LN2@GetTransfo

; 104  : 	{
; 105  : 		parentRot = m_parent->GetTransformedRot();

  0006e	8d 4d d0	 lea	 ecx, DWORD PTR $T1[ebp]
  00071	51		 push	 ecx
  00072	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00078	e8 00 00 00 00	 call	 ?GetTransformedRot@Transform@@QBE?AVQuaternion@@XZ ; Transform::GetTransformedRot
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	89 4d e4	 mov	 DWORD PTR _parentRot$[ebp], ecx
  00082	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00085	89 55 e8	 mov	 DWORD PTR _parentRot$[ebp+4], edx
  00088	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008b	89 4d ec	 mov	 DWORD PTR _parentRot$[ebp+8], ecx
  0008e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00091	89 55 f0	 mov	 DWORD PTR _parentRot$[ebp+12], edx
$LN2@GetTransfo:

; 106  : 	}
; 107  : 	
; 108  : 	return parentRot * m_rot;

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	83 c0 0c	 add	 eax, 12			; 0000000cH
  0009a	50		 push	 eax
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009e	51		 push	 ecx
  0009f	8d 4d e4	 lea	 ecx, DWORD PTR _parentRot$[ebp]
  000a2	e8 00 00 00 00	 call	 ??DQuaternion@@QBE?AV0@ABV0@@Z ; Quaternion::operator*
  000a7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 109  : }

  000aa	52		 push	 edx
  000ab	8b cd		 mov	 ecx, ebp
  000ad	50		 push	 eax
  000ae	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@GetTransfo
  000b4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b9	58		 pop	 eax
  000ba	5a		 pop	 edx
  000bb	5f		 pop	 edi
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	33 cd		 xor	 ecx, ebp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	83 c4 30	 add	 esp, 48			; 00000030H
  000c9	3b ec		 cmp	 ebp, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
  000d6	66 90		 npad	 2
$LN6@GetTransfo:
  000d8	01 00 00 00	 DD	 1
  000dc	00 00 00 00	 DD	 $LN5@GetTransfo
$LN5@GetTransfo:
  000e0	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000e4	10 00 00 00	 DD	 16			; 00000010H
  000e8	00 00 00 00	 DD	 $LN4@GetTransfo
$LN4@GetTransfo:
  000ec	70		 DB	 112			; 00000070H
  000ed	61		 DB	 97			; 00000061H
  000ee	72		 DB	 114			; 00000072H
  000ef	65		 DB	 101			; 00000065H
  000f0	6e		 DB	 110			; 0000006eH
  000f1	74		 DB	 116			; 00000074H
  000f2	52		 DB	 82			; 00000052H
  000f3	6f		 DB	 111			; 0000006fH
  000f4	74		 DB	 116			; 00000074H
  000f5	00		 DB	 0
?GetTransformedRot@Transform@@QBE?AVQuaternion@@XZ ENDP	; Transform::GetTransformedRot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetParentMatrix@Transform@@ABEABV?$Matrix4@M@@XZ PROC	; Transform::GetParentMatrix
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000c	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	if(m_parent != 0 && m_parent->HasChanged())

  00026	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0002d	74 30		 je	 SHORT $LN2@GetParentM
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00035	e8 00 00 00 00	 call	 ?HasChanged@Transform@@QAE_NXZ ; Transform::HasChanged
  0003a	0f b6 d0	 movzx	 edx, al
  0003d	85 d2		 test	 edx, edx
  0003f	74 1e		 je	 SHORT $LN2@GetParentM

; 92   : 	{
; 93   : 		m_parentMatrix = m_parent->GetTransformation();

  00041	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00044	50		 push	 eax
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0004b	e8 00 00 00 00	 call	 ?GetTransformation@Transform@@QBE?AV?$Matrix4@M@@XZ ; Transform::GetTransformation
  00050	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00053	83 c7 24	 add	 edi, 36			; 00000024H
  00056	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005b	8b f0		 mov	 esi, eax
  0005d	f3 a5		 rep movsd
$LN2@GetParentM:

; 94   : 	}
; 95   : 		
; 96   : 	return m_parentMatrix;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	83 c0 24	 add	 eax, 36			; 00000024H

; 97   : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	83 c4 48	 add	 esp, 72			; 00000048H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?GetParentMatrix@Transform@@ABEABV?$Matrix4@M@@XZ ENDP	; Transform::GetParentMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 16
$T2 = -56						; size = 16
$T3 = -40						; size = 16
$T4 = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_rotation$ = 8						; size = 4
?Rotate@Transform@@QAEXABVQuaternion@@@Z PROC		; Transform::Rotate
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000b	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	m_rot = Quaternion((rotation * m_rot).Normalized());

  00025	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002f	51		 push	 ecx
  00030	8d 55 e8	 lea	 edx, DWORD PTR $T4[ebp]
  00033	52		 push	 edx
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _rotation$[ebp]
  00037	e8 00 00 00 00	 call	 ??DQuaternion@@QBE?AV0@ABV0@@Z ; Quaternion::operator*
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ?Normalized@?$Vector@M$03@@QBE?AV1@XZ ; Vector<float,4>::Normalized
  00043	50		 push	 eax
  00044	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$Vector4@M@@QAE@ABV?$Vector@M$03@@@Z ; Vector4<float>::Vector4<float>
  0004c	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  0004f	50		 push	 eax
  00050	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00053	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABV?$Vector4@M@@@Z ; Quaternion::Quaternion
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00065	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00068	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0006b	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0006e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00071	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 69   : }

  00074	5f		 pop	 edi
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 48	 add	 esp, 72			; 00000048H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?Rotate@Transform@@QAEXABVQuaternion@@@Z ENDP		; Transform::Rotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??8Vector3f@@QBE_NABV0@@Z
_TEXT	SEGMENT
tv79 = -44						; size = 4
tv145 = -40						; size = 4
tv155 = -36						; size = 4
tv141 = -32						; size = 4
tv135 = -28						; size = 4
tv153 = -24						; size = 4
tv131 = -20						; size = 4
tv93 = -16						; size = 4
tv151 = -12						; size = 4
tv89 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
??8Vector3f@@QBE_NABV0@@Z PROC				; Vector3f::operator==, COMDAT
; _this$ = ecx

; 768  : 	inline bool operator==(const Vector3f& r) const { return GetX() == r.GetX() && GetY() == r.GetY() && GetZ() == r.GetZ(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?GetX@Vector3f@@QBEMXZ	; Vector3f::GetX
  00023	d9 5d f8	 fstp	 DWORD PTR tv89[ebp]
  00026	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv89[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0002e	f3 0f 11 45 f4	 movss	 DWORD PTR tv151[ebp], xmm0
  00033	e8 00 00 00 00	 call	 ?GetX@Vector3f@@QBEMXZ	; Vector3f::GetX
  00038	d9 5d f0	 fstp	 DWORD PTR tv93[ebp]
  0003b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv151[ebp]
  00040	0f 2e 45 f0	 ucomiss xmm0, DWORD PTR tv93[ebp]
  00044	9f		 lahf
  00045	f6 c4 44	 test	 ah, 68			; 00000044H
  00048	7a 67		 jp	 SHORT $LN3@operator
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?GetY@Vector3f@@QBEMXZ	; Vector3f::GetY
  00052	d9 5d ec	 fstp	 DWORD PTR tv131[ebp]
  00055	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv131[ebp]
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0005d	f3 0f 11 45 e8	 movss	 DWORD PTR tv153[ebp], xmm0
  00062	e8 00 00 00 00	 call	 ?GetY@Vector3f@@QBEMXZ	; Vector3f::GetY
  00067	d9 5d e4	 fstp	 DWORD PTR tv135[ebp]
  0006a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv153[ebp]
  0006f	0f 2e 45 e4	 ucomiss xmm0, DWORD PTR tv135[ebp]
  00073	9f		 lahf
  00074	f6 c4 44	 test	 ah, 68			; 00000044H
  00077	7a 38		 jp	 SHORT $LN3@operator
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?GetZ@Vector3f@@QBEMXZ	; Vector3f::GetZ
  00081	d9 5d e0	 fstp	 DWORD PTR tv141[ebp]
  00084	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv141[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0008c	f3 0f 11 45 dc	 movss	 DWORD PTR tv155[ebp], xmm0
  00091	e8 00 00 00 00	 call	 ?GetZ@Vector3f@@QBEMXZ	; Vector3f::GetZ
  00096	d9 5d d8	 fstp	 DWORD PTR tv145[ebp]
  00099	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv155[ebp]
  0009e	0f 2e 45 d8	 ucomiss xmm0, DWORD PTR tv145[ebp]
  000a2	9f		 lahf
  000a3	f6 c4 44	 test	 ah, 68			; 00000044H
  000a6	7a 09		 jp	 SHORT $LN3@operator
  000a8	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  000af	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  000b1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN4@operator:
  000b8	8a 45 d4	 mov	 al, BYTE PTR tv79[ebp]
  000bb	5f		 pop	 edi
  000bc	83 c4 2c	 add	 esp, 44			; 0000002cH
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
??8Vector3f@@QBE_NABV0@@Z ENDP				; Vector3f::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??9Vector3f@@QBE_NABV0@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
??9Vector3f@@QBE_NABV0@@Z PROC				; Vector3f::operator!=, COMDAT
; _this$ = ecx

; 769  : 	inline bool operator!=(const Vector3f& r) const { return !operator==(r); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??8Vector3f@@QBE_NABV0@@Z ; Vector3f::operator==
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	75 09		 jne	 SHORT $LN3@operator
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00031	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  0003a	8a 45 f8	 mov	 al, BYTE PTR tv69[ebp]
  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??9Vector3f@@QBE_NABV0@@Z ENDP				; Vector3f::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??0Quaternion@@QAE@ABV?$Vector4@M@@@Z
_TEXT	SEGMENT
tv177 = -20						; size = 4
tv175 = -16						; size = 4
tv173 = -12						; size = 4
tv171 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
??0Quaternion@@QAE@ABV?$Vector4@M@@@Z PROC		; Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 855  : 	Quaternion(const Vector4<float>& r)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 856  : 	{

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??0?$Vector4@M@@QAE@XZ	; Vector4<float>::Vector4<float>

; 857  : 		(*this)[0] = r[0];

  00025	6a 00		 push	 0
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0002a	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  0002f	6a 00		 push	 0
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	d9 5d f8	 fstp	 DWORD PTR tv171[ebp]
  00037	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  0003c	d9 45 f8	 fld	 DWORD PTR tv171[ebp]
  0003f	d9 18		 fstp	 DWORD PTR [eax]

; 858  : 		(*this)[1] = r[1];

  00041	6a 01		 push	 1
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00046	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  0004b	6a 01		 push	 1
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	d9 5d f4	 fstp	 DWORD PTR tv173[ebp]
  00053	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00058	d9 45 f4	 fld	 DWORD PTR tv173[ebp]
  0005b	d9 18		 fstp	 DWORD PTR [eax]

; 859  : 		(*this)[2] = r[2];

  0005d	6a 02		 push	 2
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00062	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  00067	6a 02		 push	 2
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	d9 5d f0	 fstp	 DWORD PTR tv175[ebp]
  0006f	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00074	d9 45 f0	 fld	 DWORD PTR tv175[ebp]
  00077	d9 18		 fstp	 DWORD PTR [eax]

; 860  : 		(*this)[3] = r[3];

  00079	6a 03		 push	 3
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0007e	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  00083	6a 03		 push	 3
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	d9 5d ec	 fstp	 DWORD PTR tv177[ebp]
  0008b	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00090	d9 45 ec	 fld	 DWORD PTR tv177[ebp]
  00093	d9 18		 fstp	 DWORD PTR [eax]

; 861  : 	}

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	83 c4 14	 add	 esp, 20			; 00000014H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
??0Quaternion@@QAE@ABV?$Vector4@M@@@Z ENDP		; Quaternion::Quaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??0Quaternion@@QAE@ABV?$Matrix4@M@@@Z
_TEXT	SEGMENT
tv934 = -152						; size = 4
tv932 = -148						; size = 4
tv930 = -144						; size = 4
tv928 = -140						; size = 4
tv926 = -136						; size = 4
tv924 = -132						; size = 4
tv922 = -128						; size = 4
tv920 = -124						; size = 4
tv843 = -120						; size = 4
tv918 = -116						; size = 4
tv916 = -112						; size = 4
tv914 = -108						; size = 4
tv912 = -104						; size = 4
tv910 = -100						; size = 4
tv908 = -96						; size = 4
tv810 = -92						; size = 4
tv906 = -88						; size = 4
tv904 = -84						; size = 4
tv902 = -80						; size = 4
tv900 = -76						; size = 4
tv898 = -72						; size = 4
tv896 = -68						; size = 4
tv772 = -64						; size = 4
tv894 = -60						; size = 4
tv892 = -56						; size = 4
tv890 = -52						; size = 4
tv888 = -48						; size = 4
tv886 = -44						; size = 4
tv884 = -40						; size = 4
tv729 = -36						; size = 4
tv882 = -32						; size = 4
_length$ = -28						; size = 4
_s$1 = -24						; size = 4
_s$2 = -20						; size = 4
_s$3 = -16						; size = 4
_s$4 = -12						; size = 4
_trace$ = -8						; size = 4
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Quaternion@@QAE@ABV?$Matrix4@M@@@Z PROC		; Quaternion::Quaternion, COMDAT
; _this$ = ecx

; 874  : 	Quaternion(const Matrix4f& m)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  00012	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 875  : 	{

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??0?$Vector4@M@@QAE@XZ	; Vector4<float>::Vector4<float>

; 876  : 		float trace = m[0][0] + m[1][1] + m[2][2];

  0002a	6a 00		 push	 0
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00034	8b f0		 mov	 esi, eax
  00036	b8 04 00 00 00	 mov	 eax, 4
  0003b	6b f8 00	 imul	 edi, eax, 0
  0003e	6a 01		 push	 1
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00043	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00048	b9 04 00 00 00	 mov	 ecx, 4
  0004d	c1 e1 00	 shl	 ecx, 0
  00050	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  00055	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0005a	6a 02		 push	 2
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0005f	f3 0f 11 45 e0	 movss	 DWORD PTR tv882[ebp], xmm0
  00064	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00069	ba 04 00 00 00	 mov	 edx, 4
  0006e	d1 e2		 shl	 edx, 1
  00070	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv882[ebp]
  00075	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  0007a	f3 0f 11 45 f8	 movss	 DWORD PTR _trace$[ebp], xmm0

; 877  : 		
; 878  : 		if(trace > 0)

  0007f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _trace$[ebp]
  00084	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0008b	0f 86 3f 01 00
	00		 jbe	 $LN2@Quaternion

; 879  : 		{
; 880  : 			float s = 0.5f / sqrtf(trace + 1.0f);

  00091	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _trace$[ebp]
  00096	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0009e	51		 push	 ecx
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	e8 00 00 00 00	 call	 _sqrtf
  000a9	83 c4 04	 add	 esp, 4
  000ac	d9 5d dc	 fstp	 DWORD PTR tv729[ebp]
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b7	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR tv729[ebp]
  000bc	f3 0f 11 45 f4	 movss	 DWORD PTR _s$4[ebp], xmm0

; 881  : 			(*this)[3] = 0.25f / s;

  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  000c9	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _s$4[ebp]
  000ce	6a 03		 push	 3
  000d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	f3 0f 11 45 d8	 movss	 DWORD PTR tv884[ebp], xmm0
  000d8	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  000dd	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv884[ebp]
  000e2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 882  : 			(*this)[0] = (m[1][2] - m[2][1]) * s;

  000e6	6a 01		 push	 1
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000eb	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  000f0	8b f0		 mov	 esi, eax
  000f2	bf 04 00 00 00	 mov	 edi, 4
  000f7	d1 e7		 shl	 edi, 1
  000f9	6a 02		 push	 2
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000fe	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00103	b9 04 00 00 00	 mov	 ecx, 4
  00108	c1 e1 00	 shl	 ecx, 0
  0010b	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  00110	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  00115	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _s$4[ebp]
  0011a	6a 00		 push	 0
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	f3 0f 11 45 d4	 movss	 DWORD PTR tv886[ebp], xmm0
  00124	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00129	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR tv886[ebp]
  0012e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 883  : 			(*this)[1] = (m[2][0] - m[0][2]) * s;

  00132	6a 02		 push	 2
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00137	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0013c	8b f0		 mov	 esi, eax
  0013e	ba 04 00 00 00	 mov	 edx, 4
  00143	6b fa 00	 imul	 edi, edx, 0
  00146	6a 00		 push	 0
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0014b	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00150	b9 04 00 00 00	 mov	 ecx, 4
  00155	d1 e1		 shl	 ecx, 1
  00157	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0015c	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  00161	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _s$4[ebp]
  00166	6a 01		 push	 1
  00168	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	f3 0f 11 45 d0	 movss	 DWORD PTR tv888[ebp], xmm0
  00170	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00175	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv888[ebp]
  0017a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 884  : 			(*this)[2] = (m[0][1] - m[1][0]) * s;

  0017e	6a 00		 push	 0
  00180	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00183	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00188	8b f0		 mov	 esi, eax
  0018a	bf 04 00 00 00	 mov	 edi, 4
  0018f	c1 e7 00	 shl	 edi, 0
  00192	6a 01		 push	 1
  00194	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00197	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0019c	ba 04 00 00 00	 mov	 edx, 4
  001a1	6b ca 00	 imul	 ecx, edx, 0
  001a4	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  001a9	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  001ae	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _s$4[ebp]
  001b3	6a 02		 push	 2
  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	f3 0f 11 45 cc	 movss	 DWORD PTR tv890[ebp], xmm0
  001bd	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  001c2	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR tv890[ebp]
  001c7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001cb	e9 5a 05 00 00	 jmp	 $LN7@Quaternion
$LN2@Quaternion:

; 885  : 		}
; 886  : 		else if(m[0][0] > m[1][1] && m[0][0] > m[2][2])

  001d0	6a 00		 push	 0
  001d2	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  001d5	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  001da	8b f0		 mov	 esi, eax
  001dc	ba 04 00 00 00	 mov	 edx, 4
  001e1	6b fa 00	 imul	 edi, edx, 0
  001e4	6a 01		 push	 1
  001e6	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  001e9	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  001ee	b9 04 00 00 00	 mov	 ecx, 4
  001f3	c1 e1 00	 shl	 ecx, 0
  001f6	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  001fb	0f 2f 04 08	 comiss	 xmm0, DWORD PTR [eax+ecx]
  001ff	0f 86 c6 01 00
	00		 jbe	 $LN4@Quaternion
  00205	6a 00		 push	 0
  00207	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0020a	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0020f	8b f0		 mov	 esi, eax
  00211	ba 04 00 00 00	 mov	 edx, 4
  00216	6b fa 00	 imul	 edi, edx, 0
  00219	6a 02		 push	 2
  0021b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0021e	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00223	b9 04 00 00 00	 mov	 ecx, 4
  00228	d1 e1		 shl	 ecx, 1
  0022a	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0022f	0f 2f 04 08	 comiss	 xmm0, DWORD PTR [eax+ecx]
  00233	0f 86 92 01 00
	00		 jbe	 $LN4@Quaternion

; 887  : 		{
; 888  : 			float s = 2.0f * sqrtf(1.0f + m[0][0] - m[1][1] - m[2][2]);

  00239	6a 00		 push	 0
  0023b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0023e	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00243	ba 04 00 00 00	 mov	 edx, 4
  00248	6b ca 00	 imul	 ecx, edx, 0
  0024b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00253	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00258	6a 01		 push	 1
  0025a	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0025d	f3 0f 11 45 c8	 movss	 DWORD PTR tv892[ebp], xmm0
  00262	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00267	ba 04 00 00 00	 mov	 edx, 4
  0026c	c1 e2 00	 shl	 edx, 0
  0026f	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR tv892[ebp]
  00274	f3 0f 5c 04 10	 subss	 xmm0, DWORD PTR [eax+edx]
  00279	6a 02		 push	 2
  0027b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0027e	f3 0f 11 45 c4	 movss	 DWORD PTR tv894[ebp], xmm0
  00283	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	d1 e1		 shl	 ecx, 1
  0028f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR tv894[ebp]
  00294	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  00299	51		 push	 ecx
  0029a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029f	e8 00 00 00 00	 call	 _sqrtf
  002a4	83 c4 04	 add	 esp, 4
  002a7	d9 5d c0	 fstp	 DWORD PTR tv772[ebp]
  002aa	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR tv772[ebp]
  002af	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  002b7	f3 0f 11 45 f0	 movss	 DWORD PTR _s$3[ebp], xmm0

; 889  : 			(*this)[3] = (m[1][2] - m[2][1]) / s;

  002bc	6a 01		 push	 1
  002be	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  002c1	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  002c6	8b f0		 mov	 esi, eax
  002c8	bf 04 00 00 00	 mov	 edi, 4
  002cd	d1 e7		 shl	 edi, 1
  002cf	6a 02		 push	 2
  002d1	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  002d4	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  002d9	ba 04 00 00 00	 mov	 edx, 4
  002de	c1 e2 00	 shl	 edx, 0
  002e1	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  002e6	f3 0f 5c 04 10	 subss	 xmm0, DWORD PTR [eax+edx]
  002eb	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _s$3[ebp]
  002f0	6a 03		 push	 3
  002f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f5	f3 0f 11 45 bc	 movss	 DWORD PTR tv896[ebp], xmm0
  002fa	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  002ff	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR tv896[ebp]
  00304	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 890  : 			(*this)[0] = 0.25f * s;

  00308	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00310	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _s$3[ebp]
  00315	6a 00		 push	 0
  00317	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031a	f3 0f 11 45 b8	 movss	 DWORD PTR tv898[ebp], xmm0
  0031f	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00324	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv898[ebp]
  00329	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 891  : 			(*this)[1] = (m[1][0] + m[0][1]) / s;

  0032d	6a 01		 push	 1
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00332	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00337	8b f0		 mov	 esi, eax
  00339	b8 04 00 00 00	 mov	 eax, 4
  0033e	6b f8 00	 imul	 edi, eax, 0
  00341	6a 00		 push	 0
  00343	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00346	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0034b	b9 04 00 00 00	 mov	 ecx, 4
  00350	c1 e1 00	 shl	 ecx, 0
  00353	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  00358	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0035d	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _s$3[ebp]
  00362	6a 01		 push	 1
  00364	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00367	f3 0f 11 45 b4	 movss	 DWORD PTR tv900[ebp], xmm0
  0036c	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00371	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv900[ebp]
  00376	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 892  : 			(*this)[2] = (m[2][0] + m[0][2]) / s;

  0037a	6a 02		 push	 2
  0037c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0037f	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00384	8b f0		 mov	 esi, eax
  00386	ba 04 00 00 00	 mov	 edx, 4
  0038b	6b fa 00	 imul	 edi, edx, 0
  0038e	6a 00		 push	 0
  00390	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00393	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00398	b9 04 00 00 00	 mov	 ecx, 4
  0039d	d1 e1		 shl	 ecx, 1
  0039f	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  003a4	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  003a9	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _s$3[ebp]
  003ae	6a 02		 push	 2
  003b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b3	f3 0f 11 45 b0	 movss	 DWORD PTR tv902[ebp], xmm0
  003b8	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  003bd	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR tv902[ebp]
  003c2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  003c6	e9 5f 03 00 00	 jmp	 $LN7@Quaternion
$LN4@Quaternion:

; 893  : 		}
; 894  : 		else if(m[1][1] > m[2][2])

  003cb	6a 01		 push	 1
  003cd	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  003d0	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  003d5	8b f0		 mov	 esi, eax
  003d7	bf 04 00 00 00	 mov	 edi, 4
  003dc	c1 e7 00	 shl	 edi, 0
  003df	6a 02		 push	 2
  003e1	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  003e4	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  003e9	ba 04 00 00 00	 mov	 edx, 4
  003ee	d1 e2		 shl	 edx, 1
  003f0	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  003f5	0f 2f 04 10	 comiss	 xmm0, DWORD PTR [eax+edx]
  003f9	0f 86 92 01 00
	00		 jbe	 $LN6@Quaternion

; 895  : 		{
; 896  : 			float s = 2.0f * sqrtf(1.0f + m[1][1] - m[0][0] - m[2][2]);

  003ff	6a 01		 push	 1
  00401	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00404	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00409	b9 04 00 00 00	 mov	 ecx, 4
  0040e	c1 e1 00	 shl	 ecx, 0
  00411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00419	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0041e	6a 00		 push	 0
  00420	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00423	f3 0f 11 45 ac	 movss	 DWORD PTR tv904[ebp], xmm0
  00428	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0042d	ba 04 00 00 00	 mov	 edx, 4
  00432	6b ca 00	 imul	 ecx, edx, 0
  00435	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv904[ebp]
  0043a	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  0043f	6a 02		 push	 2
  00441	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00444	f3 0f 11 45 a8	 movss	 DWORD PTR tv906[ebp], xmm0
  00449	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0044e	ba 04 00 00 00	 mov	 edx, 4
  00453	d1 e2		 shl	 edx, 1
  00455	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv906[ebp]
  0045a	f3 0f 5c 04 10	 subss	 xmm0, DWORD PTR [eax+edx]
  0045f	51		 push	 ecx
  00460	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00465	e8 00 00 00 00	 call	 _sqrtf
  0046a	83 c4 04	 add	 esp, 4
  0046d	d9 5d a4	 fstp	 DWORD PTR tv810[ebp]
  00470	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv810[ebp]
  00475	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0047d	f3 0f 11 45 ec	 movss	 DWORD PTR _s$2[ebp], xmm0

; 897  : 			(*this)[3] = (m[2][0] - m[0][2]) / s;

  00482	6a 02		 push	 2
  00484	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00487	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0048c	8b f0		 mov	 esi, eax
  0048e	b8 04 00 00 00	 mov	 eax, 4
  00493	6b f8 00	 imul	 edi, eax, 0
  00496	6a 00		 push	 0
  00498	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0049b	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  004a0	b9 04 00 00 00	 mov	 ecx, 4
  004a5	d1 e1		 shl	 ecx, 1
  004a7	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  004ac	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  004b1	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _s$2[ebp]
  004b6	6a 03		 push	 3
  004b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004bb	f3 0f 11 45 a0	 movss	 DWORD PTR tv908[ebp], xmm0
  004c0	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  004c5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv908[ebp]
  004ca	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 898  : 			(*this)[0] = (m[1][0] + m[0][1]) / s;

  004ce	6a 01		 push	 1
  004d0	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  004d3	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  004d8	8b f0		 mov	 esi, eax
  004da	ba 04 00 00 00	 mov	 edx, 4
  004df	6b fa 00	 imul	 edi, edx, 0
  004e2	6a 00		 push	 0
  004e4	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  004e7	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  004ec	b9 04 00 00 00	 mov	 ecx, 4
  004f1	c1 e1 00	 shl	 ecx, 0
  004f4	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  004f9	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  004fe	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _s$2[ebp]
  00503	6a 00		 push	 0
  00505	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00508	f3 0f 11 45 9c	 movss	 DWORD PTR tv910[ebp], xmm0
  0050d	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00512	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv910[ebp]
  00517	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 899  : 			(*this)[1] = 0.25f * s;

  0051b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00523	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _s$2[ebp]
  00528	6a 01		 push	 1
  0052a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0052d	f3 0f 11 45 98	 movss	 DWORD PTR tv912[ebp], xmm0
  00532	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00537	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv912[ebp]
  0053c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 900  : 			(*this)[2] = (m[2][1] + m[1][2]) / s;

  00540	6a 02		 push	 2
  00542	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00545	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0054a	8b f0		 mov	 esi, eax
  0054c	bf 04 00 00 00	 mov	 edi, 4
  00551	c1 e7 00	 shl	 edi, 0
  00554	6a 01		 push	 1
  00556	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00559	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0055e	ba 04 00 00 00	 mov	 edx, 4
  00563	d1 e2		 shl	 edx, 1
  00565	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0056a	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  0056f	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _s$2[ebp]
  00574	6a 02		 push	 2
  00576	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00579	f3 0f 11 45 94	 movss	 DWORD PTR tv914[ebp], xmm0
  0057e	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00583	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv914[ebp]
  00588	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 901  : 		}
; 902  : 		else

  0058c	e9 99 01 00 00	 jmp	 $LN7@Quaternion
$LN6@Quaternion:

; 903  : 		{
; 904  : 			float s = 2.0f * sqrtf(1.0f + m[2][2] - m[1][1] - m[0][0]);

  00591	6a 02		 push	 2
  00593	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00596	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0059b	b9 04 00 00 00	 mov	 ecx, 4
  005a0	d1 e1		 shl	 ecx, 1
  005a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005aa	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  005af	6a 01		 push	 1
  005b1	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  005b4	f3 0f 11 45 90	 movss	 DWORD PTR tv916[ebp], xmm0
  005b9	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  005be	ba 04 00 00 00	 mov	 edx, 4
  005c3	c1 e2 00	 shl	 edx, 0
  005c6	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv916[ebp]
  005cb	f3 0f 5c 04 10	 subss	 xmm0, DWORD PTR [eax+edx]
  005d0	6a 00		 push	 0
  005d2	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  005d5	f3 0f 11 45 8c	 movss	 DWORD PTR tv918[ebp], xmm0
  005da	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  005df	b9 04 00 00 00	 mov	 ecx, 4
  005e4	6b d1 00	 imul	 edx, ecx, 0
  005e7	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv918[ebp]
  005ec	f3 0f 5c 04 10	 subss	 xmm0, DWORD PTR [eax+edx]
  005f1	51		 push	 ecx
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	e8 00 00 00 00	 call	 _sqrtf
  005fc	83 c4 04	 add	 esp, 4
  005ff	d9 5d 88	 fstp	 DWORD PTR tv843[ebp]
  00602	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR tv843[ebp]
  00607	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0060f	f3 0f 11 45 e8	 movss	 DWORD PTR _s$1[ebp], xmm0

; 905  : 			(*this)[3] = (m[0][1] - m[1][0]) / s;

  00614	6a 00		 push	 0
  00616	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00619	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0061e	8b f0		 mov	 esi, eax
  00620	bf 04 00 00 00	 mov	 edi, 4
  00625	c1 e7 00	 shl	 edi, 0
  00628	6a 01		 push	 1
  0062a	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0062d	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  00632	b9 04 00 00 00	 mov	 ecx, 4
  00637	6b d1 00	 imul	 edx, ecx, 0
  0063a	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0063f	f3 0f 5c 04 10	 subss	 xmm0, DWORD PTR [eax+edx]
  00644	f3 0f 5e 45 e8	 divss	 xmm0, DWORD PTR _s$1[ebp]
  00649	6a 03		 push	 3
  0064b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0064e	f3 0f 11 45 84	 movss	 DWORD PTR tv920[ebp], xmm0
  00653	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00658	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR tv920[ebp]
  0065d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 906  : 			(*this)[0] = (m[2][0] + m[0][2]) / s;

  00661	6a 02		 push	 2
  00663	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00666	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0066b	8b f0		 mov	 esi, eax
  0066d	b8 04 00 00 00	 mov	 eax, 4
  00672	6b f8 00	 imul	 edi, eax, 0
  00675	6a 00		 push	 0
  00677	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0067a	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  0067f	b9 04 00 00 00	 mov	 ecx, 4
  00684	d1 e1		 shl	 ecx, 1
  00686	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  0068b	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00690	f3 0f 5e 45 e8	 divss	 xmm0, DWORD PTR _s$1[ebp]
  00695	6a 00		 push	 0
  00697	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0069a	f3 0f 11 45 80	 movss	 DWORD PTR tv922[ebp], xmm0
  0069f	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  006a4	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv922[ebp]
  006a9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 907  : 			(*this)[1] = (m[1][2] + m[2][1]) / s;

  006ad	6a 01		 push	 1
  006af	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  006b2	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  006b7	8b f0		 mov	 esi, eax
  006b9	bf 04 00 00 00	 mov	 edi, 4
  006be	d1 e7		 shl	 edi, 1
  006c0	6a 02		 push	 2
  006c2	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  006c5	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QBEPBMH@Z ; Matrix<float,4>::operator[]
  006ca	ba 04 00 00 00	 mov	 edx, 4
  006cf	c1 e2 00	 shl	 edx, 0
  006d2	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
  006d7	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  006dc	f3 0f 5e 45 e8	 divss	 xmm0, DWORD PTR _s$1[ebp]
  006e1	6a 01		 push	 1
  006e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e6	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR tv924[ebp], xmm0
  006ee	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  006f3	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv924[ebp]
  006fb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 908  : 			(*this)[2] = 0.25f * s;

  006ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00707	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _s$1[ebp]
  0070c	6a 02		 push	 2
  0070e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00711	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR tv926[ebp], xmm0
  00719	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  0071e	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv926[ebp]
  00726	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN7@Quaternion:

; 909  : 		}
; 910  : 		
; 911  : 		float length = Length();

  0072a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0072d	e8 00 00 00 00	 call	 ?Length@?$Vector@M$03@@QBEMXZ ; Vector<float,4>::Length
  00732	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 912  : 		(*this)[3] = (*this)[3] / length;

  00735	6a 03		 push	 3
  00737	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0073a	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  0073f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00743	f3 0f 5e 45 e4	 divss	 xmm0, DWORD PTR _length$[ebp]
  00748	6a 03		 push	 3
  0074a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0074d	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR tv928[ebp], xmm0
  00755	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  0075a	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv928[ebp]
  00762	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 913  : 		(*this)[0] = (*this)[0] / length;

  00766	6a 00		 push	 0
  00768	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0076b	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00770	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00774	f3 0f 5e 45 e4	 divss	 xmm0, DWORD PTR _length$[ebp]
  00779	6a 00		 push	 0
  0077b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0077e	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR tv930[ebp], xmm0
  00786	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  0078b	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv930[ebp]
  00793	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 914  : 		(*this)[1] = (*this)[1] / length;

  00797	6a 01		 push	 1
  00799	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0079c	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  007a1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  007a5	f3 0f 5e 45 e4	 divss	 xmm0, DWORD PTR _length$[ebp]
  007aa	6a 01		 push	 1
  007ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007af	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv932[ebp], xmm0
  007b7	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  007bc	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv932[ebp]
  007c4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 915  : 		(*this)[2] = (*this)[2] / length;

  007c8	6a 02		 push	 2
  007ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007cd	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  007d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  007d6	f3 0f 5e 45 e4	 divss	 xmm0, DWORD PTR _length$[ebp]
  007db	6a 02		 push	 2
  007dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007e0	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv934[ebp], xmm0
  007e8	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  007ed	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv934[ebp]
  007f5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 916  : 	}

  007f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007fc	5f		 pop	 edi
  007fd	5e		 pop	 esi
  007fe	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00804	3b ec		 cmp	 ebp, esp
  00806	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0080b	8b e5		 mov	 esp, ebp
  0080d	5d		 pop	 ebp
  0080e	c2 04 00	 ret	 4
??0Quaternion@@QAE@ABV?$Matrix4@M@@@Z ENDP		; Quaternion::Quaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?ToRotationMatrix@Quaternion@@QBE?AV?$Matrix4@M@@XZ
_TEXT	SEGMENT
tv576 = -384						; size = 4
tv642 = -380						; size = 4
tv572 = -376						; size = 4
tv640 = -372						; size = 4
tv568 = -368						; size = 4
tv638 = -364						; size = 4
tv564 = -360						; size = 4
tv559 = -356						; size = 4
tv636 = -352						; size = 4
tv555 = -348						; size = 4
tv634 = -344						; size = 4
tv551 = -340						; size = 4
tv632 = -336						; size = 4
tv547 = -332						; size = 4
tv542 = -328						; size = 4
tv630 = -324						; size = 4
tv538 = -320						; size = 4
tv628 = -316						; size = 4
tv534 = -312						; size = 4
tv626 = -308						; size = 4
tv530 = -304						; size = 4
tv522 = -300						; size = 4
tv624 = -296						; size = 4
tv518 = -292						; size = 4
tv622 = -288						; size = 4
tv514 = -284						; size = 4
tv620 = -280						; size = 4
tv510 = -276						; size = 4
tv504 = -272						; size = 4
tv618 = -268						; size = 4
tv500 = -264						; size = 4
tv616 = -260						; size = 4
tv496 = -256						; size = 4
tv614 = -252						; size = 4
tv492 = -248						; size = 4
tv487 = -244						; size = 4
tv612 = -240						; size = 4
tv483 = -236						; size = 4
tv610 = -232						; size = 4
tv479 = -228						; size = 4
tv608 = -224						; size = 4
tv475 = -220						; size = 4
tv467 = -216						; size = 4
tv606 = -212						; size = 4
tv463 = -208						; size = 4
tv604 = -204						; size = 4
tv459 = -200						; size = 4
tv602 = -196						; size = 4
tv455 = -192						; size = 4
tv450 = -188						; size = 4
tv600 = -184						; size = 4
tv446 = -180						; size = 4
tv598 = -176						; size = 4
tv442 = -172						; size = 4
tv596 = -168						; size = 4
tv438 = -164						; size = 4
tv432 = -160						; size = 4
tv594 = -156						; size = 4
tv428 = -152						; size = 4
tv592 = -148						; size = 4
tv424 = -144						; size = 4
tv590 = -140						; size = 4
tv420 = -136						; size = 4
$T1 = -132						; size = 64
_right$ = -64						; size = 12
_up$ = -44						; size = 12
_forward$ = -24						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?ToRotationMatrix@Quaternion@@QBE?AV?$Matrix4@M@@XZ PROC ; Quaternion::ToRotationMatrix, COMDAT
; _this$ = ecx

; 959  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-384]
  00011	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 960  : 		Vector3f forward = Vector3f(2.0f * (GetX() * GetZ() - GetW() * GetY()), 2.0f * (GetY() * GetZ() + GetW() * GetX()), 1.0f - 2.0f * (GetX() * GetX() + GetY() * GetY()));

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00033	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR tv420[ebp]
  00039	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv420[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR tv590[ebp], xmm0
  0004c	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00051	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv424[ebp]
  00057	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR tv590[ebp]
  0005f	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR tv424[ebp]
  00067	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv592[ebp], xmm0
  00072	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00077	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR tv428[ebp]
  0007d	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv428[ebp]
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR tv594[ebp], xmm0
  00090	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00095	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR tv432[ebp]
  0009b	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR tv594[ebp]
  000a3	f3 0f 59 85 60
	ff ff ff	 mulss	 xmm0, DWORD PTR tv432[ebp]
  000ab	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR tv592[ebp]
  000b3	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b7	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c7	f3 0f 5c c1	 subss	 xmm0, xmm1
  000cb	51		 push	 ecx
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  000d9	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv438[ebp]
  000df	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv438[ebp]
  000e7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR tv596[ebp], xmm0
  000f2	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  000f7	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR tv442[ebp]
  000fd	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv596[ebp]
  00105	f3 0f 59 85 54
	ff ff ff	 mulss	 xmm0, DWORD PTR tv442[ebp]
  0010d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv598[ebp], xmm0
  00118	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  0011d	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR tv446[ebp]
  00123	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv446[ebp]
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR tv600[ebp], xmm0
  00136	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  0013b	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv450[ebp]
  00141	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv600[ebp]
  00149	f3 0f 59 85 44
	ff ff ff	 mulss	 xmm0, DWORD PTR tv450[ebp]
  00151	f3 0f 10 8d 50
	ff ff ff	 movss	 xmm1, DWORD PTR tv598[ebp]
  00159	f3 0f 58 c8	 addss	 xmm1, xmm0
  0015d	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  00165	51		 push	 ecx
  00166	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0016b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00173	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv455[ebp]
  00179	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv455[ebp]
  00181	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv602[ebp], xmm0
  0018c	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  00191	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR tv459[ebp]
  00197	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv602[ebp]
  0019f	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR tv459[ebp]
  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR tv604[ebp], xmm0
  001b2	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  001b7	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv463[ebp]
  001bd	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv463[ebp]
  001c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c8	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR tv606[ebp], xmm0
  001d0	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  001d5	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv467[ebp]
  001db	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR tv606[ebp]
  001e3	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR tv467[ebp]
  001eb	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR tv604[ebp]
  001f3	f3 0f 5c c8	 subss	 xmm1, xmm0
  001f7	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  001ff	51		 push	 ecx
  00200	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00205	8d 4d e8	 lea	 ecx, DWORD PTR _forward$[ebp]
  00208	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f

; 961  : 		Vector3f up = Vector3f(2.0f * (GetX()*GetY() + GetW()*GetZ()), 1.0f - 2.0f * (GetX()*GetX() + GetZ()*GetZ()), 2.0f * (GetY()*GetZ() - GetW()*GetX()));

  0020d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00210	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00215	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv475[ebp]
  0021b	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv475[ebp]
  00223	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00226	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR tv608[ebp], xmm0
  0022e	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  00233	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR tv479[ebp]
  00239	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR tv608[ebp]
  00241	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv479[ebp]
  00249	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0024c	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv610[ebp], xmm0
  00254	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00259	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR tv483[ebp]
  0025f	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR tv483[ebp]
  00267	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0026a	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR tv612[ebp], xmm0
  00272	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00277	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR tv487[ebp]
  0027d	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR tv612[ebp]
  00285	f3 0f 59 85 0c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv487[ebp]
  0028d	f3 0f 10 8d 18
	ff ff ff	 movss	 xmm1, DWORD PTR tv610[ebp]
  00295	f3 0f 5c c8	 subss	 xmm1, xmm0
  00299	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  002a1	51		 push	 ecx
  002a2	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  002a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002aa	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  002af	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv492[ebp]
  002b5	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv492[ebp]
  002bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002c0	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR tv614[ebp], xmm0
  002c8	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  002cd	d9 9d 00 ff ff
	ff		 fstp	 DWORD PTR tv496[ebp]
  002d3	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR tv614[ebp]
  002db	f3 0f 59 85 00
	ff ff ff	 mulss	 xmm0, DWORD PTR tv496[ebp]
  002e3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e6	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR tv616[ebp], xmm0
  002ee	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  002f3	d9 9d f8 fe ff
	ff		 fstp	 DWORD PTR tv500[ebp]
  002f9	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR tv500[ebp]
  00301	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00304	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR tv618[ebp], xmm0
  0030c	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  00311	d9 9d f0 fe ff
	ff		 fstp	 DWORD PTR tv504[ebp]
  00317	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR tv618[ebp]
  0031f	f3 0f 59 85 f0
	fe ff ff	 mulss	 xmm0, DWORD PTR tv504[ebp]
  00327	f3 0f 10 8d fc
	fe ff ff	 movss	 xmm1, DWORD PTR tv616[ebp]
  0032f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00333	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  0033b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00343	f3 0f 5c c1	 subss	 xmm0, xmm1
  00347	51		 push	 ecx
  00348	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00350	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00355	d9 9d ec fe ff
	ff		 fstp	 DWORD PTR tv510[ebp]
  0035b	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR tv510[ebp]
  00363	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00366	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR tv620[ebp], xmm0
  0036e	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00373	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR tv514[ebp]
  00379	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv620[ebp]
  00381	f3 0f 59 85 e4
	fe ff ff	 mulss	 xmm0, DWORD PTR tv514[ebp]
  00389	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR tv622[ebp], xmm0
  00394	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00399	d9 9d dc fe ff
	ff		 fstp	 DWORD PTR tv518[ebp]
  0039f	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR tv518[ebp]
  003a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003aa	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR tv624[ebp], xmm0
  003b2	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  003b7	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR tv522[ebp]
  003bd	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR tv624[ebp]
  003c5	f3 0f 59 85 d4
	fe ff ff	 mulss	 xmm0, DWORD PTR tv522[ebp]
  003cd	f3 0f 10 8d e0
	fe ff ff	 movss	 xmm1, DWORD PTR tv622[ebp]
  003d5	f3 0f 58 c8	 addss	 xmm1, xmm0
  003d9	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  003e1	51		 push	 ecx
  003e2	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003e7	8d 4d d4	 lea	 ecx, DWORD PTR _up$[ebp]
  003ea	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f

; 962  : 		Vector3f right = Vector3f(1.0f - 2.0f * (GetY()*GetY() + GetZ()*GetZ()), 2.0f * (GetX()*GetY() - GetW()*GetZ()), 2.0f * (GetX()*GetZ() + GetW()*GetY()));

  003ef	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f2	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  003f7	d9 9d d0 fe ff
	ff		 fstp	 DWORD PTR tv530[ebp]
  003fd	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR tv530[ebp]
  00405	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00408	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR tv626[ebp], xmm0
  00410	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  00415	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR tv534[ebp]
  0041b	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR tv626[ebp]
  00423	f3 0f 59 85 c8
	fe ff ff	 mulss	 xmm0, DWORD PTR tv534[ebp]
  0042b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0042e	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR tv628[ebp], xmm0
  00436	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  0043b	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR tv538[ebp]
  00441	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR tv538[ebp]
  00449	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044c	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv630[ebp], xmm0
  00454	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00459	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR tv542[ebp]
  0045f	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR tv630[ebp]
  00467	f3 0f 59 85 b8
	fe ff ff	 mulss	 xmm0, DWORD PTR tv542[ebp]
  0046f	f3 0f 10 8d c4
	fe ff ff	 movss	 xmm1, DWORD PTR tv628[ebp]
  00477	f3 0f 58 c8	 addss	 xmm1, xmm0
  0047b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  00483	51		 push	 ecx
  00484	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00489	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0048c	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00491	d9 9d b4 fe ff
	ff		 fstp	 DWORD PTR tv547[ebp]
  00497	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR tv547[ebp]
  0049f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004a2	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR tv632[ebp], xmm0
  004aa	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  004af	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR tv551[ebp]
  004b5	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR tv632[ebp]
  004bd	f3 0f 59 85 ac
	fe ff ff	 mulss	 xmm0, DWORD PTR tv551[ebp]
  004c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004c8	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR tv634[ebp], xmm0
  004d0	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  004d5	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR tv555[ebp]
  004db	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR tv555[ebp]
  004e3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004e6	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR tv636[ebp], xmm0
  004ee	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  004f3	d9 9d 9c fe ff
	ff		 fstp	 DWORD PTR tv559[ebp]
  004f9	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR tv636[ebp]
  00501	f3 0f 59 85 9c
	fe ff ff	 mulss	 xmm0, DWORD PTR tv559[ebp]
  00509	f3 0f 10 8d a8
	fe ff ff	 movss	 xmm1, DWORD PTR tv634[ebp]
  00511	f3 0f 5c c8	 subss	 xmm1, xmm0
  00515	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  0051d	51		 push	 ecx
  0051e	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00523	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00526	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  0052b	d9 9d 98 fe ff
	ff		 fstp	 DWORD PTR tv564[ebp]
  00531	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR tv564[ebp]
  00539	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0053c	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR tv638[ebp], xmm0
  00544	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00549	d9 9d 90 fe ff
	ff		 fstp	 DWORD PTR tv568[ebp]
  0054f	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR tv638[ebp]
  00557	f3 0f 59 85 90
	fe ff ff	 mulss	 xmm0, DWORD PTR tv568[ebp]
  0055f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00562	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR tv640[ebp], xmm0
  0056a	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0056f	d9 9d 88 fe ff
	ff		 fstp	 DWORD PTR tv572[ebp]
  00575	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR tv572[ebp]
  0057d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00580	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR tv642[ebp], xmm0
  00588	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0058d	d9 9d 80 fe ff
	ff		 fstp	 DWORD PTR tv576[ebp]
  00593	f3 0f 10 85 84
	fe ff ff	 movss	 xmm0, DWORD PTR tv642[ebp]
  0059b	f3 0f 59 85 80
	fe ff ff	 mulss	 xmm0, DWORD PTR tv576[ebp]
  005a3	f3 0f 10 8d 8c
	fe ff ff	 movss	 xmm1, DWORD PTR tv640[ebp]
  005ab	f3 0f 58 c8	 addss	 xmm1, xmm0
  005af	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  005b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005bf	f3 0f 5c c1	 subss	 xmm0, xmm1
  005c3	51		 push	 ecx
  005c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c9	8d 4d c0	 lea	 ecx, DWORD PTR _right$[ebp]
  005cc	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f

; 963  : 	
; 964  : 		return Matrix4f().InitRotationFromVectors(forward,up,right);

  005d1	8d 45 c0	 lea	 eax, DWORD PTR _right$[ebp]
  005d4	50		 push	 eax
  005d5	8d 4d d4	 lea	 ecx, DWORD PTR _up$[ebp]
  005d8	51		 push	 ecx
  005d9	8d 55 e8	 lea	 edx, DWORD PTR _forward$[ebp]
  005dc	52		 push	 edx
  005dd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  005e0	50		 push	 eax
  005e1	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  005e7	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  005ec	8b c8		 mov	 ecx, eax
  005ee	e8 00 00 00 00	 call	 ?InitRotationFromVectors@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@00@Z ; Matrix4<float>::InitRotationFromVectors
  005f3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 965  : 	}

  005f6	52		 push	 edx
  005f7	8b cd		 mov	 ecx, ebp
  005f9	50		 push	 eax
  005fa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@ToRotation
  00600	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00605	58		 pop	 eax
  00606	5a		 pop	 edx
  00607	5f		 pop	 edi
  00608	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0060b	33 cd		 xor	 ecx, ebp
  0060d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00612	81 c4 80 01 00
	00		 add	 esp, 384		; 00000180H
  00618	3b ec		 cmp	 ebp, esp
  0061a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0061f	8b e5		 mov	 esp, ebp
  00621	5d		 pop	 ebp
  00622	c2 04 00	 ret	 4
  00625	0f 1f 00	 npad	 3
$LN7@ToRotation:
  00628	03 00 00 00	 DD	 3
  0062c	00 00 00 00	 DD	 $LN6@ToRotation
$LN6@ToRotation:
  00630	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00634	0c 00 00 00	 DD	 12			; 0000000cH
  00638	00 00 00 00	 DD	 $LN3@ToRotation
  0063c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00640	0c 00 00 00	 DD	 12			; 0000000cH
  00644	00 00 00 00	 DD	 $LN4@ToRotation
  00648	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0064c	0c 00 00 00	 DD	 12			; 0000000cH
  00650	00 00 00 00	 DD	 $LN5@ToRotation
$LN5@ToRotation:
  00654	72		 DB	 114			; 00000072H
  00655	69		 DB	 105			; 00000069H
  00656	67		 DB	 103			; 00000067H
  00657	68		 DB	 104			; 00000068H
  00658	74		 DB	 116			; 00000074H
  00659	00		 DB	 0
$LN4@ToRotation:
  0065a	75		 DB	 117			; 00000075H
  0065b	70		 DB	 112			; 00000070H
  0065c	00		 DB	 0
$LN3@ToRotation:
  0065d	66		 DB	 102			; 00000066H
  0065e	6f		 DB	 111			; 0000006fH
  0065f	72		 DB	 114			; 00000072H
  00660	77		 DB	 119			; 00000077H
  00661	61		 DB	 97			; 00000061H
  00662	72		 DB	 114			; 00000072H
  00663	64		 DB	 100			; 00000064H
  00664	00		 DB	 0
?ToRotationMatrix@Quaternion@@QBE?AV?$Matrix4@M@@XZ ENDP ; Quaternion::ToRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??DQuaternion@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
tv479 = -260						; size = 4
tv545 = -256						; size = 4
tv475 = -252						; size = 4
tv543 = -248						; size = 4
tv471 = -244						; size = 4
tv541 = -240						; size = 4
tv467 = -236						; size = 4
tv539 = -232						; size = 4
tv463 = -228						; size = 4
tv537 = -224						; size = 4
tv459 = -220						; size = 4
tv535 = -216						; size = 4
tv455 = -212						; size = 4
tv533 = -208						; size = 4
tv451 = -204						; size = 4
tv447 = -200						; size = 4
tv531 = -196						; size = 4
tv443 = -192						; size = 4
tv529 = -188						; size = 4
tv439 = -184						; size = 4
tv527 = -180						; size = 4
tv435 = -176						; size = 4
tv525 = -172						; size = 4
tv431 = -168						; size = 4
tv523 = -164						; size = 4
tv427 = -160						; size = 4
tv521 = -156						; size = 4
tv423 = -152						; size = 4
tv519 = -148						; size = 4
tv419 = -144						; size = 4
tv415 = -140						; size = 4
tv517 = -136						; size = 4
tv411 = -132						; size = 4
tv515 = -128						; size = 4
tv407 = -124						; size = 4
tv513 = -120						; size = 4
tv403 = -116						; size = 4
tv511 = -112						; size = 4
tv399 = -108						; size = 4
tv509 = -104						; size = 4
tv395 = -100						; size = 4
tv507 = -96						; size = 4
tv391 = -92						; size = 4
tv505 = -88						; size = 4
tv387 = -84						; size = 4
tv383 = -80						; size = 4
tv503 = -76						; size = 4
tv379 = -72						; size = 4
tv501 = -68						; size = 4
tv375 = -64						; size = 4
tv499 = -60						; size = 4
tv371 = -56						; size = 4
tv497 = -52						; size = 4
tv367 = -48						; size = 4
tv495 = -44						; size = 4
tv363 = -40						; size = 4
tv493 = -36						; size = 4
tv359 = -32						; size = 4
tv491 = -28						; size = 4
tv355 = -24						; size = 4
__z$ = -20						; size = 4
__y$ = -16						; size = 4
__x$ = -12						; size = 4
__w$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
??DQuaternion@@QBE?AV0@ABV0@@Z PROC			; Quaternion::operator*, COMDAT
; _this$ = ecx

; 1010 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00011	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1011 : 		const float _w = (GetW() * r.GetW()) - (GetX() * r.GetX()) - (GetY() * r.GetY()) - (GetZ() * r.GetZ());

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00029	d9 5d e8	 fstp	 DWORD PTR tv355[ebp]
  0002c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv355[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00034	f3 0f 11 45 e4	 movss	 DWORD PTR tv491[ebp], xmm0
  00039	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  0003e	d9 5d e0	 fstp	 DWORD PTR tv359[ebp]
  00041	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv491[ebp]
  00046	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR tv359[ebp]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	f3 0f 11 45 dc	 movss	 DWORD PTR tv493[ebp], xmm0
  00053	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00058	d9 5d d8	 fstp	 DWORD PTR tv363[ebp]
  0005b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv363[ebp]
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00063	f3 0f 11 45 d4	 movss	 DWORD PTR tv495[ebp], xmm0
  00068	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  0006d	d9 5d d0	 fstp	 DWORD PTR tv367[ebp]
  00070	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR tv495[ebp]
  00075	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR tv367[ebp]
  0007a	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR tv493[ebp]
  0007f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	f3 0f 11 4d cc	 movss	 DWORD PTR tv497[ebp], xmm1
  0008b	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00090	d9 5d c8	 fstp	 DWORD PTR tv371[ebp]
  00093	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR tv371[ebp]
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0009b	f3 0f 11 45 c4	 movss	 DWORD PTR tv499[ebp], xmm0
  000a0	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  000a5	d9 5d c0	 fstp	 DWORD PTR tv375[ebp]
  000a8	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR tv499[ebp]
  000ad	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR tv375[ebp]
  000b2	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR tv497[ebp]
  000b7	f3 0f 5c c8	 subss	 xmm1, xmm0
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	f3 0f 11 4d bc	 movss	 DWORD PTR tv501[ebp], xmm1
  000c3	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  000c8	d9 5d b8	 fstp	 DWORD PTR tv379[ebp]
  000cb	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv379[ebp]
  000d0	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  000d3	f3 0f 11 45 b4	 movss	 DWORD PTR tv503[ebp], xmm0
  000d8	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  000dd	d9 5d b0	 fstp	 DWORD PTR tv383[ebp]
  000e0	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv503[ebp]
  000e5	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR tv383[ebp]
  000ea	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR tv501[ebp]
  000ef	f3 0f 5c c8	 subss	 xmm1, xmm0
  000f3	f3 0f 11 4d f8	 movss	 DWORD PTR __w$[ebp], xmm1

; 1012 : 		const float _x = (GetX() * r.GetW()) + (GetW() * r.GetX()) + (GetY() * r.GetZ()) - (GetZ() * r.GetY());

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00100	d9 5d ac	 fstp	 DWORD PTR tv387[ebp]
  00103	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv387[ebp]
  00108	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0010b	f3 0f 11 45 a8	 movss	 DWORD PTR tv505[ebp], xmm0
  00110	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00115	d9 5d a4	 fstp	 DWORD PTR tv391[ebp]
  00118	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv505[ebp]
  0011d	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR tv391[ebp]
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	f3 0f 11 45 a0	 movss	 DWORD PTR tv507[ebp], xmm0
  0012a	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  0012f	d9 5d 9c	 fstp	 DWORD PTR tv395[ebp]
  00132	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv395[ebp]
  00137	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0013a	f3 0f 11 45 98	 movss	 DWORD PTR tv509[ebp], xmm0
  0013f	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  00144	d9 5d 94	 fstp	 DWORD PTR tv399[ebp]
  00147	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv509[ebp]
  0014c	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR tv399[ebp]
  00151	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR tv507[ebp]
  00156	f3 0f 58 c8	 addss	 xmm1, xmm0
  0015a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	f3 0f 11 4d 90	 movss	 DWORD PTR tv511[ebp], xmm1
  00162	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  00167	d9 5d 8c	 fstp	 DWORD PTR tv403[ebp]
  0016a	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv403[ebp]
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00172	f3 0f 11 45 88	 movss	 DWORD PTR tv513[ebp], xmm0
  00177	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0017c	d9 5d 84	 fstp	 DWORD PTR tv407[ebp]
  0017f	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR tv513[ebp]
  00184	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR tv407[ebp]
  00189	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR tv511[ebp]
  0018e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00192	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	f3 0f 11 4d 80	 movss	 DWORD PTR tv515[ebp], xmm1
  0019a	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0019f	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv411[ebp]
  001a5	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv411[ebp]
  001ad	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  001b0	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR tv517[ebp], xmm0
  001b8	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  001bd	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR tv415[ebp]
  001c3	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv517[ebp]
  001cb	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR tv415[ebp]
  001d3	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR tv515[ebp]
  001d8	f3 0f 5c c8	 subss	 xmm1, xmm0
  001dc	f3 0f 11 4d f4	 movss	 DWORD PTR __x$[ebp], xmm1

; 1013 : 		const float _y = (GetY() * r.GetW()) + (GetW() * r.GetY()) + (GetZ() * r.GetX()) - (GetX() * r.GetZ());

  001e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  001e9	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR tv419[ebp]
  001ef	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR tv419[ebp]
  001f7	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  001fa	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv519[ebp], xmm0
  00202	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00207	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR tv423[ebp]
  0020d	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR tv519[ebp]
  00215	f3 0f 59 85 68
	ff ff ff	 mulss	 xmm0, DWORD PTR tv423[ebp]
  0021d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00220	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR tv521[ebp], xmm0
  00228	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  0022d	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR tv427[ebp]
  00233	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR tv427[ebp]
  0023b	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0023e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR tv523[ebp], xmm0
  00246	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  0024b	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv431[ebp]
  00251	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv523[ebp]
  00259	f3 0f 59 85 58
	ff ff ff	 mulss	 xmm0, DWORD PTR tv431[ebp]
  00261	f3 0f 10 8d 64
	ff ff ff	 movss	 xmm1, DWORD PTR tv521[ebp]
  00269	f3 0f 58 c8	 addss	 xmm1, xmm0
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00270	f3 0f 11 8d 54
	ff ff ff	 movss	 DWORD PTR tv525[ebp], xmm1
  00278	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0027d	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR tv435[ebp]
  00283	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv435[ebp]
  0028b	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0028e	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv527[ebp], xmm0
  00296	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  0029b	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv439[ebp]
  002a1	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv527[ebp]
  002a9	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR tv439[ebp]
  002b1	f3 0f 10 8d 54
	ff ff ff	 movss	 xmm1, DWORD PTR tv525[ebp]
  002b9	f3 0f 58 c8	 addss	 xmm1, xmm0
  002bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c0	f3 0f 11 8d 44
	ff ff ff	 movss	 DWORD PTR tv529[ebp], xmm1
  002c8	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  002cd	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv443[ebp]
  002d3	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv443[ebp]
  002db	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  002de	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv531[ebp], xmm0
  002e6	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  002eb	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR tv447[ebp]
  002f1	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv531[ebp]
  002f9	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR tv447[ebp]
  00301	f3 0f 10 8d 44
	ff ff ff	 movss	 xmm1, DWORD PTR tv529[ebp]
  00309	f3 0f 5c c8	 subss	 xmm1, xmm0
  0030d	f3 0f 11 4d f0	 movss	 DWORD PTR __y$[ebp], xmm1

; 1014 : 		const float _z = (GetZ() * r.GetW()) + (GetW() * r.GetZ()) + (GetX() * r.GetY()) - (GetY() * r.GetX());

  00312	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00315	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0031a	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR tv451[ebp]
  00320	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR tv451[ebp]
  00328	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0032b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv533[ebp], xmm0
  00333	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  00338	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR tv455[ebp]
  0033e	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv533[ebp]
  00346	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv455[ebp]
  0034e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00351	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv535[ebp], xmm0
  00359	e8 00 00 00 00	 call	 ?GetW@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetW
  0035e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv459[ebp]
  00364	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv459[ebp]
  0036c	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0036f	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR tv537[ebp], xmm0
  00377	e8 00 00 00 00	 call	 ?GetZ@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetZ
  0037c	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR tv463[ebp]
  00382	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR tv537[ebp]
  0038a	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv463[ebp]
  00392	f3 0f 10 8d 28
	ff ff ff	 movss	 xmm1, DWORD PTR tv535[ebp]
  0039a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0039e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a1	f3 0f 11 8d 18
	ff ff ff	 movss	 DWORD PTR tv539[ebp], xmm1
  003a9	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  003ae	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR tv467[ebp]
  003b4	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR tv467[ebp]
  003bc	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  003bf	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR tv541[ebp], xmm0
  003c7	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  003cc	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR tv471[ebp]
  003d2	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR tv541[ebp]
  003da	f3 0f 59 85 0c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv471[ebp]
  003e2	f3 0f 10 8d 18
	ff ff ff	 movss	 xmm1, DWORD PTR tv539[ebp]
  003ea	f3 0f 58 c8	 addss	 xmm1, xmm0
  003ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f1	f3 0f 11 8d 08
	ff ff ff	 movss	 DWORD PTR tv543[ebp], xmm1
  003f9	e8 00 00 00 00	 call	 ?GetY@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetY
  003fe	d9 9d 04 ff ff
	ff		 fstp	 DWORD PTR tv475[ebp]
  00404	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR tv475[ebp]
  0040c	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0040f	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv545[ebp], xmm0
  00417	e8 00 00 00 00	 call	 ?GetX@?$Vector4@M@@QBEMXZ ; Vector4<float>::GetX
  0041c	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv479[ebp]
  00422	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR tv545[ebp]
  0042a	f3 0f 59 85 fc
	fe ff ff	 mulss	 xmm0, DWORD PTR tv479[ebp]
  00432	f3 0f 10 8d 08
	ff ff ff	 movss	 xmm1, DWORD PTR tv543[ebp]
  0043a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0043e	f3 0f 11 4d ec	 movss	 DWORD PTR __z$[ebp], xmm1

; 1015 : 
; 1016 : 		return Quaternion(_x, _y, _z, _w);

  00443	51		 push	 ecx
  00444	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR __w$[ebp]
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	51		 push	 ecx
  0044f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR __z$[ebp]
  00454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00459	51		 push	 ecx
  0045a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR __y$[ebp]
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	51		 push	 ecx
  00465	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR __x$[ebp]
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00472	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@MMMM@Z ; Quaternion::Quaternion
  00477	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1017 : 	}

  0047a	5f		 pop	 edi
  0047b	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  00481	3b ec		 cmp	 ebp, esp
  00483	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00488	8b e5		 mov	 esp, ebp
  0048a	5d		 pop	 ebp
  0048b	c2 08 00	 ret	 8
??DQuaternion@@QBE?AV0@ABV0@@Z ENDP			; Quaternion::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.h
;	COMDAT ?GetLookAtRotation@Transform@@QAE?AVQuaternion@@ABVVector3f@@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 64
$T2 = -96						; size = 12
$T3 = -84						; size = 12
$T4 = -72						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_point$ = 12						; size = 4
_up$ = 16						; size = 4
?GetLookAtRotation@Transform@@QAE?AVQuaternion@@ABVVector3f@@0@Z PROC ; Transform::GetLookAtRotation, COMDAT
; _this$ = ecx

; 44   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00011	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 		return Quaternion(Matrix4f().InitRotationFromDirection((point - m_pos).Normalized(), up)); 

  0002b	8b 45 10	 mov	 eax, DWORD PTR _up$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00032	51		 push	 ecx
  00033	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00036	52		 push	 edx
  00037	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _point$[ebp]
  0003e	e8 00 00 00 00	 call	 ??GVector3f@@QBE?AV0@ABV0@@Z ; Vector3f::operator-
  00043	8b c8		 mov	 ecx, eax
  00045	e8 00 00 00 00	 call	 ?Normalized@Vector3f@@QBE?AV1@XZ ; Vector3f::Normalized
  0004a	50		 push	 eax
  0004b	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00051	51		 push	 ecx
  00052	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00055	e8 00 00 00 00	 call	 ??0?$Matrix4@M@@QAE@XZ	; Matrix4<float>::Matrix4<float>
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ?InitRotationFromDirection@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@0@Z ; Matrix4<float>::InitRotationFromDirection
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00065	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABV?$Matrix4@M@@@Z ; Quaternion::Quaternion
  0006a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 46   : 	}

  0006d	5f		 pop	 edi
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00071	33 cd		 xor	 ecx, ebp
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?GetLookAtRotation@Transform@@QAE?AVQuaternion@@ABVVector3f@@0@Z ENDP ; Transform::GetLookAtRotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasChanged@Transform@@QAE_NXZ PROC			; Transform::HasChanged
; _this$ = ecx

; 20   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	if(m_parent != 0 && m_parent->HasChanged())

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00015	74 16		 je	 SHORT $LN2@HasChanged
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0001d	e8 00 00 00 00	 call	 ?HasChanged@Transform@@QAE_NXZ ; Transform::HasChanged
  00022	0f b6 d0	 movzx	 edx, al
  00025	85 d2		 test	 edx, edx
  00027	74 04		 je	 SHORT $LN2@HasChanged

; 22   : 	{
; 23   : 		return true;

  00029	b0 01		 mov	 al, 1
  0002b	eb 55		 jmp	 SHORT $LN1@HasChanged
$LN2@HasChanged:

; 24   : 	}
; 25   : 	
; 26   : 	if(m_pos != m_oldPos)

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c0 64	 add	 eax, 100		; 00000064H
  00033	50		 push	 eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??9Vector3f@@QBE_NABV0@@Z ; Vector3f::operator!=
  0003c	0f b6 c8	 movzx	 ecx, al
  0003f	85 c9		 test	 ecx, ecx
  00041	74 04		 je	 SHORT $LN3@HasChanged

; 27   : 	{
; 28   : 		return true;

  00043	b0 01		 mov	 al, 1
  00045	eb 3b		 jmp	 SHORT $LN1@HasChanged
$LN3@HasChanged:

; 29   : 	}
; 30   : 
; 31   : 	if(m_rot != m_oldRot)

  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	83 c2 70	 add	 edx, 112		; 00000070H
  0004d	52		 push	 edx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00054	e8 00 00 00 00	 call	 ??9?$Vector@M$03@@QBE_NABV0@@Z ; Vector<float,4>::operator!=
  00059	0f b6 c0	 movzx	 eax, al
  0005c	85 c0		 test	 eax, eax
  0005e	74 04		 je	 SHORT $LN4@HasChanged

; 32   : 	{
; 33   : 		return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1e		 jmp	 SHORT $LN1@HasChanged
$LN4@HasChanged:

; 34   : 	}
; 35   : 	
; 36   : 	if(m_scale != m_oldScale)

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  0006f	0f 2e 82 80 00
	00 00		 ucomiss xmm0, DWORD PTR [edx+128]
  00076	9f		 lahf
  00077	f6 c4 44	 test	 ah, 68			; 00000044H
  0007a	7b 04		 jnp	 SHORT $LN5@HasChanged

; 37   : 	{
; 38   : 		return true;

  0007c	b0 01		 mov	 al, 1
  0007e	eb 02		 jmp	 SHORT $LN1@HasChanged
$LN5@HasChanged:

; 39   : 	}
; 40   : 		
; 41   : 	return false;

  00080	32 c0		 xor	 al, al
$LN1@HasChanged:

; 42   : }

  00082	83 c4 04	 add	 esp, 4
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?HasChanged@Transform@@QAE_NXZ ENDP			; Transform::HasChanged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_axis$ = 8						; size = 4
_angle$ = 12						; size = 4
?Rotate@Transform@@QAEXABVVector3f@@M@Z PROC		; Transform::Rotate
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	Rotate(Quaternion(axis, angle));

  0002a	51		 push	 ecx
  0002b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	8b 45 08	 mov	 eax, DWORD PTR _axis$[ebp]
  00038	50		 push	 eax
  00039	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0003c	e8 00 00 00 00	 call	 ??0Quaternion@@QAE@ABVVector3f@@M@Z ; Quaternion::Quaternion
  00041	50		 push	 eax
  00042	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?Rotate@Transform@@QAEXABVQuaternion@@@Z ; Transform::Rotate

; 64   : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?Rotate@Transform@@QAEXABVVector3f@@M@Z ENDP		; Transform::Rotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\transform.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_point$ = 8						; size = 4
_up$ = 12						; size = 4
?LookAt@Transform@@QAEXABVVector3f@@0@Z PROC		; Transform::LookAt
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 73   : 	m_rot = GetLookAtRotation(point, up);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _up$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00031	51		 push	 ecx
  00032	8d 55 e8	 lea	 edx, DWORD PTR $T1[ebp]
  00035	52		 push	 edx
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?GetLookAtRotation@Transform@@QAE?AVQuaternion@@ABVVector3f@@0@Z ; Transform::GetLookAtRotation
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00044	8b 10		 mov	 edx, DWORD PTR [eax]
  00046	89 11		 mov	 DWORD PTR [ecx], edx
  00048	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0004e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00051	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00054	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00057	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 74   : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
?LookAt@Transform@@QAEXABVVector3f@@0@Z ENDP		; Transform::LookAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??9?$Vector@M$03@@QBE_NABV0@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
??9?$Vector@M$03@@QBE_NABV0@@Z PROC			; Vector<float,4>::operator!=, COMDAT
; _this$ = ecx

; 176  : 	inline bool operator!=(const Vector<T,D>& r) const { return !operator==(r); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??8?$Vector@M$03@@QBE_NABV0@@Z ; Vector<float,4>::operator==
  00023	0f b6 c8	 movzx	 ecx, al
  00026	85 c9		 test	 ecx, ecx
  00028	75 09		 jne	 SHORT $LN3@operator
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00031	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  0003a	8a 45 f8	 mov	 al, BYTE PTR tv69[ebp]
  0003d	83 c4 08	 add	 esp, 8
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??9?$Vector@M$03@@QBE_NABV0@@Z ENDP			; Vector<float,4>::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?Normalized@?$Vector@M$03@@QBE?AV1@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Normalized@?$Vector@M$03@@QBE?AV1@XZ PROC		; Vector<float,4>::Normalized, COMDAT
; _this$ = ecx

; 88   : 	inline Vector<T,D> Normalized() const { return *this/Length(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?Length@?$Vector@M$03@@QBEMXZ ; Vector<float,4>::Length
  0001f	d9 5d f8	 fstp	 DWORD PTR $T1[ebp]
  00022	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	51		 push	 ecx
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??K?$Vector@M$03@@QBE?AV0@ABM@Z ; Vector<float,4>::operator/
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?Normalized@?$Vector@M$03@@QBE?AV1@XZ ENDP		; Vector<float,4>::Normalized
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?Length@?$Vector@M$03@@QBEMXZ
_TEXT	SEGMENT
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?Length@?$Vector@M$03@@QBEMXZ PROC			; Vector<float,4>::Length, COMDAT
; _this$ = ecx

; 87   : 	inline T Length() const { return sqrt(LengthSq()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?LengthSq@?$Vector@M$03@@QBEMXZ ; Vector<float,4>::LengthSq
  00020	8b f4		 mov	 esi, esp
  00022	83 ec 08	 sub	 esp, 8
  00025	dd 1c 24	 fstp	 QWORD PTR [esp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sqrt
  0002e	83 c4 08	 add	 esp, 8
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	d9 5d f8	 fstp	 DWORD PTR tv79[ebp]
  0003b	d9 45 f8	 fld	 DWORD PTR tv79[ebp]
  0003e	5e		 pop	 esi
  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?Length@?$Vector@M$03@@QBEMXZ ENDP			; Vector<float,4>::Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?Dot@?$Vector@M$03@@QBEMABV1@@Z
_TEXT	SEGMENT
tv86 = -24						; size = 4
tv91 = -20						; size = 4
tv81 = -16						; size = 4
_i$1 = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
?Dot@?$Vector@M$03@@QBEMABV1@@Z PROC			; Vector<float,4>::Dot, COMDAT
; _this$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 		T result = T(0);

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00028	f3 0f 11 45 f8	 movss	 DWORD PTR _result$[ebp], xmm0

; 58   : 		for(unsigned int i = 0; i < D; i++)

  0002d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00034	eb 09		 jmp	 SHORT $LN4@Dot
$LN2@Dot:
  00036	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Dot:
  0003f	83 7d f4 04	 cmp	 DWORD PTR _i$1[ebp], 4
  00043	73 3e		 jae	 SHORT $LN3@Dot

; 59   : 			result += (*this)[i] * r[i];

  00045	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00048	51		 push	 ecx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  00051	d9 5d f0	 fstp	 DWORD PTR tv81[ebp]
  00054	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv81[ebp]
  00059	8b 55 f4	 mov	 edx, DWORD PTR _i$1[ebp]
  0005c	52		 push	 edx
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00060	f3 0f 11 45 ec	 movss	 DWORD PTR tv91[ebp], xmm0
  00065	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  0006a	d9 5d e8	 fstp	 DWORD PTR tv86[ebp]
  0006d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv91[ebp]
  00072	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR tv86[ebp]
  00077	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _result$[ebp]
  0007c	f3 0f 11 45 f8	 movss	 DWORD PTR _result$[ebp], xmm0
  00081	eb b3		 jmp	 SHORT $LN2@Dot
$LN3@Dot:

; 60   : 			
; 61   : 		return result;

  00083	d9 45 f8	 fld	 DWORD PTR _result$[ebp]

; 62   : 	}

  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?Dot@?$Vector@M$03@@QBEMABV1@@Z ENDP			; Vector<float,4>::Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?InitRotationFromDirection@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@0@Z
_TEXT	SEGMENT
_v$ = -100						; size = 12
$T1 = -84						; size = 12
$T2 = -72						; size = 12
_u$ = -56						; size = 12
$T3 = -40						; size = 12
_n$ = -24						; size = 12
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_forward$ = 12						; size = 4
_up$ = 16						; size = 4
?InitRotationFromDirection@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@0@Z PROC ; Matrix4<float>::InitRotationFromDirection, COMDAT
; _this$ = ecx

; 631  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  0000b	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 632  : 		Vector3<T> n = forward.Normalized();

  00025	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00028	50		 push	 eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _forward$[ebp]
  0002c	e8 00 00 00 00	 call	 ?Normalized@?$Vector@M$02@@QBE?AV1@XZ ; Vector<float,3>::Normalized
  00031	50		 push	 eax
  00032	8d 4d e8	 lea	 ecx, DWORD PTR _n$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$Vector3@M@@QAE@ABV?$Vector@M$02@@@Z ; Vector3<float>::Vector3<float>

; 633  : 		Vector3<T> u = Vector3<T>(up.Normalized()).Cross(n);

  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _n$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 c8	 lea	 edx, DWORD PTR _u$[ebp]
  00041	52		 push	 edx
  00042	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  00045	50		 push	 eax
  00046	8b 4d 10	 mov	 ecx, DWORD PTR _up$[ebp]
  00049	e8 00 00 00 00	 call	 ?Normalized@?$Vector@M$02@@QBE?AV1@XZ ; Vector<float,3>::Normalized
  0004e	50		 push	 eax
  0004f	8d 4d ac	 lea	 ecx, DWORD PTR $T1[ebp]
  00052	e8 00 00 00 00	 call	 ??0?$Vector3@M@@QAE@ABV?$Vector@M$02@@@Z ; Vector3<float>::Vector3<float>
  00057	8b c8		 mov	 ecx, eax
  00059	e8 00 00 00 00	 call	 ?Cross@?$Vector3@M@@QBE?AV1@ABV1@@Z ; Vector3<float>::Cross

; 634  : 		Vector3<T> v = n.Cross(u);

  0005e	8d 4d c8	 lea	 ecx, DWORD PTR _u$[ebp]
  00061	51		 push	 ecx
  00062	8d 55 9c	 lea	 edx, DWORD PTR _v$[ebp]
  00065	52		 push	 edx
  00066	8d 4d e8	 lea	 ecx, DWORD PTR _n$[ebp]
  00069	e8 00 00 00 00	 call	 ?Cross@?$Vector3@M@@QBE?AV1@ABV1@@Z ; Vector3<float>::Cross

; 635  : 		
; 636  : 		return InitRotationFromVectors(n,v,u);

  0006e	8d 45 c8	 lea	 eax, DWORD PTR _u$[ebp]
  00071	50		 push	 eax
  00072	8d 4d 9c	 lea	 ecx, DWORD PTR _v$[ebp]
  00075	51		 push	 ecx
  00076	8d 55 e8	 lea	 edx, DWORD PTR _n$[ebp]
  00079	52		 push	 edx
  0007a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?InitRotationFromVectors@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@00@Z ; Matrix4<float>::InitRotationFromVectors
  00086	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 	}

  00089	52		 push	 edx
  0008a	8b cd		 mov	 ecx, ebp
  0008c	50		 push	 eax
  0008d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@InitRotati
  00093	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00098	58		 pop	 eax
  00099	5a		 pop	 edx
  0009a	5f		 pop	 edi
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	83 c4 68	 add	 esp, 104		; 00000068H
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 0c 00	 ret	 12			; 0000000cH
  000b5	0f 1f 00	 npad	 3
$LN7@InitRotati:
  000b8	03 00 00 00	 DD	 3
  000bc	00 00 00 00	 DD	 $LN6@InitRotati
$LN6@InitRotati:
  000c0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c4	0c 00 00 00	 DD	 12			; 0000000cH
  000c8	00 00 00 00	 DD	 $LN3@InitRotati
  000cc	c8 ff ff ff	 DD	 -56			; ffffffc8H
  000d0	0c 00 00 00	 DD	 12			; 0000000cH
  000d4	00 00 00 00	 DD	 $LN4@InitRotati
  000d8	9c ff ff ff	 DD	 -100			; ffffff9cH
  000dc	0c 00 00 00	 DD	 12			; 0000000cH
  000e0	00 00 00 00	 DD	 $LN5@InitRotati
$LN5@InitRotati:
  000e4	76		 DB	 118			; 00000076H
  000e5	00		 DB	 0
$LN4@InitRotati:
  000e6	75		 DB	 117			; 00000075H
  000e7	00		 DB	 0
$LN3@InitRotati:
  000e8	6e		 DB	 110			; 0000006eH
  000e9	00		 DB	 0
?InitRotationFromDirection@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@0@Z ENDP ; Matrix4<float>::InitRotationFromDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?InitRotationFromVectors@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@00@Z
_TEXT	SEGMENT
tv338 = -40						; size = 4
tv336 = -36						; size = 4
tv334 = -32						; size = 4
tv332 = -28						; size = 4
tv330 = -24						; size = 4
tv328 = -20						; size = 4
tv326 = -16						; size = 4
tv324 = -12						; size = 4
tv322 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_n$ = 12						; size = 4
_v$ = 16						; size = 4
_u$ = 20						; size = 4
?InitRotationFromVectors@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@00@Z PROC ; Matrix4<float>::InitRotationFromVectors, COMDAT
; _this$ = ecx

; 621  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 622  : 		(*this)[0][0] = u.GetX();   (*this)[1][0] = u.GetY();   (*this)[2][0] = u.GetZ();   (*this)[3][0] = T(0);

  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _u$[ebp]
  0001f	e8 00 00 00 00	 call	 ?GetX@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetX
  00024	6a 00		 push	 0
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	d9 5d f8	 fstp	 DWORD PTR tv322[ebp]
  0002c	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00031	b9 04 00 00 00	 mov	 ecx, 4
  00036	6b d1 00	 imul	 edx, ecx, 0
  00039	d9 45 f8	 fld	 DWORD PTR tv322[ebp]
  0003c	d9 1c 10	 fstp	 DWORD PTR [eax+edx]
  0003f	8b 4d 14	 mov	 ecx, DWORD PTR _u$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetY@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetY
  00047	6a 01		 push	 1
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	d9 5d f4	 fstp	 DWORD PTR tv324[ebp]
  0004f	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00054	b9 04 00 00 00	 mov	 ecx, 4
  00059	6b d1 00	 imul	 edx, ecx, 0
  0005c	d9 45 f4	 fld	 DWORD PTR tv324[ebp]
  0005f	d9 1c 10	 fstp	 DWORD PTR [eax+edx]
  00062	8b 4d 14	 mov	 ecx, DWORD PTR _u$[ebp]
  00065	e8 00 00 00 00	 call	 ?GetZ@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetZ
  0006a	6a 02		 push	 2
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	d9 5d f0	 fstp	 DWORD PTR tv326[ebp]
  00072	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00077	b9 04 00 00 00	 mov	 ecx, 4
  0007c	6b d1 00	 imul	 edx, ecx, 0
  0007f	d9 45 f0	 fld	 DWORD PTR tv326[ebp]
  00082	d9 1c 10	 fstp	 DWORD PTR [eax+edx]
  00085	6a 03		 push	 3
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	6b d1 00	 imul	 edx, ecx, 0
  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0009f	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 623  : 		(*this)[0][1] = v.GetX();   (*this)[1][1] = v.GetY();   (*this)[2][1] = v.GetZ();   (*this)[3][1] = T(0);

  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000a7	e8 00 00 00 00	 call	 ?GetX@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetX
  000ac	6a 00		 push	 0
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	d9 5d ec	 fstp	 DWORD PTR tv328[ebp]
  000b4	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  000b9	b9 04 00 00 00	 mov	 ecx, 4
  000be	c1 e1 00	 shl	 ecx, 0
  000c1	d9 45 ec	 fld	 DWORD PTR tv328[ebp]
  000c4	d9 1c 08	 fstp	 DWORD PTR [eax+ecx]
  000c7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000ca	e8 00 00 00 00	 call	 ?GetY@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetY
  000cf	6a 01		 push	 1
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	d9 5d e8	 fstp	 DWORD PTR tv330[ebp]
  000d7	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  000dc	ba 04 00 00 00	 mov	 edx, 4
  000e1	c1 e2 00	 shl	 edx, 0
  000e4	d9 45 e8	 fld	 DWORD PTR tv330[ebp]
  000e7	d9 1c 10	 fstp	 DWORD PTR [eax+edx]
  000ea	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000ed	e8 00 00 00 00	 call	 ?GetZ@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetZ
  000f2	6a 02		 push	 2
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	d9 5d e4	 fstp	 DWORD PTR tv332[ebp]
  000fa	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  000ff	b9 04 00 00 00	 mov	 ecx, 4
  00104	c1 e1 00	 shl	 ecx, 0
  00107	d9 45 e4	 fld	 DWORD PTR tv332[ebp]
  0010a	d9 1c 08	 fstp	 DWORD PTR [eax+ecx]
  0010d	6a 03		 push	 3
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00117	ba 04 00 00 00	 mov	 edx, 4
  0011c	c1 e2 00	 shl	 edx, 0
  0011f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00127	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 624  : 		(*this)[0][2] = n.GetX();   (*this)[1][2] = n.GetY();   (*this)[2][2] = n.GetZ();   (*this)[3][2] = T(0);

  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  0012f	e8 00 00 00 00	 call	 ?GetX@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetX
  00134	6a 00		 push	 0
  00136	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	d9 5d e0	 fstp	 DWORD PTR tv334[ebp]
  0013c	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00141	b9 04 00 00 00	 mov	 ecx, 4
  00146	d1 e1		 shl	 ecx, 1
  00148	d9 45 e0	 fld	 DWORD PTR tv334[ebp]
  0014b	d9 1c 08	 fstp	 DWORD PTR [eax+ecx]
  0014e	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00151	e8 00 00 00 00	 call	 ?GetY@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetY
  00156	6a 01		 push	 1
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	d9 5d dc	 fstp	 DWORD PTR tv336[ebp]
  0015e	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00163	ba 04 00 00 00	 mov	 edx, 4
  00168	d1 e2		 shl	 edx, 1
  0016a	d9 45 dc	 fld	 DWORD PTR tv336[ebp]
  0016d	d9 1c 10	 fstp	 DWORD PTR [eax+edx]
  00170	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00173	e8 00 00 00 00	 call	 ?GetZ@?$Vector3@M@@QBEMXZ ; Vector3<float>::GetZ
  00178	6a 02		 push	 2
  0017a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	d9 5d d8	 fstp	 DWORD PTR tv338[ebp]
  00180	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00185	b9 04 00 00 00	 mov	 ecx, 4
  0018a	d1 e1		 shl	 ecx, 1
  0018c	d9 45 d8	 fld	 DWORD PTR tv338[ebp]
  0018f	d9 1c 08	 fstp	 DWORD PTR [eax+ecx]
  00192	6a 03		 push	 3
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  0019c	ba 04 00 00 00	 mov	 edx, 4
  001a1	d1 e2		 shl	 edx, 1
  001a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  001ab	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 625  : 		(*this)[0][3] = T(0);       (*this)[1][3] = T(0);       (*this)[2][3] = T(0);       (*this)[3][3] = T(1);  

  001b0	6a 00		 push	 0
  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  001ba	b9 04 00 00 00	 mov	 ecx, 4
  001bf	6b d1 03	 imul	 edx, ecx, 3
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  001ca	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  001cf	6a 01		 push	 1
  001d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  001d9	b9 04 00 00 00	 mov	 ecx, 4
  001de	6b d1 03	 imul	 edx, ecx, 3
  001e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  001e9	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  001ee	6a 02		 push	 2
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f3	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  001f8	b9 04 00 00 00	 mov	 ecx, 4
  001fd	6b d1 03	 imul	 edx, ecx, 3
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00208	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0020d	6a 03		 push	 3
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	e8 00 00 00 00	 call	 ??A?$Matrix@M$03@@QAEPAMH@Z ; Matrix<float,4>::operator[]
  00217	b9 04 00 00 00	 mov	 ecx, 4
  0021c	6b d1 03	 imul	 edx, ecx, 3
  0021f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00227	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 626  : 		
; 627  : 		return *this;

  0022c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00231	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00234	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00237	f3 a5		 rep movsd
  00239	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 628  : 	}

  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	83 c4 28	 add	 esp, 40			; 00000028H
  00241	3b ec		 cmp	 ebp, esp
  00243	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c2 10 00	 ret	 16			; 00000010H
?InitRotationFromVectors@?$Matrix4@M@@QAE?AV1@ABV?$Vector3@M@@00@Z ENDP ; Matrix4<float>::InitRotationFromVectors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??8?$Vector@M$03@@QBE_NABV0@@Z
_TEXT	SEGMENT
tv84 = -20						; size = 4
tv91 = -16						; size = 4
tv79 = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 4
??8?$Vector@M$03@@QBE_NABV0@@Z PROC			; Vector<float,4>::operator==, COMDAT
; _this$ = ecx

; 169  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 		for(unsigned int i = 0; i < D; i++)

  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00024	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00026	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@operator:
  0002f	83 7d f8 04	 cmp	 DWORD PTR _i$1[ebp], 4
  00033	73 3d		 jae	 SHORT $LN3@operator

; 171  : 			if((*this)[i] != r[i])

  00035	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  00038	51		 push	 ecx
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  00041	d9 5d f4	 fstp	 DWORD PTR tv79[ebp]
  00044	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv79[ebp]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  0004c	52		 push	 edx
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00050	f3 0f 11 45 f0	 movss	 DWORD PTR tv91[ebp], xmm0
  00055	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QBEMI@Z ; Vector<float,4>::operator[]
  0005a	d9 5d ec	 fstp	 DWORD PTR tv84[ebp]
  0005d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv91[ebp]
  00062	0f 2e 45 ec	 ucomiss xmm0, DWORD PTR tv84[ebp]
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7b 04		 jnp	 SHORT $LN5@operator

; 172  : 				return false;

  0006c	32 c0		 xor	 al, al
  0006e	eb 04		 jmp	 SHORT $LN1@operator
$LN5@operator:

; 173  : 		return true;

  00070	eb b4		 jmp	 SHORT $LN2@operator
$LN3@operator:
  00072	b0 01		 mov	 al, 1
$LN1@operator:

; 174  : 	}

  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
??8?$Vector@M$03@@QBE_NABV0@@Z ENDP			; Vector<float,4>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ??K?$Vector@M$03@@QBE?AV0@ABM@Z
_TEXT	SEGMENT
tv93 = -40						; size = 4
_i$1 = -36						; size = 4
_result$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
??K?$Vector@M$03@@QBE?AV0@ABM@Z PROC			; Vector<float,4>::operator/, COMDAT
; _this$ = ecx

; 125  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000b	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 126  : 		Vector<T, D> result;

  00025	8d 4d e4	 lea	 ecx, DWORD PTR _result$[ebp]
  00028	e8 00 00 00 00	 call	 ??0?$Vector@M$03@@QAE@XZ ; Vector<float,4>::Vector<float,4>

; 127  : 		for(unsigned int i = 0; i < D; i++)

  0002d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00034	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00036	8b 45 dc	 mov	 eax, DWORD PTR _i$1[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 dc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@operator:
  0003f	83 7d dc 04	 cmp	 DWORD PTR _i$1[ebp], 4
  00043	73 2e		 jae	 SHORT $LN3@operator

; 128  : 			result[i] = values[i] / r;

  00045	8b 4d dc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00048	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _r$[ebp]
  0004e	f3 0f 10 04 8a	 movss	 xmm0, DWORD PTR [edx+ecx*4]
  00053	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  00057	8b 4d dc	 mov	 ecx, DWORD PTR _i$1[ebp]
  0005a	51		 push	 ecx
  0005b	8d 4d e4	 lea	 ecx, DWORD PTR _result$[ebp]
  0005e	f3 0f 11 45 d8	 movss	 DWORD PTR tv93[ebp], xmm0
  00063	e8 00 00 00 00	 call	 ??A?$Vector@M$03@@QAEAAMI@Z ; Vector<float,4>::operator[]
  00068	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv93[ebp]
  0006d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00071	eb c3		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 129  : 		
; 130  : 		return result;

  00073	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00076	8b 45 e4	 mov	 eax, DWORD PTR _result$[ebp]
  00079	89 02		 mov	 DWORD PTR [edx], eax
  0007b	8b 4d e8	 mov	 ecx, DWORD PTR _result$[ebp+4]
  0007e	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00081	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp+8]
  00084	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _result$[ebp+12]
  0008a	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0008d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 131  : 	}

  00090	52		 push	 edx
  00091	8b cd		 mov	 ecx, ebp
  00093	50		 push	 eax
  00094	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@operator
  0009a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009f	58		 pop	 eax
  000a0	5a		 pop	 edx
  000a1	5f		 pop	 edi
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	83 c4 28	 add	 esp, 40			; 00000028H
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
$LN8@operator:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN7@operator
$LN7@operator:
  000c4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000c8	10 00 00 00	 DD	 16			; 00000010H
  000cc	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  000d0	72		 DB	 114			; 00000072H
  000d1	65		 DB	 101			; 00000065H
  000d2	73		 DB	 115			; 00000073H
  000d3	75		 DB	 117			; 00000075H
  000d4	6c		 DB	 108			; 0000006cH
  000d5	74		 DB	 116			; 00000074H
  000d6	00		 DB	 0
??K?$Vector@M$03@@QBE?AV0@ABM@Z ENDP			; Vector<float,4>::operator/
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?LengthSq@?$Vector@M$03@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LengthSq@?$Vector@M$03@@QBEMXZ PROC			; Vector<float,4>::LengthSq, COMDAT
; _this$ = ecx

; 86   : 	inline T LengthSq() const { return this->Dot(*this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Dot@?$Vector@M$03@@QBEMABV1@@Z ; Vector<float,4>::Dot
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?LengthSq@?$Vector@M$03@@QBEMXZ ENDP			; Vector<float,4>::LengthSq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\math3d.h
;	COMDAT ?Cross@?$Vector3@M@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT
tv251 = -100						; size = 4
tv277 = -96						; size = 4
tv247 = -92						; size = 4
tv275 = -88						; size = 4
tv243 = -84						; size = 4
tv273 = -80						; size = 4
tv239 = -76						; size = 4
tv235 = -72						; size = 4
tv271 = -68						; size = 4
tv231 = -64						; size = 4
tv269 = -60						; size = 4
tv227 = -56						; size = 4
tv267 = -52						; size = 4
tv223 = -48						; size = 4
tv219 = -44						; size = 4
tv265 = -40						; size = 4
tv215 = -36						; size = 4
tv263 = -32						; size = 4
tv211 = -28						; size = 4
tv261 = -24						; size = 4
tv207 = -20						; size = 4
_z$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_r$ = 12						; size = 4
?Cross@?$Vector3@M@@QBE?AV1@ABV1@@Z PROC		; Vector3<float>::Cross, COMDAT
; _this$ = ecx

; 246  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000b	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		T x = (*this)[1] * r[2] - (*this)[2] * r[1];

  0001b	6a 01		 push	 1
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  00025	d9 5d ec	 fstp	 DWORD PTR tv207[ebp]
  00028	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv207[ebp]
  0002d	6a 02		 push	 2
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00032	f3 0f 11 45 e8	 movss	 DWORD PTR tv261[ebp], xmm0
  00037	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  0003c	d9 5d e4	 fstp	 DWORD PTR tv211[ebp]
  0003f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv261[ebp]
  00044	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR tv211[ebp]
  00049	6a 02		 push	 2
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	f3 0f 11 45 e0	 movss	 DWORD PTR tv263[ebp], xmm0
  00053	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  00058	d9 5d dc	 fstp	 DWORD PTR tv215[ebp]
  0005b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv215[ebp]
  00060	6a 01		 push	 1
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00065	f3 0f 11 45 d8	 movss	 DWORD PTR tv265[ebp], xmm0
  0006a	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  0006f	d9 5d d4	 fstp	 DWORD PTR tv219[ebp]
  00072	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv265[ebp]
  00077	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR tv219[ebp]
  0007c	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR tv263[ebp]
  00081	f3 0f 5c c8	 subss	 xmm1, xmm0
  00085	f3 0f 11 4d f8	 movss	 DWORD PTR _x$[ebp], xmm1

; 248  : 		T y = (*this)[2] * r[0] - (*this)[0] * r[2];

  0008a	6a 02		 push	 2
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  00094	d9 5d d0	 fstp	 DWORD PTR tv223[ebp]
  00097	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv223[ebp]
  0009c	6a 00		 push	 0
  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  000a1	f3 0f 11 45 cc	 movss	 DWORD PTR tv267[ebp], xmm0
  000a6	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  000ab	d9 5d c8	 fstp	 DWORD PTR tv227[ebp]
  000ae	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR tv267[ebp]
  000b3	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR tv227[ebp]
  000b8	6a 00		 push	 0
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	f3 0f 11 45 c4	 movss	 DWORD PTR tv269[ebp], xmm0
  000c2	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  000c7	d9 5d c0	 fstp	 DWORD PTR tv231[ebp]
  000ca	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR tv231[ebp]
  000cf	6a 02		 push	 2
  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  000d4	f3 0f 11 45 bc	 movss	 DWORD PTR tv271[ebp], xmm0
  000d9	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  000de	d9 5d b8	 fstp	 DWORD PTR tv235[ebp]
  000e1	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR tv271[ebp]
  000e6	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR tv235[ebp]
  000eb	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR tv269[ebp]
  000f0	f3 0f 5c c8	 subss	 xmm1, xmm0
  000f4	f3 0f 11 4d f4	 movss	 DWORD PTR _y$[ebp], xmm1

; 249  : 		T z = (*this)[0] * r[1] - (*this)[1] * r[0];

  000f9	6a 00		 push	 0
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  00103	d9 5d b4	 fstp	 DWORD PTR tv239[ebp]
  00106	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv239[ebp]
  0010b	6a 01		 push	 1
  0010d	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00110	f3 0f 11 45 b0	 movss	 DWORD PTR tv273[ebp], xmm0
  00115	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  0011a	d9 5d ac	 fstp	 DWORD PTR tv243[ebp]
  0011d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR tv273[ebp]
  00122	f3 0f 59 45 ac	 mulss	 xmm0, DWORD PTR tv243[ebp]
  00127	6a 01		 push	 1
  00129	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	f3 0f 11 45 a8	 movss	 DWORD PTR tv275[ebp], xmm0
  00131	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  00136	d9 5d a4	 fstp	 DWORD PTR tv247[ebp]
  00139	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv247[ebp]
  0013e	6a 00		 push	 0
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00143	f3 0f 11 45 a0	 movss	 DWORD PTR tv277[ebp], xmm0
  00148	e8 00 00 00 00	 call	 ??A?$Vector@M$02@@QBEMI@Z ; Vector<float,3>::operator[]
  0014d	d9 5d 9c	 fstp	 DWORD PTR tv251[ebp]
  00150	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv277[ebp]
  00155	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR tv251[ebp]
  0015a	f3 0f 10 4d a8	 movss	 xmm1, DWORD PTR tv275[ebp]
  0015f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00163	f3 0f 11 4d f0	 movss	 DWORD PTR _z$[ebp], xmm1

; 250  : 
; 251  : 		return Vector3<T>(x, y, z);

  00168	51		 push	 ecx
  00169	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _z$[ebp]
  0016e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00173	51		 push	 ecx
  00174	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	51		 push	 ecx
  0017f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0018c	e8 00 00 00 00	 call	 ??0?$Vector3@M@@QAE@MMM@Z ; Vector3<float>::Vector3<float>
  00191	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 252  : 	}

  00194	5f		 pop	 edi
  00195	83 c4 64	 add	 esp, 100		; 00000064H
  00198	3b ec		 cmp	 ebp, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 08 00	 ret	 8
?Cross@?$Vector3@M@@QBE?AV1@ABV1@@Z ENDP		; Vector3<float>::Cross
_TEXT	ENDS
END
