; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\core\util.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1EM@MEFKBKGF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; `string'
PUBLIC	??_C@_1MI@HNCOPGEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
EXTRN	__imp__SDL_GetPrefPath:PROC
EXTRN	__imp__tmpnam:PROC
EXTRN	__imp__system:PROC
EXTRN	__imp__SDL_Delay:PROC
EXTRN	__imp__remove:PROC
EXTRN	__imp__SDL_strcmp:PROC
EXTRN	__imp__SDL_strdup:PROC
EXTRN	__imp__SDL_free:PROC
EXTRN	__imp_??Bios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?eof@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
;	COMDAT ??_C@_1MI@HNCOPGEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MI@HNCOPGEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'=', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@MEFKBKGF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
CONST	SEGMENT
??_C@_1EM@MEFKBKGF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
$SG4294888373 DB 00H
	ORG $+1
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294888374 DB './data/', 00H
$SG4294888372 DB ' >> ', 00H
	ORG $+3
$SG4294888370 DB 'python\python.exe data/tasks/', 00H
	ORG $+2
$SG4294888371 DB '.py ', 00H
	ORG $+3
$SG4294888330 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294888331 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294888328 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
$SG4294888329 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294888326 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
	ORG $+1
$SG4294888327 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
PUBLIC	??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
PUBLIC	??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>
PUBLIC	??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
PUBLIC	??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
PUBLIC	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Util::ssystem
PUBLIC	?ResourcePath@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Util::ResourcePath
PUBLIC	?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z ; Util::ExecuteTask
PUBLIC	?Sleep@Util@@YAXH@Z				; Util::Sleep
PUBLIC	?Init@Util@@YAXPBD0@Z				; Util::Init
PUBLIC	?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Util::ParseVector3
PUBLIC	?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z ; Util::Split
PUBLIC	?s_ResourcePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s_ResourcePath
?s_ResourcePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 01cH DUP (?) ; s_ResourcePath
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$4
__ehfuncinfo$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$3
__ehfuncinfo$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z$1
?s_ResourcePath$initializer$@@3P6AXXZA DD FLAT:??__Es_ResourcePath@@YAXXZ ; s_ResourcePath$initializer$
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
tv128 = -96						; size = 4
tv65 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 28
_end$ = -56						; size = 4
_start$ = -52						; size = 4
_strLength$ = -48					; size = 4
_cstr$ = -44						; size = 4
_elems$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_delim$ = 16						; size = 1
?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z PROC ; Util::Split

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 90   : 	std::vector<std::string> elems;

  0003f	8d 4d dc	 lea	 ecx, DWORD PTR _elems$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 91   :         
; 92   :     const char* cstr = s.c_str();

  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _s$[ebp]
  00051	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00056	89 45 d4	 mov	 DWORD PTR _cstr$[ebp], eax

; 93   :     unsigned int strLength = (unsigned int)s.length();

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00061	89 45 d0	 mov	 DWORD PTR _strLength$[ebp], eax

; 94   :     unsigned int start = 0;

  00064	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _start$[ebp], 0

; 95   :     unsigned int end = 0;

  0006b	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _end$[ebp], 0
$LN2@Split:

; 96   :         
; 97   :     while(end <= strLength)

  00072	8b 45 c8	 mov	 eax, DWORD PTR _end$[ebp]
  00075	3b 45 d0	 cmp	 eax, DWORD PTR _strLength$[ebp]
  00078	77 73		 ja	 SHORT $LN3@Split
$LN4@Split:

; 98   :     {
; 99   :         while(end <= strLength)

  0007a	8b 4d c8	 mov	 ecx, DWORD PTR _end$[ebp]
  0007d	3b 4d d0	 cmp	 ecx, DWORD PTR _strLength$[ebp]
  00080	77 1e		 ja	 SHORT $LN5@Split

; 100  :         {
; 101  :             if(cstr[end] == delim)

  00082	8b 55 d4	 mov	 edx, DWORD PTR _cstr$[ebp]
  00085	03 55 c8	 add	 edx, DWORD PTR _end$[ebp]
  00088	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0008b	0f be 4d 10	 movsx	 ecx, BYTE PTR _delim$[ebp]
  0008f	3b c1		 cmp	 eax, ecx
  00091	75 02		 jne	 SHORT $LN6@Split

; 102  :                 break;

  00093	eb 0b		 jmp	 SHORT $LN5@Split
$LN6@Split:

; 103  :             end++;

  00095	8b 55 c8	 mov	 edx, DWORD PTR _end$[ebp]
  00098	83 c2 01	 add	 edx, 1
  0009b	89 55 c8	 mov	 DWORD PTR _end$[ebp], edx

; 104  :         }

  0009e	eb da		 jmp	 SHORT $LN4@Split
$LN5@Split:

; 105  :             
; 106  :         elems.push_back(s.substr(start, end - start));

  000a0	8b 45 c8	 mov	 eax, DWORD PTR _end$[ebp]
  000a3	2b 45 cc	 sub	 eax, DWORD PTR _start$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d cc	 mov	 ecx, DWORD PTR _start$[ebp]
  000aa	51		 push	 ecx
  000ab	8d 55 ac	 lea	 edx, DWORD PTR $T3[ebp]
  000ae	52		 push	 edx
  000af	8b 4d 0c	 mov	 ecx, DWORD PTR _s$[ebp]
  000b2	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000b7	89 45 a4	 mov	 DWORD PTR tv65[ebp], eax
  000ba	8b 45 a4	 mov	 eax, DWORD PTR tv65[ebp]
  000bd	89 45 a0	 mov	 DWORD PTR tv128[ebp], eax
  000c0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c4	8b 4d a0	 mov	 ecx, DWORD PTR tv128[ebp]
  000c7	51		 push	 ecx
  000c8	8d 4d dc	 lea	 ecx, DWORD PTR _elems$[ebp]
  000cb	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  000d0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d4	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  000d7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 107  :         start = end + 1;

  000dc	8b 55 c8	 mov	 edx, DWORD PTR _end$[ebp]
  000df	83 c2 01	 add	 edx, 1
  000e2	89 55 cc	 mov	 DWORD PTR _start$[ebp], edx

; 108  :         end = start;

  000e5	8b 45 cc	 mov	 eax, DWORD PTR _start$[ebp]
  000e8	89 45 c8	 mov	 DWORD PTR _end$[ebp], eax

; 109  :     }

  000eb	eb 85		 jmp	 SHORT $LN2@Split
$LN3@Split:

; 110  :         
; 111  :     return elems;

  000ed	8d 4d dc	 lea	 ecx, DWORD PTR _elems$[ebp]
  000f0	51		 push	 ecx
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000f4	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000f9	8b 55 a8	 mov	 edx, DWORD PTR $T2[ebp]
  000fc	83 ca 01	 or	 edx, 1
  000ff	89 55 a8	 mov	 DWORD PTR $T2[ebp], edx
  00102	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00109	8d 4d dc	 lea	 ecx, DWORD PTR _elems$[ebp]
  0010c	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00111	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 112  : }

  00114	52		 push	 edx
  00115	8b cd		 mov	 ecx, ebp
  00117	50		 push	 eax
  00118	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@Split
  0011e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00123	58		 pop	 eax
  00124	5a		 pop	 edx
  00125	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00128	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012f	59		 pop	 ecx
  00130	5f		 pop	 edi
  00131	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	33 cd		 xor	 ecx, ebp
  00136	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013b	83 c4 60	 add	 esp, 96			; 00000060H
  0013e	3b ec		 cmp	 ebp, esp
  00140	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
  00149	0f 1f 00	 npad	 3
$LN15@Split:
  0014c	01 00 00 00	 DD	 1
  00150	00 00 00 00	 DD	 $LN14@Split
$LN14@Split:
  00154	dc ff ff ff	 DD	 -36			; ffffffdcH
  00158	10 00 00 00	 DD	 16			; 00000010H
  0015c	00 00 00 00	 DD	 $LN12@Split
$LN12@Split:
  00160	65		 DB	 101			; 00000065H
  00161	6c		 DB	 108			; 0000006cH
  00162	65		 DB	 101			; 00000065H
  00163	6d		 DB	 109			; 0000006dH
  00164	73		 DB	 115			; 00000073H
  00165	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _elems$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z ENDP ; Util::Split
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
tv155 = -48						; size = 4
tv148 = -44						; size = 4
tv141 = -40						; size = 4
_vec$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_n$ = 12						; size = 28
?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Util::ParseVector3

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001d	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  00020	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00023	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00026	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00029	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00032	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0003a	33 c5		 xor	 eax, ebp
  0003c	50		 push	 eax
  0003d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00040	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 84   : 	std::vector<std::string> vec = Util::Split(n, ';');

  0004d	6a 3b		 push	 59			; 0000003bH
  0004f	8d 45 0c	 lea	 eax, DWORD PTR _n$[ebp]
  00052	50		 push	 eax
  00053	8d 4d e0	 lea	 ecx, DWORD PTR _vec$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ?Split@Util@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@D@Z ; Util::Split
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 85   : 	return Vector3f(atof(vec[0].c_str()), atof(vec[1].c_str()), atof(vec[2].c_str()));

  00063	6a 02		 push	 2
  00065	8d 4d e0	 lea	 ecx, DWORD PTR _vec$[ebp]
  00068	e8 00 00 00 00	 call	 ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00074	8b f4		 mov	 esi, esp
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	d9 5d d8	 fstp	 DWORD PTR tv141[ebp]
  0008a	d9 45 d8	 fld	 DWORD PTR tv141[ebp]
  0008d	51		 push	 ecx
  0008e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00091	6a 01		 push	 1
  00093	8d 4d e0	 lea	 ecx, DWORD PTR _vec$[ebp]
  00096	e8 00 00 00 00	 call	 ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
  0009b	8b c8		 mov	 ecx, eax
  0009d	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000a2	8b f4		 mov	 esi, esp
  000a4	50		 push	 eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  000ab	83 c4 04	 add	 esp, 4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	d9 5d d4	 fstp	 DWORD PTR tv148[ebp]
  000b8	d9 45 d4	 fld	 DWORD PTR tv148[ebp]
  000bb	51		 push	 ecx
  000bc	d9 1c 24	 fstp	 DWORD PTR [esp]
  000bf	6a 00		 push	 0
  000c1	8d 4d e0	 lea	 ecx, DWORD PTR _vec$[ebp]
  000c4	e8 00 00 00 00	 call	 ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
  000c9	8b c8		 mov	 ecx, eax
  000cb	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000d0	8b f4		 mov	 esi, esp
  000d2	50		 push	 eax
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  000d9	83 c4 04	 add	 esp, 4
  000dc	3b f4		 cmp	 esi, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	d9 5d d0	 fstp	 DWORD PTR tv155[ebp]
  000e6	d9 45 d0	 fld	 DWORD PTR tv155[ebp]
  000e9	51		 push	 ecx
  000ea	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ed	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000f0	e8 00 00 00 00	 call	 ??0Vector3f@@QAE@MMM@Z	; Vector3f::Vector3f
  000f5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f9	8d 4d e0	 lea	 ecx, DWORD PTR _vec$[ebp]
  000fc	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00101	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00108	8d 4d 0c	 lea	 ecx, DWORD PTR _n$[ebp]
  0010b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00110	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : }

  00113	52		 push	 edx
  00114	8b cd		 mov	 ecx, ebp
  00116	50		 push	 eax
  00117	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@ParseVecto
  0011d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00122	58		 pop	 eax
  00123	5a		 pop	 edx
  00124	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00127	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012e	59		 pop	 ecx
  0012f	5e		 pop	 esi
  00130	83 c4 30	 add	 esp, 48			; 00000030H
  00133	3b ec		 cmp	 ebp, esp
  00135	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
  0013e	66 90		 npad	 2
$LN8@ParseVecto:
  00140	01 00 00 00	 DD	 1
  00144	00 00 00 00	 DD	 $LN7@ParseVecto
$LN7@ParseVecto:
  00148	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0014c	10 00 00 00	 DD	 16			; 00000010H
  00150	00 00 00 00	 DD	 $LN5@ParseVecto
$LN5@ParseVecto:
  00154	76		 DB	 118			; 00000076H
  00155	65		 DB	 101			; 00000065H
  00156	63		 DB	 99			; 00000063H
  00157	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _n$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _vec$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseVector3@Util@@YA?AVVector3f@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Util::ParseVector3
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
_base_path$1 = -4					; size = 4
_app$ = 8						; size = 4
_org$ = 12						; size = 4
?Init@Util@@YAXPBD0@Z PROC				; Util::Init

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 31   : 	if (SDL_strcmp(app, "") != 0)

  0000c	8b f4		 mov	 esi, esp
  0000e	68 00 00 00 00	 push	 OFFSET $SG4294888373
  00013	8b 45 08	 mov	 eax, DWORD PTR _app$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_strcmp
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f4		 cmp	 esi, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	85 c0		 test	 eax, eax
  00029	74 5a		 je	 SHORT $LN1@Init

; 32   : 	{
; 33   : 		char *base_path = SDL_GetPrefPath(org, app);

  0002b	8b f4		 mov	 esi, esp
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _app$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 0c	 mov	 edx, DWORD PTR _org$[ebp]
  00034	52		 push	 edx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_GetPrefPath
  0003b	83 c4 08	 add	 esp, 8
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	89 45 fc	 mov	 DWORD PTR _base_path$1[ebp], eax

; 34   : 
; 35   : 		if (base_path) {

  00048	83 7d fc 00	 cmp	 DWORD PTR _base_path$1[ebp], 0
  0004c	74 37		 je	 SHORT $LN1@Init

; 36   : 			s_ResourcePath = SDL_strdup(base_path);

  0004e	8b f4		 mov	 esi, esp
  00050	8b 45 fc	 mov	 eax, DWORD PTR _base_path$1[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_strdup
  0005a	83 c4 04	 add	 esp, 4
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	50		 push	 eax
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_ResourcePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s_ResourcePath
  0006a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 37   : 
; 38   : 			SDL_free(base_path);

  0006f	8b f4		 mov	 esi, esp
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _base_path$1[ebp]
  00074	51		 push	 ecx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_free
  0007b	83 c4 04	 add	 esp, 4
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Init:

; 39   : 		}
; 40   : 	}
; 41   : }

  00085	5e		 pop	 esi
  00086	83 c4 04	 add	 esp, 4
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?Init@Util@@YAXPBD0@Z ENDP				; Util::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
_milliseconds$ = 8					; size = 4
?Sleep@Util@@YAXH@Z PROC				; Util::Sleep

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 44   : 	SDL_Delay(milliseconds);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _milliseconds$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_Delay
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 45   : }

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Sleep@Util@@YAXH@Z ENDP				; Util::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
tv131 = -164						; size = 4
tv140 = -160						; size = 4
tv129 = -156						; size = 4
tv88 = -152						; size = 4
$T2 = -148						; size = 4
_res$ = -140						; size = 28
$T3 = -108						; size = 28
$T4 = -80						; size = 28
_cmd$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_task$ = 12						; size = 4
_data$ = 16						; size = 4
?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z PROC ; Util::ExecuteTask

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00017	57		 push	 edi
  00018	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  0001e	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 72   : #ifdef OS_WINDOWS
; 73   : 	std::string cmd = "python\\python.exe data/tasks/" + task + ".py " + data;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _task$[ebp]
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET $SG4294888370
  00051	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
  00063	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR tv88[ebp]
  00069	89 95 64 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], edx
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	68 00 00 00 00	 push	 OFFSET $SG4294888371
  0007b	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv129[ebp]
  00081	50		 push	 eax
  00082	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv140[ebp], eax
  00094	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR tv140[ebp]
  0009a	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv131[ebp], edx
  000a0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a4	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  000a7	50		 push	 eax
  000a8	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv131[ebp]
  000ae	51		 push	 ecx
  000af	8d 55 d0	 lea	 edx, DWORD PTR _cmd$[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000bf	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  000c2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c7	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000cb	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  000ce	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 74   : 	std::string res = ssystem(cmd.c_str());

  000d3	8d 4d d0	 lea	 ecx, DWORD PTR _cmd$[ebp]
  000d6	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000db	50		 push	 eax
  000dc	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _res$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Util::ssystem
  000e8	83 c4 08	 add	 esp, 8
  000eb	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 75   : 	return res.substr(0, res.size()-1);

  000ef	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _res$[ebp]
  000f5	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  000fa	83 e8 01	 sub	 eax, 1
  000fd	50		 push	 eax
  000fe	6a 00		 push	 0
  00100	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00103	51		 push	 ecx
  00104	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _res$[ebp]
  0010a	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0010f	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00115	83 ca 01	 or	 edx, 1
  00118	89 95 6c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0011e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00122	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _res$[ebp]
  00128	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00134	8d 4d d0	 lea	 ecx, DWORD PTR _cmd$[ebp]
  00137	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 76   : #else
; 77   : 	std::cout << "TaskHoster isn't supported on this platform." << std::endl;
; 78   : 	return "0";
; 79   : #endif
; 80   : }

  0013f	52		 push	 edx
  00140	8b cd		 mov	 ecx, ebp
  00142	50		 push	 eax
  00143	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@ExecuteTas
  00149	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014e	58		 pop	 eax
  0014f	5a		 pop	 edx
  00150	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00153	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015a	59		 pop	 ecx
  0015b	5f		 pop	 edi
  0015c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	33 cd		 xor	 ecx, ebp
  00161	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00166	81 c4 a4 00 00
	00		 add	 esp, 164		; 000000a4H
  0016c	3b ec		 cmp	 ebp, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
  00177	90		 npad	 1
$LN13@ExecuteTas:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN12@ExecuteTas
$LN12@ExecuteTas:
  00180	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00184	1c 00 00 00	 DD	 28			; 0000001cH
  00188	00 00 00 00	 DD	 $LN9@ExecuteTas
  0018c	74 ff ff ff	 DD	 -140			; ffffff74H
  00190	1c 00 00 00	 DD	 28			; 0000001cH
  00194	00 00 00 00	 DD	 $LN10@ExecuteTas
$LN10@ExecuteTas:
  00198	72		 DB	 114			; 00000072H
  00199	65		 DB	 101			; 00000065H
  0019a	73		 DB	 115			; 00000073H
  0019b	00		 DB	 0
$LN9@ExecuteTas:
  0019c	63		 DB	 99			; 00000063H
  0019d	6d		 DB	 109			; 0000006dH
  0019e	64		 DB	 100			; 00000064H
  0019f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$1:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$2:
  00010	8d 4d d0	 lea	 ecx, DWORD PTR _cmd$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z$3:
  00018	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _res$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ExecuteTask@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@0@Z ENDP ; Util::ExecuteTask
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?ResourcePath@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Util::ResourcePath

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 49   : 	return s_ResourcePath;

  00012	68 00 00 00 00	 push	 OFFSET ?s_ResourcePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s_ResourcePath
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00022	83 c8 01	 or	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 50   : }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?ResourcePath@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Util::ResourcePath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_memcpy_s.h
_TEXT	SEGMENT
tv79 = -24						; size = 4
tv75 = -20						; size = 4
tv66 = -16						; size = 4
__Expr_val$1 = -12					; size = 4
__Expr_val$2 = -8					; size = 4
__Expr_val$3 = -4					; size = 4
__Destination$ = 8					; size = 4
__DestinationSize$ = 12					; size = 4
__Source$ = 16						; size = 4
__SourceSize$ = 20					; size = 4
_memcpy_s PROC

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 42   :         if (_SourceSize == 0)

  0001e	83 7d 14 00	 cmp	 DWORD PTR __SourceSize$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@memcpy_s

; 43   :         {
; 44   :             return 0;

  00024	33 c0		 xor	 eax, eax
  00026	e9 41 01 00 00	 jmp	 $LN1@memcpy_s
$LN2@memcpy_s:

; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0002b	83 7d 08 00	 cmp	 DWORD PTR __Destination$[ebp], 0
  0002f	74 09		 je	 SHORT $LN9@memcpy_s
  00031	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00038	eb 07		 jmp	 SHORT $LN10@memcpy_s
$LN9@memcpy_s:
  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN10@memcpy_s:
  00041	8b 45 f0	 mov	 eax, DWORD PTR tv66[ebp]
  00044	89 45 fc	 mov	 DWORD PTR __Expr_val$3[ebp], eax
  00047	83 7d fc 00	 cmp	 DWORD PTR __Expr_val$3[ebp], 0
  0004b	75 2e		 jne	 SHORT $LN3@memcpy_s
  0004d	8b f4		 mov	 esi, esp
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  00062	8b f4		 mov	 esi, esp
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00076	e9 f1 00 00 00	 jmp	 $LN1@memcpy_s
$LN3@memcpy_s:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0007b	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  0007f	74 0c		 je	 SHORT $LN5@memcpy_s
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __DestinationSize$[ebp]
  00084	3b 4d 14	 cmp	 ecx, DWORD PTR __SourceSize$[ebp]
  00087	0f 83 bf 00 00
	00		 jae	 $LN4@memcpy_s
$LN5@memcpy_s:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  0008d	8b f4		 mov	 esi, esp
  0008f	8b 55 0c	 mov	 edx, DWORD PTR __DestinationSize$[ebp]
  00092	52		 push	 edx
  00093	6a 00		 push	 0
  00095	8b 45 08	 mov	 eax, DWORD PTR __Destination$[ebp]
  00098	50		 push	 eax
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memset
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  000a9	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  000ad	74 09		 je	 SHORT $LN11@memcpy_s
  000af	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  000b6	eb 07		 jmp	 SHORT $LN12@memcpy_s
$LN11@memcpy_s:
  000b8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN12@memcpy_s:
  000bf	8b 4d ec	 mov	 ecx, DWORD PTR tv75[ebp]
  000c2	89 4d f8	 mov	 DWORD PTR __Expr_val$2[ebp], ecx
  000c5	83 7d f8 00	 cmp	 DWORD PTR __Expr_val$2[ebp], 0
  000c9	75 2b		 jne	 SHORT $LN6@memcpy_s
  000cb	8b f4		 mov	 esi, esp
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  000d3	3b f4		 cmp	 esi, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  000e0	8b f4		 mov	 esi, esp
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  000f4	eb 76		 jmp	 SHORT $LN1@memcpy_s
$LN6@memcpy_s:

; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000f6	8b 55 0c	 mov	 edx, DWORD PTR __DestinationSize$[ebp]
  000f9	3b 55 14	 cmp	 edx, DWORD PTR __SourceSize$[ebp]
  000fc	72 09		 jb	 SHORT $LN13@memcpy_s
  000fe	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  00105	eb 07		 jmp	 SHORT $LN14@memcpy_s
$LN13@memcpy_s:
  00107	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN14@memcpy_s:
  0010e	8b 45 e8	 mov	 eax, DWORD PTR tv79[ebp]
  00111	89 45 f4	 mov	 DWORD PTR __Expr_val$1[ebp], eax
  00114	83 7d f4 00	 cmp	 DWORD PTR __Expr_val$1[ebp], 0
  00118	75 2b		 jne	 SHORT $LN7@memcpy_s
  0011a	8b f4		 mov	 esi, esp
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00122	3b f4		 cmp	 esi, esp
  00124	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00129	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  0012f	8b f4		 mov	 esi, esp
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  00137	3b f4		 cmp	 esi, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  00143	eb 27		 jmp	 SHORT $LN1@memcpy_s
$LN7@memcpy_s:

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;

  00145	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0014a	eb 20		 jmp	 SHORT $LN1@memcpy_s
$LN4@memcpy_s:

; 57   :         }
; 58   : 
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  0014c	8b f4		 mov	 esi, esp
  0014e	8b 4d 14	 mov	 ecx, DWORD PTR __SourceSize$[ebp]
  00151	51		 push	 ecx
  00152	8b 55 10	 mov	 edx, DWORD PTR __Source$[ebp]
  00155	52		 push	 edx
  00156	8b 45 08	 mov	 eax, DWORD PTR __Destination$[ebp]
  00159	50		 push	 eax
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 60   :         return 0;

  0016a	33 c0		 xor	 eax, eax
$LN1@memcpy_s:

; 61   :     }

  0016c	5e		 pop	 esi
  0016d	83 c4 18	 add	 esp, 24			; 00000018H
  00170	3b ec		 cmp	 ebp, esp
  00172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c3		 ret	 0
_memcpy_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
;	COMDAT ??__Es_ResourcePath@@YAXXZ
text$di	SEGMENT
??__Es_ResourcePath@@YAXXZ PROC				; `dynamic initializer for 's_ResourcePath'', COMDAT

; 27   : std::string s_ResourcePath = "./data/";

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG4294888374
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_ResourcePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s_ResourcePath
  0000d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	68 00 00 00 00	 push	 OFFSET ??__Fs_ResourcePath@@YAXXZ ; `dynamic atexit destructor for 's_ResourcePath''
  00017	e8 00 00 00 00	 call	 _atexit
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??__Es_ResourcePath@@YAXXZ ENDP				; `dynamic initializer for 's_ResourcePath''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Fs_ResourcePath@@YAXXZ
text$yd	SEGMENT
??__Fs_ResourcePath@@YAXXZ PROC				; `dynamic atexit destructor for 's_ResourcePath'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_ResourcePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s_ResourcePath
  00008	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__Fs_ResourcePath@@YAXXZ ENDP				; `dynamic atexit destructor for 's_ResourcePath''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\util.cpp
_TEXT	SEGMENT
tv168 = -624						; size = 4
tv66 = -620						; size = 4
$T2 = -616						; size = 4
_result$ = -608						; size = 28
_file$ = -572						; size = 184
$T3 = -384						; size = 28
_cmd$ = -352						; size = 28
_scommand$ = -316					; size = 28
_tmpname$ = -280					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_command$ = 12						; size = 4
?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; Util::ssystem

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 64 02 00
	00		 sub	 esp, 612		; 00000264H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 90 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-624]
  0001f	b9 99 00 00 00	 mov	 ecx, 153		; 00000099H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 54   : 	char tmpname[L_tmpnam];
; 55   : 	std::tmpnam(tmpname);

  00049	8b f4		 mov	 esi, esp
  0004b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _tmpname$[ebp]
  00051	50		 push	 eax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tmpnam
  00058	83 c4 04	 add	 esp, 4
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 56   : 	std::string scommand = command;

  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _command$[ebp]
  00065	51		 push	 ecx
  00066	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _scommand$[ebp]
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 57   : 	std::string cmd = scommand + " >> " + tmpname;

  00078	68 00 00 00 00	 push	 OFFSET $SG4294888372
  0007d	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR _scommand$[ebp]
  00083	52		 push	 edx
  00084	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	89 85 94 fd ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00099	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  0009f	89 8d 90 fd ff
	ff		 mov	 DWORD PTR tv168[ebp], ecx
  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a9	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _tmpname$[ebp]
  000af	52		 push	 edx
  000b0	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR tv168[ebp]
  000b6	50		 push	 eax
  000b7	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _cmd$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ca	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000d0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 58   : 	std::system(cmd.c_str());

  000d5	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _cmd$[ebp]
  000db	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000e0	8b f4		 mov	 esi, esp
  000e2	50		 push	 eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  000e9	83 c4 04	 add	 esp, 4
  000ec	3b f4		 cmp	 esi, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 59   : 	std::ifstream file(tmpname, std::ios::in);

  000f3	6a 01		 push	 1
  000f5	6a 40		 push	 64			; 00000040H
  000f7	6a 01		 push	 1
  000f9	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _tmpname$[ebp]
  000ff	52		 push	 edx
  00100	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00106	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  0010b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 60   : 	std::string result;

  0010f	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  00115	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 61   : 	if (file) {

  0011e	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  00124	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00127	8d 8c 0d c4 fd
	ff ff		 lea	 ecx, DWORD PTR _file$[ebp+ecx]
  0012e	8b f4		 mov	 esi, esp
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bios_base@std@@QBE_NXZ
  00136	3b f4		 cmp	 esi, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	0f b6 d0	 movzx	 edx, al
  00140	85 d2		 test	 edx, edx
  00142	74 54		 je	 SHORT $LN4@ssystem
$LN2@ssystem:

; 62   : 		while (!file.eof()) result.push_back(file.get());

  00144	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  0014a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014d	8d 8c 0d c4 fd
	ff ff		 lea	 ecx, DWORD PTR _file$[ebp+ecx]
  00154	8b f4		 mov	 esi, esp
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@ios_base@std@@QBE_NXZ
  0015c	3b f4		 cmp	 esi, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00163	0f b6 d0	 movzx	 edx, al
  00166	85 d2		 test	 edx, edx
  00168	75 23		 jne	 SHORT $LN3@ssystem
  0016a	8b f4		 mov	 esi, esp
  0016c	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
  00178	3b f4		 cmp	 esi, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	50		 push	 eax
  00180	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  00186	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
  0018b	eb b7		 jmp	 SHORT $LN2@ssystem
$LN3@ssystem:

; 63   : 		file.close();

  0018d	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00193	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
$LN4@ssystem:

; 64   : 	}
; 65   : 	remove(tmpname);

  00198	8b f4		 mov	 esi, esp
  0019a	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _tmpname$[ebp]
  001a0	50		 push	 eax
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  001a7	83 c4 04	 add	 esp, 4
  001aa	3b f4		 cmp	 esi, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 66   : 	return result;

  001b1	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  001b7	51		 push	 ecx
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001bb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c0	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  001c6	83 ca 01	 or	 edx, 1
  001c9	89 95 98 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  001cf	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001d3	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  001d9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001de	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001e2	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  001e8	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  001ed	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001f1	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _cmd$[ebp]
  001f7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001fc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00203	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _scommand$[ebp]
  00209	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0020e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 67   : }

  00211	52		 push	 edx
  00212	8b cd		 mov	 ecx, ebp
  00214	50		 push	 eax
  00215	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@ssystem
  0021b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00220	58		 pop	 eax
  00221	5a		 pop	 edx
  00222	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00225	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022c	59		 pop	 ecx
  0022d	5f		 pop	 edi
  0022e	5e		 pop	 esi
  0022f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00232	33 cd		 xor	 ecx, ebp
  00234	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00239	81 c4 70 02 00
	00		 add	 esp, 624		; 00000270H
  0023f	3b ec		 cmp	 ebp, esp
  00241	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
  0024a	66 90		 npad	 2
$LN20@ssystem:
  0024c	05 00 00 00	 DD	 5
  00250	00 00 00 00	 DD	 $LN19@ssystem
$LN19@ssystem:
  00254	e8 fe ff ff	 DD	 -280			; fffffee8H
  00258	04 01 00 00	 DD	 260			; 00000104H
  0025c	00 00 00 00	 DD	 $LN13@ssystem
  00260	c4 fe ff ff	 DD	 -316			; fffffec4H
  00264	1c 00 00 00	 DD	 28			; 0000001cH
  00268	00 00 00 00	 DD	 $LN14@ssystem
  0026c	a0 fe ff ff	 DD	 -352			; fffffea0H
  00270	1c 00 00 00	 DD	 28			; 0000001cH
  00274	00 00 00 00	 DD	 $LN15@ssystem
  00278	c4 fd ff ff	 DD	 -572			; fffffdc4H
  0027c	b8 00 00 00	 DD	 184			; 000000b8H
  00280	00 00 00 00	 DD	 $LN16@ssystem
  00284	a0 fd ff ff	 DD	 -608			; fffffda0H
  00288	1c 00 00 00	 DD	 28			; 0000001cH
  0028c	00 00 00 00	 DD	 $LN17@ssystem
$LN17@ssystem:
  00290	72		 DB	 114			; 00000072H
  00291	65		 DB	 101			; 00000065H
  00292	73		 DB	 115			; 00000073H
  00293	75		 DB	 117			; 00000075H
  00294	6c		 DB	 108			; 0000006cH
  00295	74		 DB	 116			; 00000074H
  00296	00		 DB	 0
$LN16@ssystem:
  00297	66		 DB	 102			; 00000066H
  00298	69		 DB	 105			; 00000069H
  00299	6c		 DB	 108			; 0000006cH
  0029a	65		 DB	 101			; 00000065H
  0029b	00		 DB	 0
$LN15@ssystem:
  0029c	63		 DB	 99			; 00000063H
  0029d	6d		 DB	 109			; 0000006dH
  0029e	64		 DB	 100			; 00000064H
  0029f	00		 DB	 0
$LN14@ssystem:
  002a0	73		 DB	 115			; 00000073H
  002a1	63		 DB	 99			; 00000063H
  002a2	6f		 DB	 111			; 0000006fH
  002a3	6d		 DB	 109			; 0000006dH
  002a4	6d		 DB	 109			; 0000006dH
  002a5	61		 DB	 97			; 00000061H
  002a6	6e		 DB	 110			; 0000006eH
  002a7	64		 DB	 100			; 00000064H
  002a8	00		 DB	 0
$LN13@ssystem:
  002a9	74		 DB	 116			; 00000074H
  002aa	6d		 DB	 109			; 0000006dH
  002ab	70		 DB	 112			; 00000070H
  002ac	6e		 DB	 110			; 0000006eH
  002ad	61		 DB	 97			; 00000061H
  002ae	6d		 DB	 109			; 0000006dH
  002af	65		 DB	 101			; 00000065H
  002b0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _scommand$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  0000b	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2:
  00016	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _cmd$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$3:
  00021	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00027	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$4:
  0002c	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 8a 90 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-624]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ssystem@Util@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; Util::ssystem
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
tv229 = -16						; size = 4
tv174 = -12						; size = 4
__Idx$1 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 895  : 		{	// insert by moving into element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 896  : 		if (_Inside(_STD addressof(_Val)))

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
  00030	0f b6 c8	 movzx	 ecx, al
  00033	85 c9		 test	 ecx, ecx
  00035	0f 84 b1 00 00
	00		 je	 $LN2@push_back

; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  0003b	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00044	83 c4 04	 add	 esp, 4
  00047	8b f0		 mov	 esi, eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
  00051	2b 30		 sub	 esi, DWORD PTR [eax]
  00053	8b c6		 mov	 eax, esi
  00055	99		 cdq
  00056	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0005b	f7 f9		 idiv	 ecx
  0005d	89 45 f8	 mov	 DWORD PTR __Idx$1[ebp], eax

; 899  : 			if (this->_Mylast() == this->_Myend())

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00068	8b f0		 mov	 esi, eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
  00072	8b 16		 mov	 edx, DWORD PTR [esi]
  00074	3b 10		 cmp	 edx, DWORD PTR [eax]
  00076	75 0a		 jne	 SHORT $LN4@push_back

; 900  : 				_Reserve(1);

  00078	6a 01		 push	 1
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN4@push_back:

; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  0008a	8b 00		 mov	 eax, DWORD PTR [eax]
  0008c	50		 push	 eax
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	51		 push	 ecx
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 902  : 			this->_Getal().construct(this->_Mylast(),

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
  000a8	6b 55 f8 1c	 imul	 edx, DWORD PTR __Idx$1[ebp], 28
  000ac	03 10		 add	 edx, DWORD PTR [eax]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	50		 push	 eax
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
  000cb	8b c8		 mov	 ecx, eax
  000cd	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  000da	89 45 f4	 mov	 DWORD PTR tv174[ebp], eax
  000dd	8b 4d f4	 mov	 ecx, DWORD PTR tv174[ebp]
  000e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e2	83 c2 1c	 add	 edx, 28			; 0000001cH
  000e5	8b 45 f4	 mov	 eax, DWORD PTR tv174[ebp]
  000e8	89 10		 mov	 DWORD PTR [eax], edx

; 905  : 			}
; 906  : 		else

  000ea	eb 7f		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())

  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  000f4	8b f0		 mov	 esi, eax
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
  000fe	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00100	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00102	75 0a		 jne	 SHORT $LN5@push_back

; 909  : 				_Reserve(1);

  00104	6a 01		 push	 1
  00106	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN5@push_back:

; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  0010e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00116	8b 10		 mov	 edx, DWORD PTR [eax]
  00118	52		 push	 edx
  00119	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00121	8b 00		 mov	 eax, DWORD PTR [eax]
  00123	50		 push	 eax
  00124	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 911  : 			this->_Getal().construct(this->_Mylast(),

  0012c	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00135	83 c4 04	 add	 esp, 4
  00138	50		 push	 eax
  00139	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00141	8b 10		 mov	 edx, DWORD PTR [eax]
  00143	52		 push	 edx
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
  0014c	8b c8		 mov	 ecx, eax
  0014e	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();

  00153	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  0015b	89 45 f0	 mov	 DWORD PTR tv229[ebp], eax
  0015e	8b 45 f0	 mov	 eax, DWORD PTR tv229[ebp]
  00161	8b 08		 mov	 ecx, DWORD PTR [eax]
  00163	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00166	8b 55 f0	 mov	 edx, DWORD PTR tv229[ebp]
  00169	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@push_back:

; 914  : 			}
; 915  : 		}

  0016b	5e		 pop	 esi
  0016c	83 c4 10	 add	 esp, 16			; 00000010H
  0016f	3b ec		 cmp	 ebp, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 840  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 839  : 		: _Mybase(_STD move(_Right._Getal()))

  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >

; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());

  00050	0f b6 45 ef	 movzx	 eax, BYTE PTR $T2[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  0005e	83 c4 04	 add	 esp, 4
  00061	50		 push	 eax
  00062	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv

; 842  : 		}

  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	83 c4 14	 add	 esp, 20			; 00000014H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
tv65 = -60						; size = 4
tv128 = -56						; size = 4
tv93 = -52						; size = 4
tv130 = -48						; size = 4
$T2 = -44						; size = 12
$T3 = -32						; size = 12
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 1704 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1705 : 		insert(end(), _Ch);

  0003a	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0003e	50		 push	 eax
  0003f	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00042	51		 push	 ecx
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
  0004b	89 45 d0	 mov	 DWORD PTR tv130[ebp], eax
  0004e	8b 55 d0	 mov	 edx, DWORD PTR tv130[ebp]
  00051	89 55 cc	 mov	 DWORD PTR tv93[ebp], edx
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0005e	8b cc		 mov	 ecx, esp
  00060	89 65 ec	 mov	 DWORD PTR $T4[ebp], esp
  00063	8b 45 cc	 mov	 eax, DWORD PTR tv93[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z
  0006c	89 45 c8	 mov	 DWORD PTR tv128[ebp], eax
  0006f	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00072	51		 push	 ecx
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  0007b	89 45 c4	 mov	 DWORD PTR tv65[ebp], eax
  0007e	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00081	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00090	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 1706 : 		}

  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	83 c4 3c	 add	 esp, 60			; 0000003cH
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\fstream
;	COMDAT ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 905  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 906  : 		if (_Filebuffer.close() == 0)

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 10	 add	 ecx, 16			; 00000010H
  00015	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0001a	85 c0		 test	 eax, eax
  0001c	75 20		 jne	 SHORT $LN1@close

; 907  : 			_Myios::setstate(ios_base::failbit);

  0001e	8b f4		 mov	 esi, esp
  00020	6a 00		 push	 0
  00022	6a 02		 push	 2
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002f	8b ca		 mov	 ecx, edx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@close:

; 908  : 		}

  0003e	5e		 pop	 esi
  0003f	83 c4 04	 add	 esp, 4
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 746  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001c	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00037	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0003e	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00042	74 2e		 je	 SHORT $LN2@basic_ifst
  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 70	 add	 ecx, 112		; 00000070H
  00053	8b f4		 mov	 esi, esp
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00069	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  0006c	83 c9 01	 or	 ecx, 1
  0006f	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_ifst:

; 745  : 		: _Mybase(&_Filebuffer)

  00072	8b f4		 mov	 esi, esp
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	83 c2 10	 add	 edx, 16			; 00000010H
  0007e	52		 push	 edx
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 746  : 		{	// construct with named file and specified mode

  00096	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0009e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b0	83 e8 70	 sub	 eax, 112		; 00000070H
  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000bb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000be	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax
  000c2	6a 00		 push	 0
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	83 c1 10	 add	 ecx, 16			; 00000010H
  000ca	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000cf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 747  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  000d3	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000da	83 c9 01	 or	 ecx, 1
  000dd	51		 push	 ecx
  000de	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000e1	52		 push	 edx
  000e2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	83 c1 10	 add	 ecx, 16			; 00000010H
  000e8	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000ed	85 c0		 test	 eax, eax
  000ef	75 20		 jne	 SHORT $LN1@basic_ifst

; 748  : 			_Myios::setstate(ios_base::failbit);

  000f1	8b f4		 mov	 esi, esp
  000f3	6a 00		 push	 0
  000f5	6a 02		 push	 2
  000f7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00102	8b ca		 mov	 ecx, edx
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@basic_ifst:

; 749  : 		}

  00111	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00118	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00125	59		 pop	 ecx
  00126	5e		 pop	 esi
  00127	83 c4 14	 add	 esp, 20			; 00000014H
  0012a	3b ec		 cmp	 ebp, esp
  0012c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 19 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	8b f4		 mov	 esi, esp
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001e	3b f4		 cmp	 esi, esp
  00020	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN6@basic_ifst:
  00025	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 18	 add	 ecx, 24			; 00000018H
  0002c	8b f4		 mov	 esi, esp
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00034	3b f4		 cmp	 esi, esp
  00036	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 10	 add	 ecx, 16			; 00000010H
  00041	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00046	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00050	33 c8		 xor	 ecx, eax
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0005c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 546  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))

  00036	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	0f b6 4d ef	 movzx	 ecx, BYTE PTR $T2[ebp]
  00047	51		 push	 ecx
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 547  : 		_Alloc_proxy();

  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Alloc_proxy

; 548  : 		}

  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv, COMDAT
; _this$ = ecx

; 867  : 		{	// move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 868  : 		this->_Swap_all((_Myt&)_Right);

  0000f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all

; 869  : 		this->_Myfirst() = _Right._Myfirst();

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
  00023	8b f0		 mov	 esi, eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	89 08		 mov	 DWORD PTR [eax], ecx

; 870  : 		this->_Mylast() = _Right._Mylast();

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00034	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00039	8b f0		 mov	 esi, eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00043	8b 16		 mov	 edx, DWORD PTR [esi]
  00045	89 10		 mov	 DWORD PTR [eax], edx

; 871  : 		this->_Myend() = _Right._Myend();

  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
  0004f	8b f0		 mov	 esi, eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
  00059	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005b	89 08		 mov	 DWORD PTR [eax], ecx

; 872  : 
; 873  : 		_Right._Myfirst() = pointer();

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 874  : 		_Right._Mylast() = pointer();

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
  00073	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 875  : 		_Right._Myend() = pointer();

  00079	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 876  : 		}

  00087	5e		 pop	 esi
  00088	83 c4 04	 add	 esp, 4
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z
_TEXT	SEGMENT
tv95 = -64						; size = 4
tv133 = -60						; size = 4
tv93 = -56						; size = 4
tv87 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 12
$T4 = -32						; size = 12
__Off$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Ch$ = 24						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1297 : 		{	// insert _Ch at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1298 : 		size_type _Off = _Where - begin();

  00048	8d 45 e0	 lea	 eax, DWORD PTR $T4[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00054	89 45 cc	 mov	 DWORD PTR tv87[ebp], eax
  00057	8b 4d cc	 mov	 ecx, DWORD PTR tv87[ebp]
  0005a	89 4d c8	 mov	 DWORD PTR tv93[ebp], ecx
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00061	8b 55 c8	 mov	 edx, DWORD PTR tv93[ebp]
  00064	52		 push	 edx
  00065	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00068	e8 00 00 00 00	 call	 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
  0006d	89 45 ec	 mov	 DWORD PTR __Off$[ebp], eax
  00070	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00074	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  00077	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 1299 : 		insert(_Off, 1, _Ch);

  0007c	0f b6 45 18	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00080	50		 push	 eax
  00081	6a 01		 push	 1
  00083	8b 4d ec	 mov	 ecx, DWORD PTR __Off$[ebp]
  00086	51		 push	 ecx
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1300 : 		return (begin() + _Off);

  0008f	8d 55 d4	 lea	 edx, DWORD PTR $T3[ebp]
  00092	52		 push	 edx
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0009b	89 45 c4	 mov	 DWORD PTR tv133[ebp], eax
  0009e	8b 45 c4	 mov	 eax, DWORD PTR tv133[ebp]
  000a1	89 45 c0	 mov	 DWORD PTR tv95[ebp], eax
  000a4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a8	8b 4d ec	 mov	 ecx, DWORD PTR __Off$[ebp]
  000ab	51		 push	 ecx
  000ac	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000af	52		 push	 edx
  000b0	8b 4d c0	 mov	 ecx, DWORD PTR tv95[ebp]
  000b3	e8 00 00 00 00	 call	 ??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
  000b8	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  000bb	83 c8 01	 or	 eax, 1
  000be	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  000c1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c5	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  000c8	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  000cd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d4	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000d7	e8 00 00 00 00	 call	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  000dc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1301 : 		}

  000df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e9	59		 pop	 ecx
  000ea	5f		 pop	 edi
  000eb	83 c4 40	 add	 esp, 64			; 00000040H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z$2:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all, COMDAT
; _this$ = ecx

; 616  : 		{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 618  : 		}

  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Tmp$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+, COMDAT
; _this$ = ecx

; 373  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 374  : 		_Myiter _Tmp = *this;

  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d e0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00050	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 375  : 		return (_Tmp += _Off);

  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0005f	51		 push	 ecx
  00060	8d 4d e0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00063	e8 00 00 00 00	 call	 ??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
  00068	50		 push	 eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006c	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
  00071	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
  00074	83 ca 01	 or	 edx, 1
  00077	89 55 d8	 mov	 DWORD PTR $T2[ebp], edx
  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00081	8d 4d e0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00084	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00089	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 376  : 		}

  0008c	52		 push	 edx
  0008d	8b cd		 mov	 ecx, ebp
  0008f	50		 push	 eax
  00090	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@operator
  00096	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009b	58		 pop	 eax
  0009c	5a		 pop	 edx
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	83 c4 28	 add	 esp, 40			; 00000028H
  000ab	3b ec		 cmp	 ebp, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 08 00	 ret	 8
$LN9@operator:
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN8@operator
$LN8@operator:
  000c0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000c4	0c 00 00 00	 DD	 12			; 0000000cH
  000c8	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  000cc	5f		 DB	 95			; 0000005fH
  000cd	54		 DB	 84			; 00000054H
  000ce	6d		 DB	 109			; 0000006dH
  000cf	70		 DB	 112			; 00000070H
  000d0	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		if (this->_Mysize() < _Off)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00024	73 08		 jae	 SHORT $LN2@insert

; 1276 : 			_Xran();	// _Off off end

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN2@insert:

; 1277 : 		if (npos - this->_Mysize() <= _Count)

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0003c	2b 08		 sub	 ecx, DWORD PTR [eax]
  0003e	3b 4d 0c	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00041	77 08		 ja	 SHORT $LN3@insert

; 1278 : 			_Xlen();	// result too long

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN3@insert:

; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))

  0004b	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0004f	76 77		 jbe	 SHORT $LN4@insert
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	03 55 0c	 add	 edx, DWORD PTR __Count$[ebp]
  0005e	89 55 f8	 mov	 DWORD PTR __Num$[ebp], edx
  00061	6a 00		 push	 0
  00063	8b 45 f8	 mov	 eax, DWORD PTR __Num$[ebp]
  00066	50		 push	 eax
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0006f	0f b6 c8	 movzx	 ecx, al
  00072	85 c9		 test	 ecx, ecx
  00074	74 52		 je	 SHORT $LN4@insert

; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0007e	8b 10		 mov	 edx, DWORD PTR [eax]
  00080	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  00083	52		 push	 edx
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0008c	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00098	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0009b	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000a7	0f b6 45 10	 movzx	 eax, BYTE PTR __Ch$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  000af	51		 push	 ecx
  000b0	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000b3	52		 push	 edx
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1286 : 			_Eos(_Num);

  000bc	8b 45 f8	 mov	 eax, DWORD PTR __Num$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@insert:

; 1287 : 			}
; 1288 : 		return (*this);

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@insert:

; 1289 : 		}

  000cb	83 c4 08	 add	 esp, 8
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=, COMDAT
; _this$ = ecx

; 367  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  : 		*(_Mybase *)this += _Off;

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=

; 369  : 		return (*this);

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 370  : 		}

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=, COMDAT
; _this$ = ecx

; 156  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 157  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 158  : 		if (this->_Getcont() == 0
; 159  : 			|| this->_Ptr == 0
; 160  : 			|| this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
; 161  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00017	85 c0		 test	 eax, eax
  00019	74 52		 je	 SHORT $LN3@operator
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00022	74 49		 je	 SHORT $LN3@operator
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0002a	03 75 08	 add	 esi, DWORD PTR __Off$[ebp]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003c	3b f0		 cmp	 esi, eax
  0003e	72 2d		 jb	 SHORT $LN3@operator
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004f	8b f0		 mov	 esi, eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00059	03 70 14	 add	 esi, DWORD PTR [eax+20]
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00062	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00065	3b f0		 cmp	 esi, eax
  00067	0f 83 86 00 00
	00		 jae	 $LN2@operator
$LN3@operator:

; 162  : 				+ ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
; 163  : 			{	// report error
; 164  : 			_DEBUG_ERROR("string iterator + offset out of range");

  0006d	8b f4		 mov	 esi, esp
  0006f	68 a4 00 00 00	 push	 164			; 000000a4H
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@IPMLDGDI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@MEFKBKGF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	3b f4		 cmp	 esi, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 165  : 			_SCL_SECURE_OUT_OF_RANGE;

  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
  00093	85 c9		 test	 ecx, ecx
  00095	74 04		 je	 SHORT $LN5@operator
  00097	33 d2		 xor	 edx, edx
  00099	75 30		 jne	 SHORT $LN6@operator
$LN5@operator:
  0009b	8b f4		 mov	 esi, esp
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  000a7	6a 00		 push	 0
  000a9	68 a5 00 00 00	 push	 165			; 000000a5H
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@IPMLDGDI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000b3	6a 02		 push	 2
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000bb	83 c4 18	 add	 esp, 24			; 00000018H
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	75 01		 jne	 SHORT $LN6@operator
  000ca	cc		 int	 3
$LN6@operator:
  000cb	8b f4		 mov	 esi, esp
  000cd	6a 00		 push	 0
  000cf	68 a5 00 00 00	 push	 165			; 000000a5H
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@IPMLDGDI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@HNCOPGEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000e9	83 c4 14	 add	 esp, 20			; 00000014H
  000ec	3b f4		 cmp	 esi, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 166  : 			}
; 167  : 
; 168  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 169  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 170  : 		_SCL_SECURE_VALIDATE_RANGE(
; 171  : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr + _Off
; 172  : 				&& this->_Ptr + _Off <= ((_Mystr *)this->_Getcont())->_Myptr()
; 173  : 					+ ((_Mystr *)this->_Getcont())->_Mysize);
; 174  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 175  : 
; 176  : 		_Ptr += _Off;

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000f9	03 55 08	 add	 edx, DWORD PTR __Off$[ebp]
  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 177  : 		return (*this);

  00102	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 178  : 		}

  00105	5e		 pop	 esi
  00106	83 c4 04	 add	 esp, 4
  00109	3b ec		 cmp	 ebp, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z PROC ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z ENDP ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 288  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 287  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 289  : 		}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
END
