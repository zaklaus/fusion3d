; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	e:\fusion3d_work\engine\src\rendering\window.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4Window@@6B@				; Window::`RTTI Complete Object Locator'
PUBLIC	??_R2Window@@8					; Window::`RTTI Base Class Array'
PUBLIC	??_7Window@@6B@					; Window::`vftable'
PUBLIC	??_R1A@?0A@EA@Window@@8				; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVWindow@@@8				; Window `RTTI Type Descriptor'
PUBLIC	??_R3Window@@8					; Window::`RTTI Class Hierarchy Descriptor'
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
EXTRN	__imp__glewInit@0:PROC
EXTRN	__imp__SDL_SetWindowFullscreen:PROC
EXTRN	__imp__SDL_CreateWindow:PROC
EXTRN	__imp__glFlush@0:PROC
EXTRN	__imp__glewExperimental:BYTE
EXTRN	__imp____glewBindFramebuffer:DWORD
EXTRN	__imp__SDL_GL_SetSwapInterval:PROC
EXTRN	__imp__SDL_PollEvent:PROC
EXTRN	__imp__SDL_GL_CreateContext:PROC
EXTRN	__imp__glFinish@0:PROC
EXTRN	__imp__SDL_Quit:PROC
EXTRN	__imp__SDL_SetHint:PROC
EXTRN	__imp__glewGetErrorString@4:PROC
EXTRN	__imp__SDL_DestroyWindow:PROC
EXTRN	__imp__SDL_Init:PROC
EXTRN	__imp__SDL_GL_DeleteContext:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	__imp__SDL_GL_SwapWindow:PROC
EXTRN	__imp__glViewport@16:PROC
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT ??_R3Window@@8
rdata$r	SEGMENT
??_R3Window@@8 DD 00H					; Window::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Window@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWindow@@@8
data$r	SEGMENT
??_R0?AVWindow@@@8 DD FLAT:??_7type_info@@6B@		; Window `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWindow@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Window@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Window@@8 DD FLAT:??_R0?AVWindow@@@8	; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Window@@8
rdata$r	ENDS
;	COMDAT ??_7Window@@6B@
CONST	SEGMENT
??_7Window@@6B@ DD FLAT:??_R4Window@@6B@		; Window::`vftable'
	DD	FLAT:??_EWindow@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R2Window@@8
rdata$r	SEGMENT
??_R2Window@@8 DD FLAT:??_R1A@?0A@EA@Window@@8		; Window::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R4Window@@6B@
rdata$r	SEGMENT
??_R4Window@@6B@ DD 00H					; Window::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWindow@@@8
	DD	FLAT:??_R3Window@@8
$SG4294952296 DB 00H
?btInfinityMask@@3HA DD 07f800000H			; btInfinityMask
?btNanMask@@3HA DD 07f800001H				; btNanMask
$SG4294952300 DB '0', 00H
$SG4294952299 DB 'SDL_RENDER_VSYNC', 00H
$SG4294952298 DB 'Error: ''%s''', 0aH, 00H
	ORG $+2
$SG4294952297 DB 'Fusion3D', 00H
	ORG $+3
$SG4294952261 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294952260 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (!pair.m_algorithm'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294952259 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294952258 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
$SG4294952257 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (m_firstFreeHandle'
	DB	')', 0aH, 00H
	ORG $+1
$SG4294952256 DB 'Assert e:\fusion3d_work\lib\bullet3\include\BulletColli'
	DB	'sion/BroadphaseCollision/btAxisSweep3.h:%u (handle > 0 && han'
	DB	'dle < m_maxHandles)', 0aH, 00H
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?SetFullScreen@Window@@QAEX_N@Z			; Window::SetFullScreen
PUBLIC	?BindAsRenderTarget@Window@@QBEXXZ		; Window::BindAsRenderTarget
PUBLIC	?SwapBuffers@Window@@QAEXXZ			; Window::SwapBuffers
PUBLIC	?Update@Window@@QAEXXZ				; Window::Update
PUBLIC	??1Window@@UAE@XZ				; Window::~Window
PUBLIC	??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Window::Window
PUBLIC	??_GWindow@@UAEPAXI@Z				; Window::`scalar deleting destructor'
PUBLIC	?GetHeight@Window@@QBEHXZ			; Window::GetHeight
PUBLIC	?GetWidth@Window@@QBEHXZ			; Window::GetWidth
PUBLIC	?ClearKey@Input@@QAEXXZ				; Input::ClearKey
PUBLIC	?SetMouseY@Input@@QAEXH@Z			; Input::SetMouseY
PUBLIC	?SetMouseX@Input@@QAEXH@Z			; Input::SetMouseX
PUBLIC	?SetMouseUp@Input@@QAEXH_N@Z			; Input::SetMouseUp
PUBLIC	?SetMouseDown@Input@@QAEXH_N@Z			; Input::SetMouseDown
PUBLIC	?SetMouse@Input@@QAEXH_N@Z			; Input::SetMouse
PUBLIC	?SetKeyUp@Input@@QAEXH_N@Z			; Input::SetKeyUp
PUBLIC	?SetKeyDown@Input@@QAEXH_N@Z			; Input::SetKeyDown
PUBLIC	?SetKey@Input@@QAEXH_N@Z			; Input::SetKey
PUBLIC	_fprintf
EXTRN	??_EWindow@@UAEPAXI@Z:PROC			; Window::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0
__ehfuncinfo$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);

  00014	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00019	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00022	51		 push	 ecx
  00023	6a 00		 push	 0
  00025	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 __vfprintf_l
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 836  :     __crt_va_end(_ArgList);

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 837  :     return _Result;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 838  : }

  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetKey@Input@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyCode$ = 8						; size = 4
_value$ = 12						; size = 1
?SetKey@Input@@QAEXH_N@Z PROC				; Input::SetKey, COMDAT
; _this$ = ecx

; 678  : 	inline void SetKey(int keyCode, bool value) { m_inputs[keyCode] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	03 45 08	 add	 eax, DWORD PTR _keyCode$[ebp]
  00014	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00017	88 08		 mov	 BYTE PTR [eax], cl
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?SetKey@Input@@QAEXH_N@Z ENDP				; Input::SetKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetKeyDown@Input@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyCode$ = 8						; size = 4
_value$ = 12						; size = 1
?SetKeyDown@Input@@QAEXH_N@Z PROC			; Input::SetKeyDown, COMDAT
; _this$ = ecx

; 679  : 	inline void SetKeyDown(int keyCode, bool value)   { m_downKeys[keyCode] = value; m_lastKey = keyCode;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	03 45 08	 add	 eax, DWORD PTR _keyCode$[ebp]
  00014	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00017	88 88 00 02 00
	00		 mov	 BYTE PTR [eax+512], cl
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 45 08	 mov	 eax, DWORD PTR _keyCode$[ebp]
  00023	89 82 0c 09 00
	00		 mov	 DWORD PTR [edx+2316], eax
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?SetKeyDown@Input@@QAEXH_N@Z ENDP			; Input::SetKeyDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetKeyUp@Input@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyCode$ = 8						; size = 4
_value$ = 12						; size = 1
?SetKeyUp@Input@@QAEXH_N@Z PROC				; Input::SetKeyUp, COMDAT
; _this$ = ecx

; 680  : 	inline void SetKeyUp(int keyCode, bool value)     { m_upKeys[keyCode] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	03 45 08	 add	 eax, DWORD PTR _keyCode$[ebp]
  00014	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00017	88 88 00 04 00
	00		 mov	 BYTE PTR [eax+1024], cl
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?SetKeyUp@Input@@QAEXH_N@Z ENDP				; Input::SetKeyUp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetMouse@Input@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyCode$ = 8						; size = 4
_value$ = 12						; size = 1
?SetMouse@Input@@QAEXH_N@Z PROC				; Input::SetMouse, COMDAT
; _this$ = ecx

; 681  : 	inline void SetMouse(int keyCode, bool value)     { m_mouseInput[keyCode] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	03 45 08	 add	 eax, DWORD PTR _keyCode$[ebp]
  00014	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00017	88 88 00 06 00
	00		 mov	 BYTE PTR [eax+1536], cl
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?SetMouse@Input@@QAEXH_N@Z ENDP				; Input::SetMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetMouseDown@Input@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyCode$ = 8						; size = 4
_value$ = 12						; size = 1
?SetMouseDown@Input@@QAEXH_N@Z PROC			; Input::SetMouseDown, COMDAT
; _this$ = ecx

; 682  : 	inline void SetMouseDown(int keyCode, bool value) { m_downMouse[keyCode] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	03 45 08	 add	 eax, DWORD PTR _keyCode$[ebp]
  00014	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00017	88 88 00 07 00
	00		 mov	 BYTE PTR [eax+1792], cl
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?SetMouseDown@Input@@QAEXH_N@Z ENDP			; Input::SetMouseDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetMouseUp@Input@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyCode$ = 8						; size = 4
_value$ = 12						; size = 1
?SetMouseUp@Input@@QAEXH_N@Z PROC			; Input::SetMouseUp, COMDAT
; _this$ = ecx

; 683  : 	inline void SetMouseUp(int keyCode, bool value)   { m_upMouse[keyCode] = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	03 45 08	 add	 eax, DWORD PTR _keyCode$[ebp]
  00014	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00017	88 88 00 08 00
	00		 mov	 BYTE PTR [eax+2048], cl
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?SetMouseUp@Input@@QAEXH_N@Z ENDP			; Input::SetMouseUp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetMouseX@Input@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?SetMouseX@Input@@QAEXH@Z PROC				; Input::SetMouseX, COMDAT
; _this$ = ecx

; 684  : 	inline void SetMouseX(int value)                  { m_mouseX = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00014	89 88 00 09 00
	00		 mov	 DWORD PTR [eax+2304], ecx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetMouseX@Input@@QAEXH@Z ENDP				; Input::SetMouseX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?SetMouseY@Input@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?SetMouseY@Input@@QAEXH@Z PROC				; Input::SetMouseY, COMDAT
; _this$ = ecx

; 685  : 	inline void SetMouseY(int value)                  { m_mouseY = value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  00014	89 88 04 09 00
	00		 mov	 DWORD PTR [eax+2308], ecx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetMouseY@Input@@QAEXH@Z ENDP				; Input::SetMouseY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\core\input.h
;	COMDAT ?ClearKey@Input@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearKey@Input@@QAEXXZ PROC				; Input::ClearKey, COMDAT
; _this$ = ecx

; 686  : 	inline void ClearKey() { m_lastKey = -1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 80 0c 09 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+2316], -1
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?ClearKey@Input@@QAEXXZ ENDP				; Input::ClearKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.h
;	COMDAT ?GetWidth@Window@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWidth@Window@@QBEHXZ PROC				; Window::GetWidth, COMDAT
; _this$ = ecx

; 38   : 	inline int GetWidth()                   const { return m_width; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetWidth@Window@@QBEHXZ ENDP				; Window::GetWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.h
;	COMDAT ?GetHeight@Window@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeight@Window@@QBEHXZ PROC				; Window::GetHeight, COMDAT
; _this$ = ecx

; 39   : 	inline int GetHeight()                  const { return m_height; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetHeight@Window@@QBEHXZ ENDP				; Window::GetHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GWindow@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWindow@@UAEPAXI@Z PROC				; Window::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Window@@UAE@XZ	; Window::~Window
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 11		 je	 SHORT $LN2@scalar
  0001e	68 44 09 00 00	 push	 2372			; 00000944H
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_GWindow@@UAEPAXI@Z ENDP				; Window::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.cpp
_TEXT	SEGMENT
_res$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_title$ = 16						; size = 4
??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Window::Window
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001c	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Window@@6B@

; 24   : 	m_width(width),

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00046	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 25   : 	m_height(height),

  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0004f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 26   : 	m_title(title),

  00052	8b 55 10	 mov	 edx, DWORD PTR _title$[ebp]
  00055	52		 push	 edx
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 27   : 	m_input(this),

  00068	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	83 c1 30	 add	 ecx, 48			; 00000030H
  00072	e8 00 00 00 00	 call	 ??0Input@@QAE@PAVWindow@@@Z ; Input::Input

; 28   : 	m_isCloseRequested(false)

  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	c6 81 40 09 00
	00 00		 mov	 BYTE PTR [ecx+2368], 0

; 30   : 	SDL_Init(SDL_INIT_EVERYTHING);

  00081	8b f4		 mov	 esi, esp
  00083	68 31 72 00 00	 push	 29233			; 00007231H
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_Init
  0008e	83 c4 04	 add	 esp, 4
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 
; 32   : 	/*SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
; 33   : 	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
; 34   : 	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
; 35   : 	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
; 36   : 	SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE,32);
; 37   : 	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE,16);
; 38   : 	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER,1);*/
; 39   : 
; 40   : //	SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);
; 41   : //	SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);
; 42   : 
; 43   : 	/*SDL_GL_SetAttribute( SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE );
; 44   : 	SDL_GL_SetAttribute( SDL_GL_CONTEXT_MAJOR_VERSION, 3 );
; 45   : 	SDL_GL_SetAttribute( SDL_GL_CONTEXT_MINOR_VERSION, 3 );*/
; 46   : 
; 47   : 	m_window = SDL_CreateWindow(title.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_OPENGL);

  00098	8b f4		 mov	 esi, esp
  0009a	6a 02		 push	 2
  0009c	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0009f	52		 push	 edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  000a3	50		 push	 eax
  000a4	68 00 00 ff 2f	 push	 805240832		; 2fff0000H
  000a9	68 00 00 ff 2f	 push	 805240832		; 2fff0000H
  000ae	8b 4d 10	 mov	 ecx, DWORD PTR _title$[ebp]
  000b1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000b6	50		 push	 eax
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_CreateWindow
  000bd	83 c4 18	 add	 esp, 24			; 00000018H
  000c0	3b f4		 cmp	 esi, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 48   : 	m_glContext = SDL_GL_CreateContext(m_window);

  000cd	8b f4		 mov	 esi, esp
  000cf	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000d2	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000d5	50		 push	 eax
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_GL_CreateContext
  000dc	83 c4 04	 add	 esp, 4
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 49   : 
; 50   : 	SDL_SetHint(SDL_HINT_RENDER_VSYNC, "0");

  000ec	8b f4		 mov	 esi, esp
  000ee	68 00 00 00 00	 push	 OFFSET $SG4294952300
  000f3	68 00 00 00 00	 push	 OFFSET $SG4294952299
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_SetHint
  000fe	83 c4 08	 add	 esp, 8
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 51   : 	SDL_GL_SetSwapInterval(0);

  00108	8b f4		 mov	 esi, esp
  0010a	6a 00		 push	 0
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_GL_SetSwapInterval
  00112	83 c4 04	 add	 esp, 4
  00115	3b f4		 cmp	 esi, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 52   : 
; 53   : 	//Apparently this is necessary to build with Xcode
; 54   : 	glewExperimental = GL_TRUE;

  0011c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__glewExperimental
  00122	c6 02 01	 mov	 BYTE PTR [edx], 1

; 55   : 
; 56   : 	GLenum res = glewInit();

  00125	8b f4		 mov	 esi, esp
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glewInit@0
  0012d	3b f4		 cmp	 esi, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	89 45 ec	 mov	 DWORD PTR _res$[ebp], eax

; 57   : 	if(res != GLEW_OK)

  00137	83 7d ec 00	 cmp	 DWORD PTR _res$[ebp], 0
  0013b	74 36		 je	 SHORT $LN2@Window

; 58   : 	{
; 59   : 		fprintf(stderr, "Error: '%s'\n", glewGetErrorString(res));

  0013d	8b f4		 mov	 esi, esp
  0013f	8b 45 ec	 mov	 eax, DWORD PTR _res$[ebp]
  00142	50		 push	 eax
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glewGetErrorString@4
  00149	3b f4		 cmp	 esi, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	50		 push	 eax
  00151	68 00 00 00 00	 push	 OFFSET $SG4294952298
  00156	8b f4		 mov	 esi, esp
  00158	6a 02		 push	 2
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00160	83 c4 04	 add	 esp, 4
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _fprintf
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@Window:

; 60   : 	}
; 61   : 
; 62   : 	Util::Init("");

  00173	68 00 00 00 00	 push	 OFFSET $SG4294952297
  00178	68 00 00 00 00	 push	 OFFSET $SG4294952296
  0017d	e8 00 00 00 00	 call	 ?Init@Util@@YAXPBD0@Z	; Util::Init
  00182	83 c4 08	 add	 esp, 8

; 63   : }

  00185	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00192	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00199	59		 pop	 ecx
  0019a	5e		 pop	 esi
  0019b	83 c4 14	 add	 esp, 20			; 00000014H
  0019e	3b ec		 cmp	 ebp, esp
  001a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Window@@QAE@HHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Window::Window
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Window@@UAE@XZ PROC					; Window::~Window
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Window@@6B@

; 67   : 	SDL_GL_DeleteContext(m_glContext);

  00018	8b f4		 mov	 esi, esp
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00020	52		 push	 edx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_GL_DeleteContext
  00027	83 c4 04	 add	 esp, 4
  0002a	3b f4		 cmp	 esi, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 68   : 	SDL_DestroyWindow(m_window);

  00031	8b f4		 mov	 esi, esp
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00039	51		 push	 ecx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_DestroyWindow
  00040	83 c4 04	 add	 esp, 4
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 69   : 	SDL_Quit();

  0004a	8b f4		 mov	 esi, esp
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_Quit
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 70   : }

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00064	5e		 pop	 esi
  00065	83 c4 04	 add	 esp, 4
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
??1Window@@UAE@XZ ENDP					; Window::~Window
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.cpp
_TEXT	SEGMENT
_value$1 = -100						; size = 4
_value$2 = -96						; size = 4
_value$3 = -92						; size = 4
_value$4 = -88						; size = 4
_handled$5 = -84					; size = 4
_e$ = -76						; size = 56
_i$6 = -16						; size = 4
_i$7 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Update@Window@@QAEXXZ PROC				; Window::Update
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000c	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	for(int i = 0; i < Input::NUM_MOUSEBUTTONS; i++)

  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  0002d	eb 09		 jmp	 SHORT $LN4@Update
$LN2@Update:
  0002f	8b 45 f4	 mov	 eax, DWORD PTR _i$7[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 f4	 mov	 DWORD PTR _i$7[ebp], eax
$LN4@Update:
  00038	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$7[ebp], 256 ; 00000100H
  0003f	7d 24		 jge	 SHORT $LN3@Update

; 75   : 	{
; 76   : 		m_input.SetMouseDown(i, false);

  00041	6a 00		 push	 0
  00043	8b 4d f4	 mov	 ecx, DWORD PTR _i$7[ebp]
  00046	51		 push	 ecx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 30	 add	 ecx, 48			; 00000030H
  0004d	e8 00 00 00 00	 call	 ?SetMouseDown@Input@@QAEXH_N@Z ; Input::SetMouseDown

; 77   : 		m_input.SetMouseUp(i, false);

  00052	6a 00		 push	 0
  00054	8b 55 f4	 mov	 edx, DWORD PTR _i$7[ebp]
  00057	52		 push	 edx
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	83 c1 30	 add	 ecx, 48			; 00000030H
  0005e	e8 00 00 00 00	 call	 ?SetMouseUp@Input@@QAEXH_N@Z ; Input::SetMouseUp

; 78   : 	}

  00063	eb ca		 jmp	 SHORT $LN2@Update
$LN3@Update:

; 79   : 
; 80   : 	for(int i = 0; i < Input::NUM_KEYS; i++)

  00065	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  0006c	eb 09		 jmp	 SHORT $LN7@Update
$LN5@Update:
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _i$6[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 f0	 mov	 DWORD PTR _i$6[ebp], eax
$LN7@Update:
  00077	81 7d f0 00 02
	00 00		 cmp	 DWORD PTR _i$6[ebp], 512 ; 00000200H
  0007e	7d 24		 jge	 SHORT $LN6@Update

; 81   : 	{
; 82   : 		m_input.SetKeyDown(i, false);

  00080	6a 00		 push	 0
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _i$6[ebp]
  00085	51		 push	 ecx
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	83 c1 30	 add	 ecx, 48			; 00000030H
  0008c	e8 00 00 00 00	 call	 ?SetKeyDown@Input@@QAEXH_N@Z ; Input::SetKeyDown

; 83   : 		m_input.SetKeyUp(i, false);

  00091	6a 00		 push	 0
  00093	8b 55 f0	 mov	 edx, DWORD PTR _i$6[ebp]
  00096	52		 push	 edx
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	83 c1 30	 add	 ecx, 48			; 00000030H
  0009d	e8 00 00 00 00	 call	 ?SetKeyUp@Input@@QAEXH_N@Z ; Input::SetKeyUp

; 84   : 	}

  000a2	eb ca		 jmp	 SHORT $LN5@Update
$LN6@Update:

; 85   : 
; 86   : 	m_input.ClearKey();

  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	83 c1 30	 add	 ecx, 48			; 00000030H
  000aa	e8 00 00 00 00	 call	 ?ClearKey@Input@@QAEXXZ	; Input::ClearKey
$LN8@Update:

; 87   : 
; 88   : 	SDL_Event e;
; 89   : 	while(SDL_PollEvent(&e))

  000af	8b f4		 mov	 esi, esp
  000b1	8d 45 b4	 lea	 eax, DWORD PTR _e$[ebp]
  000b4	50		 push	 eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_PollEvent
  000bb	83 c4 04	 add	 esp, 4
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 16 01 00
	00		 je	 $LN1@Update

; 90   : 	{
; 91   : 		int handled = 0;

  000cd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _handled$5[ebp], 0

; 92   : 		if (!handled)

  000d4	83 7d ac 00	 cmp	 DWORD PTR _handled$5[ebp], 0
  000d8	0f 85 00 01 00
	00		 jne	 $LN10@Update

; 93   : 		{
; 94   : 			if (e.type == SDL_QUIT)

  000de	81 7d b4 00 01
	00 00		 cmp	 DWORD PTR _e$[ebp], 256	; 00000100H
  000e5	75 0a		 jne	 SHORT $LN11@Update

; 95   : 			{
; 96   : 				m_isCloseRequested = true;

  000e7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	c6 81 40 09 00
	00 01		 mov	 BYTE PTR [ecx+2368], 1
$LN11@Update:

; 97   : 			}
; 98   : 
; 99   : 			if (e.type == SDL_MOUSEMOTION)

  000f1	81 7d b4 00 04
	00 00		 cmp	 DWORD PTR _e$[ebp], 1024 ; 00000400H
  000f8	75 1e		 jne	 SHORT $LN12@Update

; 100  : 			{
; 101  : 				m_input.SetMouseX(e.motion.x);

  000fa	8b 55 c8	 mov	 edx, DWORD PTR _e$[ebp+20]
  000fd	52		 push	 edx
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	83 c1 30	 add	 ecx, 48			; 00000030H
  00104	e8 00 00 00 00	 call	 ?SetMouseX@Input@@QAEXH@Z ; Input::SetMouseX

; 102  : 				m_input.SetMouseY(e.motion.y);

  00109	8b 45 cc	 mov	 eax, DWORD PTR _e$[ebp+24]
  0010c	50		 push	 eax
  0010d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	83 c1 30	 add	 ecx, 48			; 00000030H
  00113	e8 00 00 00 00	 call	 ?SetMouseY@Input@@QAEXH@Z ; Input::SetMouseY
$LN12@Update:

; 103  : 			}
; 104  : 
; 105  : 			if (e.type == SDL_KEYDOWN)

  00118	81 7d b4 00 03
	00 00		 cmp	 DWORD PTR _e$[ebp], 768	; 00000300H
  0011f	75 28		 jne	 SHORT $LN13@Update

; 106  : 			{
; 107  : 				int value = e.key.keysym.scancode;

  00121	8b 4d c4	 mov	 ecx, DWORD PTR _e$[ebp+16]
  00124	89 4d a8	 mov	 DWORD PTR _value$4[ebp], ecx

; 108  : 
; 109  : 				m_input.SetKey(value, true);

  00127	6a 01		 push	 1
  00129	8b 55 a8	 mov	 edx, DWORD PTR _value$4[ebp]
  0012c	52		 push	 edx
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	83 c1 30	 add	 ecx, 48			; 00000030H
  00133	e8 00 00 00 00	 call	 ?SetKey@Input@@QAEXH_N@Z ; Input::SetKey

; 110  : 				m_input.SetKeyDown(value, true);

  00138	6a 01		 push	 1
  0013a	8b 45 a8	 mov	 eax, DWORD PTR _value$4[ebp]
  0013d	50		 push	 eax
  0013e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	83 c1 30	 add	 ecx, 48			; 00000030H
  00144	e8 00 00 00 00	 call	 ?SetKeyDown@Input@@QAEXH_N@Z ; Input::SetKeyDown
$LN13@Update:

; 111  : 			}
; 112  : 			if (e.type == SDL_KEYUP)

  00149	81 7d b4 01 03
	00 00		 cmp	 DWORD PTR _e$[ebp], 769	; 00000301H
  00150	75 28		 jne	 SHORT $LN14@Update

; 113  : 			{
; 114  : 				int value = e.key.keysym.scancode;

  00152	8b 4d c4	 mov	 ecx, DWORD PTR _e$[ebp+16]
  00155	89 4d a4	 mov	 DWORD PTR _value$3[ebp], ecx

; 115  : 
; 116  : 				m_input.SetKey(value, false);

  00158	6a 00		 push	 0
  0015a	8b 55 a4	 mov	 edx, DWORD PTR _value$3[ebp]
  0015d	52		 push	 edx
  0015e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	83 c1 30	 add	 ecx, 48			; 00000030H
  00164	e8 00 00 00 00	 call	 ?SetKey@Input@@QAEXH_N@Z ; Input::SetKey

; 117  : 				m_input.SetKeyUp(value, true);

  00169	6a 01		 push	 1
  0016b	8b 45 a4	 mov	 eax, DWORD PTR _value$3[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	83 c1 30	 add	 ecx, 48			; 00000030H
  00175	e8 00 00 00 00	 call	 ?SetKeyUp@Input@@QAEXH_N@Z ; Input::SetKeyUp
$LN14@Update:

; 118  : 			}
; 119  : 			if (e.type == SDL_MOUSEBUTTONDOWN)

  0017a	81 7d b4 01 04
	00 00		 cmp	 DWORD PTR _e$[ebp], 1025 ; 00000401H
  00181	75 29		 jne	 SHORT $LN15@Update

; 120  : 			{
; 121  : 				int value = e.button.button;

  00183	0f b6 4d c4	 movzx	 ecx, BYTE PTR _e$[ebp+16]
  00187	89 4d a0	 mov	 DWORD PTR _value$2[ebp], ecx

; 122  : 
; 123  : 				m_input.SetMouse(value, true);

  0018a	6a 01		 push	 1
  0018c	8b 55 a0	 mov	 edx, DWORD PTR _value$2[ebp]
  0018f	52		 push	 edx
  00190	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00193	83 c1 30	 add	 ecx, 48			; 00000030H
  00196	e8 00 00 00 00	 call	 ?SetMouse@Input@@QAEXH_N@Z ; Input::SetMouse

; 124  : 				m_input.SetMouseDown(value, true);

  0019b	6a 01		 push	 1
  0019d	8b 45 a0	 mov	 eax, DWORD PTR _value$2[ebp]
  001a0	50		 push	 eax
  001a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a4	83 c1 30	 add	 ecx, 48			; 00000030H
  001a7	e8 00 00 00 00	 call	 ?SetMouseDown@Input@@QAEXH_N@Z ; Input::SetMouseDown
$LN15@Update:

; 125  : 			}
; 126  : 			if (e.type == SDL_MOUSEBUTTONUP)

  001ac	81 7d b4 02 04
	00 00		 cmp	 DWORD PTR _e$[ebp], 1026 ; 00000402H
  001b3	75 29		 jne	 SHORT $LN10@Update

; 127  : 			{
; 128  : 				int value = e.button.button;

  001b5	0f b6 4d c4	 movzx	 ecx, BYTE PTR _e$[ebp+16]
  001b9	89 4d 9c	 mov	 DWORD PTR _value$1[ebp], ecx

; 129  : 
; 130  : 				m_input.SetMouse(value, false);

  001bc	6a 00		 push	 0
  001be	8b 55 9c	 mov	 edx, DWORD PTR _value$1[ebp]
  001c1	52		 push	 edx
  001c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	83 c1 30	 add	 ecx, 48			; 00000030H
  001c8	e8 00 00 00 00	 call	 ?SetMouse@Input@@QAEXH_N@Z ; Input::SetMouse

; 131  : 				m_input.SetMouseUp(value, true);

  001cd	6a 01		 push	 1
  001cf	8b 45 9c	 mov	 eax, DWORD PTR _value$1[ebp]
  001d2	50		 push	 eax
  001d3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d6	83 c1 30	 add	 ecx, 48			; 00000030H
  001d9	e8 00 00 00 00	 call	 ?SetMouseUp@Input@@QAEXH_N@Z ; Input::SetMouseUp
$LN10@Update:

; 132  : 			}
; 133  : 		}
; 134  : 	}

  001de	e9 cc fe ff ff	 jmp	 $LN8@Update
$LN1@Update:

; 135  : }

  001e3	52		 push	 edx
  001e4	8b cd		 mov	 ecx, ebp
  001e6	50		 push	 eax
  001e7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@Update
  001ed	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f2	58		 pop	 eax
  001f3	5a		 pop	 edx
  001f4	5f		 pop	 edi
  001f5	5e		 pop	 esi
  001f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f9	33 cd		 xor	 ecx, ebp
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	83 c4 64	 add	 esp, 100		; 00000064H
  00203	3b ec		 cmp	 ebp, esp
  00205	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
  0020e	66 90		 npad	 2
$LN20@Update:
  00210	01 00 00 00	 DD	 1
  00214	00 00 00 00	 DD	 $LN19@Update
$LN19@Update:
  00218	b4 ff ff ff	 DD	 -76			; ffffffb4H
  0021c	38 00 00 00	 DD	 56			; 00000038H
  00220	00 00 00 00	 DD	 $LN18@Update
$LN18@Update:
  00224	65		 DB	 101			; 00000065H
  00225	00		 DB	 0
?Update@Window@@QAEXXZ ENDP				; Window::Update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SwapBuffers@Window@@QAEXXZ PROC			; Window::SwapBuffers
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 	glFlush();

  0000f	8b f4		 mov	 esi, esp
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glFlush@0
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	glFinish();

  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glFinish@0
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 141  : 	SDL_GL_SwapWindow(m_window);

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_GL_SwapWindow
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 142  : }

  00046	5e		 pop	 esi
  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?SwapBuffers@Window@@QAEXXZ ENDP			; Window::SwapBuffers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BindAsRenderTarget@Window@@QBEXXZ PROC			; Window::BindAsRenderTarget
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : 	glBindTexture(GL_TEXTURE_2D,0);

  0000f	8b f4		 mov	 esi, esp
  00011	6a 00		 push	 0
  00013	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glBindTexture@8
  0001e	3b f4		 cmp	 esi, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  : 	glBindFramebuffer(GL_FRAMEBUFFER, 0);

  00025	8b f4		 mov	 esi, esp
  00027	6a 00		 push	 0
  00029	68 40 8d 00 00	 push	 36160			; 00008d40H
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp____glewBindFramebuffer
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	ff d1		 call	 ecx
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  : 
; 149  : 	#if PROFILING_SET_1x1_VIEWPORT == 0
; 150  : 		glViewport(0, 0, GetWidth(), GetHeight());

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?GetHeight@Window@@QBEHXZ ; Window::GetHeight
  00046	8b f4		 mov	 esi, esp
  00048	50		 push	 eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?GetWidth@Window@@QBEHXZ ; Window::GetWidth
  00051	50		 push	 eax
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glViewport@16
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 151  : 	#else
; 152  : 		glViewport(0, 0, 1, 1);
; 153  : 	#endif
; 154  : }

  00063	5e		 pop	 esi
  00064	83 c4 04	 add	 esp, 4
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?BindAsRenderTarget@Window@@QBEXXZ ENDP			; Window::BindAsRenderTarget
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\fusion3d_work\engine\src\rendering\window.cpp
_TEXT	SEGMENT
_mode$ = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 1
?SetFullScreen@Window@@QAEX_N@Z PROC			; Window::SetFullScreen
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 	int mode = 0;

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode$[ebp], 0

; 159  : 	if(value)

  0001f	0f b6 45 08	 movzx	 eax, BYTE PTR _value$[ebp]
  00023	85 c0		 test	 eax, eax
  00025	74 09		 je	 SHORT $LN2@SetFullScr

; 160  : 		mode = SDL_WINDOW_FULLSCREEN;

  00027	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _mode$[ebp], 1

; 161  : 	else

  0002e	eb 07		 jmp	 SHORT $LN3@SetFullScr
$LN2@SetFullScr:

; 162  : 		mode = 0;

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode$[ebp], 0
$LN3@SetFullScr:

; 163  : 
; 164  : 	SDL_SetWindowFullscreen(m_window, mode);

  00037	8b f4		 mov	 esi, esp
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _mode$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SDL_SetWindowFullscreen
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 165  : }

  00054	5e		 pop	 esi
  00055	83 c4 08	 add	 esp, 8
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?SetFullScreen@Window@@QAEX_N@Z ENDP			; Window::SetFullScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 768  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())

  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00047	8b c8		 mov	 ecx, eax
  00049	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
  0004e	50		 push	 eax
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 769  : 		_Tidy();

  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 770  : 		assign(_Right, 0, npos);

  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00070	52		 push	 edx
  00071	6a 00		 push	 0
  00073	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00076	50		 push	 eax
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 771  : 		}

  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 828  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 829  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	50		 push	 eax
  0001b	8d 4d fb	 lea	 ecx, DWORD PTR $T1[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00024	83 c4 08	 add	 esp, 8
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 830  : 		}

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 604  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))

  00036	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	0f b6 4d ef	 movzx	 ecx, BYTE PTR $T2[ebp]
  00047	51		 push	 ecx
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 605  : 		_Alloc_proxy();

  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 606  : 		}

  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 790  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 791  : 		return (_Al);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 792  : 		}

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 288  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >

; 287  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 289  : 		}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
END
